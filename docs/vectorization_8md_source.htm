<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: /build/arrayfire/docs/pages/vectorization.md (2020-10-27 00:11:00 -0400, (build d99887ae)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('vectorization_8md.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">/build/arrayfire/docs/pages/vectorization.md (2020-10-27 00:11:00 -0400, (build d99887ae))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="vectorization_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Introduction to Vectorization {#vectorization}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;===================</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;Programmers and Data Scientists want to take advantage of fast and parallel</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;computational devices. Writing vectorized code is necessary to get</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;the best performance out of the current generation parallel hardware and</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;scientific computing software. However, writing vectorized code may not be</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;immediately intuitive. ArrayFire provides many ways to vectorize a given code</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;segment. In this tutorial, we present several methods to vectorize code</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;using ArrayFire and discuss the benefits and drawbacks associated with each method.</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;# Generic/Default vectorization</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;By its very nature, ArrayFire is a vectorized library. Most functions operate on</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;arrays as a whole -- on all elements in parallel. Wherever possible, existing</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;vectorized functions should be used opposed to manually indexing into arrays.</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;For example consider the following code:</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;af::array a = af::range(10); // [0,  9]</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;for(int i = 0; i &lt; a.dims(0); ++i)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    a(i) = a(i) + 1;         // [1, 10]</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;Although completely valid, the code is very inefficient as it results in</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;a kernel kernels that operate on one datum.</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;Instead, the developer should have used ArrayFire&#39;s overload of the + operator:</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;af::array a = af::range(10);  // [0,  9]</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;a = a + 1;                    // [1, 10]</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;This code will result in a single kernel that operates on all 10 elements</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;of `a` in  parallel.</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;Most ArrayFire functions are vectorized. A small subset of these include:</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;Operator Category                                           | Functions</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;------------------------------------------------------------|--------------------------</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;[Arithmetic operations](\ref arith_mat)                     | [+](\ref arith_func_add), [-](\ref arith_func_sub), [*](\ref arith_func_mul), [/](\ref arith_func_div), [%](\ref arith_func_mod), [&gt;&gt;](\ref arith_func_shiftr), [&lt;&lt;](\ref arith_func_shiftl)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;[Logical operations](\ref logic_mat)                        | [&amp;&amp;](\ref arith_func_and), \|\|[(or)](\ref arith_func_or), [&lt;](\ref arith_func_lt), [&gt;](\ref arith_func_gt), [==](\ref arith_func_eq), [!=](\ref arith_func_neq) etc.</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;[Numeric functions](\ref numeric_mat)                       | abs(), floor(), round(), min(), max(), etc.</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;[Complex operations](\ref complex_mat)                      | real(), imag(), conj(), etc.</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;[Exponential and logarithmic functions](\ref explog_mat)    | exp(), log(), expm1(), log1p(), etc.</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;[Trigonometric functions](\ref trig_mat)                    | sin(), cos(), tan(), etc.</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;[Hyperbolic functions](\ref hyper_mat)                      | sinh(), cosh(), tanh(), etc.</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;In addition to element-wise operations, many other functions are also</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;vectorized in ArrayFire.</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;Notice that even that perform some form of aggregation (e.g. `sum()` or `min()`),</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;signal processing (like `convolve()`), and even image processing functions</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;(i.e. `rotate()`) all support vectorization on different columns or images.</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;For example, if we have `NUM` images of size `WIDTH` by `HEIGHT`, one could</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;convolve each image in a vector fashion as follows:</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;float g_coef[] = { 1, 2, 1,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                   2, 4, 2,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                   1, 2, 1 };</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;af::array filter = 1.f/16 * af::array(3, 3, g_coef);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;af::array signal = randu(WIDTH, HEIGHT, NUM);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;af::array conv = convolve2(signal, filter);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;Similarly, one can rotate 100 images by 45 degrees in a single call using</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;code like the following:</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;// Construct an array of 100 WIDTH x HEIGHT images of random numbers</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;af::array imgs = randu(WIDTH, HEIGHT, 100);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;// Rotate all of the images in a single command</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;af::array rot_imgs = rotate(imgs, 45);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;Although *most* functions in ArrayFire do support vectorization, some do not.</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;Most notably, all linear algebra functions. Even though they are not vectorized</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;linear algebra operations still execute in parallel on your hardware.</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;Using the built in vectorized operations should be the first</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;and preferred method of vectorizing any code written with ArrayFire.</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;# GFOR: Parallel for-loops</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;Another novel method of vectorization present in ArrayFire is the GFOR loop</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;replacement construct. GFOR allows launching all iterations of a loop in parallel</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;on the GPU or device, as long as the iterations are independent. While the</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;standard for-loop performs each iteration sequentially, ArrayFire&#39;s gfor-loop</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;performs each iteration at the same time (in parallel). ArrayFire does this by</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;tiling out the values of all loop iterations and then performing computation on</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;those tiles in one pass. You can think of gfor as performing auto-vectorization</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;of your code, e.g. you write a gfor-loop that increments every element of a vector</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;but behind the scenes ArrayFire rewrites it to operate on the entire vector in</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;parallel.</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;The original for-loop example at the beginning of this document could be</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;rewritten using GFOR as follows:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;af::array a = af::range(10);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;gfor(seq i, n)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    a(i) = a(i) + 1;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;In this case, each instance of the gfor loop is independent, thus ArrayFire</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;will automatically tile out the `a` array in device memory and execute the</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;increment kernels in parallel.</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;To see another example, you could run an accum() on every slice of a matrix in a</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;for-loop, or you could &quot;vectorize&quot; and simply do it all in one gfor-loop operation:</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;// runs each accum() in sequence</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;for (int i = 0; i &lt; N; ++i)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;   B(span,i) = accum(A(span,i));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;// runs N accums in parallel</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;gfor (seq i, N)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;   B(span,i) = accum(A(span,i));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;However, returning to our previous vectorization technique, accum() is already</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;vectorized and the operation could be completely replaced with merely:</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    B = accum(A);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;It is best to vectorize computation as much as possible to avoid the overhead in</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;both for-loops and gfor-loops. However, the gfor-loop construct is most effective</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;in the narrow case of broadcast-style operations. Consider the case when we have</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;a vector of constants that we wish to apply to a collection of variables, such as</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;expressing the values of a linear combination for multiple vectors. The broadcast</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;of one set of constants to many vectors works well with gfor-loops:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;const static int p=4, n=1000;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;af::array consts = af::randu(p);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;af::array var_terms = randn(p, n);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;gfor(seq i, n)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    combination(span, i) = consts * var_terms(span, i);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;Using GFOR requires following several rules and multiple guidelines for optimal</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;performance. The details of this vectorization method can be found in the</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;[GFOR documentation](\ref gfor).</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;# Batching</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;The batchFunc() function allows the broad application of existing ArrayFire</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;functions to multiple sets of data. Effectively, batchFunc() allows ArrayFire</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;functions to execute in &quot;batch processing&quot; mode. In this mode, functions will</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;find a dimension which contains &quot;batches&quot; of data to be processed and will</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;parallelize the procedure.</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;Consider the following example. Here we create a filter which we would like</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;to apply to each of the weight vectors. The naive solution would be using a</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;for-loop as we have seen previously:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;// Create the filter and the weight vectors</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;af::array filter = randn(1, 5);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;af::array weights = randu(5, 5);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;// Apply the filter using a for-loop</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;af::array filtered_weights = constant(0, 5, 5);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;for(int i=0; i&lt;weights.dims(1); ++i){</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    filtered_weights.col(i) = filter * weights.col(i);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;However, as we have discussed above, this solution will be very inefficient.</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;One may be tempted to implement a vectorized solution as follows:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;// Create the filter and the weight vectors</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;af::array filter = randn(1, 5);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;af::array weights = randu(5, 5);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;af::array filtered_weights = filter * weights; // fails due to dimension mismatch</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;However, the dimensions of `filter` and `weights` do not match, thus ArrayFire</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;will generate a runtime error.</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;`batchfunc()` was created to solve this specific problem.</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;The signature of the function is as follows:</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;array batchFunc(const array &amp;lhs, const array &amp;rhs, batchFunc_t func);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;where `__batchFunc_t__` is a function pointer of the form:</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;typedef array (*batchFunc_t) (const array &amp;lhs, const array &amp;rhs);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;So, to use batchFunc(), we need to provide the function we wish to apply as a</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;batch operation. For illustration&#39;s sake, let&#39;s &quot;implement&quot; a multiplication</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;function following the format.</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;af::array my_mult (const af::array &amp;lhs, const af::array &amp;rhs){</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    return lhs * rhs;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;Our final batch call is not much more difficult than the ideal</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;syntax we imagined.</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;// Create the filter and the weight vectors</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;af::array filter = randn(1, 5);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;af::array weights = randu(5, 5);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;// Apply the batch function</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;af::array filtered_weights = batchFunc( filter, weights, my_mult );</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;The batch function will work with many previously mentioned vectorized ArrayFire</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;functions. It can even work with a combination of those functions if they are</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;wrapped inside a helper function matching the `__batchFunc_t__` signature.</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;One limitation of `batchfunc()` is that it cannot be used from within a</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;`gfor()` loop at the present time.</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;# Advanced Vectorization</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;We have seen the different methods ArrayFire provides to vectorize our code. Tying</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;them all together is a slightly more involved process that needs to consider data</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;dimensionality and layout, memory usage, nesting order, etc. An excellent example</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;and discussion of these factors can be found on our blog:</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;https://arrayfire.com/how-to-write-vectorized-code/</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;It&#39;s worth noting that the content discussed in the blog has since been transformed</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;into a convenient af::nearestNeighbour() function. Before writing something from</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;scratch, check that ArrayFire doesn&#39;t already have an implementation. The default</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;vectorized nature of ArrayFire and an extensive collection of functions will</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;speed things up in addition to replacing dozens of lines of code!</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
