<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>Unified Backend</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('unifiedbackend.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Unified Backend </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h1>Introduction</h1>
<p>The Unified backend was introduced in ArrayFire with version 3.2. While this is not an independent backend, it allows the user to switch between the different ArrayFire backends (CPU, CUDA and OpenCL) at runtime.</p>
<h1>Compiling with Unified</h1>
<p>The steps to compile with the unified backend are the same as compiling with any of the other backends. The only change being that the executable needs to be linked with the <b>af</b> library (<code>libaf.so</code> (Linux), <code>libaf.dylib</code> (OSX), <code>af.lib</code> (Windows)).</p>
<p>Check the Using with <a class="el" href="using_on_linux.htm">Linux</a>, <a class="el" href="using_on_osx.htm">OSX</a>, <a class="el" href="using_on_windows.htm">Windows</a> for more details.</p>
<p>To use with CMake, use the <b>ArrayFire_Unified_LIBRARIES</b> variable.</p>
<h1>Using the Unified Backend</h1>
<p>The Unified backend will try to dynamically load the backend libraries. The priority of backends is <b>CUDA -&gt; OpenCL -&gt; CPU</b></p>
<p>The most important aspect to note here is that all the libraries the ArrayFire libs depend on need to be in the environment paths</p>
<ul>
<li><code>LD_LIBRARY_PATH</code> -&gt; Linux, Unix, OSX</li>
<li><code>DYLD_LIBRARY_PATH</code> -&gt; OSX</li>
<li><code>PATH</code> -&gt; Windows</li>
</ul>
<p>If any of the libs are missing, then the library will fail to load and the backend will be marked as unavailable.</p>
<p>Optionally, The ArrayFire libs may be present in <code>AF_PATH</code> or <code>AF_BUILD_PATH</code> environment variables if the path is not in the system paths. These are treated as fallback paths in case the files are not found in the system paths. However, all the other upstream libraries for ArrayFire libs must be present in the system path variables shown above.</p>
<h3>Special Mention: CUDA NVVM</h3>
<p>For the CUDA backend, ensure that the CUDA NVVM libs/dlls are in the path. These can be easily missed since CUDA installation does not add the paths by default.</p>
<p>On Linux and OSX, add <code>/usr/local/cuda/nvvm/(lib or lib64)</code> to LD_LIBRARY_PATH or DYLD_LIBRARY_PATH.</p>
<p>On Windows, you can set up a post build event that copys the NVVM dlls to the executable directory by using the following commands:</p>
<div class="fragment"><div class="line">echo <a class="code" href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">copy</a> <span class="stringliteral">&quot;$(CUDA_PATH)\nvvm\bin\nvvm64*.dll&quot;</span> <span class="stringliteral">&quot;$(OutDir)&quot;</span></div>
<div class="line"><a class="code" href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">copy</a> <span class="stringliteral">&quot;$(CUDA_PATH)\nvvm\bin\nvvm64*.dll&quot;</span> <span class="stringliteral">&quot;$(OutDir)&quot;</span></div>
<div class="line"><span class="keywordflow">if</span> errorlevel 1 (</div>
<div class="line">    echo <span class="stringliteral">&quot;CUDA NVVM DLLs copy failed due to missing files.&quot;</span></div>
<div class="line">    exit /B 0</div>
<div class="line">)</div>
</div><!-- fragment --><p>This ensures that the NVVM DLLs are copied if present, but does not fail the build if the copy fails. This is how ArrayFire ships it's examples.</p>
<p>The other option is to set <code>%CUDA_PATH%/nvvm/bin</code> in the PATH environment variable.</p>
<h1>Switching Backends</h1>
<p>The af_backend enum stores the possible backends. To select a backend, call the <a class="el" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">af::setBackend</a> function as shown below.</p>
<div class="fragment"><div class="line"><a class="code" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">af::setBackend</a>(<a class="code" href="defines_8h.htm#ae7db039065fb80471a750bde2f652acaa8f390693493fcc247c65baa70140c2b7">AF_BACKEND_OPENCL</a>);    <span class="comment">// Sets CUDA as current backend</span></div>
</div><!-- fragment --><p>To get the count of the number of backends available (the number of <code>libaf*</code> backend libraries loaded successfully), call the <a class="el" href="group__unified__func__getbackendcount.htm#gababf68f4656053dd14028760d5bae165">af::getBackendCount</a> function.</p>
<h1>Example</h1>
<p>This example is shortened form of <a class="el" href="unified_2basic_8cpp-example.htm">basic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> testBackend()</div>
<div class="line">{</div>
<div class="line">    <a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">    <a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(<a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">af::randu</a>(5, 4));</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main()</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        printf(<span class="stringliteral">&quot;Trying CPU Backend\n&quot;</span>);</div>
<div class="line">        <a class="code" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">af::setBackend</a>(<a class="code" href="defines_8h.htm#ae7db039065fb80471a750bde2f652acaa90425eebc4bc0d74ae2e88f97afd521a">AF_BACKEND_CPU</a>);</div>
<div class="line">        testBackend();</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        printf(<span class="stringliteral">&quot;Caught exception when trying CPU backend\n&quot;</span>);</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>());</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        printf(<span class="stringliteral">&quot;Trying CUDA Backend\n&quot;</span>);</div>
<div class="line">        <a class="code" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">af::setBackend</a>(<a class="code" href="defines_8h.htm#ae7db039065fb80471a750bde2f652acaa8c611d6f808d8ad5fb1af0254b539dab">AF_BACKEND_CUDA</a>);</div>
<div class="line">        testBackend();</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        printf(<span class="stringliteral">&quot;Caught exception when trying CUDA backend\n&quot;</span>);</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>());</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        printf(<span class="stringliteral">&quot;Trying OpenCL Backend\n&quot;</span>);</div>
<div class="line">        <a class="code" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">af::setBackend</a>(<a class="code" href="defines_8h.htm#ae7db039065fb80471a750bde2f652acaa8f390693493fcc247c65baa70140c2b7">AF_BACKEND_OPENCL</a>);</div>
<div class="line">        testBackend();</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        printf(<span class="stringliteral">&quot;Caught exception when trying OpenCL backend\n&quot;</span>);</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>());</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --><p>This output would be: </p><pre class="fragment">Trying CPU Backend
ArrayFire v3.2.0 (CPU, 64-bit Linux, build fc7630f)
[0] Intel: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz Max threads(8)
af::randu(5, 4)
[5 4 1 1]
    0.0000     0.2190     0.3835     0.5297
    0.1315     0.0470     0.5194     0.6711
    0.7556     0.6789     0.8310     0.0077
    0.4587     0.6793     0.0346     0.3834
    0.5328     0.9347     0.0535     0.0668

Trying CUDA Backend
ArrayFire v3.2.0 (CUDA, 64-bit Linux, build fc7630f)
Platform: CUDA Toolkit 7.5, Driver: 355.11
[0] Quadro K5000, 4093 MB, CUDA Compute 3.0
af::randu(5, 4)
[5 4 1 1]
    0.7402     0.4464     0.7762     0.2920
    0.9210     0.6673     0.2948     0.3194
    0.0390     0.1099     0.7140     0.8109
    0.9690     0.4702     0.3585     0.1541
    0.9251     0.5132     0.6814     0.4452

Trying OpenCL Backend
ArrayFire v3.2.0 (OpenCL, 64-bit Linux, build fc7630f)
[0] NVIDIA  : Quadro K5000
-1- INTEL   : Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
af::randu(5, 4)
[5 4 1 1]
    0.4107     0.0081     0.6600     0.1046
    0.8224     0.3775     0.0764     0.8827
    0.9518     0.3027     0.0901     0.1647
    0.1794     0.6456     0.5933     0.8060
    0.4198     0.5591     0.1098     0.5938
</pre><h1>Dos and Don'ts</h1>
<p>It is very easy to run into exceptions if you are not careful with the switching of backends.</p>
<h3>Don't: Do not use arrays between different backends</h3>
<p>ArrayFire checks the input arrays to functions for mismatches with the active backend. If an array created on one backend, but used when another backend is set to active, an exception with code 503 (<code>AF_ERR_ARR_BKND_MISMATCH</code>) is thrown.</p>
<div class="fragment"><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main()</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a class="code" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">af::setBackend</a>(<a class="code" href="defines_8h.htm#ae7db039065fb80471a750bde2f652acaa8c611d6f808d8ad5fb1af0254b539dab">AF_BACKEND_CUDA</a>);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> A = <a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">af::randu</a>(5, 5);</div>
<div class="line"></div>
<div class="line">        <a class="code" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">af::setBackend</a>(<a class="code" href="defines_8h.htm#ae7db039065fb80471a750bde2f652acaa8f390693493fcc247c65baa70140c2b7">AF_BACKEND_OPENCL</a>);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> B = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(10, 5, 5);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> C = <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">af::matmul</a>(A, B);     <span class="comment">// This will throw an exception</span></div>
<div class="line"></div>
<div class="line">    } <span class="keywordflow">catch</span> (<a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>());</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --><h3>Do: Use a naming scheme to track arrays and backends</h3>
<p>We recommend that you use a technique to track the arrays on the backends. One suggested technique would be to use a suffix of <code>_cpu</code>, <code>_cuda</code>, <code>_opencl</code> with the array names. So an array created on the CUDA backend would be named <code>myarray_cuda</code>.</p>
<p>If you have not used the <a class="el" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">af::setBackend</a> function anywhere in your code, then you do not have to worry about this as all the arrays will be created on the same default backend.</p>
<h3>Don't: Do not use custom kernels (CUDA/OpenCL) with the Unified backend</h3>
<p>This is another area that is a no go when using the Unified backend. It not recommended that you use custom kernels with unified backend. This is mainly becuase the Unified backend is meant to be ultra portable and should use only ArrayFire and native CPU code. </p>
</div></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
