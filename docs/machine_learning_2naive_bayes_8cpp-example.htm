<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: machine_learning/naive_bayes.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('machine_learning_2naive_bayes_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">machine_learning/naive_bayes.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;mnist_common.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Get accuracy of the predicted results</span></div>
<div class="line"><span class="keywordtype">float</span> accuracy(<span class="keyword">const</span> <a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> &amp;predicted, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;target) {</div>
<div class="line">    <span class="keywordflow">return</span> 100 * count&lt;float&gt;(predicted == target) / target.<a name="a1"></a><a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>();</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> naive_bayes_train(<span class="keywordtype">float</span> *priors, <a class="code" href="classaf_1_1array.htm">array</a> &amp;mu, <a class="code" href="classaf_1_1array.htm">array</a> &amp;sig2,</div>
<div class="line">                       <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;train_feats, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;train_classes,</div>
<div class="line">                       <span class="keywordtype">int</span> num_classes) {</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> feat_len    = train_feats.<a name="a2"></a><a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_samples = train_classes.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Get mean and variance from trianing data</span></div>
<div class="line">    mu   = <a name="a3"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, feat_len, num_classes);</div>
<div class="line">    sig2 = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, feat_len, num_classes);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; num_classes; ii++) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> idx            = <a name="a4"></a><a class="code" href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">where</a>(train_classes == ii);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> train_feats_ii = <a name="a5"></a><a class="code" href="group__index__func__lookup.htm#gac7bb6cefab347540526b1ac2584d006e">lookup</a>(train_feats, idx, 1);</div>
<div class="line"> </div>
<div class="line">        mu(<a name="a6"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) = <a name="a7"></a><a class="code" href="group__stat__func__mean.htm#ga551de2061646e8d73aade26a27b53e39">mean</a>(train_feats_ii, 1);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Some pixels are always 0. Add a small variance.</span></div>
<div class="line">        sig2(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) = <a name="a8"></a><a class="code" href="group__stat__func__var.htm#ga413fdb917be8f5173f8b5650a181a120">var</a>(train_feats_ii, 0, 1) + 0.01;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Calculate priors</span></div>
<div class="line">        priors[ii] = (float)idx.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>() / (float)num_samples;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    mu.<a name="a9"></a><a class="code" href="group__method__mat.htm#ga6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a>();</div>
<div class="line">    sig2.<a class="code" href="group__method__mat.htm#ga6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a>();</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> naive_bayes_predict(<span class="keywordtype">float</span> *priors, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;mu, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;sig2,</div>
<div class="line">                          <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;test_feats, <span class="keywordtype">int</span> num_classes) {</div>
<div class="line">    <span class="keywordtype">int</span> num_test = test_feats.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Predict the probabilities for testing data</span></div>
<div class="line">    <span class="comment">// Using log of probabilities to reduce rounding errors</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> log_probs = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, num_test, num_classes);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; num_classes; ii++) {</div>
<div class="line">        <span class="comment">// Tile the current mean and variance to the testing data size</span></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Mu   = <a name="a10"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(mu(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii), 1, num_test);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Sig2 = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(sig2(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii), 1, num_test);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// This is the same as log of the CDF of the normal distribution</span></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Df    = test_feats - Mu;</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> log_P = (-(Df * Df) / (2 * Sig2)) - <a name="a11"></a><a class="code" href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">log</a>(<a name="a12"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(2 * <a name="a13"></a><a class="code" href="namespaceaf.htm#a461fe63f32c542be535bcacf02a5e200">af::Pi</a> * Sig2));</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Accumulate the probabilities, multiply with priors (add log of</span></div>
<div class="line">        <span class="comment">// priors)</span></div>
<div class="line">        log_probs(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) = <a class="code" href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">log</a>(priors[ii]) + <a name="a14"></a><a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(log_P).<a name="a15"></a><a class="code" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Get the location of the maximum value</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> val, idx;</div>
<div class="line">    <a name="a16"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, idx, log_probs, 1);</div>
<div class="line">    <span class="keywordflow">return</span> idx;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> benchmark_nb(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;train_feats, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> test_feats,</div>
<div class="line">                  <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;train_labels, <span class="keywordtype">int</span> num_classes) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> mu, sig2;</div>
<div class="line">    <span class="keywordtype">int</span> iter      = 25;</div>
<div class="line">    <span class="keywordtype">float</span> *priors = <span class="keyword">new</span> <span class="keywordtype">float</span>[num_classes];</div>
<div class="line"> </div>
<div class="line">    <a name="a17"></a><a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">timer::start</a>();</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; iter; i++) {</div>
<div class="line">        naive_bayes_train(priors, mu, sig2, train_feats, train_labels,</div>
<div class="line">                          num_classes);</div>
<div class="line">    }</div>
<div class="line">    <a name="a18"></a><a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    printf(<span class="stringliteral">&quot;Training time: %4.4lf s\n&quot;</span>, <a name="a19"></a><a class="code" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">timer::stop</a>() / iter);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">timer::start</a>();</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; iter; i++) {</div>
<div class="line">        naive_bayes_predict(priors, mu, sig2, test_feats, num_classes);</div>
<div class="line">    }</div>
<div class="line">    <a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    printf(<span class="stringliteral">&quot;Prediction time: %4.4lf s\n&quot;</span>, <a class="code" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">timer::stop</a>() / iter);</div>
<div class="line"> </div>
<div class="line">    <span class="keyword">delete</span>[] priors;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> naive_bayes_demo(<span class="keywordtype">bool</span> console, <span class="keywordtype">int</span> perc) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_images, train_labels;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> test_images, test_labels;</div>
<div class="line">    <span class="keywordtype">int</span> num_train, num_test, num_classes;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Load mnist data</span></div>
<div class="line">    <span class="keywordtype">float</span> frac = (float)(perc) / 100.0;</div>
<div class="line">    setup_mnist&lt;false&gt;(&amp;num_classes, &amp;num_train, &amp;num_test, train_images,</div>
<div class="line">                       test_images, train_labels, test_labels, frac);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> feature_length = train_images.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>() / num_train;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_feats  = <a name="a20"></a><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(train_images, feature_length, num_train);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> test_feats   = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(test_images, feature_length, num_test);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Get training parameters</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> mu, sig2;</div>
<div class="line">    <span class="keywordtype">float</span> *priors = <span class="keyword">new</span> <span class="keywordtype">float</span>[num_classes];</div>
<div class="line">    naive_bayes_train(priors, mu, sig2, train_feats, train_labels, num_classes);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Predict the classes</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> res_labels =</div>
<div class="line">        naive_bayes_predict(priors, mu, sig2, test_feats, num_classes);</div>
<div class="line">    <span class="keyword">delete</span>[] priors;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Results</span></div>
<div class="line">    printf(<span class="stringliteral">&quot;Trainng samples: %4d, Testing samples: %4d\n&quot;</span>, num_train, num_test);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on testing  data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(res_labels, test_labels));</div>
<div class="line"> </div>
<div class="line">    benchmark_nb(train_feats, test_feats, train_labels, num_classes);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line">        test_images = test_images.<a class="code" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">        test_labels = test_labels.<a class="code" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">        <span class="comment">// FIXME: Crashing in mnist_common.h::classify</span></div>
<div class="line">        <span class="comment">// display_results&lt;false&gt;(test_images, res_labels, test_labels , 20);</span></div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> perc     = argc &gt; 3 ? atoi(argv[3]) : 60;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a name="a21"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a22"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        naive_bayes_demo(console, perc);</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a23"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) { std::cerr &lt;&lt; ae.<a name="a24"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>() &lt;&lt; std::endl; }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__method__mat_htm_ga7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
<div class="ttc" id="agroup__method__mat_htm_ga6a8d7156cd3c66a9ca9f0f2688ee9f72"><div class="ttname"><a href="group__method__mat.htm#ga6a8d7156cd3c66a9ca9f0f2688ee9f72">af::array::eval</a></div><div class="ttdeci">void eval() const</div><div class="ttdoc">Evaluate any JIT expressions to generate data for the array.</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga382a69ec85a6beea79e95aeaef591073"><div class="ttname"><a href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__arith__func__log_htm_gaf15f1af67e62541e0322f4c94acd0293"><div class="ttname"><a href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">af::log</a></div><div class="ttdeci">AFAPI array log(const array &amp;in)</div><div class="ttdoc">C++ Interface for natural logarithm.</div></div>
<div class="ttc" id="astructaf_1_1timer_htm_acde4fe9b34f26a2c99bdb52080264116"><div class="ttname"><a href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">af::timer::start</a></div><div class="ttdeci">static AFAPI timer start()</div></div>
<div class="ttc" id="agroup__stat__func__mean_htm_ga551de2061646e8d73aade26a27b53e39"><div class="ttname"><a href="group__stat__func__mean.htm#ga551de2061646e8d73aade26a27b53e39">af::mean</a></div><div class="ttdeci">AFAPI array mean(const array &amp;in, const dim_t dim=-1)</div><div class="ttdoc">C++ Interface for mean.</div></div>
<div class="ttc" id="agroup__index__func__lookup_htm_gac7bb6cefab347540526b1ac2584d006e"><div class="ttname"><a href="group__index__func__lookup.htm#gac7bb6cefab347540526b1ac2584d006e">af::lookup</a></div><div class="ttdeci">AFAPI array lookup(const array &amp;in, const array &amp;idx, const int dim=-1)</div><div class="ttdoc">Lookup the values of an input array by indexing with another array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:14</a></div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="agroup__stat__func__var_htm_ga413fdb917be8f5173f8b5650a181a120"><div class="ttname"><a href="group__stat__func__var.htm#ga413fdb917be8f5173f8b5650a181a120">af::var</a></div><div class="ttdeci">AFAPI array var(const array &amp;in, const bool isbiased=false, const dim_t dim=-1)</div><div class="ttdoc">C++ Interface for variance.</div></div>
<div class="ttc" id="agroup__method__mat_htm_ga10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="anamespaceaf_htm_a461fe63f32c542be535bcacf02a5e200"><div class="ttname"><a href="namespaceaf.htm#a461fe63f32c542be535bcacf02a5e200">af::Pi</a></div><div class="ttdeci">const AFAPI double Pi</div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_ga25c678d4cd9e0702bbc93e11d7d516a8"><div class="ttname"><a href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface for square root of input.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:28</a></div></div>
<div class="ttc" id="agroup__method__mat_htm_ga89f91cdf327a8b304589916db5bde3c2"><div class="ttname"><a href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">af::array::elements</a></div><div class="ttdeci">dim_t elements() const</div><div class="ttdoc">Get the total number of elements across all dimensions of the array.</div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_ga3548059d64e0cefc7fedb4ec28321d32"><div class="ttname"><a href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="agroup__scan__func__where_htm_ga1e677067915477bc4aec1605d80d9b7b"><div class="ttname"><a href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">af::where</a></div><div class="ttdeci">AFAPI array where(const array &amp;in)</div><div class="ttdoc">C++ Interface for finding the locations of non-zero values in an array.</div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="astructaf_1_1timer_htm_adcbc49c002458a0a2370e0bb8e96c322"><div class="ttname"><a href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">af::timer::stop</a></div><div class="ttdeci">static AFAPI double stop()</div></div>
<div class="ttc" id="agroup__reduce__func__sum_htm_ga964a8e7e78dd6d8f4d20c17edf82dbf5"><div class="ttname"><a href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">af::sum</a></div><div class="ttdeci">AFAPI array sum(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for sum of elements in an array.</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="agroup__device__func__sync_htm_ga8c5d51841cf4f2ddbdd6a3146cf2b390"><div class="ttname"><a href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a></div><div class="ttdeci">AFAPI void sync(const int device=-1)</div><div class="ttdoc">Blocks until the device is finished processing.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
