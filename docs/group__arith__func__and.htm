<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>and</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__arith__func__and.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">and<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__mathfunc__mat.htm">Mathematical functions</a> &raquo;  &#124; <a class="el" href="group__logic__mat.htm">Logical operations</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Logical and of two inputs.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gabb1373bebcdfb72f62cd1cdaa6e05c89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gabb1373bebcdfb72f62cd1cdaa6e05c89">af_and</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:gabb1373bebcdfb72f62cd1cdaa6e05c89"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for performing logical and on two arrays.  <a href="#gabb1373bebcdfb72f62cd1cdaa6e05c89">More...</a><br /></td></tr>
<tr class="separator:gabb1373bebcdfb72f62cd1cdaa6e05c89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3fdacee9391b5155f32c40972624fc93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga3fdacee9391b5155f32c40972624fc93">operator&amp;&amp;</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga3fdacee9391b5155f32c40972624fc93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value.  <a href="group__arith__func__and.htm#ga3fdacee9391b5155f32c40972624fc93">More...</a><br /></td></tr>
<tr class="separator:ga3fdacee9391b5155f32c40972624fc93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae61a73b2586750743718dc61635c68ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gae61a73b2586750743718dc61635c68ca">operator&amp;&amp;</a> (const bool &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gae61a73b2586750743718dc61635c68ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gae61a73b2586750743718dc61635c68ca">More...</a><br /></td></tr>
<tr class="separator:gae61a73b2586750743718dc61635c68ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga59fb7665989187674e71cc22a30d0616"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga59fb7665989187674e71cc22a30d0616">operator&amp;&amp;</a> (const int &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga59fb7665989187674e71cc22a30d0616"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga59fb7665989187674e71cc22a30d0616">More...</a><br /></td></tr>
<tr class="separator:ga59fb7665989187674e71cc22a30d0616"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec5e0ce888f7cc7b90000b55279a4203"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gaec5e0ce888f7cc7b90000b55279a4203">operator&amp;&amp;</a> (const unsigned &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaec5e0ce888f7cc7b90000b55279a4203"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gaec5e0ce888f7cc7b90000b55279a4203">More...</a><br /></td></tr>
<tr class="separator:gaec5e0ce888f7cc7b90000b55279a4203"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga99541629e93c37ee05ee9d1a009fe295"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga99541629e93c37ee05ee9d1a009fe295">operator&amp;&amp;</a> (const char &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga99541629e93c37ee05ee9d1a009fe295"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga99541629e93c37ee05ee9d1a009fe295">More...</a><br /></td></tr>
<tr class="separator:ga99541629e93c37ee05ee9d1a009fe295"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa6e9d467b34b9a76a966363ac4dde528"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gaa6e9d467b34b9a76a966363ac4dde528">operator&amp;&amp;</a> (const unsigned char &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaa6e9d467b34b9a76a966363ac4dde528"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gaa6e9d467b34b9a76a966363ac4dde528">More...</a><br /></td></tr>
<tr class="separator:gaa6e9d467b34b9a76a966363ac4dde528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad356b9ffe93b86bc1d8fe18948eb1fde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gad356b9ffe93b86bc1d8fe18948eb1fde">operator&amp;&amp;</a> (const long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gad356b9ffe93b86bc1d8fe18948eb1fde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gad356b9ffe93b86bc1d8fe18948eb1fde">More...</a><br /></td></tr>
<tr class="separator:gad356b9ffe93b86bc1d8fe18948eb1fde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad07414033d3e1bb1613d4e58a52dbda9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gad07414033d3e1bb1613d4e58a52dbda9">operator&amp;&amp;</a> (const unsigned long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gad07414033d3e1bb1613d4e58a52dbda9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gad07414033d3e1bb1613d4e58a52dbda9">More...</a><br /></td></tr>
<tr class="separator:gad07414033d3e1bb1613d4e58a52dbda9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd9869ed9e752424a5542d241315f73e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gafd9869ed9e752424a5542d241315f73e">operator&amp;&amp;</a> (const long long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gafd9869ed9e752424a5542d241315f73e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gafd9869ed9e752424a5542d241315f73e">More...</a><br /></td></tr>
<tr class="separator:gafd9869ed9e752424a5542d241315f73e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga65ba1ea7f8d7bd2e466cc941107387e1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga65ba1ea7f8d7bd2e466cc941107387e1">operator&amp;&amp;</a> (const unsigned long long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga65ba1ea7f8d7bd2e466cc941107387e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga65ba1ea7f8d7bd2e466cc941107387e1">More...</a><br /></td></tr>
<tr class="separator:ga65ba1ea7f8d7bd2e466cc941107387e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab121123634a7eeafa6c102f39c3edd92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gab121123634a7eeafa6c102f39c3edd92">operator&amp;&amp;</a> (const double &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gab121123634a7eeafa6c102f39c3edd92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gab121123634a7eeafa6c102f39c3edd92">More...</a><br /></td></tr>
<tr class="separator:gab121123634a7eeafa6c102f39c3edd92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1cae3bfc09632914f8c6212bc39f690f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga1cae3bfc09632914f8c6212bc39f690f">operator&amp;&amp;</a> (const float &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga1cae3bfc09632914f8c6212bc39f690f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga1cae3bfc09632914f8c6212bc39f690f">More...</a><br /></td></tr>
<tr class="separator:ga1cae3bfc09632914f8c6212bc39f690f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad023d6bc800eab0d4334432b30f36b69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gad023d6bc800eab0d4334432b30f36b69">operator&amp;&amp;</a> (const cfloat &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gad023d6bc800eab0d4334432b30f36b69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gad023d6bc800eab0d4334432b30f36b69">More...</a><br /></td></tr>
<tr class="separator:gad023d6bc800eab0d4334432b30f36b69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50b2c1336819c3d5cf227b840f391345"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga50b2c1336819c3d5cf227b840f391345">operator&amp;&amp;</a> (const cdouble &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga50b2c1336819c3d5cf227b840f391345"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga50b2c1336819c3d5cf227b840f391345">More...</a><br /></td></tr>
<tr class="separator:ga50b2c1336819c3d5cf227b840f391345"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga43bd49d3ff6805c19a3644fbfce4e890"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga43bd49d3ff6805c19a3644fbfce4e890">operator&amp;&amp;</a> (const array &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga43bd49d3ff6805c19a3644fbfce4e890"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga43bd49d3ff6805c19a3644fbfce4e890">More...</a><br /></td></tr>
<tr class="separator:ga43bd49d3ff6805c19a3644fbfce4e890"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79fa30e513abe89b36c4bdd9cac80be8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga79fa30e513abe89b36c4bdd9cac80be8">operator&amp;&amp;</a> (const array &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga79fa30e513abe89b36c4bdd9cac80be8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga79fa30e513abe89b36c4bdd9cac80be8">More...</a><br /></td></tr>
<tr class="separator:ga79fa30e513abe89b36c4bdd9cac80be8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6eac8e73327754eef161f206ad85d68a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga6eac8e73327754eef161f206ad85d68a">operator&amp;&amp;</a> (const array &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga6eac8e73327754eef161f206ad85d68a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga6eac8e73327754eef161f206ad85d68a">More...</a><br /></td></tr>
<tr class="separator:ga6eac8e73327754eef161f206ad85d68a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga260532ab66fa5834e1832fa496c6f805"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga260532ab66fa5834e1832fa496c6f805">operator&amp;&amp;</a> (const array &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga260532ab66fa5834e1832fa496c6f805"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga260532ab66fa5834e1832fa496c6f805">More...</a><br /></td></tr>
<tr class="separator:ga260532ab66fa5834e1832fa496c6f805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34b8bfe7a99154d52699716726132824"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga34b8bfe7a99154d52699716726132824">operator&amp;&amp;</a> (const array &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga34b8bfe7a99154d52699716726132824"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga34b8bfe7a99154d52699716726132824">More...</a><br /></td></tr>
<tr class="separator:ga34b8bfe7a99154d52699716726132824"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadd83fe7117637af4889c85db7d1554e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gadd83fe7117637af4889c85db7d1554e8">operator&amp;&amp;</a> (const array &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:gadd83fe7117637af4889c85db7d1554e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gadd83fe7117637af4889c85db7d1554e8">More...</a><br /></td></tr>
<tr class="separator:gadd83fe7117637af4889c85db7d1554e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b583c900cce5072f87b6470dde2ec69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga5b583c900cce5072f87b6470dde2ec69">operator&amp;&amp;</a> (const array &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga5b583c900cce5072f87b6470dde2ec69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga5b583c900cce5072f87b6470dde2ec69">More...</a><br /></td></tr>
<tr class="separator:ga5b583c900cce5072f87b6470dde2ec69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafde60f1009ab34ea4258c0622710bc6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gafde60f1009ab34ea4258c0622710bc6c">operator&amp;&amp;</a> (const array &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gafde60f1009ab34ea4258c0622710bc6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gafde60f1009ab34ea4258c0622710bc6c">More...</a><br /></td></tr>
<tr class="separator:gafde60f1009ab34ea4258c0622710bc6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf44d48809068e42d37bce39dd69a639c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gaf44d48809068e42d37bce39dd69a639c">operator&amp;&amp;</a> (const array &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gaf44d48809068e42d37bce39dd69a639c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gaf44d48809068e42d37bce39dd69a639c">More...</a><br /></td></tr>
<tr class="separator:gaf44d48809068e42d37bce39dd69a639c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga29cc1ce803f07201c1df0c6820ddbfc2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga29cc1ce803f07201c1df0c6820ddbfc2">operator&amp;&amp;</a> (const array &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga29cc1ce803f07201c1df0c6820ddbfc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga29cc1ce803f07201c1df0c6820ddbfc2">More...</a><br /></td></tr>
<tr class="separator:ga29cc1ce803f07201c1df0c6820ddbfc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad339ddc6d510811606d955fd3f5f165f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gad339ddc6d510811606d955fd3f5f165f">operator&amp;&amp;</a> (const array &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:gad339ddc6d510811606d955fd3f5f165f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gad339ddc6d510811606d955fd3f5f165f">More...</a><br /></td></tr>
<tr class="separator:gad339ddc6d510811606d955fd3f5f165f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3fd6cafbcc2790a3971c7fd234734a86"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga3fd6cafbcc2790a3971c7fd234734a86">operator&amp;&amp;</a> (const array &amp;lhs, const cfloat &amp;rhs)</td></tr>
<tr class="memdesc:ga3fd6cafbcc2790a3971c7fd234734a86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga3fd6cafbcc2790a3971c7fd234734a86">More...</a><br /></td></tr>
<tr class="separator:ga3fd6cafbcc2790a3971c7fd234734a86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf065ba893ec8543dec1c7432d67e9be6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gaf065ba893ec8543dec1c7432d67e9be6">operator&amp;&amp;</a> (const array &amp;lhs, const cdouble &amp;rhs)</td></tr>
<tr class="memdesc:gaf065ba893ec8543dec1c7432d67e9be6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#gaf065ba893ec8543dec1c7432d67e9be6">More...</a><br /></td></tr>
<tr class="separator:gaf065ba893ec8543dec1c7432d67e9be6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga39a8c4d38c271cd4fb961937799def03"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga39a8c4d38c271cd4fb961937799def03">operator&amp;&amp;</a> (const short &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga39a8c4d38c271cd4fb961937799def03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga39a8c4d38c271cd4fb961937799def03">More...</a><br /></td></tr>
<tr class="separator:ga39a8c4d38c271cd4fb961937799def03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga236a9d7d66ea9a94b688a01fdc8c94cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga236a9d7d66ea9a94b688a01fdc8c94cd">operator&amp;&amp;</a> (const unsigned short &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga236a9d7d66ea9a94b688a01fdc8c94cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga236a9d7d66ea9a94b688a01fdc8c94cd">More...</a><br /></td></tr>
<tr class="separator:ga236a9d7d66ea9a94b688a01fdc8c94cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e93960fb9c0448a3dc5d78bd234c96d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga1e93960fb9c0448a3dc5d78bd234c96d">operator&amp;&amp;</a> (const array &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga1e93960fb9c0448a3dc5d78bd234c96d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga1e93960fb9c0448a3dc5d78bd234c96d">More...</a><br /></td></tr>
<tr class="separator:ga1e93960fb9c0448a3dc5d78bd234c96d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d8b3d6dd20adfcd00fe2a19732c5333"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga1d8b3d6dd20adfcd00fe2a19732c5333">operator&amp;&amp;</a> (const array &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="memdesc:ga1d8b3d6dd20adfcd00fe2a19732c5333"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__and.htm#ga1d8b3d6dd20adfcd00fe2a19732c5333">More...</a><br /></td></tr>
<tr class="separator:ga1d8b3d6dd20adfcd00fe2a19732c5333"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Logical and of two inputs. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gabb1373bebcdfb72f62cd1cdaa6e05c89"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_and </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>batch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for performing logical and on two arrays. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain result of <code>lhs</code> &amp;&amp; <code>rhs</code>. out is of type b8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch</td><td>specifies if operations need to be performed in batch mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a class="anchor" id="ga1d8b3d6dd20adfcd00fe2a19732c5333"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga1e93960fb9c0448a3dc5d78bd234c96d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga236a9d7d66ea9a94b688a01fdc8c94cd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga39a8c4d38c271cd4fb961937799def03"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf065ba893ec8543dec1c7432d67e9be6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga3fd6cafbcc2790a3971c7fd234734a86"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gad339ddc6d510811606d955fd3f5f165f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga29cc1ce803f07201c1df0c6820ddbfc2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf44d48809068e42d37bce39dd69a639c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafde60f1009ab34ea4258c0622710bc6c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga5b583c900cce5072f87b6470dde2ec69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gadd83fe7117637af4889c85db7d1554e8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga34b8bfe7a99154d52699716726132824"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga260532ab66fa5834e1832fa496c6f805"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga6eac8e73327754eef161f206ad85d68a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga79fa30e513abe89b36c4bdd9cac80be8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga43bd49d3ff6805c19a3644fbfce4e890"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga50b2c1336819c3d5cf227b840f391345"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gad023d6bc800eab0d4334432b30f36b69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga1cae3bfc09632914f8c6212bc39f690f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gab121123634a7eeafa6c102f39c3edd92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga65ba1ea7f8d7bd2e466cc941107387e1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafd9869ed9e752424a5542d241315f73e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gad07414033d3e1bb1613d4e58a52dbda9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gad356b9ffe93b86bc1d8fe18948eb1fde"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaa6e9d467b34b9a76a966363ac4dde528"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga99541629e93c37ee05ee9d1a009fe295"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaec5e0ce888f7cc7b90000b55279a4203"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga59fb7665989187674e71cc22a30d0616"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gae61a73b2586750743718dc61635c68ca"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga3fdacee9391b5155f32c40972624fc93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp;&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs a logical AND operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with a logical AND operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
