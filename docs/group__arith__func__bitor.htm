<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>bitor</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__arith__func__bitor.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">bitor<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__mathfunc__mat.htm">Mathematical functions</a> &raquo;  &#124; <a class="el" href="group__logic__mat.htm">Logical operations</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Bitwise or operation of two inputs.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga84c99f77d1d83fd53f949b4d67b5b210"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga84c99f77d1d83fd53f949b4d67b5b210">af_bitor</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga84c99f77d1d83fd53f949b4d67b5b210"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for performing bitwise or on two arrays.  <a href="#ga84c99f77d1d83fd53f949b4d67b5b210">More...</a><br /></td></tr>
<tr class="separator:ga84c99f77d1d83fd53f949b4d67b5b210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd5247844cbabc82134aa2ab9660a7df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gafd5247844cbabc82134aa2ab9660a7df">operator|</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gafd5247844cbabc82134aa2ab9660a7df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.  <a href="group__arith__func__bitor.htm#gafd5247844cbabc82134aa2ab9660a7df">More...</a><br /></td></tr>
<tr class="separator:gafd5247844cbabc82134aa2ab9660a7df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf83ffc138567779fe085c153e84089a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaf83ffc138567779fe085c153e84089a6">operator|</a> (const bool &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaf83ffc138567779fe085c153e84089a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gaf83ffc138567779fe085c153e84089a6">More...</a><br /></td></tr>
<tr class="separator:gaf83ffc138567779fe085c153e84089a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa38bd9696539268f24743b4e28699fa1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaa38bd9696539268f24743b4e28699fa1">operator|</a> (const int &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaa38bd9696539268f24743b4e28699fa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gaa38bd9696539268f24743b4e28699fa1">More...</a><br /></td></tr>
<tr class="separator:gaa38bd9696539268f24743b4e28699fa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b06f02c77bf0ef4698cf3d17d9bf8d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga5b06f02c77bf0ef4698cf3d17d9bf8d5">operator|</a> (const unsigned &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga5b06f02c77bf0ef4698cf3d17d9bf8d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga5b06f02c77bf0ef4698cf3d17d9bf8d5">More...</a><br /></td></tr>
<tr class="separator:ga5b06f02c77bf0ef4698cf3d17d9bf8d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75afd529aae44a8cee164768d6a417a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga75afd529aae44a8cee164768d6a417a5">operator|</a> (const char &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga75afd529aae44a8cee164768d6a417a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga75afd529aae44a8cee164768d6a417a5">More...</a><br /></td></tr>
<tr class="separator:ga75afd529aae44a8cee164768d6a417a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaade651cababd48f0a91ba08e14f26da5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaade651cababd48f0a91ba08e14f26da5">operator|</a> (const unsigned char &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaade651cababd48f0a91ba08e14f26da5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gaade651cababd48f0a91ba08e14f26da5">More...</a><br /></td></tr>
<tr class="separator:gaade651cababd48f0a91ba08e14f26da5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga211ab107f370a256b0a8cf05c0a53027"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga211ab107f370a256b0a8cf05c0a53027">operator|</a> (const long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga211ab107f370a256b0a8cf05c0a53027"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga211ab107f370a256b0a8cf05c0a53027">More...</a><br /></td></tr>
<tr class="separator:ga211ab107f370a256b0a8cf05c0a53027"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab3d20254142d9035e6fee26ab2a22fef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gab3d20254142d9035e6fee26ab2a22fef">operator|</a> (const unsigned long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gab3d20254142d9035e6fee26ab2a22fef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gab3d20254142d9035e6fee26ab2a22fef">More...</a><br /></td></tr>
<tr class="separator:gab3d20254142d9035e6fee26ab2a22fef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad19b5ce12c87dbb601204c3e7c55f7ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gad19b5ce12c87dbb601204c3e7c55f7ff">operator|</a> (const long long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gad19b5ce12c87dbb601204c3e7c55f7ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gad19b5ce12c87dbb601204c3e7c55f7ff">More...</a><br /></td></tr>
<tr class="separator:gad19b5ce12c87dbb601204c3e7c55f7ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b0b2a1e9fa34aabecc20e616e42bcc3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga8b0b2a1e9fa34aabecc20e616e42bcc3">operator|</a> (const unsigned long long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga8b0b2a1e9fa34aabecc20e616e42bcc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga8b0b2a1e9fa34aabecc20e616e42bcc3">More...</a><br /></td></tr>
<tr class="separator:ga8b0b2a1e9fa34aabecc20e616e42bcc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b224a0ca10eb15ca0463239dca0e81e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga0b224a0ca10eb15ca0463239dca0e81e">operator|</a> (const double &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga0b224a0ca10eb15ca0463239dca0e81e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga0b224a0ca10eb15ca0463239dca0e81e">More...</a><br /></td></tr>
<tr class="separator:ga0b224a0ca10eb15ca0463239dca0e81e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3a0245c3dc45fa313f1a9b94b6caa06"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gac3a0245c3dc45fa313f1a9b94b6caa06">operator|</a> (const float &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gac3a0245c3dc45fa313f1a9b94b6caa06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gac3a0245c3dc45fa313f1a9b94b6caa06">More...</a><br /></td></tr>
<tr class="separator:gac3a0245c3dc45fa313f1a9b94b6caa06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee3c7d592925abdbdb901b8136f2c145"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaee3c7d592925abdbdb901b8136f2c145">operator|</a> (const cfloat &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaee3c7d592925abdbdb901b8136f2c145"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gaee3c7d592925abdbdb901b8136f2c145">More...</a><br /></td></tr>
<tr class="separator:gaee3c7d592925abdbdb901b8136f2c145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadac5c7f28f25003d21011d8151e930bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gadac5c7f28f25003d21011d8151e930bf">operator|</a> (const cdouble &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gadac5c7f28f25003d21011d8151e930bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gadac5c7f28f25003d21011d8151e930bf">More...</a><br /></td></tr>
<tr class="separator:gadac5c7f28f25003d21011d8151e930bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5dd8b799c32450bcc9e1fb87c6944718"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga5dd8b799c32450bcc9e1fb87c6944718">operator|</a> (const array &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga5dd8b799c32450bcc9e1fb87c6944718"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga5dd8b799c32450bcc9e1fb87c6944718">More...</a><br /></td></tr>
<tr class="separator:ga5dd8b799c32450bcc9e1fb87c6944718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga86dae72c9b1ff2c908885abc6c62dd8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga86dae72c9b1ff2c908885abc6c62dd8a">operator|</a> (const array &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga86dae72c9b1ff2c908885abc6c62dd8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga86dae72c9b1ff2c908885abc6c62dd8a">More...</a><br /></td></tr>
<tr class="separator:ga86dae72c9b1ff2c908885abc6c62dd8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0fb5b406d47eedd113fb5930088e5cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gac0fb5b406d47eedd113fb5930088e5cc">operator|</a> (const array &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:gac0fb5b406d47eedd113fb5930088e5cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gac0fb5b406d47eedd113fb5930088e5cc">More...</a><br /></td></tr>
<tr class="separator:gac0fb5b406d47eedd113fb5930088e5cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90404e3496a4167a54a353000ea6341a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga90404e3496a4167a54a353000ea6341a">operator|</a> (const array &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga90404e3496a4167a54a353000ea6341a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga90404e3496a4167a54a353000ea6341a">More...</a><br /></td></tr>
<tr class="separator:ga90404e3496a4167a54a353000ea6341a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15689e2896e03560fb65e6910a373717"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga15689e2896e03560fb65e6910a373717">operator|</a> (const array &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga15689e2896e03560fb65e6910a373717"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga15689e2896e03560fb65e6910a373717">More...</a><br /></td></tr>
<tr class="separator:ga15689e2896e03560fb65e6910a373717"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c9bbf1c94fc2ba3f2afbc5d006c6a82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga1c9bbf1c94fc2ba3f2afbc5d006c6a82">operator|</a> (const array &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga1c9bbf1c94fc2ba3f2afbc5d006c6a82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga1c9bbf1c94fc2ba3f2afbc5d006c6a82">More...</a><br /></td></tr>
<tr class="separator:ga1c9bbf1c94fc2ba3f2afbc5d006c6a82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd0f5638d222702ecaab9a11f00483ab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gafd0f5638d222702ecaab9a11f00483ab">operator|</a> (const array &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:gafd0f5638d222702ecaab9a11f00483ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gafd0f5638d222702ecaab9a11f00483ab">More...</a><br /></td></tr>
<tr class="separator:gafd0f5638d222702ecaab9a11f00483ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1394c67505703b37c360355acd23a439"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga1394c67505703b37c360355acd23a439">operator|</a> (const array &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga1394c67505703b37c360355acd23a439"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga1394c67505703b37c360355acd23a439">More...</a><br /></td></tr>
<tr class="separator:ga1394c67505703b37c360355acd23a439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5849978a299a4479211b9dc2a0b383e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gae5849978a299a4479211b9dc2a0b383e">operator|</a> (const array &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gae5849978a299a4479211b9dc2a0b383e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gae5849978a299a4479211b9dc2a0b383e">More...</a><br /></td></tr>
<tr class="separator:gae5849978a299a4479211b9dc2a0b383e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e6575f5cf1978876ce57ed67004cdd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga5e6575f5cf1978876ce57ed67004cdd3">operator|</a> (const array &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga5e6575f5cf1978876ce57ed67004cdd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga5e6575f5cf1978876ce57ed67004cdd3">More...</a><br /></td></tr>
<tr class="separator:ga5e6575f5cf1978876ce57ed67004cdd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c51dc35b31ca27729f0a05cc9dfa4d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga4c51dc35b31ca27729f0a05cc9dfa4d8">operator|</a> (const array &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga4c51dc35b31ca27729f0a05cc9dfa4d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga4c51dc35b31ca27729f0a05cc9dfa4d8">More...</a><br /></td></tr>
<tr class="separator:ga4c51dc35b31ca27729f0a05cc9dfa4d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68fc2158e0a850a341c0126dc33c1fde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga68fc2158e0a850a341c0126dc33c1fde">operator|</a> (const array &amp;lhs, const cfloat &amp;rhs)</td></tr>
<tr class="memdesc:ga68fc2158e0a850a341c0126dc33c1fde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga68fc2158e0a850a341c0126dc33c1fde">More...</a><br /></td></tr>
<tr class="separator:ga68fc2158e0a850a341c0126dc33c1fde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62145c3b2f4b9b9293bbe5077b449127"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga62145c3b2f4b9b9293bbe5077b449127">operator|</a> (const array &amp;lhs, const cdouble &amp;rhs)</td></tr>
<tr class="memdesc:ga62145c3b2f4b9b9293bbe5077b449127"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga62145c3b2f4b9b9293bbe5077b449127">More...</a><br /></td></tr>
<tr class="separator:ga62145c3b2f4b9b9293bbe5077b449127"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga659cb9e76ef3f3c9968a58b6728b577d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga659cb9e76ef3f3c9968a58b6728b577d">operator|</a> (const short &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga659cb9e76ef3f3c9968a58b6728b577d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga659cb9e76ef3f3c9968a58b6728b577d">More...</a><br /></td></tr>
<tr class="separator:ga659cb9e76ef3f3c9968a58b6728b577d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga66a860a445d1a97d16ae4ca84a100c18"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga66a860a445d1a97d16ae4ca84a100c18">operator|</a> (const unsigned short &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga66a860a445d1a97d16ae4ca84a100c18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga66a860a445d1a97d16ae4ca84a100c18">More...</a><br /></td></tr>
<tr class="separator:ga66a860a445d1a97d16ae4ca84a100c18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga718074c9e39cc9dcfed0e7616de68507"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga718074c9e39cc9dcfed0e7616de68507">operator|</a> (const array &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga718074c9e39cc9dcfed0e7616de68507"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#ga718074c9e39cc9dcfed0e7616de68507">More...</a><br /></td></tr>
<tr class="separator:ga718074c9e39cc9dcfed0e7616de68507"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd47ffc728711da055e564e874359544"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gacd47ffc728711da055e564e874359544">operator|</a> (const array &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="memdesc:gacd47ffc728711da055e564e874359544"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitor.htm#gacd47ffc728711da055e564e874359544">More...</a><br /></td></tr>
<tr class="separator:gacd47ffc728711da055e564e874359544"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Bitwise or operation of two inputs. </p>
<dl class="section note"><dt>Note</dt><dd>This function supports integer only. </dd></dl>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga84c99f77d1d83fd53f949b4d67b5b210"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_bitor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>batch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for performing bitwise or on two arrays. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain result of <code>lhs</code> &amp; <code>rhs</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch</td><td>specifies if operations need to be performed in batch mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a class="anchor" id="gacd47ffc728711da055e564e874359544"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga718074c9e39cc9dcfed0e7616de68507"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga66a860a445d1a97d16ae4ca84a100c18"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga659cb9e76ef3f3c9968a58b6728b577d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga62145c3b2f4b9b9293bbe5077b449127"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga68fc2158e0a850a341c0126dc33c1fde"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga4c51dc35b31ca27729f0a05cc9dfa4d8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga5e6575f5cf1978876ce57ed67004cdd3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gae5849978a299a4479211b9dc2a0b383e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga1394c67505703b37c360355acd23a439"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafd0f5638d222702ecaab9a11f00483ab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga1c9bbf1c94fc2ba3f2afbc5d006c6a82"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga15689e2896e03560fb65e6910a373717"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga90404e3496a4167a54a353000ea6341a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gac0fb5b406d47eedd113fb5930088e5cc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga86dae72c9b1ff2c908885abc6c62dd8a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga5dd8b799c32450bcc9e1fb87c6944718"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gadac5c7f28f25003d21011d8151e930bf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaee3c7d592925abdbdb901b8136f2c145"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gac3a0245c3dc45fa313f1a9b94b6caa06"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga0b224a0ca10eb15ca0463239dca0e81e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga8b0b2a1e9fa34aabecc20e616e42bcc3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gad19b5ce12c87dbb601204c3e7c55f7ff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gab3d20254142d9035e6fee26ab2a22fef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga211ab107f370a256b0a8cf05c0a53027"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaade651cababd48f0a91ba08e14f26da5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga75afd529aae44a8cee164768d6a417a5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga5b06f02c77bf0ef4698cf3d17d9bf8d5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaa38bd9696539268f24743b4e28699fa1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf83ffc138567779fe085c153e84089a6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafd5247844cbabc82134aa2ab9660a7df"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise OR operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise OR operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
