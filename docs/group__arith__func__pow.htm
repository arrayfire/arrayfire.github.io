<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: pow</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__arith__func__pow.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">pow<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__mathfunc__mat.htm">Mathematical functions</a> &raquo; <a class="el" href="group__explog__mat.htm">Exponential and logarithmic functions</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga0f28be1a9c8b176a78c4a47f483e7fc6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga0f28be1a9c8b176a78c4a47f483e7fc6">af_pow</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga0f28be1a9c8b176a78c4a47f483e7fc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for power.  <a href="group__arith__func__pow.htm#ga0f28be1a9c8b176a78c4a47f483e7fc6">More...</a><br /></td></tr>
<tr class="separator:ga0f28be1a9c8b176a78c4a47f483e7fc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga299da8cda1458a6cb7adba9718ec613d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga299da8cda1458a6cb7adba9718ec613d">pow</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga299da8cda1458a6cb7adba9718ec613d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for power.  <a href="group__arith__func__pow.htm#ga299da8cda1458a6cb7adba9718ec613d">More...</a><br /></td></tr>
<tr class="separator:ga299da8cda1458a6cb7adba9718ec613d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b7864ccb9cdc64dd3a207abf68aa104"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga5b7864ccb9cdc64dd3a207abf68aa104">pow</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:ga5b7864ccb9cdc64dd3a207abf68aa104"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for power.  <a href="group__arith__func__pow.htm#ga5b7864ccb9cdc64dd3a207abf68aa104">More...</a><br /></td></tr>
<tr class="separator:ga5b7864ccb9cdc64dd3a207abf68aa104"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a4f179d47bedb5c811dcddbbce198d2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga4a4f179d47bedb5c811dcddbbce198d2">pow</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4a4f179d47bedb5c811dcddbbce198d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for power.  <a href="group__arith__func__pow.htm#ga4a4f179d47bedb5c811dcddbbce198d2">More...</a><br /></td></tr>
<tr class="separator:ga4a4f179d47bedb5c811dcddbbce198d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b71fc494e03f9c8abaebe191a7c4846"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga4b71fc494e03f9c8abaebe191a7c4846">pow2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga4b71fc494e03f9c8abaebe191a7c4846"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for power of 2.  <a href="group__arith__func__pow.htm#ga4b71fc494e03f9c8abaebe191a7c4846">More...</a><br /></td></tr>
<tr class="separator:ga4b71fc494e03f9c8abaebe191a7c4846"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Raise an array to a power</p>
<p>If the input array has values beyond what a floating point type can represent, then there is no guarantee that the results will be accurate. The exact type mapping from integral types to floating point types used to compute power is given below.</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadLeft">Input Type </th><th class="markdownTableHeadLeft">Compute Type  </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyLeft">unsigned long long </td><td class="markdownTableBodyLeft">double  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyLeft">long long </td><td class="markdownTableBodyLeft">double  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyLeft">unsigned int </td><td class="markdownTableBodyLeft">double  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyLeft">int </td><td class="markdownTableBodyLeft">double  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyLeft">unsigned short </td><td class="markdownTableBodyLeft">float  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyLeft">short </td><td class="markdownTableBodyLeft">float  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyLeft">unsigned char </td><td class="markdownTableBodyLeft">float  </td></tr>
</table>
<p>The output array will be of the same type as input.</p>
<dl class="section note"><dt>Note</dt><dd>This function supports real inputs only. Complex inputs are not yet supported. </dd></dl>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga0f28be1a9c8b176a78c4a47f483e7fc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0f28be1a9c8b176a78c4a47f483e7fc6">&#9670;&nbsp;</a></span>af_pow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_pow </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>batch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for power. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain <code>lhs</code> raised to power <code>rhs</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>is base </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>is exponent </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch</td><td>specifies if operations need to be performed in batch mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="ga299da8cda1458a6cb7adba9718ec613d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga299da8cda1458a6cb7adba9718ec613d">&#9670;&nbsp;</a></span>pow() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::pow </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for power. </p>
<p>Computes the value of <code>lhs</code> raised to the power of <code>rhs</code>. The inputs can be two arrays or an array and a scalar.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>is base </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>is exponent </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>lhs</code> raised to power <code>rhs</code> </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="financial_2heston_model_8cpp-example.htm#a7">financial/heston_model.cpp</a>, and <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a8">image_processing/brain_segmentation.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="ga5b7864ccb9cdc64dd3a207abf68aa104"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5b7864ccb9cdc64dd3a207abf68aa104">&#9670;&nbsp;</a></span>pow() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::pow </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for power. </p>
<p>Computes the value of <code>lhs</code> raised to the power of <code>rhs</code>. The inputs can be two arrays or an array and a scalar.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>is base </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>is exponent </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>lhs</code> raised to power <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga4a4f179d47bedb5c811dcddbbce198d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4a4f179d47bedb5c811dcddbbce198d2">&#9670;&nbsp;</a></span>pow() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::pow </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for power. </p>
<p>Computes the value of <code>lhs</code> raised to the power of <code>rhs</code>. The inputs can be two arrays or an array and a scalar.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>is base </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>is exponent </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>lhs</code> raised to power <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga4b71fc494e03f9c8abaebe191a7c4846"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4b71fc494e03f9c8abaebe191a7c4846">&#9670;&nbsp;</a></span>pow2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::pow2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for power of 2. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is exponent </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>2 raised to power of <code>in</code> </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
