<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: machine_learning/deep_belief_net.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('machine_learning_2deep_belief_net_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">machine_learning/deep_belief_net.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * https://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;mnist_common.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">using</span> std::vector;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">float</span> accuracy(<span class="keyword">const</span> <a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> &amp;predicted, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;target) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> val, plabels, tlabels;</div>
<div class="line">    <a name="a1"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, tlabels, target, 1);</div>
<div class="line">    <a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, plabels, predicted, 1);</div>
<div class="line">    <span class="keywordflow">return</span> 100 * count&lt;float&gt;(plabels == tlabels) / tlabels.<a name="a2"></a><a class="code" href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">elements</a>();</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Derivative of the activation function</span></div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> deriv(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;out) { <span class="keywordflow">return</span> out * (1 - out); }</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Cost function</span></div>
<div class="line"><span class="keywordtype">double</span> error(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;out, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;pred) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dif = (out - pred);</div>
<div class="line">    <span class="keywordflow">return</span> <a name="a3"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>((<span class="keywordtype">double</span>)(sum&lt;float&gt;(dif * dif)));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> sigmoid_binary(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> in) {</div>
<div class="line">    <span class="comment">// Choosing &quot;1&quot; with probability sigmoid(in)</span></div>
<div class="line">    <span class="keywordflow">return</span> (<a name="a4"></a><a class="code" href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">sigmoid</a>(in) &gt; <a name="a5"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(in.<a name="a6"></a><a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>())).<a name="a7"></a><a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a name="a8"></a><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">class </span>rbm {</div>
<div class="line">   <span class="keyword">private</span>:</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> weights;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> h_bias;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> v_bias;</div>
<div class="line"> </div>
<div class="line">   <span class="keyword">public</span>:</div>
<div class="line">    rbm(<span class="keywordtype">int</span> v_size, <span class="keywordtype">int</span> h_size)</div>
<div class="line">        : weights(<a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(h_size, v_size) / 100.f)</div>
<div class="line">        , h_bias(<a name="a9"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, 1, h_size))</div>
<div class="line">        , v_bias(<a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, 1, v_size)) {}</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> get_weights() {</div>
<div class="line">        <span class="keywordflow">return</span> <a name="a10"></a><a class="code" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>(<a name="a11"></a><a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1, weights, <a class="code" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>(h_bias)));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">void</span> train(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">double</span> lr, <span class="keywordtype">int</span> num_epochs, <span class="keywordtype">int</span> batch_size,</div>
<div class="line">               <span class="keywordtype">bool</span> verbose) {</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">int</span> num_samples = in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches = num_samples / batch_size;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_epochs; i++) {</div>
<div class="line">            <span class="keywordtype">double</span> err = 0;</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_batches - 1; j++) {</div>
<div class="line">                <span class="keywordtype">int</span> st  = j * batch_size;</div>
<div class="line">                <span class="keywordtype">int</span> en  = <a name="a12"></a><a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">std::min</a>(num_samples - 1, st + batch_size - 1);</div>
<div class="line">                <span class="keywordtype">int</span> num = en - st + 1;</div>
<div class="line"> </div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> v_pos = in(<a name="_a13"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a name="a14"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line"> </div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> h_pos = sigmoid_binary(<a name="a15"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(h_bias, num) +</div>
<div class="line">                                             <a name="a16"></a><a class="code" href="group__blas__func__matmul.htm#gadf90230a67ea7a0b4697511dd978b9c7">matmulNT</a>(v_pos, weights));</div>
<div class="line"> </div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> v_neg =</div>
<div class="line">                    sigmoid_binary(<a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(v_bias, num) + <a name="a17"></a><a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(h_pos, weights));</div>
<div class="line"> </div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> h_neg = sigmoid_binary(<a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(h_bias, num) +</div>
<div class="line">                                             <a class="code" href="group__blas__func__matmul.htm#gadf90230a67ea7a0b4697511dd978b9c7">matmulNT</a>(v_neg, weights));</div>
<div class="line"> </div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> c_pos = <a name="a18"></a><a class="code" href="group__blas__func__matmul.htm#ga6655d7913b35d7e59f7c8560a5368fbc">matmulTN</a>(h_pos, v_pos);</div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> c_neg = <a class="code" href="group__blas__func__matmul.htm#ga6655d7913b35d7e59f7c8560a5368fbc">matmulTN</a>(h_neg, v_neg);</div>
<div class="line"> </div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> delta_w  = lr * (c_pos - c_neg) / num;</div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> delta_vb = lr * <a name="a19"></a><a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(v_pos - v_neg) / num;</div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> delta_hb = lr * <a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(h_pos - h_neg) / num;</div>
<div class="line"> </div>
<div class="line">                weights += delta_w;</div>
<div class="line">                v_bias += delta_vb;</div>
<div class="line">                h_bias += delta_hb;</div>
<div class="line"> </div>
<div class="line">                <span class="keywordflow">if</span> (verbose) { err += error(v_pos, v_neg); }</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (verbose) {</div>
<div class="line">                printf(<span class="stringliteral">&quot;Epoch %d: Reconstruction error: %0.4f\n&quot;</span>, i + 1,</div>
<div class="line">                       err / num_batches);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> prop_up(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in) {</div>
<div class="line">        <span class="keywordflow">return</span> <a class="code" href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">sigmoid</a>(<a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(h_bias, in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0)) + <a class="code" href="group__blas__func__matmul.htm#gadf90230a67ea7a0b4697511dd978b9c7">matmulNT</a>(in, weights));</div>
<div class="line">    }</div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"><span class="keyword">class </span>dbn {</div>
<div class="line">   <span class="keyword">private</span>:</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> in_size;</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> out_size;</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_hidden;</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_total;</div>
<div class="line">    std::vector&lt;array&gt; weights;</div>
<div class="line">    std::vector&lt;int&gt; hidden;</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> add_bias(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in) {</div>
<div class="line">        <span class="comment">// Bias input is added on top of given input</span></div>
<div class="line">        <span class="keywordflow">return</span> <a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1, <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), 1), in);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    vector&lt;array&gt; forward_propagate(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;input) {</div>
<div class="line">        <span class="comment">// Get activations at each layer</span></div>
<div class="line">        vector&lt;array&gt; signal(num_total);</div>
<div class="line">        signal[0] = input;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_total - 1; i++) {</div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> in      = add_bias(signal[i]);</div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> out     = <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(in, weights[i]);</div>
<div class="line">            signal[i + 1] = <a class="code" href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">sigmoid</a>(out);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">return</span> signal;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">void</span> back_propagate(<span class="keyword">const</span> vector&lt;array&gt; signal, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;target,</div>
<div class="line">                        <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;alpha) {</div>
<div class="line">        <span class="comment">// Get error for output layer</span></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out = signal[num_total - 1];</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> err = (out - target);</div>
<div class="line">        <span class="keywordtype">int</span> m     = target.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = num_total - 2; i &gt;= 0; i--) {</div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> in    = add_bias(signal[i]);</div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> delta = (deriv(out) * err).T();</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Adjust weights</span></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> <a name="a20"></a><a class="code" href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">grad</a> = -(alpha * <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(delta, in)) / m;</div>
<div class="line">            weights[i] += <a class="code" href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">grad</a>.T();</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Input to current layer is output of previous</span></div>
<div class="line">            out = signal[i];</div>
<div class="line">            err = <a name="a21"></a><a class="code" href="group__blas__func__matmul.htm#ga7f3e5a6f282ea2c2c32886c95694bb88">matmulTT</a>(delta, weights[i]);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Remove the error of bias and propagate backward</span></div>
<div class="line">            err = err(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="classaf_1_1seq.htm">seq</a>(1, out.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)));</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">   <span class="keyword">public</span>:</div>
<div class="line">    dbn(<span class="keyword">const</span> <span class="keywordtype">int</span> in_sz, <span class="keyword">const</span> <span class="keywordtype">int</span> out_sz, <span class="keyword">const</span> std::vector&lt;int&gt; hidden_layers)</div>
<div class="line">        : in_size(in_sz)</div>
<div class="line">        , out_size(out_sz)</div>
<div class="line">        , num_hidden(hidden_layers.size())</div>
<div class="line">        , num_total(hidden_layers.size() + 2)</div>
<div class="line">        , weights(hidden_layers.size() + 1)</div>
<div class="line">        , hidden(hidden_layers) {}</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">void</span> train(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;input, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;target, <span class="keywordtype">double</span> lr_rbm = 1.0,</div>
<div class="line">               <span class="keywordtype">double</span> lr_nn = 1.0, <span class="keyword">const</span> <span class="keywordtype">int</span> epochs_rbm = 15,</div>
<div class="line">               <span class="keyword">const</span> <span class="keywordtype">int</span> epochs_nn = 300, <span class="keyword">const</span> <span class="keywordtype">int</span> batch_size = 100,</div>
<div class="line">               <span class="keywordtype">double</span> maxerr = 1.0, <span class="keywordtype">bool</span> verbose = <span class="keyword">false</span>) {</div>
<div class="line">        <span class="comment">// Pre-training hidden layers</span></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> X = input;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_hidden; i++) {</div>
<div class="line">            <span class="keywordflow">if</span> (verbose) { printf(<span class="stringliteral">&quot;Training Hidden Layer %d\n&quot;</span>, i); }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordtype">int</span> visible = (i == 0) ? in_size : hidden[i - 1];</div>
<div class="line"> </div>
<div class="line">            rbm r(visible, hidden[i]);</div>
<div class="line">            r.train(X, lr_rbm, epochs_rbm, batch_size, verbose);</div>
<div class="line"> </div>
<div class="line">            X          = r.prop_up(X);</div>
<div class="line">            weights[i] = r.get_weights();</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (verbose) { printf(<span class="stringliteral">&quot;\n&quot;</span>); }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        weights[num_hidden] =</div>
<div class="line">            0.05 * <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(hidden[num_hidden - 1] + 1, out_size) - 0.0025;</div>
<div class="line"> </div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">int</span> num_samples = input.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches = num_samples / batch_size;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Training the entire network</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; epochs_nn; i++) {</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_batches; j++) {</div>
<div class="line">                <span class="keywordtype">int</span> st = j * batch_size;</div>
<div class="line">                <span class="keywordtype">int</span> en = <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">std::min</a>(num_samples - 1, st + batch_size - 1);</div>
<div class="line"> </div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> x = input(<a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> y = target(<a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// Propagate the inputs forward</span></div>
<div class="line">                vector&lt;array&gt; signals = forward_propagate(x);</div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> out             = signals[num_total - 1];</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// Propagate the error backward</span></div>
<div class="line">                back_propagate(signals, y, lr_nn);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Validate with last batch</span></div>
<div class="line">            <span class="keywordtype">int</span> st     = (num_batches - 1) * batch_size;</div>
<div class="line">            <span class="keywordtype">int</span> en     = num_samples - 1;</div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> out  = predict(input(<a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>));</div>
<div class="line">            <span class="keywordtype">double</span> err = error(out, target(<a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>));</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Check if convergence criteria has been met</span></div>
<div class="line">            <span class="keywordflow">if</span> (err &lt; maxerr) {</div>
<div class="line">                printf(<span class="stringliteral">&quot;Converged on Epoch: %4d\n&quot;</span>, i + 1);</div>
<div class="line">                <span class="keywordflow">return</span>;</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (verbose) {</div>
<div class="line">                <span class="keywordflow">if</span> ((i + 1) % 10 == 0)</div>
<div class="line">                    printf(<span class="stringliteral">&quot;Epoch: %4d, Error: %0.4f\n&quot;</span>, i + 1, err);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> predict(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;input) {</div>
<div class="line">        vector&lt;array&gt; signal = forward_propagate(input);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out            = signal[num_total - 1];</div>
<div class="line">        <span class="keywordflow">return</span> out;</div>
<div class="line">    }</div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> dbn_demo(<span class="keywordtype">bool</span> console, <span class="keywordtype">int</span> perc) {</div>
<div class="line">    printf(<span class="stringliteral">&quot;** ArrayFire DBN Demo **\n\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_images, test_images;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_target, test_target;</div>
<div class="line">    <span class="keywordtype">int</span> num_classes, num_train, num_test;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Load mnist data</span></div>
<div class="line">    <span class="keywordtype">float</span> frac = (float)(perc) / 100.0;</div>
<div class="line">    setup_mnist&lt;true&gt;(&amp;num_classes, &amp;num_train, &amp;num_test, train_images,</div>
<div class="line">                      test_images, train_target, test_target, frac);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> feature_size = train_images.<a class="code" href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">elements</a>() / num_train;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Reshape images into feature vectors</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_feats = <a name="a22"></a><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(train_images, feature_size, num_train).<a name="a23"></a><a class="code" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> test_feats  = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(test_images, feature_size, num_test).<a class="code" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    train_target = train_target.<a class="code" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    test_target  = test_target.<a class="code" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Network parameters</span></div>
<div class="line">    vector&lt;int&gt; layers;</div>
<div class="line">    layers.push_back(100);</div>
<div class="line">    layers.push_back(50);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create network</span></div>
<div class="line">    dbn network(train_feats.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), num_classes, layers);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Train network</span></div>
<div class="line">    <a name="a24"></a><a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">timer::start</a>();</div>
<div class="line">    network.train(train_feats, train_target,</div>
<div class="line">                  0.2,    <span class="comment">// rbm learning rate</span></div>
<div class="line">                  4.0,    <span class="comment">// nn learning rate</span></div>
<div class="line">                  15,     <span class="comment">// rbm epochs</span></div>
<div class="line">                  250,    <span class="comment">// nn epochs</span></div>
<div class="line">                  100,    <span class="comment">// batch_size</span></div>
<div class="line">                  0.5,    <span class="comment">// max error</span></div>
<div class="line">                  <span class="keyword">true</span>);  <span class="comment">// verbose</span></div>
<div class="line">    <a name="a25"></a><a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    <span class="keywordtype">double</span> train_time = <a name="a26"></a><a class="code" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">timer::stop</a>();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Run the trained network and test accuracy.</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_output = network.predict(train_feats);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> test_output  = network.predict(test_feats);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Benchmark prediction</span></div>
<div class="line">    <a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    <a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">timer::start</a>();</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 100; i++) { network.predict(test_feats); }</div>
<div class="line">    <a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    <span class="keywordtype">double</span> test_time = <a class="code" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">timer::stop</a>() / 100;</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTraining set:\n&quot;</span>);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on training data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(train_output, train_target));</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTest set:\n&quot;</span>);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on testing  data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(test_output, test_target));</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTraining time: %4.4lf s\n&quot;</span>, train_time);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Prediction time: %4.4lf s\n\n&quot;</span>, test_time);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line">        <span class="comment">// Get 20 random test images.</span></div>
<div class="line">        test_output = test_output.<a class="code" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">        display_results&lt;true&gt;(test_images, test_output, test_target.<a class="code" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>(), 20);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> perc     = argc &gt; 3 ? atoi(argv[3]) : 60;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a name="a27"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a28"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        <span class="keywordflow">return</span> dbn_demo(console, perc);</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a29"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) { std::cerr &lt;&lt; ae.<a name="a30"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>() &lt;&lt; std::endl; }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__blas__func__matmul_htm_ga63306b6ed967bd1055086db862fe885b"><div class="ttname"><a href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">af::matmul</a></div><div class="ttdeci">AFAPI array matmul(const array &amp;lhs, const array &amp;rhs, const matProp optLhs=AF_MAT_NONE, const matProp optRhs=AF_MAT_NONE)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:46</a></div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a5822c6bdfbf4ff01f23c4417934b924c"><div class="ttname"><a href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">af::array::as</a></div><div class="ttdeci">const array as(dtype type) const</div><div class="ttdoc">Converts the array into another type.</div></div>
<div class="ttc" id="agroup__calc__func__grad_htm_ga3be29ad2f4958dcc01f9135da52753f8"><div class="ttname"><a href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">af::grad</a></div><div class="ttdeci">AFAPI void grad(array &amp;dx, array &amp;dy, const array &amp;in)</div><div class="ttdoc">C++ Interface for calculating the gradients.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__manip__func__join_htm_ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><div class="ttname"><a href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">af::join</a></div><div class="ttdeci">AFAPI array join(const int dim, const array &amp;first, const array &amp;second)</div><div class="ttdoc">Join 2 arrays along dim.</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga382a69ec85a6beea79e95aeaef591073"><div class="ttname"><a href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="astructaf_1_1timer_htm_acde4fe9b34f26a2c99bdb52080264116"><div class="ttname"><a href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">af::timer::start</a></div><div class="ttdeci">static AFAPI timer start()</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_ga6655d7913b35d7e59f7c8560a5368fbc"><div class="ttname"><a href="group__blas__func__matmul.htm#ga6655d7913b35d7e59f7c8560a5368fbc">af::matmulTN</a></div><div class="ttdeci">AFAPI array matmulTN(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a89f91cdf327a8b304589916db5bde3c2"><div class="ttname"><a href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">af::array::elements</a></div><div class="ttdeci">dim_t elements() const</div><div class="ttdoc">Get the total number of elements across all dimensions of the array.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_gadf90230a67ea7a0b4697511dd978b9c7"><div class="ttname"><a href="group__blas__func__matmul.htm#gadf90230a67ea7a0b4697511dd978b9c7">af::matmulNT</a></div><div class="ttdeci">AFAPI array matmulNT(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_ga7f3e5a6f282ea2c2c32886c95694bb88"><div class="ttname"><a href="group__blas__func__matmul.htm#ga7f3e5a6f282ea2c2c32886c95694bb88">af::matmulTT</a></div><div class="ttdeci">AFAPI array matmulTT(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_ga25c678d4cd9e0702bbc93e11d7d516a8"><div class="ttname"><a href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface for square root of input.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:29</a></div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_ga3548059d64e0cefc7fedb4ec28321d32"><div class="ttname"><a href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="anamespaceaf_htm_a83c8f1181fc87c30d649f3f1eb26a860"><div class="ttname"><a href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">af::sigmoid</a></div><div class="ttdeci">AFAPI array sigmoid(const array &amp;in)</div><div class="ttdoc">C++ Interface for calculating sigmoid function of an array.</div></div>
<div class="ttc" id="astructaf_1_1timer_htm_adcbc49c002458a0a2370e0bb8e96c322"><div class="ttname"><a href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">af::timer::stop</a></div><div class="ttdeci">static AFAPI double stop()</div></div>
<div class="ttc" id="agroup__reduce__func__sum_htm_ga964a8e7e78dd6d8f4d20c17edf82dbf5"><div class="ttname"><a href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">af::sum</a></div><div class="ttdeci">AFAPI array sum(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for sum of elements in an array.</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="agroup__device__func__sync_htm_ga8c5d51841cf4f2ddbdd6a3146cf2b390"><div class="ttname"><a href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a></div><div class="ttdeci">AFAPI void sync(const int device=-1)</div><div class="ttdoc">Blocks until the device is finished processing.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="agroup__reduce__func__min_htm_ga2b1287d1babb569d28bc6ee1c8e8e1ea"><div class="ttname"><a href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">af::min</a></div><div class="ttdeci">AFAPI array min(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for minimum values in an array.</div></div>
<div class="ttc" id="agroup__blas__func__transpose_htm_ga63a8e47707874b9d2ba9b9af0b159591"><div class="ttname"><a href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">af::transpose</a></div><div class="ttdeci">AFAPI array transpose(const array &amp;in, const bool conjugate=false)</div><div class="ttdoc">Transposes a matrix.</div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
