<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: wrap</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__image__func__wrap.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">wrap<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__image__mat.htm">Image Processing</a> &raquo; <a class="el" href="group__image__mod__mat.htm">Wrapping and unwrapping image windows</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Performs the opposite of <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">af::unwrap()</a>.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga8270837c6d109f49c783c5ea286b4cea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__wrap.htm#ga8270837c6d109f49c783c5ea286b4cea">wrap</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> ox, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> oy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py=0, const bool is_column=true)</td></tr>
<tr class="memdesc:ga8270837c6d109f49c783c5ea286b4cea"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for performing the opposite of <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">unwrap</a>.  <a href="group__image__func__wrap.htm#ga8270837c6d109f49c783c5ea286b4cea">More...</a><br /></td></tr>
<tr class="separator:ga8270837c6d109f49c783c5ea286b4cea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaace920603110e045a0e251ca8ca4377c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__wrap.htm#gaace920603110e045a0e251ca8ca4377c">af_wrap</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> ox, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> oy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py, const bool is_column)</td></tr>
<tr class="memdesc:gaace920603110e045a0e251ca8ca4377c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for performing the opposite of <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">af::unwrap()</a>  <a href="group__image__func__wrap.htm#gaace920603110e045a0e251ca8ca4377c">More...</a><br /></td></tr>
<tr class="separator:gaace920603110e045a0e251ca8ca4377c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaff897271aa30538fff13f60cda494d32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__wrap.htm#gaff897271aa30538fff13f60cda494d32">af_wrap_v2</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> ox, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> oy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py, const bool is_column)</td></tr>
<tr class="memdesc:gaff897271aa30538fff13f60cda494d32"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for the version of <a class="el" href="group__image__func__wrap.htm#gaace920603110e045a0e251ca8ca4377c">af_wrap</a> that accepts a preallocated output array.  <a href="group__image__func__wrap.htm#gaff897271aa30538fff13f60cda494d32">More...</a><br /></td></tr>
<tr class="separator:gaff897271aa30538fff13f60cda494d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Performs the opposite of <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">af::unwrap()</a>. </p>
<p >More specifically, wrap takes each column (or row if <code>is_column</code> is false) of the \(m \times n\) input array and reshapes them into <code>wx</code> \(\times\) <code>wy</code> patches (where \(m =\) <code>wx</code> \(\times\) <code>wy</code>) of the <code>ox</code> \(\times\) <code>oy</code> output array. Wrap is typically used on an array that has been previously unwrapped - for example, in the case of image processing, one can unwrap an image, process the unwrapped array, and then compose it back into an image using wrap.</p>
<p >The figure below illustrates how wrap works. The process can be visualized as a moving window (orange boxes in the figure) taking a column from the input (top-left), reshaping it into a patch (bottom-left), and then placing that patch on its corresponding position in the output array (right; numbers in yellow show correspondence). It starts placing a patch on the output's top-left corner, then moves <code>sx</code> units along the column, and <code>sy</code> units along the row whenever it exhausts a column. If padding exists in the input array (gray-filled boxes), which typically happens when padding was applied on the previous unwrap, then <code>px</code> and <code>py</code> must be specified in order for the padding to be removed on the output array (in the figure, the output array on the right will actually only contain the inner boxes, size <code>ox</code> \(\times\) <code>oy</code>).</p>
<div class="image">
<img src="wrap_distinct.png" alt=""/>
<div class="caption">
Wrap on a 4x6 input array, using a 2x2 window, 2x2 stride, 1x1 padding. The output array is 3x4</div></div>
<p >There are some things that must be considered when wrapping a previously unwrapped array. First, wrap must use the same parameters that unwrap used, and must use the original array's size (before unwrap) as <code>ox</code> and <code>oy</code>. This is necessary to correctly elicit wrap's behavior as the opposite of unwrap. Second, one must consider whether the previous unwrap used a distinct or sliding window configuration, since the element-wise mapping from the input array to the output depends on the configuration. If the distinct window configuration (the stride is at least as large as the window size) was used, then the mapping is straightforward - each column will map to a unique section in the output array, and therefore each element in the input will map to a unique position in the output (shown in the figure above). However, in the case of the sliding window configuration (the stride is smaller than the window size), some of the columns will map to overlapping sections in the output array, and so elements from multiple columns will map to the same position on the output array. Recomposing the array then requires some way to choose between competing elements to place in that position. To address this contention, wrap simply sums all of the competing elements and places the sum in that position. The figure below illustrates this behavior: the fourth element of the first column and the third element of the second column in the input array both map to the same position on the output array, and thus their sum is placed on that position (this happens on the second and third column of the input as well - they both map to the third element of the second column in the output). Given this behavior, it is up to the user to pre-process the input (unwrapped) array (or post-process the output (wrapped) array) in a way that somehow takes all of the competing elements into consideration.</p>
<div class="image">
<img src="wrap_sliding.png" alt=""/>
<div class="caption">
Wrap on the same array as above, but with 1x1 stride (sliding window)</div></div>
<p >For inputs that have more than two dimensions, the wrap operation will be applied to each 2D slice of the input. This is especially useful for independently processing each channel of an image (or set of images) - each channel (along the third dimension) on the input corresponds to the same channel on the output, and each image (along the fourth dimension) on the input corresponds to the same image on the output.</p>
<p >Here are some code examples that demonstrate wrap's usage. The first one shows wrapping a previously unwrapped array that used a 1x1 padding and a distinct window configuration. Notice how the arguments used in unwrap are the same as those used in wrap:</p>
<div class="fragment"><div class="line">    <span class="keywordtype">float</span> hA[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};</div>
<div class="line">    array A(dim4(3, 3), hA);</div>
<div class="line">    <span class="comment">//  1.     4.     7.</span></div>
<div class="line">    <span class="comment">//  2.     5.     8.</span></div>
<div class="line">    <span class="comment">//  3.     6.     9.</span></div>
<div class="line"> </div>
<div class="line">    array A_unwrapped = unwrap(A, 2, 2,  <span class="comment">// window size</span></div>
<div class="line">                               2, 2,     <span class="comment">// stride (distinct)</span></div>
<div class="line">                               1, 1);    <span class="comment">// padding</span></div>
<div class="line">    <span class="comment">//  0.     0.     0.     5.</span></div>
<div class="line">    <span class="comment">//  0.     0.     4.     6.</span></div>
<div class="line">    <span class="comment">//  0.     2.     0.     8.</span></div>
<div class="line">    <span class="comment">//  1.     3.     7.     9.</span></div>
<div class="line"> </div>
<div class="line">    array A_wrapped = wrap(A_unwrapped, 3, 3,  <span class="comment">// A&#39;s size</span></div>
<div class="line">                           2, 2,               <span class="comment">// window size</span></div>
<div class="line">                           2, 2,               <span class="comment">// stride (distinct)</span></div>
<div class="line">                           1, 1);              <span class="comment">// padding</span></div>
<div class="line">    <span class="comment">//  1.     4.     7.</span></div>
<div class="line">    <span class="comment">//  2.     5.     8.</span></div>
<div class="line">    <span class="comment">//  3.     6.     9.</span></div>
</div><!-- fragment --><p >The next one shows what happens when both unwrap and wrap uses the sliding window configuration. Notice how the original array is not recovered through wrap; instead, overlapping elements are summed, just as described above:</p>
<div class="fragment"><div class="line">    <span class="keywordtype">float</span> hB[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};</div>
<div class="line">    array B(dim4(3, 3), hB);</div>
<div class="line">    <span class="comment">//  1.     1.     1.</span></div>
<div class="line">    <span class="comment">//  1.     1.     1.</span></div>
<div class="line">    <span class="comment">//  1.     1.     1.</span></div>
<div class="line">    array B_unwrapped = unwrap(B, 2, 2,  <span class="comment">// window size</span></div>
<div class="line">                               1, 1);    <span class="comment">// stride (sliding)</span></div>
<div class="line">    <span class="comment">//  1.     1.     1.     1.</span></div>
<div class="line">    <span class="comment">//  1.     1.     1.     1.</span></div>
<div class="line">    <span class="comment">//  1.     1.     1.     1.</span></div>
<div class="line">    <span class="comment">//  1.     1.     1.     1.</span></div>
<div class="line">    array B_wrapped = wrap(B_unwrapped, 3, 3,  <span class="comment">// B&#39;s size</span></div>
<div class="line">                           2, 2,               <span class="comment">// window size</span></div>
<div class="line">                           1, 1);              <span class="comment">// stride (sliding)</span></div>
<div class="line">    <span class="comment">//  1.     2.     1.</span></div>
<div class="line">    <span class="comment">//  2.     4.     2.</span></div>
<div class="line">    <span class="comment">//  1.     2.     1.</span></div>
</div><!-- fragment --><p >Note that the actual implementation of unwrap may not match the way the operation is visualized above, but the effect should be the same.</p>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="gaace920603110e045a0e251ca8ca4377c" name="gaace920603110e045a0e251ca8ca4377c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaace920603110e045a0e251ca8ca4377c">&#9670;&#160;</a></span>af_wrap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_wrap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>ox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>oy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>px</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>py</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_column</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for performing the opposite of <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">af::unwrap()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is an array with the input's columns (or rows) reshaped as patches </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ox</td><td>is the output's dimension 0 size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oy</td><td>is the output's dimension 1 size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wx</td><td>is the window size along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wy</td><td>is the window size along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sx</td><td>is the stride along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sy</td><td>is the stride along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">px</td><td>is the padding along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">py</td><td>is the padding along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_column</td><td>determines whether an output patch is formed from a column (if true) or a row (if false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the color transformation is successful, otherwise an appropriate error code is returned.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Wrap is typically used to recompose an unwrapped image. If this is the case, use the same parameters that were used in <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">af::unwrap()</a>. Also use the original image size (before unwrap) for <code>ox</code> and <code>oy</code>. </dd>
<dd>
The window/patch size, <code>wx</code> \(\times\) <code>wy</code>, must equal <code>input.dims(0)</code> (or <code>input.dims(1)</code> if <code>is_column</code> is false). </dd>
<dd>
<code>sx</code> and <code>sy</code> must be at least 1 </dd>
<dd>
<code>px</code> and <code>py</code> must be between [0, wx) and [0, wy), respectively </dd>
<dd>
The number of patches, <code>input.dims(1)</code> (or <code>input.dims(0)</code> if <code>is_column</code> is false), must equal \(nx \times\ ny\), where \(\displaystyle nx = \frac{ox + 2px - wx}{sx} + 1\) and \(\displaystyle ny = \frac{oy + 2py - wy}{sy} + 1\) </dd>
<dd>
Batched wrap can be performed on multiple 2D slices at once if <code>in</code> is three or four-dimensional </dd></dl>

</div>
</div>
<a id="gaff897271aa30538fff13f60cda494d32" name="gaff897271aa30538fff13f60cda494d32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaff897271aa30538fff13f60cda494d32">&#9670;&#160;</a></span>af_wrap_v2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_wrap_v2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>ox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>oy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>px</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>py</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_column</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for the version of <a class="el" href="group__image__func__wrap.htm#gaace920603110e045a0e251ca8ca4377c">af_wrap</a> that accepts a preallocated output array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is an array with the input's columns (or rows) reshaped as patches </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ox</td><td>is the output's dimension 0 size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oy</td><td>is the output's dimension 1 size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wx</td><td>is the window size along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wy</td><td>is the window size along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sx</td><td>is the stride along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sy</td><td>is the stride along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">px</td><td>is the padding along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">py</td><td>is the padding along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_column</td><td>determines whether an output patch is formed from a column (if true) or a row (if false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the color transformation is successful, otherwise an appropriate error code is returned.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Wrap is typically used to recompose an unwrapped image. If this is the case, use the same parameters that were used in <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">af::unwrap()</a>. Also use the original image size (before unwrap) for <code>ox</code> and <code>oy</code>. </dd>
<dd>
The window/patch size, <code>wx</code> \(\times\) <code>wy</code>, must equal <code>input.dims(0)</code> (or <code>input.dims(1)</code> if <code>is_column</code> is false). </dd>
<dd>
<code>sx</code> and <code>sy</code> must be at least 1 </dd>
<dd>
<code>px</code> and <code>py</code> must be between [0, wx) and [0, wy), respectively </dd>
<dd>
The number of patches, <code>input.dims(1)</code> (or <code>input.dims(0)</code> if <code>is_column</code> is false), must equal \(nx \times\ ny\), where \(\displaystyle nx = \frac{ox + 2px - wx}{sx} + 1\) and \(\displaystyle ny = \frac{oy + 2py - wy}{sy} + 1\) </dd>
<dd>
Batched wrap can be performed on multiple 2D slices at once if <code>in</code> is three or four-dimensional </dd></dl>

</div>
</div>
<a id="ga8270837c6d109f49c783c5ea286b4cea" name="ga8270837c6d109f49c783c5ea286b4cea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8270837c6d109f49c783c5ea286b4cea">&#9670;&#160;</a></span>wrap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> wrap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>ox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>oy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>px</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>py</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_column</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for performing the opposite of <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">unwrap</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ox</td><td>is the output's dimension 0 size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oy</td><td>is the output's dimension 1 size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wx</td><td>is the window size along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wy</td><td>is the window size along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sx</td><td>is the stride along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sy</td><td>is the stride along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">px</td><td>is the padding along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">py</td><td>is the padding along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_column</td><td>determines whether an output patch is formed from a column (if true) or a row (if false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with the input's columns (or rows) reshaped as patches</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Wrap is typically used to recompose an unwrapped image. If this is the case, use the same parameters that were used in <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">unwrap()</a>. Also use the original image size (before unwrap) for <code>ox</code> and <code>oy</code>. </dd>
<dd>
The window/patch size, <code>wx</code> \(\times\) <code>wy</code>, must equal <code>input.dims(0)</code> (or <code>input.dims(1)</code> if <code>is_column</code> is false). </dd>
<dd>
<code>sx</code> and <code>sy</code> must be at least 1 </dd>
<dd>
<code>px</code> and <code>py</code> must be between [0, wx) and [0, wy), respectively </dd>
<dd>
The number of patches, <code>input.dims(1)</code> (or <code>input.dims(0)</code> if <code>is_column</code> is false), must equal \(nx \times\ ny\), where \(\displaystyle nx = \frac{ox + 2px - wx}{sx} + 1\) and \(\displaystyle ny = \frac{oy + 2py - wy}{sy} + 1\) </dd>
<dd>
Batched wrap can be performed on multiple 2D slices at once if <code>in</code> is three or four-dimensional </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:58 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
