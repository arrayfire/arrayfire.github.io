<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>eq</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__arith__func__eq.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">eq<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__mathfunc__mat.htm">Mathematical functions</a> &raquo;  &#124; <a class="el" href="group__logic__mat.htm">Logical operations</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Check if input two inputs are equal.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga76d2da7716831616bb81effa9e163693"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga76d2da7716831616bb81effa9e163693">af_eq</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga76d2da7716831616bb81effa9e163693"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for checking if an array is equal to another.  <a href="#ga76d2da7716831616bb81effa9e163693">More...</a><br /></td></tr>
<tr class="separator:ga76d2da7716831616bb81effa9e163693"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga09dd9c72bd295829fd83e8802f454ca1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga09dd9c72bd295829fd83e8802f454ca1">operator==</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga09dd9c72bd295829fd83e8802f454ca1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.  <a href="group__arith__func__eq.htm#ga09dd9c72bd295829fd83e8802f454ca1">More...</a><br /></td></tr>
<tr class="separator:ga09dd9c72bd295829fd83e8802f454ca1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga71d9cb8d1daea7a99a81c2d0f58dff93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga71d9cb8d1daea7a99a81c2d0f58dff93">operator==</a> (const bool &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga71d9cb8d1daea7a99a81c2d0f58dff93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga71d9cb8d1daea7a99a81c2d0f58dff93">More...</a><br /></td></tr>
<tr class="separator:ga71d9cb8d1daea7a99a81c2d0f58dff93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf63cbcefa16e12397d6a2e5d7aba78d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gadf63cbcefa16e12397d6a2e5d7aba78d">operator==</a> (const int &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gadf63cbcefa16e12397d6a2e5d7aba78d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gadf63cbcefa16e12397d6a2e5d7aba78d">More...</a><br /></td></tr>
<tr class="separator:gadf63cbcefa16e12397d6a2e5d7aba78d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga924652e463b7b1d4a2ce5a2fed9314d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga924652e463b7b1d4a2ce5a2fed9314d4">operator==</a> (const unsigned &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga924652e463b7b1d4a2ce5a2fed9314d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga924652e463b7b1d4a2ce5a2fed9314d4">More...</a><br /></td></tr>
<tr class="separator:ga924652e463b7b1d4a2ce5a2fed9314d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacfbe4ce1e3b2b7f46123318b9e5c7606"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gacfbe4ce1e3b2b7f46123318b9e5c7606">operator==</a> (const char &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gacfbe4ce1e3b2b7f46123318b9e5c7606"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gacfbe4ce1e3b2b7f46123318b9e5c7606">More...</a><br /></td></tr>
<tr class="separator:gacfbe4ce1e3b2b7f46123318b9e5c7606"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38c0a354b9d81b49ee8443052b664c36"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga38c0a354b9d81b49ee8443052b664c36">operator==</a> (const unsigned char &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga38c0a354b9d81b49ee8443052b664c36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga38c0a354b9d81b49ee8443052b664c36">More...</a><br /></td></tr>
<tr class="separator:ga38c0a354b9d81b49ee8443052b664c36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba7d46bd8670b0269f288e0e6a0bdeff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaba7d46bd8670b0269f288e0e6a0bdeff">operator==</a> (const long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaba7d46bd8670b0269f288e0e6a0bdeff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gaba7d46bd8670b0269f288e0e6a0bdeff">More...</a><br /></td></tr>
<tr class="separator:gaba7d46bd8670b0269f288e0e6a0bdeff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5c7deec7b3eb5b2c77a0feb0f6e1823"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaf5c7deec7b3eb5b2c77a0feb0f6e1823">operator==</a> (const unsigned long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaf5c7deec7b3eb5b2c77a0feb0f6e1823"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gaf5c7deec7b3eb5b2c77a0feb0f6e1823">More...</a><br /></td></tr>
<tr class="separator:gaf5c7deec7b3eb5b2c77a0feb0f6e1823"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5e1b61fb42fa7527857372d09b96dd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaf5e1b61fb42fa7527857372d09b96dd2">operator==</a> (const long long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaf5e1b61fb42fa7527857372d09b96dd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gaf5e1b61fb42fa7527857372d09b96dd2">More...</a><br /></td></tr>
<tr class="separator:gaf5e1b61fb42fa7527857372d09b96dd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e7c29e709ad3ab258ce4185a014d4b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga5e7c29e709ad3ab258ce4185a014d4b5">operator==</a> (const unsigned long long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga5e7c29e709ad3ab258ce4185a014d4b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga5e7c29e709ad3ab258ce4185a014d4b5">More...</a><br /></td></tr>
<tr class="separator:ga5e7c29e709ad3ab258ce4185a014d4b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b786e844bdee209e33ab1892f7ca2bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga6b786e844bdee209e33ab1892f7ca2bb">operator==</a> (const double &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga6b786e844bdee209e33ab1892f7ca2bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga6b786e844bdee209e33ab1892f7ca2bb">More...</a><br /></td></tr>
<tr class="separator:ga6b786e844bdee209e33ab1892f7ca2bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2257eddb979ce77f6e2ec30735a71f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaf2257eddb979ce77f6e2ec30735a71f3">operator==</a> (const float &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gaf2257eddb979ce77f6e2ec30735a71f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gaf2257eddb979ce77f6e2ec30735a71f3">More...</a><br /></td></tr>
<tr class="separator:gaf2257eddb979ce77f6e2ec30735a71f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac9aa025be72a08fbdc03dfc810349c69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gac9aa025be72a08fbdc03dfc810349c69">operator==</a> (const cfloat &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gac9aa025be72a08fbdc03dfc810349c69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gac9aa025be72a08fbdc03dfc810349c69">More...</a><br /></td></tr>
<tr class="separator:gac9aa025be72a08fbdc03dfc810349c69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabd34b6a39e3c02c8a35e595737510a20"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gabd34b6a39e3c02c8a35e595737510a20">operator==</a> (const cdouble &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gabd34b6a39e3c02c8a35e595737510a20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gabd34b6a39e3c02c8a35e595737510a20">More...</a><br /></td></tr>
<tr class="separator:gabd34b6a39e3c02c8a35e595737510a20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefe15baca31d09915feb3df8d316b5a7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaefe15baca31d09915feb3df8d316b5a7">operator==</a> (const array &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gaefe15baca31d09915feb3df8d316b5a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gaefe15baca31d09915feb3df8d316b5a7">More...</a><br /></td></tr>
<tr class="separator:gaefe15baca31d09915feb3df8d316b5a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd048bb97605e11a8829194a296a6307"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gafd048bb97605e11a8829194a296a6307">operator==</a> (const array &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:gafd048bb97605e11a8829194a296a6307"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gafd048bb97605e11a8829194a296a6307">More...</a><br /></td></tr>
<tr class="separator:gafd048bb97605e11a8829194a296a6307"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacbec52639189ee7adf8ac72eb622ee4e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gacbec52639189ee7adf8ac72eb622ee4e">operator==</a> (const array &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:gacbec52639189ee7adf8ac72eb622ee4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gacbec52639189ee7adf8ac72eb622ee4e">More...</a><br /></td></tr>
<tr class="separator:gacbec52639189ee7adf8ac72eb622ee4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f16b3b144e766b14180935279f03517"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga6f16b3b144e766b14180935279f03517">operator==</a> (const array &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga6f16b3b144e766b14180935279f03517"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga6f16b3b144e766b14180935279f03517">More...</a><br /></td></tr>
<tr class="separator:ga6f16b3b144e766b14180935279f03517"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f1d21eb0ac93ace6ee8347b5edd9a54"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga5f1d21eb0ac93ace6ee8347b5edd9a54">operator==</a> (const array &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga5f1d21eb0ac93ace6ee8347b5edd9a54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga5f1d21eb0ac93ace6ee8347b5edd9a54">More...</a><br /></td></tr>
<tr class="separator:ga5f1d21eb0ac93ace6ee8347b5edd9a54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf505747436be5b8b8efd658ffedfba0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaaf505747436be5b8b8efd658ffedfba0">operator==</a> (const array &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:gaaf505747436be5b8b8efd658ffedfba0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gaaf505747436be5b8b8efd658ffedfba0">More...</a><br /></td></tr>
<tr class="separator:gaaf505747436be5b8b8efd658ffedfba0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga053ccd901d2c871d9888a731a85ff134"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga053ccd901d2c871d9888a731a85ff134">operator==</a> (const array &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga053ccd901d2c871d9888a731a85ff134"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga053ccd901d2c871d9888a731a85ff134">More...</a><br /></td></tr>
<tr class="separator:ga053ccd901d2c871d9888a731a85ff134"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5b75c44883b18e133159bc0b5c79227"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaf5b75c44883b18e133159bc0b5c79227">operator==</a> (const array &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gaf5b75c44883b18e133159bc0b5c79227"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gaf5b75c44883b18e133159bc0b5c79227">More...</a><br /></td></tr>
<tr class="separator:gaf5b75c44883b18e133159bc0b5c79227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b830feb1ceada24645a6dfab6a18b6b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga9b830feb1ceada24645a6dfab6a18b6b">operator==</a> (const array &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga9b830feb1ceada24645a6dfab6a18b6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga9b830feb1ceada24645a6dfab6a18b6b">More...</a><br /></td></tr>
<tr class="separator:ga9b830feb1ceada24645a6dfab6a18b6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga217fac85597820c4ab7d7efa6c126665"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga217fac85597820c4ab7d7efa6c126665">operator==</a> (const array &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga217fac85597820c4ab7d7efa6c126665"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga217fac85597820c4ab7d7efa6c126665">More...</a><br /></td></tr>
<tr class="separator:ga217fac85597820c4ab7d7efa6c126665"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga938398197988f97eb5f51119fcdebff8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga938398197988f97eb5f51119fcdebff8">operator==</a> (const array &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga938398197988f97eb5f51119fcdebff8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga938398197988f97eb5f51119fcdebff8">More...</a><br /></td></tr>
<tr class="separator:ga938398197988f97eb5f51119fcdebff8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b2ecdbbb25eb403b1b6a60ad7e27f1d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga8b2ecdbbb25eb403b1b6a60ad7e27f1d">operator==</a> (const array &amp;lhs, const cfloat &amp;rhs)</td></tr>
<tr class="memdesc:ga8b2ecdbbb25eb403b1b6a60ad7e27f1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga8b2ecdbbb25eb403b1b6a60ad7e27f1d">More...</a><br /></td></tr>
<tr class="separator:ga8b2ecdbbb25eb403b1b6a60ad7e27f1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9db34e9c766cd6b24e5f84bbdc36dc13"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga9db34e9c766cd6b24e5f84bbdc36dc13">operator==</a> (const array &amp;lhs, const cdouble &amp;rhs)</td></tr>
<tr class="memdesc:ga9db34e9c766cd6b24e5f84bbdc36dc13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga9db34e9c766cd6b24e5f84bbdc36dc13">More...</a><br /></td></tr>
<tr class="separator:ga9db34e9c766cd6b24e5f84bbdc36dc13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7ae0c807ef6a9668acef93bb618644f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gad7ae0c807ef6a9668acef93bb618644f">operator==</a> (const short &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gad7ae0c807ef6a9668acef93bb618644f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gad7ae0c807ef6a9668acef93bb618644f">More...</a><br /></td></tr>
<tr class="separator:gad7ae0c807ef6a9668acef93bb618644f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae22e5dcb1cfde6cac67bdd6a1f0e877d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gae22e5dcb1cfde6cac67bdd6a1f0e877d">operator==</a> (const unsigned short &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gae22e5dcb1cfde6cac67bdd6a1f0e877d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#gae22e5dcb1cfde6cac67bdd6a1f0e877d">More...</a><br /></td></tr>
<tr class="separator:gae22e5dcb1cfde6cac67bdd6a1f0e877d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a9e45d677758a05e58af857c655cd82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga6a9e45d677758a05e58af857c655cd82">operator==</a> (const array &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga6a9e45d677758a05e58af857c655cd82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga6a9e45d677758a05e58af857c655cd82">More...</a><br /></td></tr>
<tr class="separator:ga6a9e45d677758a05e58af857c655cd82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga22c90a58d9fd67a8a351153532558d33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga22c90a58d9fd67a8a351153532558d33">operator==</a> (const array &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="memdesc:ga22c90a58d9fd67a8a351153532558d33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__eq.htm#ga22c90a58d9fd67a8a351153532558d33">More...</a><br /></td></tr>
<tr class="separator:ga22c90a58d9fd67a8a351153532558d33"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Check if input two inputs are equal. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga76d2da7716831616bb81effa9e163693"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_eq </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>batch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for checking if an array is equal to another. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain result of <code>lhs</code> == <code>rhs</code>. out is of type b8 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch</td><td>specifies if operations need to be performed in batch mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a class="anchor" id="ga22c90a58d9fd67a8a351153532558d33"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga6a9e45d677758a05e58af857c655cd82"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gae22e5dcb1cfde6cac67bdd6a1f0e877d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gad7ae0c807ef6a9668acef93bb618644f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga9db34e9c766cd6b24e5f84bbdc36dc13"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga8b2ecdbbb25eb403b1b6a60ad7e27f1d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga938398197988f97eb5f51119fcdebff8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga217fac85597820c4ab7d7efa6c126665"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga9b830feb1ceada24645a6dfab6a18b6b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf5b75c44883b18e133159bc0b5c79227"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga053ccd901d2c871d9888a731a85ff134"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaaf505747436be5b8b8efd658ffedfba0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga5f1d21eb0ac93ace6ee8347b5edd9a54"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga6f16b3b144e766b14180935279f03517"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gacbec52639189ee7adf8ac72eb622ee4e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafd048bb97605e11a8829194a296a6307"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaefe15baca31d09915feb3df8d316b5a7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gabd34b6a39e3c02c8a35e595737510a20"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gac9aa025be72a08fbdc03dfc810349c69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf2257eddb979ce77f6e2ec30735a71f3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga6b786e844bdee209e33ab1892f7ca2bb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga5e7c29e709ad3ab258ce4185a014d4b5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf5e1b61fb42fa7527857372d09b96dd2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf5c7deec7b3eb5b2c77a0feb0f6e1823"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaba7d46bd8670b0269f288e0e6a0bdeff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga38c0a354b9d81b49ee8443052b664c36"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gacfbe4ce1e3b2b7f46123318b9e5c7606"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga924652e463b7b1d4a2ce5a2fed9314d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gadf63cbcefa16e12397d6a2e5d7aba78d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga71d9cb8d1daea7a99a81c2d0f58dff93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga09dd9c72bd295829fd83e8802f454ca1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an equality operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array of type b8 with the equality operation performed on each element </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
