<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: machine_learning/rbm.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('machine_learning_2rbm_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">machine_learning/rbm.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;mnist_common.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">using </span>std::vector;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">float</span> accuracy(<span class="keyword">const</span> <a id="_a0" name="_a0"></a><a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;predicted, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;target) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> val, plabels, tlabels;</div>
<div class="line">    max(val, tlabels, target, 1);</div>
<div class="line">    max(val, plabels, predicted, 1);</div>
<div class="line">    <span class="keywordflow">return</span> 100 * count&lt;float&gt;(plabels == tlabels) / tlabels.<a id="a1" name="a1"></a><a class="code hl_function" href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">elements</a>();</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Derivative of the activation function</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> deriv(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;out) { <span class="keywordflow">return</span> out * (1 - out); }</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Cost function</span></div>
<div class="line"><span class="keywordtype">double</span> error(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;out, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;pred) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dif = (out - pred);</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code hl_function" href="group__arith__func__sqrt.htm#gabdfe0e5a01f91a1079451b1e094a6893">sqrt</a>((<span class="keywordtype">double</span>)(sum&lt;float&gt;(dif * dif)));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> binary(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> in) {</div>
<div class="line">    <span class="comment">// Choosing &quot;1&quot; with probability sigmoid(in)</span></div>
<div class="line">    <span class="keywordflow">return</span> (in &gt; <a class="code hl_function" href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">randu</a>(in.<a id="a2" name="a2"></a><a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>())).<a id="a3" name="a3"></a><a class="code hl_function" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a id="a4" name="a4"></a><a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">class </span>rbm {</div>
<div class="line">   <span class="keyword">private</span>:</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> weights;</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> h_bias;</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> v_bias;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Add bias input to the output from previous layer</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> vtoh(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;v) { <span class="keywordflow">return</span> binary(prop_up(v)); }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> htov(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;h) { <span class="keywordflow">return</span> binary(prop_down(h)); }</div>
<div class="line"> </div>
<div class="line">   <span class="keyword">public</span>:</div>
<div class="line">    rbm() {}</div>
<div class="line"> </div>
<div class="line">    rbm(<span class="keywordtype">int</span> v_size, <span class="keywordtype">int</span> h_size)</div>
<div class="line">        : weights(<a class="code hl_function" href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">randu</a>(h_size, v_size) / 100 - 0.05)</div>
<div class="line">        , h_bias(<a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(0, 1, h_size))</div>
<div class="line">        , v_bias(<a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(0, 1, v_size)) {}</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> prop_up(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;v) {</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> h_bias_tile = <a class="code hl_function" href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">tile</a>(h_bias, v.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0));</div>
<div class="line">        <span class="keywordflow">return</span> <a class="code hl_function" href="group__arith__func__sigmoid.htm#ga25484c08c4af7cc892c45e92b5a5ae43">sigmoid</a>(h_bias_tile + <a class="code hl_function" href="group__blas__func__matmul.htm#gaf308bc06987aa90c6ef3f1435a8b00cd">matmulNT</a>(v, weights));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> prop_down(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;h) {</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> v_bias_tile = <a class="code hl_function" href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">tile</a>(v_bias, h.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0));</div>
<div class="line">        <span class="keywordflow">return</span> <a class="code hl_function" href="group__arith__func__sigmoid.htm#ga25484c08c4af7cc892c45e92b5a5ae43">sigmoid</a>(v_bias_tile + <a class="code hl_function" href="group__blas__func__matmul.htm#gac061af289fcd39a07a3efba0f33fb17f">matmul</a>(h, weights));</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">void</span> gibbs_vhv(<a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;vt, <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;ht, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;v, <span class="keywordtype">int</span> k = 1) {</div>
<div class="line">        vt = v;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; k; i++) {</div>
<div class="line">            ht = vtoh(vt);</div>
<div class="line">            vt = htov(ht);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">void</span> gibbs_hvh(<a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;vt, <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;ht, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;h, <span class="keywordtype">int</span> k = 1) {</div>
<div class="line">        ht = h;</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; k; i++) {</div>
<div class="line">            vt = htov(ht);</div>
<div class="line">            ht = vtoh(vt);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">void</span> train(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">double</span> lr = 0.1, <span class="keywordtype">int</span> num_epochs = 15,</div>
<div class="line">               <span class="keywordtype">int</span> batch_size = 100, <span class="keywordtype">int</span> k = 1, <span class="keywordtype">bool</span> verbose = <span class="keyword">false</span>) {</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">int</span> num_samples = in.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches = num_samples / batch_size;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_epochs; i++) {</div>
<div class="line">            <span class="keywordtype">double</span> err = 0;</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_batches - 1; j++) {</div>
<div class="line">                <span class="keywordtype">int</span> st  = j * batch_size;</div>
<div class="line">                <span class="keywordtype">int</span> en  = std::min(num_samples - 1, st + batch_size - 1);</div>
<div class="line">                <span class="keywordtype">int</span> num = en - st + 1;</div>
<div class="line"> </div>
<div class="line">                <a class="code hl_class" href="classaf_1_1array.htm">array</a> v_pos = in(<a id="_a5" name="_a5"></a><a class="code hl_class" href="classaf_1_1seq.htm">seq</a>(st, en), span);</div>
<div class="line"> </div>
<div class="line">                <a class="code hl_class" href="classaf_1_1array.htm">array</a> h_pos = vtoh(v_pos);</div>
<div class="line"> </div>
<div class="line">                <a class="code hl_class" href="classaf_1_1array.htm">array</a> v_neg, h_neg;</div>
<div class="line"> </div>
<div class="line">                gibbs_hvh(v_neg, h_neg, h_pos, k);</div>
<div class="line"> </div>
<div class="line">                <span class="comment">// Update weights</span></div>
<div class="line">                <a class="code hl_class" href="classaf_1_1array.htm">array</a> c_pos = <a class="code hl_function" href="group__blas__func__matmul.htm#gaaf7a46a31434131ceb3d43a93ab0fba3">matmulTN</a>(h_pos, v_pos);</div>
<div class="line">                <a class="code hl_class" href="classaf_1_1array.htm">array</a> c_neg = <a class="code hl_function" href="group__blas__func__matmul.htm#gaaf7a46a31434131ceb3d43a93ab0fba3">matmulTN</a>(h_neg, v_neg);</div>
<div class="line"> </div>
<div class="line">                <a class="code hl_class" href="classaf_1_1array.htm">array</a> delta_w  = lr * (c_pos - c_neg) / num;</div>
<div class="line">                <a class="code hl_class" href="classaf_1_1array.htm">array</a> delta_vb = lr * <a class="code hl_function" href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">sum</a>(v_pos - v_neg) / num;</div>
<div class="line">                <a class="code hl_class" href="classaf_1_1array.htm">array</a> delta_hb = lr * <a class="code hl_function" href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">sum</a>(h_pos - h_neg) / num;</div>
<div class="line"> </div>
<div class="line">                weights += delta_w;</div>
<div class="line">                v_bias += delta_vb;</div>
<div class="line">                h_bias += delta_hb;</div>
<div class="line"> </div>
<div class="line">                <span class="keywordflow">if</span> (verbose) { err += error(v_pos, v_neg); }</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (verbose) {</div>
<div class="line">                printf(<span class="stringliteral">&quot;Epoch %d: Reconstruction error: %0.4f\n&quot;</span>, i + 1,</div>
<div class="line">                       err / num_batches);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (verbose) printf(<span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line">    }</div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> rbm_demo(<span class="keywordtype">bool</span> <span class="comment">/*console*/</span>, <span class="keywordtype">int</span> perc) {</div>
<div class="line">    printf(<span class="stringliteral">&quot;** ArrayFire RBM Demo **\n\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> train_images, test_images;</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> train_target, test_target;</div>
<div class="line">    <span class="keywordtype">int</span> num_classes, num_train, num_test;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Load mnist data</span></div>
<div class="line">    <span class="keywordtype">float</span> frac = (float)(perc) / 100.0;</div>
<div class="line">    setup_mnist&lt;true&gt;(&amp;num_classes, &amp;num_train, &amp;num_test, train_images,</div>
<div class="line">                      test_images, train_target, test_target, frac);</div>
<div class="line"> </div>
<div class="line">    <a id="_a6" name="_a6"></a><a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a> dims = train_images.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>();</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> feature_size = train_images.<a class="code hl_function" href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">elements</a>() / num_train;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Reshape images into feature vectors</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> train_feats = <a class="code hl_function" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">moddims</a>(train_images, feature_size, num_train).<a id="a7" name="a7"></a><a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> test_feats  = <a class="code hl_function" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">moddims</a>(test_images, feature_size, num_test).<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    train_target = train_target.<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    test_target  = test_target.<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    rbm network(train_feats.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), 2000);</div>
<div class="line"> </div>
<div class="line">    network.train(train_feats,</div>
<div class="line">                  0.1,  <span class="comment">// learning rate</span></div>
<div class="line">                  15,   <span class="comment">// num epochs</span></div>
<div class="line">                  100,  <span class="comment">// batch size</span></div>
<div class="line">                  1,    <span class="comment">// k</span></div>
<div class="line">                  <span class="keyword">true</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Test reconstructed images</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; 5; ii++) {</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> in = test_feats(ii, span);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> res, tmp;</div>
<div class="line"> </div>
<div class="line">        network.gibbs_vhv(res, tmp, in);</div>
<div class="line"> </div>
<div class="line">        in  = <a class="code hl_function" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">moddims</a>(in, dims[0], dims[1]);</div>
<div class="line">        res = <a class="code hl_function" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">moddims</a>(res, dims[0], dims[1]);</div>
<div class="line"> </div>
<div class="line">        in  = <a class="code hl_function" href="group__arith__func__round.htm#ga60c90dbd268f909f21cee46e5001f96a">round</a>(in);</div>
<div class="line">        res = <a class="code hl_function" href="group__arith__func__round.htm#ga60c90dbd268f909f21cee46e5001f96a">round</a>(res);</div>
<div class="line"> </div>
<div class="line">        printf(<span class="stringliteral">&quot;Reconstructed Error for image %2d: %.4f\n&quot;</span>, ii,</div>
<div class="line">               sum&lt;float&gt;(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(in - res)) / feature_size);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> perc     = argc &gt; 3 ? atoi(argv[3]) : 60;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a8" name="a8"></a><a class="code hl_function" href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">af::setDevice</a>(device);</div>
<div class="line">        <a id="a9" name="a9"></a><a class="code hl_function" href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a>();</div>
<div class="line">        <span class="keywordflow">return</span> rbm_demo(console, perc);</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a id="_a10" name="_a10"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) { std::cerr &lt;&lt; ae.<a id="a11" name="a11"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>() &lt;&lt; std::endl; }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a5822c6bdfbf4ff01f23c4417934b924c"><div class="ttname"><a href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">af::array::as</a></div><div class="ttdeci">const array as(dtype type) const</div><div class="ttdoc">Casts the array into another data type.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a89f91cdf327a8b304589916db5bde3c2"><div class="ttname"><a href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">af::array::elements</a></div><div class="ttdeci">dim_t elements() const</div><div class="ttdoc">Get the total number of elements across all dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00025">dim4.hpp:26</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:46</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga04a72240299a891b0d950e2c517e4a9e"><div class="ttname"><a href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface to calculate the absolute value.</div></div>
<div class="ttc" id="agroup__arith__func__round_htm_ga60c90dbd268f909f21cee46e5001f96a"><div class="ttname"><a href="group__arith__func__round.htm#ga60c90dbd268f909f21cee46e5001f96a">af::round</a></div><div class="ttdeci">AFAPI array round(const array &amp;in)</div><div class="ttdoc">C++ Interface to round numbers.</div></div>
<div class="ttc" id="agroup__arith__func__sigmoid_htm_ga25484c08c4af7cc892c45e92b5a5ae43"><div class="ttname"><a href="group__arith__func__sigmoid.htm#ga25484c08c4af7cc892c45e92b5a5ae43">af::sigmoid</a></div><div class="ttdeci">AFAPI array sigmoid(const array &amp;in)</div><div class="ttdoc">C++ Interface to evaluate the logistical sigmoid function.</div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_gabdfe0e5a01f91a1079451b1e094a6893"><div class="ttname"><a href="group__arith__func__sqrt.htm#gabdfe0e5a01f91a1079451b1e094a6893">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface to evaluate the square root.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_gaaf7a46a31434131ceb3d43a93ab0fba3"><div class="ttname"><a href="group__blas__func__matmul.htm#gaaf7a46a31434131ceb3d43a93ab0fba3">af::matmulTN</a></div><div class="ttdeci">AFAPI array matmulTN(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">C++ Interface to multiply two matrices.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_gac061af289fcd39a07a3efba0f33fb17f"><div class="ttname"><a href="group__blas__func__matmul.htm#gac061af289fcd39a07a3efba0f33fb17f">af::matmul</a></div><div class="ttdeci">AFAPI array matmul(const array &amp;lhs, const array &amp;rhs, const matProp optLhs=AF_MAT_NONE, const matProp optRhs=AF_MAT_NONE)</div><div class="ttdoc">C++ Interface to multiply two matrices.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_gaf308bc06987aa90c6ef3f1435a8b00cd"><div class="ttname"><a href="group__blas__func__matmul.htm#gaf308bc06987aa90c6ef3f1435a8b00cd">af::matmulNT</a></div><div class="ttdeci">AFAPI array matmulNT(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">C++ Interface to multiply two matrices.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga0db7363474e85542f16e4bbcf57fe842"><div class="ttname"><a href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div><div class="ttdoc">C++ Interface to generate an array with elements set to a specified value.</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga3e22b6ff6e0940bb31577bea2863ca27"><div class="ttname"><a href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gad7c36828c21e7efc06a067bbc47d8d3b"><div class="ttname"><a href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga13488a6c9e298fd44dd343347d7b156d"><div class="ttname"><a href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const dim4 &amp;dims)</div><div class="ttdoc">C++ Interface to modify the dimensions of an input array to a specified shape.</div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_gaeba95584319d7d90e2c371391db0083b"><div class="ttname"><a href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div><div class="ttdoc">C++ Interface to generate a tiled array.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_ga828798e84ab467f6f8568830f1c853f3"><div class="ttname"><a href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div><div class="ttdoc">C++ Interface to create an array of random numbers uniformly distributed.</div></div>
<div class="ttc" id="agroup__reduce__func__sum_htm_ga5eb9a966c94aa56af61707c91637e8df"><div class="ttname"><a href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">af::sum</a></div><div class="ttdeci">AFAPI array sum(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface to sum array elements over a given dimension.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:54 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
