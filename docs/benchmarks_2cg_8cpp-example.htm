<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: benchmarks/cg.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('benchmarks_2cg_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">benchmarks/cg.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * https://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">size_t</span> dimension         = 4 * 1024;</div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> maxIter        = 10;</div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> sparsityFactor = 7;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> A;</div>
<div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> spA;  <span class="comment">// Sparse A</span></div>
<div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> x0;</div>
<div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> b;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> setupInputs() {</div>
<div class="line">    <span class="comment">// Generate a random input: A</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> T = <a name="a1"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(dimension, dimension, <a name="a2"></a><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">    <span class="comment">// Create 0s in input.</span></div>
<div class="line">    <span class="comment">// Anything that is no divisible by sparsityFactor will become 0.</span></div>
<div class="line">    A = <a name="a3"></a><a class="code" href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">floor</a>(T * 1000);</div>
<div class="line">    A = A * ((A % sparsityFactor) == 0) / 1000;</div>
<div class="line">    <span class="comment">// Make it positive definite</span></div>
<div class="line">    A = <a name="a4"></a><a class="code" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>(A) + A + A.<a name="a5"></a><a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0) * <a name="a6"></a><a class="code" href="group__data__func__identity.htm#gafd8247e22fdb50218926d5d9391fa678">identity</a>(A.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), A.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Make A sparse as spA</span></div>
<div class="line">    spA = <a name="a7"></a><a class="code" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">sparse</a>(A);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Generate x0: Random guess</span></div>
<div class="line">    x0 = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(A.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Generate b</span></div>
<div class="line">    b = <a name="a8"></a><a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(A, x0);</div>
<div class="line"> </div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Sparsity of A = &quot;</span></div>
<div class="line">              &lt;&lt; 100.f * (float)<a name="a9"></a><a class="code" href="group__sparse__func__nnz.htm#gaf36b9a489570cc007d1f99cc9bd6d41e">sparseGetNNZ</a>(spA) / (float)spA.<a name="a10"></a><a class="code" href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">elements</a>() &lt;&lt; <span class="stringliteral">&quot;%&quot;</span></div>
<div class="line">              &lt;&lt; std::endl;</div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Memory Usage of A = &quot;</span> &lt;&lt; A.<a name="a11"></a><a class="code" href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541">bytes</a>() / (1024.f * 1024.f)</div>
<div class="line">              &lt;&lt; <span class="stringliteral">&quot; MB&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Memory Usage of spA = &quot;</span></div>
<div class="line">              &lt;&lt; (<a name="a12"></a><a class="code" href="group__sparse__func__values.htm#gaf5c4ce9092dd3470480461d79b75d59d">sparseGetValues</a>(spA).<a class="code" href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541">bytes</a>() + <a name="a13"></a><a class="code" href="group__sparse__func__row__idx.htm#ga3bda3d6aa334ea126b175a84d0b43d46">sparseGetRowIdx</a>(spA).<a class="code" href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541">bytes</a>() +</div>
<div class="line">                  <a name="a14"></a><a class="code" href="group__sparse__func__col__idx.htm#ga1960849b7d65a431216598d2752df46d">sparseGetColIdx</a>(spA).<a class="code" href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541">bytes</a>()) /</div>
<div class="line">                     (1024.f * 1024.f)</div>
<div class="line">              &lt;&lt; <span class="stringliteral">&quot; MB&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> sparseConjugateGradient(<span class="keywordtype">void</span>) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> x = <a name="a15"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, b.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(), <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> r = b - <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(spA, x);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> p = r;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; maxIter; ++i) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Ap        = <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(spA, p);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha_num = <a name="a16"></a><a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(r, r);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha_den = <a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(p, Ap);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha     = alpha_num / alpha_den;</div>
<div class="line">        r -= <a name="a17"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(alpha, Ap.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * Ap;</div>
<div class="line">        x += <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(alpha, Ap.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * p;</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> beta_num = <a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(r, r);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> beta     = beta_num / alpha_num;</div>
<div class="line">        p              = r + <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(beta, p.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * p;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> denseConjugateGradient(<span class="keywordtype">void</span>) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> x = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, b.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(), <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> r = b - <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(A, x);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> p = r;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; maxIter; ++i) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Ap        = <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(A, p);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha_num = <a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(r, r);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha_den = <a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(p, Ap);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha     = alpha_num / alpha_den;</div>
<div class="line">        r -= <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(alpha, Ap.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * Ap;</div>
<div class="line">        x += <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(alpha, Ap.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * p;</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> beta_num = <a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(r, r);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> beta     = beta_num / alpha_num;</div>
<div class="line">        p              = r + <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(beta, p.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * p;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> checkConjugateGradient(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">af::array</a> in) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> x = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, b.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(), <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> r = b - <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(in, x);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> p = r;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; maxIter; ++i) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Ap        = <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(in, p);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha_num = <a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(r, r);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha_den = <a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(p, Ap);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> alpha     = alpha_num / alpha_den;</div>
<div class="line">        r -= <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(alpha, Ap.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * Ap;</div>
<div class="line">        x += <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(alpha, Ap.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * p;</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> beta_num = <a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(r, r);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> beta     = beta_num / alpha_num;</div>
<div class="line">        p              = r + <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(beta, p.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()) * p;</div>
<div class="line">    }</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> res = x0 - x;</div>
<div class="line"> </div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Final difference in solutions:\n&quot;</span>;</div>
<div class="line">    <a name="a18"></a><a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(<a class="code" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a>(res, res));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span>, <span class="keywordtype">char</span> **) {</div>
<div class="line">    <a name="a19"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">    setupInputs();</div>
<div class="line"> </div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Verifying Dense Conjugate Gradient:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">    checkConjugateGradient(A);</div>
<div class="line"> </div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Verifying Sparse Conjugate Gradient:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">    checkConjugateGradient(spA);</div>
<div class="line"> </div>
<div class="line">    <a name="a20"></a><a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line"> </div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Dense Conjugate Gradient Time: &quot;</span></div>
<div class="line">              &lt;&lt; <a name="a21"></a><a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(denseConjugateGradient) * 1000 &lt;&lt; <span class="stringliteral">&quot;ms&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"> </div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Sparse Conjugate Gradient Time: &quot;</span></div>
<div class="line">              &lt;&lt; <a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(sparseConjugateGradient) * 1000 &lt;&lt; <span class="stringliteral">&quot;ms&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__sparse__func__col__idx_htm_ga1960849b7d65a431216598d2752df46d"><div class="ttname"><a href="group__sparse__func__col__idx.htm#ga1960849b7d65a431216598d2752df46d">af::sparseGetColIdx</a></div><div class="ttdeci">AFAPI array sparseGetColIdx(const array in)</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_ga63306b6ed967bd1055086db862fe885b"><div class="ttname"><a href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">af::matmul</a></div><div class="ttdeci">AFAPI array matmul(const array &amp;lhs, const array &amp;rhs, const matProp optLhs=AF_MAT_NONE, const matProp optRhs=AF_MAT_NONE)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a9ffb3ceefb515e1778cf8c4d5e29db59"><div class="ttname"><a href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">af::timeit</a></div><div class="ttdeci">AFAPI double timeit(void(*fn)())</div></div>
<div class="ttc" id="autil_8h_htm_a6de8e7f9eb3914d1cea66e55e7b791d3"><div class="ttname"><a href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a></div><div class="ttdeci">#define af_print(...)</div><div class="ttdef"><b>Definition:</b> <a href="util_8h_source.htm#l00149">util.h:148</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a89f91cdf327a8b304589916db5bde3c2"><div class="ttname"><a href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">af::array::elements</a></div><div class="ttdeci">dim_t elements() const</div><div class="ttdoc">Get the total number of elements across all dimensions of the array.</div></div>
<div class="ttc" id="agroup__sparse__func__create_htm_gae9a843c7e93b05e6b090ca32b271ebe9"><div class="ttname"><a href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">af::sparse</a></div><div class="ttdeci">AFAPI array sparse(const dim_t nRows, const dim_t nCols, const array values, const array rowIdx, const array colIdx, const af::storage stype=AF_STORAGE_CSR)</div><div class="ttdoc">This function converts af::array of values, row indices and column indices into a sparse array.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="agroup__sparse__func__values_htm_gaf5c4ce9092dd3470480461d79b75d59d"><div class="ttname"><a href="group__sparse__func__values.htm#gaf5c4ce9092dd3470480461d79b75d59d">af::sparseGetValues</a></div><div class="ttdeci">AFAPI array sparseGetValues(const array in)</div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_ga3548059d64e0cefc7fedb4ec28321d32"><div class="ttname"><a href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a3b73c6479b9490ad49b8156e14473541"><div class="ttname"><a href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541">af::array::bytes</a></div><div class="ttdeci">size_t bytes() const</div><div class="ttdoc">Get the size of the array in bytes.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="agroup__sparse__func__row__idx_htm_ga3bda3d6aa334ea126b175a84d0b43d46"><div class="ttname"><a href="group__sparse__func__row__idx.htm#ga3bda3d6aa334ea126b175a84d0b43d46">af::sparseGetRowIdx</a></div><div class="ttdeci">AFAPI array sparseGetRowIdx(const array in)</div></div>
<div class="ttc" id="agroup__arith__func__floor_htm_ga3e75b4b34f55a6ce68cfa762eff995a6"><div class="ttname"><a href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">af::floor</a></div><div class="ttdeci">AFAPI array floor(const array &amp;in)</div><div class="ttdoc">C++ Interface for flooring an array of numbers.</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="agroup__device__func__sync_htm_ga8c5d51841cf4f2ddbdd6a3146cf2b390"><div class="ttname"><a href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a></div><div class="ttdeci">AFAPI void sync(const int device=-1)</div><div class="ttdoc">Blocks until the device is finished processing.</div></div>
<div class="ttc" id="agroup__data__func__identity_htm_gafd8247e22fdb50218926d5d9391fa678"><div class="ttname"><a href="group__data__func__identity.htm#gafd8247e22fdb50218926d5d9391fa678">af::identity</a></div><div class="ttdeci">AFAPI array identity(const dim4 &amp;dims, const dtype ty=f32)</div></div>
<div class="ttc" id="agroup__blas__func__dot_htm_ga355c7b2d393a3a215d9d204dd16a3930"><div class="ttname"><a href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">af::dot</a></div><div class="ttdeci">T dot(const array &amp;lhs, const array &amp;rhs, const matProp optLhs=AF_MAT_NONE, const matProp optRhs=AF_MAT_NONE)</div><div class="ttdoc">Dot Product.</div></div>
<div class="ttc" id="agroup__sparse__func__nnz_htm_gaf36b9a489570cc007d1f99cc9bd6d41e"><div class="ttname"><a href="group__sparse__func__nnz.htm#gaf36b9a489570cc007d1f99cc9bd6d41e">af::sparseGetNNZ</a></div><div class="ttdeci">AFAPI dim_t sparseGetNNZ(const array in)</div></div>
<div class="ttc" id="agroup__blas__func__transpose_htm_ga63a8e47707874b9d2ba9b9af0b159591"><div class="ttname"><a href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">af::transpose</a></div><div class="ttdeci">AFAPI array transpose(const array &amp;in, const bool conjugate=false)</div><div class="ttdoc">Transposes a matrix.</div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
