<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>/Users/mlloreda/work/af/v3.6/arrayfire-docs-v3.6/docs/pages/forge_visualization.md Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('forge__visualization_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">/Users/mlloreda/work/af/v3.6/arrayfire-docs-v3.6/docs/pages/forge_visualization.md</div>  </div>
</div><!--header-->
<div class="contents">
<a href="forge__visualization_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Visualizing af::array with Forge {#forge_visualization}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;===================</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;Arrayfire as a library aims to provide a robust and easy to use platform for</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;high-performance, parallel and GPU computing.</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;[TOC]</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;The goal of [Forge](https://github.com/arrayfire/forge), an OpenGL visualization</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;library, is to provide equally robust visualizations that are interoperable</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;between Arrayfire data-structures and an OpenGL context.</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;Arrayfire provides wrapper functions that are designed to be a simple interface</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;to visualize af::arrays. These functions perform various interop tasks. One in</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;particular is that instead of wasting time copying and reformatting data from</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;the GPU to the host and back to the GPU, we can draw directly from GPU-data to</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;GPU-framebuffers! This saves 2 memory copies.</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;Let&#39;s see exactly what visuals we can illuminate with forge and how Arrayfire</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;anneals the data between the two libraries.</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;# Setup {#setup}</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;Before we can call Forge functions, we need to set up the related &quot;canvas&quot; classes.</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;Forge functions are tied to the af::Window class. First let&#39;s create a window:</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;const static int width = 512, height = 512;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;af::Window window(width, height, &quot;2D plot example title&quot;);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;do{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;//drawing functions here</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;} while( !window.close() );</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;We also added a drawing loop, so now we can use Forge&#39;s drawing functions to </div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;draw to the window.</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;The drawing functions present in Forge are listed below.</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;# Rendering Functions {#render_func}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;Documentation for rendering functions can be found [here](\ref gfx_func_draw).</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;## Image {#image}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;The af::Window::image() function can be used to plot grayscale or color images.</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;To plot a grayscale image a 2d array should be passed into the function.</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;Let&#39;s see this on a static noise example:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;array img = constant(0, width, height); //make a black image</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;array random = randu(width, height);      //make random [0,1] distribution</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;img(random &gt; 0.5) = 1; //set all pixels where distribution &gt; 0.5 to white</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;window.image(img);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;&lt;img src=&quot;gfx_docs_images/noise.png&quot; alt=&quot;Forge image plot of noise&quot; width=&quot;20%&quot; /&gt;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;Tweaking the previous example by giving our image a depth of 3 for the RGB values</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;allows us to generate colorful noise:</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;array img = 255 * randu(width, height, 3);      //make random [0, 255] distribution</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;window.image( img.as(u8) );</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;&lt;img src=&quot;gfx_docs_images/color_noise.png&quot; alt=&quot;Forge image plot of color noise&quot; width=&quot;20%&quot; /&gt;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;Note that Forge automatically handles any af::array type passed from Arrayfire.</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;In the first example we passed in an image of floats in the range [0, 1].</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;In the last example we cast our array to an unsigned byte array with the range</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;[0, 255]. The type-handling properties are consistent for all Forge drawing functions.</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;## Plot {#plot}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;The af::Window::plot() function visualizes an array as a 2d-line plot. Let&#39;s see</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;a simple example:</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;array X = seq(-af::Pi, af::Pi, 0.01);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;array Y = sin(X);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;window.plot(X, Y);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;&lt;img src=&quot;gfx_docs_images/sin_plot.png&quot; alt=&quot;Forge 2d line plot of sin() function&quot; width=&quot;30%&quot; /&gt;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;The plot function has the signature:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;&gt; **void plot( const array &amp;X, const array &amp;Y, const char * const title = NULL );**</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;Both the x and y coordinates of the points are required to plot. This allows for</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;non-uniform, or parametric plots:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;array t = seq(0, 100, 0.01);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;array X = sin(t) * (exp(cos(t)) - 2 * cos(4 * t) - pow(sin(t / 12), 5));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;array Y = cos(t) * (exp(cos(t)) - 2 * cos(4 * t) - pow(sin(t / 12), 5));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;window.plot(X, Y);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;&lt;img src=&quot;gfx_docs_images/butterfly_plot.png&quot; alt=&quot;Forge 2d line plot of butterfly function&quot; width=&quot;30%&quot; /&gt;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;## Plot3 {#plot3}</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;The af::Window::plot3() function will plot a curve in 3d-space.</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;Its signature is:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;&gt; **void plot3 (const array &amp;in, const char * title = NULL);**</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;The input array expects xyz-triplets in sequential order. The points can be in a</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;flattened one dimensional (*3n x 1*) array, or in one of the (*3 x n*), (*n x 3*) matrix forms.</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;array Z = seq(0.1f, 10.f, 0.01);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;array Y = sin(10 * Z) / Z;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;array X = cos(10 * Z) / Z;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;array Pts = join(1, X, Y, Z);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;//Pts can be passed in as a matrix in the from n x 3, 3 x n</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;//or in the flattened xyz-triplet array with size 3n x 1</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;window.plot3(Pts);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;//both of the following are equally valid</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;//window.plot3(transpose(Pts));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;//window.plot3(flat(Pts));</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;&lt;img src=&quot;gfx_docs_images/spiral_plot3.png&quot; alt=&quot;Forge 3d line plot&quot; width=&quot;40%&quot; /&gt;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;## Histogram {#histogram}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;The af::Window::hist() function renders an input array as a histogram.</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;In our example, the input array will be created with Arrayfire&#39;s histogram()</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;function, which actually counts and bins each sample. The output from histogram()</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;can directly be fed into the af::Window::hist() rendering function.</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;const int BINS = 128; SAMPLES = 9162;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;array norm = randn(SAMPLES);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;array hist_arr = histogram(norm, BINS);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;win.hist(hist_arr, 0, BINS);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;In addition to the histogram array with the number of samples in each bin, the</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;af::Window::hist() function takes two additional parameters -- the minimum and</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;maximum values of all datapoints in the histogram array. This effectively sets</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;the range of the binned data. The full signature of af::Window::hist() is:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;&gt; **void hist(const array &amp; X, const double minval, const double maxval, const char * const title = NULL);**</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;&lt;img src=&quot;gfx_docs_images/norm_histogram.png&quot; alt=&quot;Forge 3d scatter plot&quot; width=&quot;40%&quot; /&gt;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;## Surface {#surface}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;The af::Window::surface() function will plot af::arrays as a 3d surface.</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;array Z = randu(21, 21);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;window.surface(Z, &quot;Random Surface&quot;);    //equal to next function call</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;//window.surface( seq(-1, 1, 0.1), seq(-1, 1, 0.1), Z, &quot;Random Surface&quot;);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;&lt;img src=&quot;gfx_docs_images/rand_surface.png&quot; alt=&quot;Forge random surface plot&quot; width=&quot;30%&quot; /&gt;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;There are two overloads for the af::Window::surface() function:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;&gt; **void surface (const array &amp; S, const char * const title )**</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;&gt; // Accepts a 2d matrix with the z values of the surface</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;&gt; **void surface (const array &amp;xVals, const array &amp;yVals, const array &amp;S, const char * const title)**</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;&gt; // accepts additional vectors that define the x,y coordinates for the surface points.</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;The second overload has two options for the x, y coordinate vectors. Assuming a surface grid of size **m x n**:</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; 1. Short vectors defining the spacing along each axis. Vectors will have sizes **m x 1** and **n x 1**.</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; 2. Vectors containing the coordinates of each and every point.</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; Each of the vectors will have length **mn x 1**.</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; This can be used for completely non-uniform or parametric surfaces.</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;# Conclusion {#conclusion}</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;There is a fairly comprehensive collection of methods to visualize data in Arrayfire.</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;Thanks to the high-performance gpu plotting library Forge, the provided Arrayfire</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;functions not only make visualizations as simple as possible, but keep them as </div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;robust as the rest of the Arrayfire library.</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
