<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: af Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceaf.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">af Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm">array</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi dimensional data container.  <a href="classaf_1_1array.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1dim4.htm">dim4</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic object that represents size and shape.  <a href="classaf_1_1dim4.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01af_1_1cdouble_01_4.htm">dtype_traits&lt; af::cdouble &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01af_1_1cfloat_01_4.htm">dtype_traits&lt; af::cfloat &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01char_01_4.htm">dtype_traits&lt; char &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01double_01_4.htm">dtype_traits&lt; double &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01float_01_4.htm">dtype_traits&lt; float &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01half_01_4.htm">dtype_traits&lt; half &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01int_01_4.htm">dtype_traits&lt; int &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01long_01long_01_4.htm">dtype_traits&lt; long long &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01short_01_4.htm">dtype_traits&lt; short &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01std_1_1complex_3_01double_01_4_01_4.htm">dtype_traits&lt; std::complex&lt; double &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01std_1_1complex_3_01float_01_4_01_4.htm">dtype_traits&lt; std::complex&lt; float &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01unsigned_01_4.htm">dtype_traits&lt; unsigned &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01unsigned_01char_01_4.htm">dtype_traits&lt; unsigned char &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01unsigned_01long_01long_01_4.htm">dtype_traits&lt; unsigned long long &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01unsigned_01short_01_4.htm">dtype_traits&lt; unsigned short &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1event.htm">event</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ RAII interface for manipulating events.  <a href="classaf_1_1event.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1exception.htm">exception</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An ArrayFire exception class.  <a href="classaf_1_1exception.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1features.htm">features</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a feature returned by a feature detector.  <a href="classaf_1_1features.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1index.htm">index</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper for af_index.  <a href="classaf_1_1index.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1randomEngine.htm">randomEngine</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Random Number Generation Engine Class.  <a href="classaf_1_1randomEngine.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1seq.htm">seq</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">seq is used to create sequences for indexing <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>  <a href="classaf_1_1seq.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1timer.htm">timer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal timer object.  <a href="structaf_1_1timer.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1Window.htm">Window</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classaf_1_1Window.htm" title="Window object to render af::arrays.">Window</a> object to render af::arrays.  <a href="classaf_1_1Window.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a686f38b2bf903b7168423db31b8ed17e"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structaf_1_1af__cfloat.htm">af::af_cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a686f38b2bf903b7168423db31b8ed17e">af_cfloat</a></td></tr>
<tr class="separator:a686f38b2bf903b7168423db31b8ed17e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb644ea63cfe438ea51235af80ac8469"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structaf_1_1af__cdouble.htm">af::af_cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#abb644ea63cfe438ea51235af80ac8469">af_cdouble</a></td></tr>
<tr class="separator:abb644ea63cfe438ea51235af80ac8469"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63e29e484b92e217fe817fe78abc4f5f"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structaf_1_1af__cfloat.htm">af::af_cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a></td></tr>
<tr class="separator:a63e29e484b92e217fe817fe78abc4f5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd654c72624253fcd7fd88fe5298aa9a"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structaf_1_1af__cdouble.htm">af::af_cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a></td></tr>
<tr class="separator:acd654c72624253fcd7fd88fe5298aa9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a448f59f3b863561e0fbe00f04dbeca1e"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">dtype</a></td></tr>
<tr class="separator:a448f59f3b863561e0fbe00f04dbeca1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa328f52bf7d2de8150575946f73b13b"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aaa328f52bf7d2de8150575946f73b13b">source</a></td></tr>
<tr class="separator:aaa328f52bf7d2de8150575946f73b13b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ab719402a029bd12093bb06ed44d648"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">af_interp_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8ab719402a029bd12093bb06ed44d648">interpType</a></td></tr>
<tr class="separator:a8ab719402a029bd12093bb06ed44d648"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fb048919b30c86d5e55a7275c48d0a6"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">af_border_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5fb048919b30c86d5e55a7275c48d0a6">borderType</a></td></tr>
<tr class="separator:a5fb048919b30c86d5e55a7275c48d0a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5f01af1e3eb56329923af1f8c64b087"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">af_connectivity</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad5f01af1e3eb56329923af1f8c64b087">connectivity</a></td></tr>
<tr class="separator:ad5f01af1e3eb56329923af1f8c64b087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fbc54212b086e2da368d2926022b4a1"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2fbc54212b086e2da368d2926022b4a1">matchType</a></td></tr>
<tr class="separator:a2fbc54212b086e2da368d2926022b4a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c172c922ec17f2c9857bac0790479eb"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">af_cspace_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9c172c922ec17f2c9857bac0790479eb">CSpace</a></td></tr>
<tr class="separator:a9c172c922ec17f2c9857bac0790479eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e673f8420522770732e9ce08d21701e"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">af_someenum_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4e673f8420522770732e9ce08d21701e">SomeEnum</a></td></tr>
<tr class="separator:a4e673f8420522770732e9ce08d21701e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae820124eb78f8139748517b82f67c63d"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">af_mat_prop</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae820124eb78f8139748517b82f67c63d">trans</a></td></tr>
<tr class="separator:ae820124eb78f8139748517b82f67c63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2a83fe427da320c754bed689d003878"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae2a83fe427da320c754bed689d003878">convMode</a></td></tr>
<tr class="separator:ae2a83fe427da320c754bed689d003878"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af20188b1d2c2b3bcf9c4322baacbd3a7"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">af_conv_domain</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af20188b1d2c2b3bcf9c4322baacbd3a7">convDomain</a></td></tr>
<tr class="separator:af20188b1d2c2b3bcf9c4322baacbd3a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab282c0f20fde4f1be35126023734a7cd"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">af_mat_prop</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ab282c0f20fde4f1be35126023734a7cd">matProp</a></td></tr>
<tr class="separator:ab282c0f20fde4f1be35126023734a7cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9622c24ded435e51b610ba590f91ff2"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574ae">af_colormap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ac9622c24ded435e51b610ba590f91ff2">ColorMap</a></td></tr>
<tr class="separator:ac9622c24ded435e51b610ba590f91ff2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9353f25407feae7798860da3be5d7490"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdd">af_norm_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9353f25407feae7798860da3be5d7490">normType</a></td></tr>
<tr class="separator:a9353f25407feae7798860da3be5d7490"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad570a46373396ff1291de2e74e3bccda"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">af_ycc_std</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad570a46373396ff1291de2e74e3bccda">YCCStd</a></td></tr>
<tr class="separator:ad570a46373396ff1291de2e74e3bccda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe269565ff45bd97459bb3cf2150401e"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6f">af_image_format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#afe269565ff45bd97459bb3cf2150401e">imageFormat</a></td></tr>
<tr class="separator:afe269565ff45bd97459bb3cf2150401e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a413d6206892a435db389f022afc6d8"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af_backend</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4a413d6206892a435db389f022afc6d8">Backend</a></td></tr>
<tr class="separator:a4a413d6206892a435db389f022afc6d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af32df3e457a9ab8750a8d7600c1edda9"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ada5c8e0c0cea5e50765377715ff2c02b">af_marker_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af32df3e457a9ab8750a8d7600c1edda9">markerType</a></td></tr>
<tr class="separator:af32df3e457a9ab8750a8d7600c1edda9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74cf90148af957ec96ee6942c6f8ae93"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">af_moment_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a74cf90148af957ec96ee6942c6f8ae93">momentType</a></td></tr>
<tr class="separator:a74cf90148af957ec96ee6942c6f8ae93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ea5edbb7e84bd66f25c132ca6f438c8"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5ea5edbb7e84bd66f25c132ca6f438c8">storage</a></td></tr>
<tr class="separator:a5ea5edbb7e84bd66f25c132ca6f438c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad864b62ff8f81bf33a1df5647453d1dc"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">af_binary_op</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad864b62ff8f81bf33a1df5647453d1dc">binaryOp</a></td></tr>
<tr class="separator:ad864b62ff8f81bf33a1df5647453d1dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa341d395616c73f5a587c8586e25115"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a82a3bf91d6dd04661c63632d0fbf4934">af_random_engine_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aaa341d395616c73f5a587c8586e25115">randomEngineType</a></td></tr>
<tr class="separator:aaa341d395616c73f5a587c8586e25115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac36806c887ebaedac3bae28831366652"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a179019caba59979e58ec07d81cd25ef2">af_canny_threshold</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ac36806c887ebaedac3bae28831366652">cannyThreshold</a></td></tr>
<tr class="separator:ac36806c887ebaedac3bae28831366652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25da2a597c6a277565e1c11a78506444"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbb">af_flux_function</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a25da2a597c6a277565e1c11a78506444">fluxFunction</a></td></tr>
<tr class="separator:a25da2a597c6a277565e1c11a78506444"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a206f19b6579d41e92bf86927433c0c85"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5">af_diffusion_eq</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a206f19b6579d41e92bf86927433c0c85">diffusionEq</a></td></tr>
<tr class="separator:a206f19b6579d41e92bf86927433c0c85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6970270e3088f5dc1ea08555bc0d9eed"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487b">af_topk_function</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6970270e3088f5dc1ea08555bc0d9eed">topkFunction</a></td></tr>
<tr class="separator:a6970270e3088f5dc1ea08555bc0d9eed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5306a15fe3e16a8b44076ee2b2a8ed80"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5306a15fe3e16a8b44076ee2b2a8ed80">varBias</a></td></tr>
<tr class="separator:a5306a15fe3e16a8b44076ee2b2a8ed80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a811caf1c5dbbd2e1c8daa91f4240a74d"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a201e6b1dd1068c9795168fc25759a17c">af_iterative_deconv_algo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a811caf1c5dbbd2e1c8daa91f4240a74d">iterativeDeconvAlgo</a></td></tr>
<tr class="separator:a811caf1c5dbbd2e1c8daa91f4240a74d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae57101eac95e0d49b21404f33694e54b"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a2bdf5ea652ab094b2e3dcbeebd0b35c6">af_inverse_deconv_algo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae57101eac95e0d49b21404f33694e54b">inverseDeconvAlgo</a></td></tr>
<tr class="separator:ae57101eac95e0d49b21404f33694e54b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89130764412e6c5aebf759a9ec97254c"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">af_conv_gradient_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a89130764412e6c5aebf759a9ec97254c">convGradientType</a></td></tr>
<tr class="separator:a89130764412e6c5aebf759a9ec97254c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad529987e6641d166b1d9e2448fd9212d"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classaf_1_1array.htm">array</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad529987e6641d166b1d9e2448fd9212d">batchFunc_t</a>) (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ad529987e6641d166b1d9e2448fd9212d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052cd0c70f2d9aff3c5d74d8ca56c559"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structaf__half.htm">af_half</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a052cd0c70f2d9aff3c5d74d8ca56c559">half</a></td></tr>
<tr class="separator:a052cd0c70f2d9aff3c5d74d8ca56c559"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33671cc35a44160908e69af74f02b1d1"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structaf_1_1timer.htm">af::timer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a33671cc35a44160908e69af74f02b1d1">timer</a></td></tr>
<tr class="memdesc:a33671cc35a44160908e69af74f02b1d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal timer object.  <a href="namespaceaf.htm#a33671cc35a44160908e69af74f02b1d1">More...</a><br /></td></tr>
<tr class="separator:a33671cc35a44160908e69af74f02b1d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga964a8e7e78dd6d8f4d20c17edf82dbf5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga964a8e7e78dd6d8f4d20c17edf82dbf5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sum of elements in an array.  <a href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">More...</a><br /></td></tr>
<tr class="separator:ga964a8e7e78dd6d8f4d20c17edf82dbf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2176b9ffbc6038cf6cebb19aa7736793"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga2176b9ffbc6038cf6cebb19aa7736793">sum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga2176b9ffbc6038cf6cebb19aa7736793"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sum of elements in an array while replacing nan values.  <a href="group__reduce__func__sum.htm#ga2176b9ffbc6038cf6cebb19aa7736793">More...</a><br /></td></tr>
<tr class="separator:ga2176b9ffbc6038cf6cebb19aa7736793"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga436bf839bf091339678c77cf0534078b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm#ga436bf839bf091339678c77cf0534078b">sumByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga436bf839bf091339678c77cf0534078b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sum of elements along given dimension by key.  <a href="group__reduce__func__sum__by__key.htm#ga436bf839bf091339678c77cf0534078b">More...</a><br /></td></tr>
<tr class="separator:ga436bf839bf091339678c77cf0534078b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9200f1d34c1890633bac5adbf2f25312"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm#ga9200f1d34c1890633bac5adbf2f25312">sumByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga9200f1d34c1890633bac5adbf2f25312"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sum of elements along given dimension by key while replacing nan values.  <a href="group__reduce__func__sum__by__key.htm#ga9200f1d34c1890633bac5adbf2f25312">More...</a><br /></td></tr>
<tr class="separator:ga9200f1d34c1890633bac5adbf2f25312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac132e883d40243c420b4ccfa09ddaa3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gaac132e883d40243c420b4ccfa09ddaa3">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:gaac132e883d40243c420b4ccfa09ddaa3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of elements in an array.  <a href="group__reduce__func__product.htm#gaac132e883d40243c420b4ccfa09ddaa3">More...</a><br /></td></tr>
<tr class="separator:gaac132e883d40243c420b4ccfa09ddaa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga322073dc3d7eefb9403f269840d4ecff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga322073dc3d7eefb9403f269840d4ecff">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga322073dc3d7eefb9403f269840d4ecff"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of elements in an array while replacing nan values.  <a href="group__reduce__func__product.htm#ga322073dc3d7eefb9403f269840d4ecff">More...</a><br /></td></tr>
<tr class="separator:ga322073dc3d7eefb9403f269840d4ecff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga001f04ff52e6fcfd8e8a8534cbd723e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm#ga001f04ff52e6fcfd8e8a8534cbd723e6">productByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga001f04ff52e6fcfd8e8a8534cbd723e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of elements in an array according to a key.  <a href="group__reduce__func__product__by__key.htm#ga001f04ff52e6fcfd8e8a8534cbd723e6">More...</a><br /></td></tr>
<tr class="separator:ga001f04ff52e6fcfd8e8a8534cbd723e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga31b013961c75d71e002fd83c3a20939d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm#ga31b013961c75d71e002fd83c3a20939d">productByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga31b013961c75d71e002fd83c3a20939d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of elements in an array according to a key while replacing nan values.  <a href="group__reduce__func__product__by__key.htm#ga31b013961c75d71e002fd83c3a20939d">More...</a><br /></td></tr>
<tr class="separator:ga31b013961c75d71e002fd83c3a20939d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b1287d1babb569d28bc6ee1c8e8e1ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga2b1287d1babb569d28bc6ee1c8e8e1ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for minimum values in an array.  <a href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">More...</a><br /></td></tr>
<tr class="separator:ga2b1287d1babb569d28bc6ee1c8e8e1ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c57e49e2d6947cf0ed3475ba0c5693a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min__by__key.htm#ga7c57e49e2d6947cf0ed3475ba0c5693a">minByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga7c57e49e2d6947cf0ed3475ba0c5693a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for minimum values in an array according to a key.  <a href="group__reduce__func__min__by__key.htm#ga7c57e49e2d6947cf0ed3475ba0c5693a">More...</a><br /></td></tr>
<tr class="separator:ga7c57e49e2d6947cf0ed3475ba0c5693a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4459daf5a3b081fb4ee15eb49d8c902a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga4459daf5a3b081fb4ee15eb49d8c902a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for maximum values in an array.  <a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">More...</a><br /></td></tr>
<tr class="separator:ga4459daf5a3b081fb4ee15eb49d8c902a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac1957071462ec10da9a7958fe0f6723"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max__by__key.htm#gaac1957071462ec10da9a7958fe0f6723">maxByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:gaac1957071462ec10da9a7958fe0f6723"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for maximum values in an array according to a key.  <a href="group__reduce__func__max__by__key.htm#gaac1957071462ec10da9a7958fe0f6723">More...</a><br /></td></tr>
<tr class="separator:gaac1957071462ec10da9a7958fe0f6723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3f22add3a54fb729a969cf8f669fc2b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gaf3f22add3a54fb729a969cf8f669fc2b">allTrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:gaf3f22add3a54fb729a969cf8f669fc2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking all true values in an array.  <a href="group__reduce__func__all__true.htm#gaf3f22add3a54fb729a969cf8f669fc2b">More...</a><br /></td></tr>
<tr class="separator:gaf3f22add3a54fb729a969cf8f669fc2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35aa2f544c3762a14762de1451f0f141"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a35aa2f544c3762a14762de1451f0f141">allTrueByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:a35aa2f544c3762a14762de1451f0f141"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking all true values in an array according to a key.  <a href="namespaceaf.htm#a35aa2f544c3762a14762de1451f0f141">More...</a><br /></td></tr>
<tr class="separator:a35aa2f544c3762a14762de1451f0f141"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe4c8f22bbfa4288696f2a133b1b619e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#gafe4c8f22bbfa4288696f2a133b1b619e">anyTrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:gafe4c8f22bbfa4288696f2a133b1b619e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking any true values in an array.  <a href="group__reduce__func__any__true.htm#gafe4c8f22bbfa4288696f2a133b1b619e">More...</a><br /></td></tr>
<tr class="separator:gafe4c8f22bbfa4288696f2a133b1b619e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad14de5a58792e166fac5da3deda5dbb9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__anytrue__by__key.htm#gad14de5a58792e166fac5da3deda5dbb9">anyTrueByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:gad14de5a58792e166fac5da3deda5dbb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking any true values in an array according to a key.  <a href="group__reduce__func__anytrue__by__key.htm#gad14de5a58792e166fac5da3deda5dbb9">More...</a><br /></td></tr>
<tr class="separator:gad14de5a58792e166fac5da3deda5dbb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76b6172262aa0e64bf6979c16a40ea3c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#ga76b6172262aa0e64bf6979c16a40ea3c">count</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga76b6172262aa0e64bf6979c16a40ea3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for counting non-zero values in an array.  <a href="group__reduce__func__count.htm#ga76b6172262aa0e64bf6979c16a40ea3c">More...</a><br /></td></tr>
<tr class="separator:ga76b6172262aa0e64bf6979c16a40ea3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad0aef7e7c253d12b376fca59067ee487"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count__by__key.htm#gad0aef7e7c253d12b376fca59067ee487">countByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:gad0aef7e7c253d12b376fca59067ee487"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for counting non-zero values in an array according to a key.  <a href="group__reduce__func__count__by__key.htm#gad0aef7e7c253d12b376fca59067ee487">More...</a><br /></td></tr>
<tr class="separator:gad0aef7e7c253d12b376fca59067ee487"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga27080996b6ea1c422f16da4b06fb76a7"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga27080996b6ea1c422f16da4b06fb76a7"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga27080996b6ea1c422f16da4b06fb76a7">sum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga27080996b6ea1c422f16da4b06fb76a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sum of all elements in an array.  <a href="group__reduce__func__sum.htm#ga27080996b6ea1c422f16da4b06fb76a7">More...</a><br /></td></tr>
<tr class="separator:ga27080996b6ea1c422f16da4b06fb76a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a52bcc5d9a41e291ddb283732ea3adc"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga7a52bcc5d9a41e291ddb283732ea3adc"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga7a52bcc5d9a41e291ddb283732ea3adc">sum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, double nanval)</td></tr>
<tr class="memdesc:ga7a52bcc5d9a41e291ddb283732ea3adc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sum of all elements in an array while replacing nan values.  <a href="group__reduce__func__sum.htm#ga7a52bcc5d9a41e291ddb283732ea3adc">More...</a><br /></td></tr>
<tr class="separator:ga7a52bcc5d9a41e291ddb283732ea3adc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1e3ecae8d63be355c41a54b0fb7b09c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gab1e3ecae8d63be355c41a54b0fb7b09c"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gab1e3ecae8d63be355c41a54b0fb7b09c">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab1e3ecae8d63be355c41a54b0fb7b09c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of all elements in an array.  <a href="group__reduce__func__product.htm#gab1e3ecae8d63be355c41a54b0fb7b09c">More...</a><br /></td></tr>
<tr class="separator:gab1e3ecae8d63be355c41a54b0fb7b09c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9d52d3862f703558a86e99db88c3de50"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga9d52d3862f703558a86e99db88c3de50"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga9d52d3862f703558a86e99db88c3de50">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, double nanval)</td></tr>
<tr class="memdesc:ga9d52d3862f703558a86e99db88c3de50"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of all elements in an array while replacing nan values.  <a href="group__reduce__func__product.htm#ga9d52d3862f703558a86e99db88c3de50">More...</a><br /></td></tr>
<tr class="separator:ga9d52d3862f703558a86e99db88c3de50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8739f890dec19e3f9642ae4678229ca4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga8739f890dec19e3f9642ae4678229ca4"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga8739f890dec19e3f9642ae4678229ca4">min</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga8739f890dec19e3f9642ae4678229ca4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting minimum value of an array.  <a href="group__reduce__func__min.htm#ga8739f890dec19e3f9642ae4678229ca4">More...</a><br /></td></tr>
<tr class="separator:ga8739f890dec19e3f9642ae4678229ca4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga27a8604de959200acd69d20dbede1e32"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga27a8604de959200acd69d20dbede1e32"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga27a8604de959200acd69d20dbede1e32">max</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga27a8604de959200acd69d20dbede1e32"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting maximum value of an array.  <a href="group__reduce__func__max.htm#ga27a8604de959200acd69d20dbede1e32">More...</a><br /></td></tr>
<tr class="separator:ga27a8604de959200acd69d20dbede1e32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd33df6a3470afb073d8537722e7aedf"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gafd33df6a3470afb073d8537722e7aedf"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gafd33df6a3470afb073d8537722e7aedf">allTrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gafd33df6a3470afb073d8537722e7aedf"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking if all values in an array are true.  <a href="group__reduce__func__all__true.htm#gafd33df6a3470afb073d8537722e7aedf">More...</a><br /></td></tr>
<tr class="separator:gafd33df6a3470afb073d8537722e7aedf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9275d7c81c19045beac99103edbbf63"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gae9275d7c81c19045beac99103edbbf63"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#gae9275d7c81c19045beac99103edbbf63">anyTrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gae9275d7c81c19045beac99103edbbf63"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking if any values in an array are true.  <a href="group__reduce__func__any__true.htm#gae9275d7c81c19045beac99103edbbf63">More...</a><br /></td></tr>
<tr class="separator:gae9275d7c81c19045beac99103edbbf63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d9bfd6fdee267ac0eef096321d16470"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga6d9bfd6fdee267ac0eef096321d16470"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#ga6d9bfd6fdee267ac0eef096321d16470">count</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga6d9bfd6fdee267ac0eef096321d16470"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for counting total number of non-zero values in an array.  <a href="group__reduce__func__count.htm#ga6d9bfd6fdee267ac0eef096321d16470">More...</a><br /></td></tr>
<tr class="separator:ga6d9bfd6fdee267ac0eef096321d16470"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4f4b4607803d8fd4fea8e862d3685d15"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga4f4b4607803d8fd4fea8e862d3685d15">min</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;val, <a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga4f4b4607803d8fd4fea8e862d3685d15"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting minimum values and their locations in an array.  <a href="group__reduce__func__min.htm#ga4f4b4607803d8fd4fea8e862d3685d15">More...</a><br /></td></tr>
<tr class="separator:ga4f4b4607803d8fd4fea8e862d3685d15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga22189e6402e433ed7061dfee61ab482b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga22189e6402e433ed7061dfee61ab482b">max</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;val, <a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga22189e6402e433ed7061dfee61ab482b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting maximum values and their locations in an array.  <a href="group__reduce__func__max.htm#ga22189e6402e433ed7061dfee61ab482b">More...</a><br /></td></tr>
<tr class="separator:ga22189e6402e433ed7061dfee61ab482b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8f9827148261c1deea3adde7aa7accdb"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga8f9827148261c1deea3adde7aa7accdb"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga8f9827148261c1deea3adde7aa7accdb">min</a> (T *val, unsigned *idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga8f9827148261c1deea3adde7aa7accdb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting minimum value and its location from the entire array.  <a href="group__reduce__func__min.htm#ga8f9827148261c1deea3adde7aa7accdb">More...</a><br /></td></tr>
<tr class="separator:ga8f9827148261c1deea3adde7aa7accdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab0de5929db14a2449c935ed82acf5153"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gab0de5929db14a2449c935ed82acf5153"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#gab0de5929db14a2449c935ed82acf5153">max</a> (T *val, unsigned *idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab0de5929db14a2449c935ed82acf5153"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting maximum value and its location from the entire array.  <a href="group__reduce__func__max.htm#gab0de5929db14a2449c935ed82acf5153">More...</a><br /></td></tr>
<tr class="separator:gab0de5929db14a2449c935ed82acf5153"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae450135c4ae1bdaa4489804a215f3214"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__accum.htm#gae450135c4ae1bdaa4489804a215f3214">accum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:gae450135c4ae1bdaa4489804a215f3214"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for computing the cumulative sum (inclusive) of an array.  <a href="group__scan__func__accum.htm#gae450135c4ae1bdaa4489804a215f3214">More...</a><br /></td></tr>
<tr class="separator:gae450135c4ae1bdaa4489804a215f3214"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe3e469eb355990345012bbe6393b4c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scan.htm#gabe3e469eb355990345012bbe6393b4c3">scan</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0, <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">binaryOp</a> op=<a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6ca335c219d88e113349f6ce08e830314a1">AF_BINARY_ADD</a>, bool inclusive_scan=true)</td></tr>
<tr class="memdesc:gabe3e469eb355990345012bbe6393b4c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface generalized scan of an array.  <a href="group__scan__func__scan.htm#gabe3e469eb355990345012bbe6393b4c3">More...</a><br /></td></tr>
<tr class="separator:gabe3e469eb355990345012bbe6393b4c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga881c15b2d5ae0dea679eb3fd700ad681"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scanbykey.htm#ga881c15b2d5ae0dea679eb3fd700ad681">scanByKey</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;key, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0, <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">binaryOp</a> op=<a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6ca335c219d88e113349f6ce08e830314a1">AF_BINARY_ADD</a>, bool inclusive_scan=true)</td></tr>
<tr class="memdesc:ga881c15b2d5ae0dea679eb3fd700ad681"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface generalized scan by key of an array.  <a href="group__scan__func__scanbykey.htm#ga881c15b2d5ae0dea679eb3fd700ad681">More...</a><br /></td></tr>
<tr class="separator:ga881c15b2d5ae0dea679eb3fd700ad681"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e677067915477bc4aec1605d80d9b7b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">where</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga1e677067915477bc4aec1605d80d9b7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding the locations of non-zero values in an array.  <a href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">More...</a><br /></td></tr>
<tr class="separator:ga1e677067915477bc4aec1605d80d9b7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab099192b1beeddab1ad14536aba689b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff1.htm#gab099192b1beeddab1ad14536aba689b2">diff1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:gab099192b1beeddab1ad14536aba689b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating first order differences in an array.  <a href="group__calc__func__diff1.htm#gab099192b1beeddab1ad14536aba689b2">More...</a><br /></td></tr>
<tr class="separator:gab099192b1beeddab1ad14536aba689b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad803d1bc99910533a5789c428522aaef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff2.htm#gad803d1bc99910533a5789c428522aaef">diff2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:gad803d1bc99910533a5789c428522aaef"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating second order differences in an array.  <a href="group__calc__func__diff2.htm#gad803d1bc99910533a5789c428522aaef">More...</a><br /></td></tr>
<tr class="separator:gad803d1bc99910533a5789c428522aaef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8d1a62b3e41bfcdeef810a442869b42c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort.htm#ga8d1a62b3e41bfcdeef810a442869b42c">sort</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:ga8d1a62b3e41bfcdeef810a442869b42c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sorting an array.  <a href="group__sort__func__sort.htm#ga8d1a62b3e41bfcdeef810a442869b42c">More...</a><br /></td></tr>
<tr class="separator:ga8d1a62b3e41bfcdeef810a442869b42c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ae274b20379a6c9ef07afb0a8d81eaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__index.htm#ga7ae274b20379a6c9ef07afb0a8d81eaa">sort</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;indices, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:ga7ae274b20379a6c9ef07afb0a8d81eaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sorting an array and getting original indices.  <a href="group__sort__func__sort__index.htm#ga7ae274b20379a6c9ef07afb0a8d81eaa">More...</a><br /></td></tr>
<tr class="separator:ga7ae274b20379a6c9ef07afb0a8d81eaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0c2aa7856108a24d8bfb9a0cdcc84e03"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__keys.htm#ga0c2aa7856108a24d8bfb9a0cdcc84e03">sort</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out_keys, <a class="el" href="classaf_1_1array.htm">array</a> &amp;out_values, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;values, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:ga0c2aa7856108a24d8bfb9a0cdcc84e03"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sorting an array based on keys.  <a href="group__sort__func__sort__keys.htm#ga0c2aa7856108a24d8bfb9a0cdcc84e03">More...</a><br /></td></tr>
<tr class="separator:ga0c2aa7856108a24d8bfb9a0cdcc84e03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73f2f768af96755af50df21e384287c6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__unique.htm#ga73f2f768af96755af50df21e384287c6">setUnique</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_sorted=false)</td></tr>
<tr class="memdesc:ga73f2f768af96755af50df21e384287c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting unique values.  <a href="group__set__func__unique.htm#ga73f2f768af96755af50df21e384287c6">More...</a><br /></td></tr>
<tr class="separator:ga73f2f768af96755af50df21e384287c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa793c080cfa2c5ed7f422479e8e0bfe3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__union.htm#gaa793c080cfa2c5ed7f422479e8e0bfe3">setUnion</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const bool is_unique=false)</td></tr>
<tr class="memdesc:gaa793c080cfa2c5ed7f422479e8e0bfe3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding the union of two arrays.  <a href="group__set__func__union.htm#gaa793c080cfa2c5ed7f422479e8e0bfe3">More...</a><br /></td></tr>
<tr class="separator:gaa793c080cfa2c5ed7f422479e8e0bfe3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae4549aee29c563edfb0b4a444fbf9200"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__intersect.htm#gae4549aee29c563edfb0b4a444fbf9200">setIntersect</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const bool is_unique=false)</td></tr>
<tr class="memdesc:gae4549aee29c563edfb0b4a444fbf9200"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding the intersection of two arrays.  <a href="group__set__func__intersect.htm#gae4549aee29c563edfb0b4a444fbf9200">More...</a><br /></td></tr>
<tr class="separator:gae4549aee29c563edfb0b4a444fbf9200"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga23aa8c28a5ffa9368cc92abb143f5eaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga23aa8c28a5ffa9368cc92abb143f5eaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for absolute value.  <a href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">More...</a><br /></td></tr>
<tr class="separator:ga23aa8c28a5ffa9368cc92abb143f5eaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa93e6a8ca5f77b3fac1bd66113e640e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__arg.htm#gaa93e6a8ca5f77b3fac1bd66113e640e3">arg</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaa93e6a8ca5f77b3fac1bd66113e640e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for arg.  <a href="group__arith__func__arg.htm#gaa93e6a8ca5f77b3fac1bd66113e640e3">More...</a><br /></td></tr>
<tr class="separator:gaa93e6a8ca5f77b3fac1bd66113e640e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e40945580a507ade9909eb2c0c7918c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sign.htm#ga5e40945580a507ade9909eb2c0c7918c">sign</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga5e40945580a507ade9909eb2c0c7918c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting the sign of input.  <a href="group__arith__func__sign.htm#ga5e40945580a507ade9909eb2c0c7918c">More...</a><br /></td></tr>
<tr class="separator:ga5e40945580a507ade9909eb2c0c7918c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafefce014e11cc4b3c3af64a73b28a76b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__round.htm#gafefce014e11cc4b3c3af64a73b28a76b">round</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gafefce014e11cc4b3c3af64a73b28a76b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for rounding an array of numbers.  <a href="group__arith__func__round.htm#gafefce014e11cc4b3c3af64a73b28a76b">More...</a><br /></td></tr>
<tr class="separator:gafefce014e11cc4b3c3af64a73b28a76b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad534184a4627d32fcdd5c00f2040c33f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__trunc.htm#gad534184a4627d32fcdd5c00f2040c33f">trunc</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gad534184a4627d32fcdd5c00f2040c33f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for truncating an array of numbers.  <a href="group__arith__func__trunc.htm#gad534184a4627d32fcdd5c00f2040c33f">More...</a><br /></td></tr>
<tr class="separator:gad534184a4627d32fcdd5c00f2040c33f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e75b4b34f55a6ce68cfa762eff995a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">floor</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga3e75b4b34f55a6ce68cfa762eff995a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for flooring an array of numbers.  <a href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">More...</a><br /></td></tr>
<tr class="separator:ga3e75b4b34f55a6ce68cfa762eff995a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5acbe2232fa02979af707ac3ff4c130"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ceil.htm#gae5acbe2232fa02979af707ac3ff4c130">ceil</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gae5acbe2232fa02979af707ac3ff4c130"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for ceiling an array of numbers.  <a href="group__arith__func__ceil.htm#gae5acbe2232fa02979af707ac3ff4c130">More...</a><br /></td></tr>
<tr class="separator:gae5acbe2232fa02979af707ac3ff4c130"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6fdb44f59fbbffdc55c9c4af29e08f4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac6fdb44f59fbbffdc55c9c4af29e08f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sin.  <a href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">More...</a><br /></td></tr>
<tr class="separator:gac6fdb44f59fbbffdc55c9c4af29e08f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00be564e1f588df68288d2dec8578cb6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga00be564e1f588df68288d2dec8578cb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for cos.  <a href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">More...</a><br /></td></tr>
<tr class="separator:ga00be564e1f588df68288d2dec8578cb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5444749c3b32afa8097eab85634053ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tan.htm#ga5444749c3b32afa8097eab85634053ff">tan</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga5444749c3b32afa8097eab85634053ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for tan.  <a href="group__arith__func__tan.htm#ga5444749c3b32afa8097eab85634053ff">More...</a><br /></td></tr>
<tr class="separator:ga5444749c3b32afa8097eab85634053ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe5fd45fc51441775b1b25d9ee2fd915"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asin.htm#gabe5fd45fc51441775b1b25d9ee2fd915">asin</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gabe5fd45fc51441775b1b25d9ee2fd915"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for arc sin (sin inverse)  <a href="group__arith__func__asin.htm#gabe5fd45fc51441775b1b25d9ee2fd915">More...</a><br /></td></tr>
<tr class="separator:gabe5fd45fc51441775b1b25d9ee2fd915"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac1d7bbca7912df6ed684a34730b48536"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acos.htm#gac1d7bbca7912df6ed684a34730b48536">acos</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac1d7bbca7912df6ed684a34730b48536"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for arc cos (cos inverse)  <a href="group__arith__func__acos.htm#gac1d7bbca7912df6ed684a34730b48536">More...</a><br /></td></tr>
<tr class="separator:gac1d7bbca7912df6ed684a34730b48536"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0033a2ac3f2a0cbe5b5ca10c9049fb24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#ga0033a2ac3f2a0cbe5b5ca10c9049fb24">atan</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga0033a2ac3f2a0cbe5b5ca10c9049fb24"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for arc tan (tan inverse)  <a href="group__arith__func__atan.htm#ga0033a2ac3f2a0cbe5b5ca10c9049fb24">More...</a><br /></td></tr>
<tr class="separator:ga0033a2ac3f2a0cbe5b5ca10c9049fb24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga09209f0d8ffd557608fef6bade1689c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__real.htm#ga09209f0d8ffd557608fef6bade1689c9">real</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga09209f0d8ffd557608fef6bade1689c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting real part from complex array.  <a href="group__arith__func__real.htm#ga09209f0d8ffd557608fef6bade1689c9">More...</a><br /></td></tr>
<tr class="separator:ga09209f0d8ffd557608fef6bade1689c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade4b0cbdc402bc05d45a7f130b1fa865"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__imag.htm#gade4b0cbdc402bc05d45a7f130b1fa865">imag</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gade4b0cbdc402bc05d45a7f130b1fa865"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting imaginary part from complex array.  <a href="group__arith__func__imag.htm#gade4b0cbdc402bc05d45a7f130b1fa865">More...</a><br /></td></tr>
<tr class="separator:gade4b0cbdc402bc05d45a7f130b1fa865"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04a788ad4286ad9483b0d53596bc5da6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__conjg.htm#ga04a788ad4286ad9483b0d53596bc5da6">conjg</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga04a788ad4286ad9483b0d53596bc5da6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting the complex conjugate of input array.  <a href="group__arith__func__conjg.htm#ga04a788ad4286ad9483b0d53596bc5da6">More...</a><br /></td></tr>
<tr class="separator:ga04a788ad4286ad9483b0d53596bc5da6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga42ad4a8882b5259db99b1498742fc9b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sinh.htm#ga42ad4a8882b5259db99b1498742fc9b8">sinh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga42ad4a8882b5259db99b1498742fc9b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sinh.  <a href="group__arith__func__sinh.htm#ga42ad4a8882b5259db99b1498742fc9b8">More...</a><br /></td></tr>
<tr class="separator:ga42ad4a8882b5259db99b1498742fc9b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84729d7c30446d8d4970b067ee67dd3c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cosh.htm#ga84729d7c30446d8d4970b067ee67dd3c">cosh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga84729d7c30446d8d4970b067ee67dd3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for cosh.  <a href="group__arith__func__cosh.htm#ga84729d7c30446d8d4970b067ee67dd3c">More...</a><br /></td></tr>
<tr class="separator:ga84729d7c30446d8d4970b067ee67dd3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga269ab0934aa1ae4157b37c52ab555966"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tanh.htm#ga269ab0934aa1ae4157b37c52ab555966">tanh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga269ab0934aa1ae4157b37c52ab555966"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for tanh.  <a href="group__arith__func__tanh.htm#ga269ab0934aa1ae4157b37c52ab555966">More...</a><br /></td></tr>
<tr class="separator:ga269ab0934aa1ae4157b37c52ab555966"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadcda001087a4a1c6f1d02c93cd9800b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asinh.htm#gadcda001087a4a1c6f1d02c93cd9800b3">asinh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gadcda001087a4a1c6f1d02c93cd9800b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sinh inverse.  <a href="group__arith__func__asinh.htm#gadcda001087a4a1c6f1d02c93cd9800b3">More...</a><br /></td></tr>
<tr class="separator:gadcda001087a4a1c6f1d02c93cd9800b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa8886e4c5160c00ddfb633fedc5583ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acosh.htm#gaa8886e4c5160c00ddfb633fedc5583ad">acosh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaa8886e4c5160c00ddfb633fedc5583ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for cosh inverse.  <a href="group__arith__func__acosh.htm#gaa8886e4c5160c00ddfb633fedc5583ad">More...</a><br /></td></tr>
<tr class="separator:gaa8886e4c5160c00ddfb633fedc5583ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9d1023c1b62e98d5bb783f16e2467e4b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atanh.htm#ga9d1023c1b62e98d5bb783f16e2467e4b">atanh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga9d1023c1b62e98d5bb783f16e2467e4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for tanh inverse.  <a href="group__arith__func__atanh.htm#ga9d1023c1b62e98d5bb783f16e2467e4b">More...</a><br /></td></tr>
<tr class="separator:ga9d1023c1b62e98d5bb783f16e2467e4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6620c73725d82d0227c064f224b82a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gac6620c73725d82d0227c064f224b82a4">root</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac6620c73725d82d0227c064f224b82a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for nth root.  <a href="group__arith__func__root.htm#gac6620c73725d82d0227c064f224b82a4">More...</a><br /></td></tr>
<tr class="separator:gac6620c73725d82d0227c064f224b82a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaafd6dcd40d42724311aef9c1963ecba0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gaafd6dcd40d42724311aef9c1963ecba0">root</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:gaafd6dcd40d42724311aef9c1963ecba0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for nth root.  <a href="group__arith__func__root.htm#gaafd6dcd40d42724311aef9c1963ecba0">More...</a><br /></td></tr>
<tr class="separator:gaafd6dcd40d42724311aef9c1963ecba0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeba5dfdd7d6ffb448a7901637fdc726b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gaeba5dfdd7d6ffb448a7901637fdc726b">root</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaeba5dfdd7d6ffb448a7901637fdc726b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for nth root.  <a href="group__arith__func__root.htm#gaeba5dfdd7d6ffb448a7901637fdc726b">More...</a><br /></td></tr>
<tr class="separator:gaeba5dfdd7d6ffb448a7901637fdc726b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83c8f1181fc87c30d649f3f1eb26a860"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">sigmoid</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:a83c8f1181fc87c30d649f3f1eb26a860"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating sigmoid function of an array.  <a href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">More...</a><br /></td></tr>
<tr class="separator:a83c8f1181fc87c30d649f3f1eb26a860"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9ddbaf0852fbf988400b9677705b2a00"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga9ddbaf0852fbf988400b9677705b2a00"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for exponential of an array.  <a href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">More...</a><br /></td></tr>
<tr class="separator:ga9ddbaf0852fbf988400b9677705b2a00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae085a00e6da69ca27ecc660552ab61f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__expm1.htm#gae085a00e6da69ca27ecc660552ab61f9">expm1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gae085a00e6da69ca27ecc660552ab61f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for exponential of an array minus 1.  <a href="group__arith__func__expm1.htm#gae085a00e6da69ca27ecc660552ab61f9">More...</a><br /></td></tr>
<tr class="separator:gae085a00e6da69ca27ecc660552ab61f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0c72883728c09d5442bb6b6f5a4d5eee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erf.htm#ga0c72883728c09d5442bb6b6f5a4d5eee">erf</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga0c72883728c09d5442bb6b6f5a4d5eee"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for error function value.  <a href="group__arith__func__erf.htm#ga0c72883728c09d5442bb6b6f5a4d5eee">More...</a><br /></td></tr>
<tr class="separator:ga0c72883728c09d5442bb6b6f5a4d5eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafff3d3c3174cca218d14a039d13cee35"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erfc.htm#gafff3d3c3174cca218d14a039d13cee35">erfc</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gafff3d3c3174cca218d14a039d13cee35"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for complementary error function value.  <a href="group__arith__func__erfc.htm#gafff3d3c3174cca218d14a039d13cee35">More...</a><br /></td></tr>
<tr class="separator:gafff3d3c3174cca218d14a039d13cee35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf15f1af67e62541e0322f4c94acd0293"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">log</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaf15f1af67e62541e0322f4c94acd0293"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for natural logarithm.  <a href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">More...</a><br /></td></tr>
<tr class="separator:gaf15f1af67e62541e0322f4c94acd0293"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga047f56ac38021fd5bfd6d91ff1efb268"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log1p.htm#ga047f56ac38021fd5bfd6d91ff1efb268">log1p</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga047f56ac38021fd5bfd6d91ff1efb268"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for natural logarithm of 1 + input.  <a href="group__arith__func__log1p.htm#ga047f56ac38021fd5bfd6d91ff1efb268">More...</a><br /></td></tr>
<tr class="separator:ga047f56ac38021fd5bfd6d91ff1efb268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae8457a90dd6dc6bbb68c5e9dd28aa936"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log10.htm#gae8457a90dd6dc6bbb68c5e9dd28aa936">log10</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gae8457a90dd6dc6bbb68c5e9dd28aa936"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for logarithm base 10.  <a href="group__arith__func__log10.htm#gae8457a90dd6dc6bbb68c5e9dd28aa936">More...</a><br /></td></tr>
<tr class="separator:gae8457a90dd6dc6bbb68c5e9dd28aa936"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7018268791fadde166753d079cf70cd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a7018268791fadde166753d079cf70cd3">log2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:a7018268791fadde166753d079cf70cd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for logarithm base 2.  <a href="namespaceaf.htm#a7018268791fadde166753d079cf70cd3">More...</a><br /></td></tr>
<tr class="separator:a7018268791fadde166753d079cf70cd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25c678d4cd9e0702bbc93e11d7d516a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga25c678d4cd9e0702bbc93e11d7d516a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for square root of input.  <a href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">More...</a><br /></td></tr>
<tr class="separator:ga25c678d4cd9e0702bbc93e11d7d516a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8dcc541b8aa7096fa0647955b07bc57c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rsqrt.htm#ga8dcc541b8aa7096fa0647955b07bc57c">rsqrt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga8dcc541b8aa7096fa0647955b07bc57c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for reciprocal square root of input.  <a href="group__arith__func__rsqrt.htm#ga8dcc541b8aa7096fa0647955b07bc57c">More...</a><br /></td></tr>
<tr class="separator:ga8dcc541b8aa7096fa0647955b07bc57c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga227e3073821573b2337421860bc36792"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cbrt.htm#ga227e3073821573b2337421860bc36792">cbrt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga227e3073821573b2337421860bc36792"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for cube root of input.  <a href="group__arith__func__cbrt.htm#ga227e3073821573b2337421860bc36792">More...</a><br /></td></tr>
<tr class="separator:ga227e3073821573b2337421860bc36792"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4228bf307e7edaaf7de6c14bcbc6d40e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__factorial.htm#ga4228bf307e7edaaf7de6c14bcbc6d40e">factorial</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga4228bf307e7edaaf7de6c14bcbc6d40e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for factorial of input.  <a href="group__arith__func__factorial.htm#ga4228bf307e7edaaf7de6c14bcbc6d40e">More...</a><br /></td></tr>
<tr class="separator:ga4228bf307e7edaaf7de6c14bcbc6d40e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1bfbe56b1b2798036e7bcc0111d8f2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tgamma.htm#gab1bfbe56b1b2798036e7bcc0111d8f2f">tgamma</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab1bfbe56b1b2798036e7bcc0111d8f2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for gamma function of input.  <a href="group__arith__func__tgamma.htm#gab1bfbe56b1b2798036e7bcc0111d8f2f">More...</a><br /></td></tr>
<tr class="separator:gab1bfbe56b1b2798036e7bcc0111d8f2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga039cda290c608b0fa3fcbe6f9fa9a968"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tgamma.htm#ga039cda290c608b0fa3fcbe6f9fa9a968">lgamma</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga039cda290c608b0fa3fcbe6f9fa9a968"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for logarithm of absolute value of gamma function of input.  <a href="group__arith__func__tgamma.htm#ga039cda290c608b0fa3fcbe6f9fa9a968">More...</a><br /></td></tr>
<tr class="separator:ga039cda290c608b0fa3fcbe6f9fa9a968"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ab8f0f1ceac74e3385c08938b7c0c6a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__iszero.htm#ga2ab8f0f1ceac74e3385c08938b7c0c6a">iszero</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga2ab8f0f1ceac74e3385c08938b7c0c6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking if values are zero.  <a href="group__arith__func__iszero.htm#ga2ab8f0f1ceac74e3385c08938b7c0c6a">More...</a><br /></td></tr>
<tr class="separator:ga2ab8f0f1ceac74e3385c08938b7c0c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2addd7560b8192f272c51304e87e5535"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isinf.htm#ga2addd7560b8192f272c51304e87e5535">isInf</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga2addd7560b8192f272c51304e87e5535"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking if values are Infinities.  <a href="group__arith__func__isinf.htm#ga2addd7560b8192f272c51304e87e5535">More...</a><br /></td></tr>
<tr class="separator:ga2addd7560b8192f272c51304e87e5535"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b90a8cd14248f578e509d69a94aa1b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isnan.htm#ga4b90a8cd14248f578e509d69a94aa1b1">isNaN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga4b90a8cd14248f578e509d69a94aa1b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking if values are NaNs.  <a href="group__arith__func__isnan.htm#ga4b90a8cd14248f578e509d69a94aa1b1">More...</a><br /></td></tr>
<tr class="separator:ga4b90a8cd14248f578e509d69a94aa1b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7e0fad1f134b0421811ee3a4ce47e987"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__setbackend.htm#ga7e0fad1f134b0421811ee3a4ce47e987">setBackend</a> (const <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">Backend</a> bknd)</td></tr>
<tr class="separator:ga7e0fad1f134b0421811ee3a4ce47e987"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gababf68f4656053dd14028760d5bae165"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getbackendcount.htm#gababf68f4656053dd14028760d5bae165">getBackendCount</a> ()</td></tr>
<tr class="separator:gababf68f4656053dd14028760d5bae165"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32fc807a8d4680987a915362573c1a2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getavailbackends.htm#ga32fc807a8d4680987a915362573c1a2c">getAvailableBackends</a> ()</td></tr>
<tr class="memdesc:ga32fc807a8d4680987a915362573c1a2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a flag of all available backends.  <a href="group__unified__func__getavailbackends.htm#ga32fc807a8d4680987a915362573c1a2c">More...</a><br /></td></tr>
<tr class="separator:ga32fc807a8d4680987a915362573c1a2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8c046f25b043ce89a25c3fa8b79c898"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af::Backend</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getbackendid.htm#gad8c046f25b043ce89a25c3fa8b79c898">getBackendId</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:gad8c046f25b043ce89a25c3fa8b79c898"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0556249ae4e347c3494fac0de98e2cdb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af::Backend</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a0556249ae4e347c3494fac0de98e2cdb">getActiveBackend</a> ()</td></tr>
<tr class="separator:a0556249ae4e347c3494fac0de98e2cdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f2a7abff377e69c1f85cfb8d2f5deee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getdeviceid.htm#ga0f2a7abff377e69c1f85cfb8d2f5deee">getDeviceId</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga0f2a7abff377e69c1f85cfb8d2f5deee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63306b6ed967bd1055086db862fe885b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optLhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optRhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:ga63306b6ed967bd1055086db862fe885b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matrix multiply of two arrays.  <a href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">More...</a><br /></td></tr>
<tr class="separator:ga63306b6ed967bd1055086db862fe885b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf90230a67ea7a0b4697511dd978b9c7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#gadf90230a67ea7a0b4697511dd978b9c7">matmulNT</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gadf90230a67ea7a0b4697511dd978b9c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matrix multiply of two arrays.  <a href="group__blas__func__matmul.htm#gadf90230a67ea7a0b4697511dd978b9c7">More...</a><br /></td></tr>
<tr class="separator:gadf90230a67ea7a0b4697511dd978b9c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6655d7913b35d7e59f7c8560a5368fbc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#ga6655d7913b35d7e59f7c8560a5368fbc">matmulTN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6655d7913b35d7e59f7c8560a5368fbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matrix multiply of two arrays.  <a href="group__blas__func__matmul.htm#ga6655d7913b35d7e59f7c8560a5368fbc">More...</a><br /></td></tr>
<tr class="separator:ga6655d7913b35d7e59f7c8560a5368fbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7f3e5a6f282ea2c2c32886c95694bb88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#ga7f3e5a6f282ea2c2c32886c95694bb88">matmulTT</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7f3e5a6f282ea2c2c32886c95694bb88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matrix multiply of two arrays.  <a href="group__blas__func__matmul.htm#ga7f3e5a6f282ea2c2c32886c95694bb88">More...</a><br /></td></tr>
<tr class="separator:ga7f3e5a6f282ea2c2c32886c95694bb88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3d05bc14538f14713fe3ce65f6841f44"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#ga3d05bc14538f14713fe3ce65f6841f44">matmul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;c)</td></tr>
<tr class="memdesc:ga3d05bc14538f14713fe3ce65f6841f44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Chain 2 matrix multiplications.  <a href="group__blas__func__matmul.htm#ga3d05bc14538f14713fe3ce65f6841f44">More...</a><br /></td></tr>
<tr class="separator:ga3d05bc14538f14713fe3ce65f6841f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga329f6ec3d910ca0443e4bc6b7cfe129f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#ga329f6ec3d910ca0443e4bc6b7cfe129f">matmul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;d)</td></tr>
<tr class="memdesc:ga329f6ec3d910ca0443e4bc6b7cfe129f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Chain 3 matrix multiplications.  <a href="group__blas__func__matmul.htm#ga329f6ec3d910ca0443e4bc6b7cfe129f">More...</a><br /></td></tr>
<tr class="separator:ga329f6ec3d910ca0443e4bc6b7cfe129f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga355c7b2d393a3a215d9d204dd16a3930"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga355c7b2d393a3a215d9d204dd16a3930"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">dot</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optLhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optRhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:ga355c7b2d393a3a215d9d204dd16a3930"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dot Product.  <a href="group__blas__func__dot.htm#ga355c7b2d393a3a215d9d204dd16a3930">More...</a><br /></td></tr>
<tr class="separator:ga355c7b2d393a3a215d9d204dd16a3930"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63a8e47707874b9d2ba9b9af0b159591"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool conjugate=false)</td></tr>
<tr class="memdesc:ga63a8e47707874b9d2ba9b9af0b159591"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transposes a matrix.  <a href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">More...</a><br /></td></tr>
<tr class="separator:ga63a8e47707874b9d2ba9b9af0b159591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae77f8ba484534fe5bf85c73f8641c133"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__transpose.htm#gae77f8ba484534fe5bf85c73f8641c133">transposeInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool conjugate=false)</td></tr>
<tr class="memdesc:gae77f8ba484534fe5bf85c73f8641c133"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transposes a matrix in-place.  <a href="group__blas__func__transpose.htm#gae77f8ba484534fe5bf85c73f8641c133">More...</a><br /></td></tr>
<tr class="separator:gae77f8ba484534fe5bf85c73f8641c133"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab45892c9c9c04c16de267daa44c8700e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__count.htm#gab45892c9c9c04c16de267daa44c8700e">devicecount</a> ()</td></tr>
<tr class="memdesc:gab45892c9c9c04c16de267daa44c8700e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of devices.  <a href="group__device__func__count.htm#gab45892c9c9c04c16de267daa44c8700e">More...</a><br /></td></tr>
<tr class="separator:gab45892c9c9c04c16de267daa44c8700e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab11c53af3ef51c39da455ed024de97b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__get.htm#gab11c53af3ef51c39da455ed024de97b5">deviceget</a> ()</td></tr>
<tr class="memdesc:gab11c53af3ef51c39da455ed024de97b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current device ID.  <a href="group__device__func__get.htm#gab11c53af3ef51c39da455ed024de97b5">More...</a><br /></td></tr>
<tr class="separator:gab11c53af3ef51c39da455ed024de97b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1cab0f8de2817b155b77fcf29238dbc7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__set.htm#ga1cab0f8de2817b155b77fcf29238dbc7">deviceset</a> (const int device)</td></tr>
<tr class="memdesc:ga1cab0f8de2817b155b77fcf29238dbc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the current device.  <a href="group__device__func__set.htm#ga1cab0f8de2817b155b77fcf29238dbc7">More...</a><br /></td></tr>
<tr class="separator:ga1cab0f8de2817b155b77fcf29238dbc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga188e0daa67545fea545fc7bc3feea875"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga188e0daa67545fea545fc7bc3feea875">loadimage</a> (const char *filename, const bool is_color=false)</td></tr>
<tr class="memdesc:ga188e0daa67545fea545fc7bc3feea875"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image.  <a href="group__imageio__func__load.htm#ga188e0daa67545fea545fc7bc3feea875">More...</a><br /></td></tr>
<tr class="separator:ga188e0daa67545fea545fc7bc3feea875"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b0f060d7fb7bc4ca397f4ca82190fb2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__save.htm#ga2b0f060d7fb7bc4ca397f4ca82190fb2">saveimage</a> (const char *filename, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga2b0f060d7fb7bc4ca397f4ca82190fb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for saving an image.  <a href="group__imageio__func__save.htm#ga2b0f060d7fb7bc4ca397f4ca82190fb2">More...</a><br /></td></tr>
<tr class="separator:ga2b0f060d7fb7bc4ca397f4ca82190fb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga340e55dad18edc59e9387dcf99d5ab78"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gauss.htm#ga340e55dad18edc59e9387dcf99d5ab78">gaussiankernel</a> (const int rows, const int cols, const double sig_r=0, const double sig_c=0)</td></tr>
<tr class="memdesc:ga340e55dad18edc59e9387dcf99d5ab78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a Gaussian Kernel.  <a href="group__image__func__gauss.htm#ga340e55dad18edc59e9387dcf99d5ab78">More...</a><br /></td></tr>
<tr class="separator:ga340e55dad18edc59e9387dcf99d5ab78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac53f164f6bb650ba54a64e27a41e3b19"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac53f164f6bb650ba54a64e27a41e3b19"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gac53f164f6bb650ba54a64e27a41e3b19">alltrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac53f164f6bb650ba54a64e27a41e3b19"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking if all values in an array are true.  <a href="group__reduce__func__all__true.htm#gac53f164f6bb650ba54a64e27a41e3b19">More...</a><br /></td></tr>
<tr class="separator:gac53f164f6bb650ba54a64e27a41e3b19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7184d594b1b6af7bdd01322cc795a4a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaf7184d594b1b6af7bdd01322cc795a4a"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#gaf7184d594b1b6af7bdd01322cc795a4a">anytrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaf7184d594b1b6af7bdd01322cc795a4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking if all values in an array are true.  <a href="group__reduce__func__any__true.htm#gaf7184d594b1b6af7bdd01322cc795a4a">More...</a><br /></td></tr>
<tr class="separator:gaf7184d594b1b6af7bdd01322cc795a4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafbb8f40dd99a5842aa10610bf036c29a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gafbb8f40dd99a5842aa10610bf036c29a">alltrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:gafbb8f40dd99a5842aa10610bf036c29a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking all true values in an array.  <a href="group__reduce__func__all__true.htm#gafbb8f40dd99a5842aa10610bf036c29a">More...</a><br /></td></tr>
<tr class="separator:gafbb8f40dd99a5842aa10610bf036c29a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ec2ca71f7968e5e7a3ab6d58d928e3e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga3ec2ca71f7968e5e7a3ab6d58d928e3e">anytrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga3ec2ca71f7968e5e7a3ab6d58d928e3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for checking any true values in an array.  <a href="group__reduce__func__any__true.htm#ga3ec2ca71f7968e5e7a3ab6d58d928e3e">More...</a><br /></td></tr>
<tr class="separator:ga3ec2ca71f7968e5e7a3ab6d58d928e3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac33fd89ba6a7582753232c007ff135bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__unique.htm#gac33fd89ba6a7582753232c007ff135bf">setunique</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_sorted=false)</td></tr>
<tr class="memdesc:gac33fd89ba6a7582753232c007ff135bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting unique values.  <a href="group__set__func__unique.htm#gac33fd89ba6a7582753232c007ff135bf">More...</a><br /></td></tr>
<tr class="separator:gac33fd89ba6a7582753232c007ff135bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91f6dd436ea57421a689ddc27ca3fd47"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__union.htm#ga91f6dd436ea57421a689ddc27ca3fd47">setunion</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const bool is_unique=false)</td></tr>
<tr class="memdesc:ga91f6dd436ea57421a689ddc27ca3fd47"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding the union of two arrays.  <a href="group__set__func__union.htm#ga91f6dd436ea57421a689ddc27ca3fd47">More...</a><br /></td></tr>
<tr class="separator:ga91f6dd436ea57421a689ddc27ca3fd47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga367d3f862af46bc86ef5e08f7a29f104"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__intersect.htm#ga367d3f862af46bc86ef5e08f7a29f104">setintersect</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const bool is_unique=false)</td></tr>
<tr class="memdesc:ga367d3f862af46bc86ef5e08f7a29f104"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding the intersection of two arrays.  <a href="group__set__func__intersect.htm#ga367d3f862af46bc86ef5e08f7a29f104">More...</a><br /></td></tr>
<tr class="separator:ga367d3f862af46bc86ef5e08f7a29f104"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae1c0d4f649c35fa3a9d2e2d9e21c318c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histequal.htm#gae1c0d4f649c35fa3a9d2e2d9e21c318c">histequal</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;hist)</td></tr>
<tr class="memdesc:gae1c0d4f649c35fa3a9d2e2d9e21c318c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for histogram equalization.  <a href="group__image__func__histequal.htm#gae1c0d4f649c35fa3a9d2e2d9e21c318c">More...</a><br /></td></tr>
<tr class="separator:gae1c0d4f649c35fa3a9d2e2d9e21c318c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2f08cedb760f97f069b4ccbb6d48ea8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__colorspace.htm#gac2f08cedb760f97f069b4ccbb6d48ea8">colorspace</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;image, const <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a> to, const <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a> from)</td></tr>
<tr class="memdesc:gac2f08cedb760f97f069b4ccbb6d48ea8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for colorspace conversion.  <a href="group__image__func__colorspace.htm#gac2f08cedb760f97f069b4ccbb6d48ea8">More...</a><br /></td></tr>
<tr class="separator:gac2f08cedb760f97f069b4ccbb6d48ea8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53c4f9a4b5440458bffe355803514c90"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;image, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;kernel)</td></tr>
<tr class="memdesc:a53c4f9a4b5440458bffe355803514c90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Image Filtering.  <a href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">More...</a><br /></td></tr>
<tr class="separator:a53c4f9a4b5440458bffe355803514c90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34aef3ce04c7d24da8a55655d9ea2e23"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga34aef3ce04c7d24da8a55655d9ea2e23">mul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga34aef3ce04c7d24da8a55655d9ea2e23"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of elements in an array.  <a href="group__reduce__func__product.htm#ga34aef3ce04c7d24da8a55655d9ea2e23">More...</a><br /></td></tr>
<tr class="separator:ga34aef3ce04c7d24da8a55655d9ea2e23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga22e5cb1457aebeec1d25c348f539c6df"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga22e5cb1457aebeec1d25c348f539c6df"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga22e5cb1457aebeec1d25c348f539c6df">mul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga22e5cb1457aebeec1d25c348f539c6df"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of all elements in an array.  <a href="group__reduce__func__product.htm#ga22e5cb1457aebeec1d25c348f539c6df">More...</a><br /></td></tr>
<tr class="separator:ga22e5cb1457aebeec1d25c348f539c6df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga93d4e3752f68699295e351888559dcf5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__prop.htm#ga93d4e3752f68699295e351888559dcf5">deviceprop</a> (char *d_name, char *d_platform, char *d_toolkit, char *d_compute)</td></tr>
<tr class="memdesc:ga93d4e3752f68699295e351888559dcf5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the information about device and platform as strings.  <a href="group__device__func__prop.htm#ga93d4e3752f68699295e351888559dcf5">More...</a><br /></td></tr>
<tr class="separator:ga93d4e3752f68699295e351888559dcf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74dccc725330fc255aee141f613c418c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a74dccc725330fc255aee141f613c418c">real</a> (<a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a> val)</td></tr>
<tr class="separator:a74dccc725330fc255aee141f613c418c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a405b319b613a24a4d216030e4cddb101"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a405b319b613a24a4d216030e4cddb101">real</a> (<a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a> val)</td></tr>
<tr class="separator:a405b319b613a24a4d216030e4cddb101"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addd3d679e7c6bc246a6867397ae7621e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#addd3d679e7c6bc246a6867397ae7621e">imag</a> (<a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a> val)</td></tr>
<tr class="separator:addd3d679e7c6bc246a6867397ae7621e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc25dea11e9bc0d60577906671e96cf4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#abc25dea11e9bc0d60577906671e96cf4">imag</a> (<a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a> val)</td></tr>
<tr class="separator:abc25dea11e9bc0d60577906671e96cf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf2aae855409bc5da8cce9cca5ca3f1b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#adf2aae855409bc5da8cce9cca5ca3f1b">operator+</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:adf2aae855409bc5da8cce9cca5ca3f1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeff6602fcce587dbb5f21632a2503888"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aeff6602fcce587dbb5f21632a2503888">operator+</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:aeff6602fcce587dbb5f21632a2503888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7887ce8562cfc6b51dd4cdf1460ebb3b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a7887ce8562cfc6b51dd4cdf1460ebb3b">operator-</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a7887ce8562cfc6b51dd4cdf1460ebb3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33f925205c58a00259c401d680d660d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a33f925205c58a00259c401d680d660d5">operator-</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a33f925205c58a00259c401d680d660d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a5b87c2f04ff26e0d9bc1e326206b4f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8a5b87c2f04ff26e0d9bc1e326206b4f">operator*</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a8a5b87c2f04ff26e0d9bc1e326206b4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e4beb0013455c2f7bd8b62872e42fb0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2e4beb0013455c2f7bd8b62872e42fb0">operator*</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a2e4beb0013455c2f7bd8b62872e42fb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ecf471527d86928c0fffd93337dd805"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5ecf471527d86928c0fffd93337dd805">operator/</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a5ecf471527d86928c0fffd93337dd805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a882ef10c610e99ecdb970e9cb8429089"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a882ef10c610e99ecdb970e9cb8429089">operator/</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a882ef10c610e99ecdb970e9cb8429089"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6897859c1e4f4602e1068dce9b6bd85e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6897859c1e4f4602e1068dce9b6bd85e">operator+</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a6897859c1e4f4602e1068dce9b6bd85e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae52b439ba5a6833f5e087df42577f6cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae52b439ba5a6833f5e087df42577f6cc">operator+</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:ae52b439ba5a6833f5e087df42577f6cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a350a2c2a4a193a164610b2faa5d4c493"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a350a2c2a4a193a164610b2faa5d4c493">operator/</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a350a2c2a4a193a164610b2faa5d4c493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73e894d5cb9ae6a71f00a7883d2a2dac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a73e894d5cb9ae6a71f00a7883d2a2dac">operator/</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a73e894d5cb9ae6a71f00a7883d2a2dac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3371182b266ff7e22dc0d2871d7c815"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ac3371182b266ff7e22dc0d2871d7c815">operator-</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:ac3371182b266ff7e22dc0d2871d7c815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a8247be5b35d670a340ff4ce8385d5f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2a8247be5b35d670a340ff4ce8385d5f">operator-</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a2a8247be5b35d670a340ff4ce8385d5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adccec94393986d8a0146a35c3272beb9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#adccec94393986d8a0146a35c3272beb9">operator*</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:adccec94393986d8a0146a35c3272beb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5eb9119ce56e8e55977e87a49e2202b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5eb9119ce56e8e55977e87a49e2202b7">operator*</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a5eb9119ce56e8e55977e87a49e2202b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93ada752dd00687a1ea0809ae79e2451"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a93ada752dd00687a1ea0809ae79e2451">operator+</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs)</td></tr>
<tr class="separator:a93ada752dd00687a1ea0809ae79e2451"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1f5776cdecb608a93c4bbf5687a8847"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae1f5776cdecb608a93c4bbf5687a8847">operator+</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs)</td></tr>
<tr class="separator:ae1f5776cdecb608a93c4bbf5687a8847"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56f913699ce888ebb5c61c47f5ebe6ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a56f913699ce888ebb5c61c47f5ebe6ac">operator+</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a56f913699ce888ebb5c61c47f5ebe6ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a926c4185bb75e500faba82cdf9cdddd9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a926c4185bb75e500faba82cdf9cdddd9">operator+</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a926c4185bb75e500faba82cdf9cdddd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2652defdfd26f449f58668e1669113a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ab2652defdfd26f449f58668e1669113a">operator-</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs)</td></tr>
<tr class="separator:ab2652defdfd26f449f58668e1669113a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b734c7e774da12a212c48005515e5f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a30b734c7e774da12a212c48005515e5f">operator-</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs)</td></tr>
<tr class="separator:a30b734c7e774da12a212c48005515e5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a375db4ddd1d64afdbfe7ed55894ca48b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a375db4ddd1d64afdbfe7ed55894ca48b">operator-</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a375db4ddd1d64afdbfe7ed55894ca48b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b2fa26470cb9cc89e2438bfe4f23a27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8b2fa26470cb9cc89e2438bfe4f23a27">operator-</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a8b2fa26470cb9cc89e2438bfe4f23a27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa538e44274f4b18cfa6e904a3dbe7240"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aa538e44274f4b18cfa6e904a3dbe7240">operator*</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs)</td></tr>
<tr class="separator:aa538e44274f4b18cfa6e904a3dbe7240"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affb6492206287a4237d5ef03b26bd809"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#affb6492206287a4237d5ef03b26bd809">operator*</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs)</td></tr>
<tr class="separator:affb6492206287a4237d5ef03b26bd809"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e8ca4d949f34a9a383cbe40f1bdc3eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a7e8ca4d949f34a9a383cbe40f1bdc3eb">operator*</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a7e8ca4d949f34a9a383cbe40f1bdc3eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afec6156a6be4817e8c8a9f35dadaa02a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#afec6156a6be4817e8c8a9f35dadaa02a">operator*</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:afec6156a6be4817e8c8a9f35dadaa02a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bb9a7a9f462d6acccf42d5f82147dd6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a3bb9a7a9f462d6acccf42d5f82147dd6">operator/</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs)</td></tr>
<tr class="separator:a3bb9a7a9f462d6acccf42d5f82147dd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a101ebe78e996ef54fc8f0b9e0d555381"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a101ebe78e996ef54fc8f0b9e0d555381">operator/</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs)</td></tr>
<tr class="separator:a101ebe78e996ef54fc8f0b9e0d555381"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e49462300ca94268003ef56c80391ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a0e49462300ca94268003ef56c80391ae">operator/</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a0e49462300ca94268003ef56c80391ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8273d165f999c973b0eb4ff58c7ed4f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8273d165f999c973b0eb4ff58c7ed4f3">operator/</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a8273d165f999c973b0eb4ff58c7ed4f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1fefa885fa781ae8c03c3c8fa25804b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af1fefa885fa781ae8c03c3c8fa25804b">operator==</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:af1fefa885fa781ae8c03c3c8fa25804b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6434134336ba158e9d3a7b40e65da918"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6434134336ba158e9d3a7b40e65da918">operator==</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a6434134336ba158e9d3a7b40e65da918"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af130b743b5abe48393f8f8ac7c974a5a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af130b743b5abe48393f8f8ac7c974a5a">operator!=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:af130b743b5abe48393f8f8ac7c974a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa23148bc47d3229ac683d35b8021fb1d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aa23148bc47d3229ac683d35b8021fb1d">operator!=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:aa23148bc47d3229ac683d35b8021fb1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f8b141f8a61fb46cf9b9550a74db5be"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6f8b141f8a61fb46cf9b9550a74db5be">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;in)</td></tr>
<tr class="separator:a6f8b141f8a61fb46cf9b9550a74db5be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af89e92a1b2fb8a38768fefa04b7df9ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af89e92a1b2fb8a38768fefa04b7df9ed">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;in)</td></tr>
<tr class="separator:af89e92a1b2fb8a38768fefa04b7df9ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab11d30f44bd5affed653ff11e0d9406d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ab11d30f44bd5affed653ff11e0d9406d">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;in)</td></tr>
<tr class="separator:ab11d30f44bd5affed653ff11e0d9406d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28b2a1ee007b59f8c5f69413e8c1a7e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a28b2a1ee007b59f8c5f69413e8c1a7e2">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;in)</td></tr>
<tr class="separator:a28b2a1ee007b59f8c5f69413e8c1a7e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef8c240a34d08d2b4d95abf30499df18"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aef8c240a34d08d2b4d95abf30499df18">abs</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="separator:aef8c240a34d08d2b4d95abf30499df18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aa5c4fc5d26607e1bfbd6d7b7e6e5a7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4aa5c4fc5d26607e1bfbd6d7b7e6e5a7">abs</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="separator:a4aa5c4fc5d26607e1bfbd6d7b7e6e5a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee503b023cfbcf64eb2d230b7c24c280"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aee503b023cfbcf64eb2d230b7c24c280">conj</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="separator:aee503b023cfbcf64eb2d230b7c24c280"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8544157cfaab8d43c217fe2ec8814b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ab8544157cfaab8d43c217fe2ec8814b8">conj</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="separator:ab8544157cfaab8d43c217fe2ec8814b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c58da8ca31ae6c871379aeb587b8b0d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga3c58da8ca31ae6c871379aeb587b8b0d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a> (T val, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="separator:ga3c58da8ca31ae6c871379aeb587b8b0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4d2909a9a82efa1f5a428f9eaab84e7d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga4d2909a9a82efa1f5a428f9eaab84e7d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#ga4d2909a9a82efa1f5a428f9eaab84e7d">constant</a> (T val, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="separator:ga4d2909a9a82efa1f5a428f9eaab84e7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac59a0ee843c38b50f1a74604e1f4ee17"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac59a0ee843c38b50f1a74604e1f4ee17"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#gac59a0ee843c38b50f1a74604e1f4ee17">constant</a> (T val, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="separator:gac59a0ee843c38b50f1a74604e1f4ee17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6e615ac013103f929fee2603d64785a0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga6e615ac013103f929fee2603d64785a0"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#ga6e615ac013103f929fee2603d64785a0">constant</a> (T val, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="separator:ga6e615ac013103f929fee2603d64785a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2e759362ddb366ec28a6abaae1061235"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga2e759362ddb366ec28a6abaae1061235"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#ga2e759362ddb366ec28a6abaae1061235">constant</a> (T val, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="separator:ga2e759362ddb366ec28a6abaae1061235"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd8247e22fdb50218926d5d9391fa678"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#gafd8247e22fdb50218926d5d9391fa678">identity</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:gafd8247e22fdb50218926d5d9391fa678"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3f69c0a0ab7ba0c8c1ee3223772234b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#ga3f69c0a0ab7ba0c8c1ee3223772234b8">identity</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga3f69c0a0ab7ba0c8c1ee3223772234b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaff9da6e4b83772359d748a4df66ec571"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#gaff9da6e4b83772359d748a4df66ec571">identity</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:gaff9da6e4b83772359d748a4df66ec571"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga405b89c8f04901d58287fd6a8f5612c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#ga405b89c8f04901d58287fd6a8f5612c3">identity</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga405b89c8f04901d58287fd6a8f5612c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e6605d76748c5fff365830e1a153132"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#ga8e6605d76748c5fff365830e1a153132">identity</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga8e6605d76748c5fff365830e1a153132"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3789475e962b4c31e07c1c3bdab8498b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const int seq_dim=-1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga3789475e962b4c31e07c1c3bdab8498b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e2ae1f90d99f42854a19877261ac455"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__range.htm#ga1e2ae1f90d99f42854a19877261ac455">range</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3=1, const int seq_dim=-1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga1e2ae1f90d99f42854a19877261ac455"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8f7c55a54d1f93e55340f59b61662f29"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">iota</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;tile_dims=<a class="el" href="classaf_1_1dim4.htm">dim4</a>(1), const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga8f7c55a54d1f93e55340f59b61662f29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0cf9ea583e513631ed0226aa08ff60da"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__diag.htm#ga0cf9ea583e513631ed0226aa08ff60da">diag</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int num=0, const bool extract=true)</td></tr>
<tr class="separator:ga0cf9ea583e513631ed0226aa08ff60da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a> (const int dim, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second)</td></tr>
<tr class="memdesc:ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Join 2 arrays along <code>dim</code>.  <a href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">More...</a><br /></td></tr>
<tr class="separator:ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa6b5dfad79cde81bccee5551b4b152c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__join.htm#gafa6b5dfad79cde81bccee5551b4b152c">join</a> (const int dim, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;third)</td></tr>
<tr class="memdesc:gafa6b5dfad79cde81bccee5551b4b152c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Join 3 arrays along <code>dim</code>.  <a href="group__manip__func__join.htm#gafa6b5dfad79cde81bccee5551b4b152c">More...</a><br /></td></tr>
<tr class="separator:gafa6b5dfad79cde81bccee5551b4b152c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0bad6d30d8fbb8ee8698e4437c6deaf0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__join.htm#ga0bad6d30d8fbb8ee8698e4437c6deaf0">join</a> (const int dim, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;third, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;fourth)</td></tr>
<tr class="memdesc:ga0bad6d30d8fbb8ee8698e4437c6deaf0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Join 4 arrays along <code>dim</code>.  <a href="group__manip__func__join.htm#ga0bad6d30d8fbb8ee8698e4437c6deaf0">More...</a><br /></td></tr>
<tr class="separator:ga0bad6d30d8fbb8ee8698e4437c6deaf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3548059d64e0cefc7fedb4ec28321d32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</td></tr>
<tr class="separator:ga3548059d64e0cefc7fedb4ec28321d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ad03637a32c3c9999e34d565f1cb1b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__tile.htm#ga4ad03637a32c3c9999e34d565f1cb1b4">tile</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims)</td></tr>
<tr class="separator:ga4ad03637a32c3c9999e34d565f1cb1b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72dd90d34aa18b85d9c944f62a2a48b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__reorder.htm#ga72dd90d34aa18b85d9c944f62a2a48b9">reorder</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned x, const unsigned y=1, const unsigned z=2, const unsigned w=3)</td></tr>
<tr class="separator:ga72dd90d34aa18b85d9c944f62a2a48b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga135facde87a8590d5341da6a8bb6606a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__shift.htm#ga135facde87a8590d5341da6a8bb6606a">shift</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int x, const int y=0, const int z=0, const int w=0)</td></tr>
<tr class="separator:ga135facde87a8590d5341da6a8bb6606a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga382a69ec85a6beea79e95aeaef591073"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned ndims, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *const dims)</td></tr>
<tr class="separator:ga382a69ec85a6beea79e95aeaef591073"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58dcbce7ee6dcca615a5ec4549d2dabc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__moddims.htm#ga58dcbce7ee6dcca615a5ec4549d2dabc">moddims</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims)</td></tr>
<tr class="separator:ga58dcbce7ee6dcca615a5ec4549d2dabc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6386c8fc173a7d6e6310279006c1321e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__moddims.htm#ga6386c8fc173a7d6e6310279006c1321e">moddims</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3=1)</td></tr>
<tr class="separator:ga6386c8fc173a7d6e6310279006c1321e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ffcfce392c479bfcf2c6ddb5ebad5af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__flat.htm#ga3ffcfce392c479bfcf2c6ddb5ebad5af">flat</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga3ffcfce392c479bfcf2c6ddb5ebad5af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1dcebf2f17837b217ee9e880d028dd18"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">flip</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned dim)</td></tr>
<tr class="separator:ga1dcebf2f17837b217ee9e880d028dd18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3217e07693fdd099fc9acc9065e0a66e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__lower.htm#ga3217e07693fdd099fc9acc9065e0a66e">lower</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, bool is_unit_diag=false)</td></tr>
<tr class="separator:ga3217e07693fdd099fc9acc9065e0a66e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga724c96cef1c7ae0e9e6ce8ba33ac3eaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__upper.htm#ga724c96cef1c7ae0e9e6ce8ba33ac3eaa">upper</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, bool is_unit_diag=false)</td></tr>
<tr class="separator:ga724c96cef1c7ae0e9e6ce8ba33ac3eaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga43cfc7e96eb2e8ee019820aaa6aa15a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga43cfc7e96eb2e8ee019820aaa6aa15a8">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="separator:ga43cfc7e96eb2e8ee019820aaa6aa15a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37ea118658fbcb3868fefaa0f1775f98"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga37ea118658fbcb3868fefaa0f1775f98">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const double &amp;b)</td></tr>
<tr class="separator:ga37ea118658fbcb3868fefaa0f1775f98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6460e52318e7adc247c4a75e3cd9b2f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga6460e52318e7adc247c4a75e3cd9b2f0">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const double &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="separator:ga6460e52318e7adc247c4a75e3cd9b2f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga13a51c418de0201102413f05aae45ccd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__replace.htm#ga13a51c418de0201102413f05aae45ccd">replace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="separator:ga13a51c418de0201102413f05aae45ccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga631aec1877fce06311d036ac65dd9e7c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__replace.htm#ga631aec1877fce06311d036ac65dd9e7c">replace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const double &amp;b)</td></tr>
<tr class="separator:ga631aec1877fce06311d036ac65dd9e7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d8c388e416425fdf36dfde0f5d6991d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__pad.htm#ga0d8c388e416425fdf36dfde0f5d6991d">pad</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;beginPadding, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;endPadding, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> padFillType)</td></tr>
<tr class="separator:ga0d8c388e416425fdf36dfde0f5d6991d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1360e706b046b1c5b299bd6e689a0276"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">info</a> ()</td></tr>
<tr class="separator:ga1360e706b046b1c5b299bd6e689a0276"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73ee21947f018445ea720036c1edfb69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__info__string.htm#ga73ee21947f018445ea720036c1edfb69">infoString</a> (const bool verbose=false)</td></tr>
<tr class="separator:ga73ee21947f018445ea720036c1edfb69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9eab56ddac21650581682912ea78293"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__prop.htm#gaa9eab56ddac21650581682912ea78293">deviceInfo</a> (char *d_name, char *d_platform, char *d_toolkit, char *d_compute)</td></tr>
<tr class="memdesc:gaa9eab56ddac21650581682912ea78293"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the information about device and platform as strings.  <a href="group__device__func__prop.htm#gaa9eab56ddac21650581682912ea78293">More...</a><br /></td></tr>
<tr class="separator:gaa9eab56ddac21650581682912ea78293"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3c8750da69ee883fd14c0a8290e45f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__count.htm#gac3c8750da69ee883fd14c0a8290e45f1">getDeviceCount</a> ()</td></tr>
<tr class="memdesc:gac3c8750da69ee883fd14c0a8290e45f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of devices.  <a href="group__device__func__count.htm#gac3c8750da69ee883fd14c0a8290e45f1">More...</a><br /></td></tr>
<tr class="separator:gac3c8750da69ee883fd14c0a8290e45f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4dfe3f90475b735384f8b28cf2b19a11"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__get.htm#ga4dfe3f90475b735384f8b28cf2b19a11">getDevice</a> ()</td></tr>
<tr class="memdesc:ga4dfe3f90475b735384f8b28cf2b19a11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current device ID.  <a href="group__device__func__get.htm#ga4dfe3f90475b735384f8b28cf2b19a11">More...</a><br /></td></tr>
<tr class="separator:ga4dfe3f90475b735384f8b28cf2b19a11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga22ede4a4ca1aa4e5aefbde91afa1b626"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__dbl.htm#ga22ede4a4ca1aa4e5aefbde91afa1b626">isDoubleAvailable</a> (const int device)</td></tr>
<tr class="memdesc:ga22ede4a4ca1aa4e5aefbde91afa1b626"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries the current device for double precision floating point support.  <a href="group__device__func__dbl.htm#ga22ede4a4ca1aa4e5aefbde91afa1b626">More...</a><br /></td></tr>
<tr class="separator:ga22ede4a4ca1aa4e5aefbde91afa1b626"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd645e9968830a2d8c0c507d1db7a5db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__half.htm#gacd645e9968830a2d8c0c507d1db7a5db">isHalfAvailable</a> (const int device)</td></tr>
<tr class="memdesc:gacd645e9968830a2d8c0c507d1db7a5db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries the current device for half precision floating point support.  <a href="group__device__func__half.htm#gacd645e9968830a2d8c0c507d1db7a5db">More...</a><br /></td></tr>
<tr class="separator:gacd645e9968830a2d8c0c507d1db7a5db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafbb906ca5b89ec43fdb0e3a14d1df1e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">setDevice</a> (const int device)</td></tr>
<tr class="memdesc:gafbb906ca5b89ec43fdb0e3a14d1df1e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the current device.  <a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">More...</a><br /></td></tr>
<tr class="separator:gafbb906ca5b89ec43fdb0e3a14d1df1e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c5d51841cf4f2ddbdd6a3146cf2b390"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">sync</a> (const int device=-1)</td></tr>
<tr class="memdesc:ga8c5d51841cf4f2ddbdd6a3146cf2b390"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks until the <code>device</code> is finished processing.  <a href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">More...</a><br /></td></tr>
<tr class="separator:ga8c5d51841cf4f2ddbdd6a3146cf2b390"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0ae826ba755d07ece21f2a9ba30ec35e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free.htm#ga0ae826ba755d07ece21f2a9ba30ec35e">free</a> (const void *ptr)</td></tr>
<tr class="memdesc:ga0ae826ba755d07ece21f2a9ba30ec35e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns memory to ArrayFire's memory manager. The memory will return to the memory pool.  <a href="group__device__func__free.htm#ga0ae826ba755d07ece21f2a9ba30ec35e">More...</a><br /></td></tr>
<tr class="separator:ga0ae826ba755d07ece21f2a9ba30ec35e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga921d5597b54714eb9c84dca5d8ab0708"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free__pinned.htm#ga921d5597b54714eb9c84dca5d8ab0708">freePinned</a> (const void *ptr)</td></tr>
<tr class="memdesc:ga921d5597b54714eb9c84dca5d8ab0708"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free pinned memory allocated by ArrayFire's memory manager.  <a href="group__device__func__free__pinned.htm#ga921d5597b54714eb9c84dca5d8ab0708">More...</a><br /></td></tr>
<tr class="separator:ga921d5597b54714eb9c84dca5d8ab0708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73fc5021d9626b65a22e1edd3e1384b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc__host.htm#ga73fc5021d9626b65a22e1edd3e1384b1">allocHost</a> (const size_t elements, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type)</td></tr>
<tr class="memdesc:ga73fc5021d9626b65a22e1edd3e1384b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate memory on host.  <a href="group__device__func__alloc__host.htm#ga73fc5021d9626b65a22e1edd3e1384b1">More...</a><br /></td></tr>
<tr class="separator:ga73fc5021d9626b65a22e1edd3e1384b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga410fad006463737495a71bfc4782318b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga410fad006463737495a71bfc4782318b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__device__func__alloc__host.htm#ga410fad006463737495a71bfc4782318b">allocHost</a> (const size_t elements)</td></tr>
<tr class="memdesc:ga410fad006463737495a71bfc4782318b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate memory on host.  <a href="group__device__func__alloc__host.htm#ga410fad006463737495a71bfc4782318b">More...</a><br /></td></tr>
<tr class="separator:ga410fad006463737495a71bfc4782318b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0cc924b1055eee26851be4cd7bedee44"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free__host.htm#ga0cc924b1055eee26851be4cd7bedee44">freeHost</a> (const void *ptr)</td></tr>
<tr class="memdesc:ga0cc924b1055eee26851be4cd7bedee44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free memory allocated internally by ArrayFire.  <a href="group__device__func__free__host.htm#ga0cc924b1055eee26851be4cd7bedee44">More...</a><br /></td></tr>
<tr class="separator:ga0cc924b1055eee26851be4cd7bedee44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c79ca1f0e4dcf4168596d9602d7795c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga9c79ca1f0e4dcf4168596d9602d7795c">setMemStepSize</a> (const size_t size)</td></tr>
<tr class="memdesc:ga9c79ca1f0e4dcf4168596d9602d7795c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the resolution of memory chunks.  <a href="group__device__func__mem.htm#ga9c79ca1f0e4dcf4168596d9602d7795c">More...</a><br /></td></tr>
<tr class="separator:ga9c79ca1f0e4dcf4168596d9602d7795c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga779bdc65de61e76e066d2cda263a814e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga779bdc65de61e76e066d2cda263a814e">getMemStepSize</a> ()</td></tr>
<tr class="memdesc:ga779bdc65de61e76e066d2cda263a814e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the resolution of memory chunks.  <a href="group__device__func__mem.htm#ga779bdc65de61e76e066d2cda263a814e">More...</a><br /></td></tr>
<tr class="separator:ga779bdc65de61e76e066d2cda263a814e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2df370c0bde398ff344fbd890095a1d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2df370c0bde398ff344fbd890095a1d1">operator+</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;first, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;second)</td></tr>
<tr class="memdesc:a2df370c0bde398ff344fbd890095a1d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an element-wise addition of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects.  <a href="namespaceaf.htm#a2df370c0bde398ff344fbd890095a1d1">More...</a><br /></td></tr>
<tr class="separator:a2df370c0bde398ff344fbd890095a1d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eb4ad57dd953fe02223b5368b250ca8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a3eb4ad57dd953fe02223b5368b250ca8">operator-</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;first, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;second)</td></tr>
<tr class="memdesc:a3eb4ad57dd953fe02223b5368b250ca8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an element-wise subtraction of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects.  <a href="namespaceaf.htm#a3eb4ad57dd953fe02223b5368b250ca8">More...</a><br /></td></tr>
<tr class="separator:a3eb4ad57dd953fe02223b5368b250ca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4a2467013ed0391538417fdadd9502b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ab4a2467013ed0391538417fdadd9502b">operator*</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;first, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;second)</td></tr>
<tr class="memdesc:ab4a2467013ed0391538417fdadd9502b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an element-wise multiplication of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects.  <a href="namespaceaf.htm#ab4a2467013ed0391538417fdadd9502b">More...</a><br /></td></tr>
<tr class="separator:ab4a2467013ed0391538417fdadd9502b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f5072be3c0830582537f38e2b49ab99"><td class="memItemLeft" align="right" valign="top">static std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4f5072be3c0830582537f38e2b49ab99">operator&lt;&lt;</a> (std::ostream &amp;ostr, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims)</td></tr>
<tr class="memdesc:a4f5072be3c0830582537f38e2b49ab99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints the elements of the <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> array separated by spaces.  <a href="namespaceaf.htm#a4f5072be3c0830582537f38e2b49ab99">More...</a><br /></td></tr>
<tr class="separator:a4f5072be3c0830582537f38e2b49ab99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33bd4ad83b5c49fb3a8c5249c992a006"><td class="memItemLeft" align="right" valign="top">static std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a33bd4ad83b5c49fb3a8c5249c992a006">operator&gt;&gt;</a> (std::istream &amp;istr, <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims)</td></tr>
<tr class="memdesc:a33bd4ad83b5c49fb3a8c5249c992a006"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads 4 dim_t values from an input stream and stores the results in a <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a>.  <a href="namespaceaf.htm#a33bd4ad83b5c49fb3a8c5249c992a006">More...</a><br /></td></tr>
<tr class="separator:a33bd4ad83b5c49fb3a8c5249c992a006"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c6bae4aadd8e506ef0da65eb0491e9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a3c6bae4aadd8e506ef0da65eb0491e9e">isSpan</a> (const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;<a class="el" href="classaf_1_1seq.htm">seq</a>)</td></tr>
<tr class="memdesc:a3c6bae4aadd8e506ef0da65eb0491e9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the <a class="el" href="structaf__seq.htm" title="C-style struct to creating sequences for indexing.">af_seq</a> object represents the entire range of an axis.  <a href="namespaceaf.htm#a3c6bae4aadd8e506ef0da65eb0491e9e">More...</a><br /></td></tr>
<tr class="separator:a3c6bae4aadd8e506ef0da65eb0491e9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55ecb10c221b2648def30fad1e58d124"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a55ecb10c221b2648def30fad1e58d124">seqElements</a> (const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;<a class="el" href="classaf_1_1seq.htm">seq</a>)</td></tr>
<tr class="memdesc:a55ecb10c221b2648def30fad1e58d124"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements that the <a class="el" href="structaf__seq.htm" title="C-style struct to creating sequences for indexing.">af_seq</a> object represents.  <a href="namespaceaf.htm#a55ecb10c221b2648def30fad1e58d124">More...</a><br /></td></tr>
<tr class="separator:a55ecb10c221b2648def30fad1e58d124"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4964be8c454e9ccf0ceeb91d6722cd9a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4964be8c454e9ccf0ceeb91d6722cd9a">calcDim</a> (const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;<a class="el" href="classaf_1_1seq.htm">seq</a>, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> &amp;parentDim)</td></tr>
<tr class="memdesc:a4964be8c454e9ccf0ceeb91d6722cd9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements that will be represented by seq if applied on an array.  <a href="namespaceaf.htm#a4964be8c454e9ccf0ceeb91d6722cd9a">More...</a><br /></td></tr>
<tr class="separator:a4964be8c454e9ccf0ceeb91d6722cd9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa85d63e7305705ef5d9e07dd5b4759a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aa85d63e7305705ef5d9e07dd5b4759a5">gforToggle</a> ()</td></tr>
<tr class="separator:aa85d63e7305705ef5d9e07dd5b4759a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9930f4b8e763020e7ad116b2050c9d6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9930f4b8e763020e7ad116b2050c9d6d">gforGet</a> ()</td></tr>
<tr class="separator:a9930f4b8e763020e7ad116b2050c9d6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2c0d9de8596066acaba7c7788f75160"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ab2c0d9de8596066acaba7c7788f75160">gforSet</a> (bool val)</td></tr>
<tr class="separator:ab2c0d9de8596066acaba7c7788f75160"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0eb9e160f5be4b95234543e5c47934b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aa0eb9e160f5be4b95234543e5c47934b">batchFunc</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs, <a class="el" href="namespaceaf.htm#ad529987e6641d166b1d9e2448fd9212d">batchFunc_t</a> func)</td></tr>
<tr class="separator:aa0eb9e160f5be4b95234543e5c47934b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3be29ad2f4958dcc01f9135da52753f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">grad</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;dx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dy, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga3be29ad2f4958dcc01f9135da52753f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating the gradients.  <a href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">More...</a><br /></td></tr>
<tr class="separator:ga3be29ad2f4958dcc01f9135da52753f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8bcf01ffa60bc513856d98b8a63bb12a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a> (const char *filename, const bool is_color=false)</td></tr>
<tr class="memdesc:ga8bcf01ffa60bc513856d98b8a63bb12a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image.  <a href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">More...</a><br /></td></tr>
<tr class="separator:ga8bcf01ffa60bc513856d98b8a63bb12a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae2e1e9354b0d29c4749ac368efd78b19"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__save.htm#gae2e1e9354b0d29c4749ac368efd78b19">saveImage</a> (const char *filename, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gae2e1e9354b0d29c4749ac368efd78b19"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for saving an image.  <a href="group__imageio__func__save.htm#gae2e1e9354b0d29c4749ac368efd78b19">More...</a><br /></td></tr>
<tr class="separator:gae2e1e9354b0d29c4749ac368efd78b19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b5c4ca71bcd2605eabfc99c8d8c4255"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__load.htm#ga7b5c4ca71bcd2605eabfc99c8d8c4255">loadImageMem</a> (const void *ptr)</td></tr>
<tr class="memdesc:ga7b5c4ca71bcd2605eabfc99c8d8c4255"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image from memory.  <a href="group__imagemem__func__load.htm#ga7b5c4ca71bcd2605eabfc99c8d8c4255">More...</a><br /></td></tr>
<tr class="separator:ga7b5c4ca71bcd2605eabfc99c8d8c4255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91c1530357e06794121de654ac926773"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__save.htm#ga91c1530357e06794121de654ac926773">saveImageMem</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6f">imageFormat</a> format=<a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6fa21fabb1b254e14691a1f99e8c6ed4f3f">AF_FIF_PNG</a>)</td></tr>
<tr class="memdesc:ga91c1530357e06794121de654ac926773"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for saving an image to memory.  <a href="group__imagemem__func__save.htm#ga91c1530357e06794121de654ac926773">More...</a><br /></td></tr>
<tr class="separator:ga91c1530357e06794121de654ac926773"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga40cfcd8cea7470e257d426d673d8d2f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__delete.htm#ga40cfcd8cea7470e257d426d673d8d2f5">deleteImageMem</a> (void *ptr)</td></tr>
<tr class="memdesc:ga40cfcd8cea7470e257d426d673d8d2f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for deleting memory created by <a class="el" href="group__imagemem__func__save.htm#ga91c1530357e06794121de654ac926773">saveImageMem</a> or <a class="el" href="group__imagemem__func__save.htm#gae9f582ee747e6ac5c75209dc6224be8a">af_save_image_memory</a>.  <a href="group__imagemem__func__delete.htm#ga40cfcd8cea7470e257d426d673d8d2f5">More...</a><br /></td></tr>
<tr class="separator:ga40cfcd8cea7470e257d426d673d8d2f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga006c246a48ff0a8b707264713890069e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga006c246a48ff0a8b707264713890069e">loadImageNative</a> (const char *filename)</td></tr>
<tr class="memdesc:ga006c246a48ff0a8b707264713890069e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image as its original type.  <a href="group__imageio__func__load.htm#ga006c246a48ff0a8b707264713890069e">More...</a><br /></td></tr>
<tr class="separator:ga006c246a48ff0a8b707264713890069e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga069f3a3b77fe83e8e3356569eb8a396d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__save.htm#ga069f3a3b77fe83e8e3356569eb8a396d">saveImageNative</a> (const char *filename, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga069f3a3b77fe83e8e3356569eb8a396d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for saving an image without modifications.  <a href="group__imageio__func__save.htm#ga069f3a3b77fe83e8e3356569eb8a396d">More...</a><br /></td></tr>
<tr class="separator:ga069f3a3b77fe83e8e3356569eb8a396d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafcda529bb752c9f4466b7bd345caf370"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__available.htm#gafcda529bb752c9f4466b7bd345caf370">isImageIOAvailable</a> ()</td></tr>
<tr class="memdesc:gafcda529bb752c9f4466b7bd345caf370"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to check if Image IO is available.  <a href="group__imageio__func__available.htm#gafcda529bb752c9f4466b7bd345caf370">More...</a><br /></td></tr>
<tr class="separator:gafcda529bb752c9f4466b7bd345caf370"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga017b9370e3e287693519de5b59fcc8ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__resize.htm#ga017b9370e3e287693519de5b59fcc8ff">resize</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga017b9370e3e287693519de5b59fcc8ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for resizing an image to specified dimensions.  <a href="group__transform__func__resize.htm#ga017b9370e3e287693519de5b59fcc8ff">More...</a><br /></td></tr>
<tr class="separator:ga017b9370e3e287693519de5b59fcc8ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9587c09bde7721659005d920812f5c2a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__resize.htm#ga9587c09bde7721659005d920812f5c2a">resize</a> (const float scale0, const float scale1, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga9587c09bde7721659005d920812f5c2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for resizing an image to specified scales.  <a href="group__transform__func__resize.htm#ga9587c09bde7721659005d920812f5c2a">More...</a><br /></td></tr>
<tr class="separator:ga9587c09bde7721659005d920812f5c2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacf6e37bf51cfb7dbeed76b6ce1b18bbf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__resize.htm#gacf6e37bf51cfb7dbeed76b6ce1b18bbf">resize</a> (const float <a class="el" href="group__transform__func__scale.htm#ga60a399365ffc65ab2ffde4052903a4b3">scale</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:gacf6e37bf51cfb7dbeed76b6ce1b18bbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for resizing an image to specified scale.  <a href="group__transform__func__resize.htm#gacf6e37bf51cfb7dbeed76b6ce1b18bbf">More...</a><br /></td></tr>
<tr class="separator:gacf6e37bf51cfb7dbeed76b6ce1b18bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6555d91c01571c362ebd3bace76d21ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__rotate.htm#ga6555d91c01571c362ebd3bace76d21ea">rotate</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float theta, const bool crop=true, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga6555d91c01571c362ebd3bace76d21ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for rotating an image.  <a href="group__transform__func__rotate.htm#ga6555d91c01571c362ebd3bace76d21ea">More...</a><br /></td></tr>
<tr class="separator:ga6555d91c01571c362ebd3bace76d21ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3677c5a534ca50a9c8a2611fe0728fd8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__transform.htm#ga3677c5a534ca50a9c8a2611fe0728fd8">transform</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;transform, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>, const bool <a class="el" href="group__lapack__ops__func__inv.htm#ga9b5273956b11bfe8a6284ba0fd1a7ce9">inverse</a>=true)</td></tr>
<tr class="memdesc:ga3677c5a534ca50a9c8a2611fe0728fd8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for transforming an image.  <a href="group__transform__func__transform.htm#ga3677c5a534ca50a9c8a2611fe0728fd8">More...</a><br /></td></tr>
<tr class="separator:ga3677c5a534ca50a9c8a2611fe0728fd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga536bf2c56bcf9ea6aeeca3f43f188877"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__coordinates.htm#ga536bf2c56bcf9ea6aeeca3f43f188877">transformCoordinates</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;tf, const float d0, const float d1)</td></tr>
<tr class="memdesc:ga536bf2c56bcf9ea6aeeca3f43f188877"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for transforming coordinates.  <a href="group__transform__func__coordinates.htm#ga536bf2c56bcf9ea6aeeca3f43f188877">More...</a><br /></td></tr>
<tr class="separator:ga536bf2c56bcf9ea6aeeca3f43f188877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3eb49e59b07072d0ccee3a6db64774b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__translate.htm#ga3eb49e59b07072d0ccee3a6db64774b4">translate</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float trans0, const float trans1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga3eb49e59b07072d0ccee3a6db64774b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for translating an image.  <a href="group__transform__func__translate.htm#ga3eb49e59b07072d0ccee3a6db64774b4">More...</a><br /></td></tr>
<tr class="separator:ga3eb49e59b07072d0ccee3a6db64774b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60a399365ffc65ab2ffde4052903a4b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__scale.htm#ga60a399365ffc65ab2ffde4052903a4b3">scale</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float scale0, const float scale1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga60a399365ffc65ab2ffde4052903a4b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for scaling an image.  <a href="group__transform__func__scale.htm#ga60a399365ffc65ab2ffde4052903a4b3">More...</a><br /></td></tr>
<tr class="separator:ga60a399365ffc65ab2ffde4052903a4b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga89a39e12b8c619e33de409d4a9a787f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__skew.htm#ga89a39e12b8c619e33de409d4a9a787f6">skew</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float skew0, const float skew1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const bool <a class="el" href="group__lapack__ops__func__inv.htm#ga9b5273956b11bfe8a6284ba0fd1a7ce9">inverse</a>=true, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga89a39e12b8c619e33de409d4a9a787f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for skewing an image.  <a href="group__transform__func__skew.htm#ga89a39e12b8c619e33de409d4a9a787f6">More...</a><br /></td></tr>
<tr class="separator:ga89a39e12b8c619e33de409d4a9a787f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ee5156a2d3a51a55f36a797d1274605"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__bilateral.htm#ga2ee5156a2d3a51a55f36a797d1274605">bilateral</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float spatial_sigma, const float chromatic_sigma, const bool is_color=false)</td></tr>
<tr class="memdesc:ga2ee5156a2d3a51a55f36a797d1274605"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for bilateral filter.  <a href="group__image__func__bilateral.htm#ga2ee5156a2d3a51a55f36a797d1274605">More...</a><br /></td></tr>
<tr class="separator:ga2ee5156a2d3a51a55f36a797d1274605"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb93ba76739ef18b3698e39c7768c90a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a">histogram</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned nbins, const double minval, const double maxval)</td></tr>
<tr class="memdesc:gafb93ba76739ef18b3698e39c7768c90a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for histogram.  <a href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a">More...</a><br /></td></tr>
<tr class="separator:gafb93ba76739ef18b3698e39c7768c90a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47eef3dbd2e0c888f0fc36d1dc1efa19"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histogram.htm#ga47eef3dbd2e0c888f0fc36d1dc1efa19">histogram</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned nbins)</td></tr>
<tr class="memdesc:ga47eef3dbd2e0c888f0fc36d1dc1efa19"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for histogram.  <a href="group__image__func__histogram.htm#ga47eef3dbd2e0c888f0fc36d1dc1efa19">More...</a><br /></td></tr>
<tr class="separator:ga47eef3dbd2e0c888f0fc36d1dc1efa19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa903c45b57c62e3b0023092b5b3e0bd9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__mean__shift.htm#gaa903c45b57c62e3b0023092b5b3e0bd9">meanShift</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float spatial_sigma, const float chromatic_sigma, const unsigned iter, const bool is_color=false)</td></tr>
<tr class="memdesc:gaa903c45b57c62e3b0023092b5b3e0bd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean shift.  <a href="group__image__func__mean__shift.htm#gaa903c45b57c62e3b0023092b5b3e0bd9">More...</a><br /></td></tr>
<tr class="separator:gaa903c45b57c62e3b0023092b5b3e0bd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade7080b51da7d09c0e50f7cdf540cf8f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__minfilt.htm#gade7080b51da7d09c0e50f7cdf540cf8f">minfilt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_length=3, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:gade7080b51da7d09c0e50f7cdf540cf8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for minimum filter.  <a href="group__image__func__minfilt.htm#gade7080b51da7d09c0e50f7cdf540cf8f">More...</a><br /></td></tr>
<tr class="separator:gade7080b51da7d09c0e50f7cdf540cf8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38794af471449a306eff2d4dfb3418ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__maxfilt.htm#ga38794af471449a306eff2d4dfb3418ed">maxfilt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_length=3, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:ga38794af471449a306eff2d4dfb3418ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for maximum filter.  <a href="group__image__func__maxfilt.htm#ga38794af471449a306eff2d4dfb3418ed">More...</a><br /></td></tr>
<tr class="separator:ga38794af471449a306eff2d4dfb3418ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaceef10b27d910ca3b95245fd1127bbab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;mask)</td></tr>
<tr class="memdesc:gaceef10b27d910ca3b95245fd1127bbab"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for image dilation (max filter)  <a href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">More...</a><br /></td></tr>
<tr class="separator:gaceef10b27d910ca3b95245fd1127bbab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7d4166a38c6779aa606877c7de21451c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__dilate3d.htm#ga7d4166a38c6779aa606877c7de21451c">dilate3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;mask)</td></tr>
<tr class="memdesc:ga7d4166a38c6779aa606877c7de21451c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for 3D image dilation.  <a href="group__image__func__dilate3d.htm#ga7d4166a38c6779aa606877c7de21451c">More...</a><br /></td></tr>
<tr class="separator:ga7d4166a38c6779aa606877c7de21451c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga67a7a6f8713e9df3ffdab5e859cddf69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;mask)</td></tr>
<tr class="memdesc:ga67a7a6f8713e9df3ffdab5e859cddf69"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for image erosion (min filter)  <a href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">More...</a><br /></td></tr>
<tr class="separator:ga67a7a6f8713e9df3ffdab5e859cddf69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad3c73d8bc5c98d53ef5c3325211fa958"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__erode3d.htm#gad3c73d8bc5c98d53ef5c3325211fa958">erode3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;mask)</td></tr>
<tr class="memdesc:gad3c73d8bc5c98d53ef5c3325211fa958"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for 3d for image erosion.  <a href="group__image__func__erode3d.htm#gad3c73d8bc5c98d53ef5c3325211fa958">More...</a><br /></td></tr>
<tr class="separator:gad3c73d8bc5c98d53ef5c3325211fa958"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa4c7144b6fde68c99d7e9c9ae3336abe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__regions.htm#gaa4c7144b6fde68c99d7e9c9ae3336abe">regions</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">af::connectivity</a> <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">connectivity</a>=<a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28bea5c1141bbd2404f74471630455d8653bf">AF_CONNECTIVITY_4</a>, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gaa4c7144b6fde68c99d7e9c9ae3336abe"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting regions in an image.  <a href="group__image__func__regions.htm#gaa4c7144b6fde68c99d7e9c9ae3336abe">More...</a><br /></td></tr>
<tr class="separator:gaa4c7144b6fde68c99d7e9c9ae3336abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6c098aec0c9768f8264a95eb00deda3a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__sobel.htm#ga6c098aec0c9768f8264a95eb00deda3a">sobel</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;dx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dy, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;img, const unsigned ker_size=3)</td></tr>
<tr class="memdesc:ga6c098aec0c9768f8264a95eb00deda3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for extracting sobel gradients.  <a href="group__image__func__sobel.htm#ga6c098aec0c9768f8264a95eb00deda3a">More...</a><br /></td></tr>
<tr class="separator:ga6c098aec0c9768f8264a95eb00deda3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4628103e54be332b7c1a9da0e006361b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__sobel.htm#ga4628103e54be332b7c1a9da0e006361b">sobel</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;img, const unsigned ker_size=3, const bool isFast=false)</td></tr>
<tr class="memdesc:ga4628103e54be332b7c1a9da0e006361b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sobel filtering.  <a href="group__image__func__sobel.htm#ga4628103e54be332b7c1a9da0e006361b">More...</a><br /></td></tr>
<tr class="separator:ga4628103e54be332b7c1a9da0e006361b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8a4d6c8e00646611caa7194a65769eda"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2gray.htm#ga8a4d6c8e00646611caa7194a65769eda">rgb2gray</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float rPercent=0.2126f, const float gPercent=0.7152f, const float bPercent=0.0722f)</td></tr>
<tr class="memdesc:ga8a4d6c8e00646611caa7194a65769eda"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for RGB to gray conversion.  <a href="group__image__func__rgb2gray.htm#ga8a4d6c8e00646611caa7194a65769eda">More...</a><br /></td></tr>
<tr class="separator:ga8a4d6c8e00646611caa7194a65769eda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7d39aa4eb8c126a5f4b5d66c7147f131"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gray2rgb.htm#ga7d39aa4eb8c126a5f4b5d66c7147f131">gray2rgb</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float rFactor=1.0, const float gFactor=1.0, const float bFactor=1.0)</td></tr>
<tr class="memdesc:ga7d39aa4eb8c126a5f4b5d66c7147f131"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for gray to RGB conversion.  <a href="group__image__func__gray2rgb.htm#ga7d39aa4eb8c126a5f4b5d66c7147f131">More...</a><br /></td></tr>
<tr class="separator:ga7d39aa4eb8c126a5f4b5d66c7147f131"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0c09893b2ba7a63663a1893bc5d87e47"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histequal.htm#ga0c09893b2ba7a63663a1893bc5d87e47">histEqual</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;hist)</td></tr>
<tr class="memdesc:ga0c09893b2ba7a63663a1893bc5d87e47"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for histogram equalization.  <a href="group__image__func__histequal.htm#ga0c09893b2ba7a63663a1893bc5d87e47">More...</a><br /></td></tr>
<tr class="separator:ga0c09893b2ba7a63663a1893bc5d87e47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5de1866bc1bf50bf5fe3cb26d4e410d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a> (const int rows, const int cols, const double sig_r=0, const double sig_c=0)</td></tr>
<tr class="memdesc:gaa5de1866bc1bf50bf5fe3cb26d4e410d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for generating gausian kernels.  <a href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">More...</a><br /></td></tr>
<tr class="separator:gaa5de1866bc1bf50bf5fe3cb26d4e410d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad07af8a0414ebad470796f1775ecadc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__hsv2rgb.htm#gaad07af8a0414ebad470796f1775ecadc">hsv2rgb</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaad07af8a0414ebad470796f1775ecadc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for converting HSV to RGB.  <a href="group__image__func__hsv2rgb.htm#gaad07af8a0414ebad470796f1775ecadc">More...</a><br /></td></tr>
<tr class="separator:gaad07af8a0414ebad470796f1775ecadc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaef09b6891d44dfaaf2389ae05e722d0e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2hsv.htm#gaef09b6891d44dfaaf2389ae05e722d0e">rgb2hsv</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaef09b6891d44dfaaf2389ae05e722d0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for converting RGB to HSV.  <a href="group__image__func__rgb2hsv.htm#gaef09b6891d44dfaaf2389ae05e722d0e">More...</a><br /></td></tr>
<tr class="separator:gaef09b6891d44dfaaf2389ae05e722d0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9dabba47b9390faacf8fb146605339b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">colorSpace</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;image, const <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a> to, const <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a> from)</td></tr>
<tr class="memdesc:ga9dabba47b9390faacf8fb146605339b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for colorspace conversion.  <a href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">More...</a><br /></td></tr>
<tr class="separator:ga9dabba47b9390faacf8fb146605339b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabd48af39af6bb17efb70747cc132ad60"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py=0, const bool is_column=true)</td></tr>
<tr class="memdesc:gabd48af39af6bb17efb70747cc132ad60"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for rearranging windowed sections of an input into columns (or rows)  <a href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">More...</a><br /></td></tr>
<tr class="separator:gabd48af39af6bb17efb70747cc132ad60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga06a40cc4907e646437d7729823a8054d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__wrap.htm#ga06a40cc4907e646437d7729823a8054d">wrap</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> ox, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> oy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py=0, const bool is_column=true)</td></tr>
<tr class="memdesc:ga06a40cc4907e646437d7729823a8054d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for performing the opposite of <a class="el" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap()</a>  <a href="group__image__func__wrap.htm#ga06a40cc4907e646437d7729823a8054d">More...</a><br /></td></tr>
<tr class="separator:ga06a40cc4907e646437d7729823a8054d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9bf5c159ddb82689b454f686a7549f22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__sat.htm#ga9bf5c159ddb82689b454f686a7549f22">sat</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga9bf5c159ddb82689b454f686a7549f22"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for summed area tables.  <a href="group__image__func__sat.htm#ga9bf5c159ddb82689b454f686a7549f22">More...</a><br /></td></tr>
<tr class="separator:ga9bf5c159ddb82689b454f686a7549f22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa2fee1bce8855e7072a306ed75636d84"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__ycbcr2rgb.htm#gaa2fee1bce8855e7072a306ed75636d84">ycbcr2rgb</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">YCCStd</a> standard=<a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4a6bf76f6da5ac2f402c332a9c577f349f">AF_YCC_601</a>)</td></tr>
<tr class="memdesc:gaa2fee1bce8855e7072a306ed75636d84"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for converting YCbCr to RGB.  <a href="group__image__func__ycbcr2rgb.htm#gaa2fee1bce8855e7072a306ed75636d84">More...</a><br /></td></tr>
<tr class="separator:gaa2fee1bce8855e7072a306ed75636d84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4f0faf8297515d78ce3050c0405ff689"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2ycbcr.htm#ga4f0faf8297515d78ce3050c0405ff689">rgb2ycbcr</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">YCCStd</a> standard=<a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4a6bf76f6da5ac2f402c332a9c577f349f">AF_YCC_601</a>)</td></tr>
<tr class="memdesc:ga4f0faf8297515d78ce3050c0405ff689"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for converting RGB to YCbCr.  <a href="group__image__func__rgb2ycbcr.htm#ga4f0faf8297515d78ce3050c0405ff689">More...</a><br /></td></tr>
<tr class="separator:ga4f0faf8297515d78ce3050c0405ff689"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad47cec0ccc29f245d9f565bddb4c3ad9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__moments.htm#gad47cec0ccc29f245d9f565bddb4c3ad9">moments</a> (double *out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">momentType</a> moment=<a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0a438c36c62e4d61011c3d2de0a20be0a7">AF_MOMENT_FIRST_ORDER</a>)</td></tr>
<tr class="memdesc:gad47cec0ccc29f245d9f565bddb4c3ad9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating an image moment.  <a href="group__image__func__moments.htm#gad47cec0ccc29f245d9f565bddb4c3ad9">More...</a><br /></td></tr>
<tr class="separator:gad47cec0ccc29f245d9f565bddb4c3ad9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae505b21ea70109a95c8ba6a5568a5d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__moments.htm#gaae505b21ea70109a95c8ba6a5568a5d6">moments</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">momentType</a> moment=<a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0a438c36c62e4d61011c3d2de0a20be0a7">AF_MOMENT_FIRST_ORDER</a>)</td></tr>
<tr class="memdesc:gaae505b21ea70109a95c8ba6a5568a5d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating image moments.  <a href="group__image__func__moments.htm#gaae505b21ea70109a95c8ba6a5568a5d6">More...</a><br /></td></tr>
<tr class="separator:gaae505b21ea70109a95c8ba6a5568a5d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7b79d6b508a72d1ae2edf8ce408783e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__canny.htm#gae7b79d6b508a72d1ae2edf8ce408783e">canny</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a179019caba59979e58ec07d81cd25ef2">cannyThreshold</a> thresholdType, const float lowThresholdRatio, const float highThresholdRatio, const unsigned sobelWindow=3, const bool isFast=false)</td></tr>
<tr class="memdesc:gae7b79d6b508a72d1ae2edf8ce408783e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for canny edge detector.  <a href="group__image__func__canny.htm#gae7b79d6b508a72d1ae2edf8ce408783e">More...</a><br /></td></tr>
<tr class="separator:gae7b79d6b508a72d1ae2edf8ce408783e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62593ac0ae478394a2c194943ee19dbf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__anisotropic__diffusion.htm#ga62593ac0ae478394a2c194943ee19dbf">anisotropicDiffusion</a> (const <a class="el" href="classaf_1_1array.htm">af::array</a> &amp;in, const float timestep, const float conductance, const unsigned iterations, const <a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbb">fluxFunction</a> fftype=<a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbba356bf447a07e7dc28779dccb650e432a">AF_FLUX_EXPONENTIAL</a>, const <a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5">diffusionEq</a> diffusionKind=<a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5af54c5e7995abd1cf6286da145f6d0295">AF_DIFFUSION_GRAD</a>)</td></tr>
<tr class="memdesc:ga62593ac0ae478394a2c194943ee19dbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for gradient anisotropic(non-linear diffusion) smoothing.  <a href="group__image__func__anisotropic__diffusion.htm#ga62593ac0ae478394a2c194943ee19dbf">More...</a><br /></td></tr>
<tr class="separator:ga62593ac0ae478394a2c194943ee19dbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga034bf9cbe61bbacc3b198f9c155a3aeb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__iterative__deconv.htm#ga034bf9cbe61bbacc3b198f9c155a3aeb">iterativeDeconv</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;ker, const unsigned iterations, const float relaxFactor, const <a class="el" href="defines_8h.htm#a201e6b1dd1068c9795168fc25759a17c">iterativeDeconvAlgo</a> algo)</td></tr>
<tr class="memdesc:ga034bf9cbe61bbacc3b198f9c155a3aeb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for Iterative deconvolution algorithm.  <a href="group__image__func__iterative__deconv.htm#ga034bf9cbe61bbacc3b198f9c155a3aeb">More...</a><br /></td></tr>
<tr class="separator:ga034bf9cbe61bbacc3b198f9c155a3aeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaca39caf529684901716c419be656fb7f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__inverse__deconv.htm#gaca39caf529684901716c419be656fb7f">inverseDeconv</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;psf, const float gamma, const <a class="el" href="defines_8h.htm#a2bdf5ea652ab094b2e3dcbeebd0b35c6">inverseDeconvAlgo</a> algo)</td></tr>
<tr class="memdesc:gaca39caf529684901716c419be656fb7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for Tikhonov deconvolution algorithm.  <a href="group__image__func__inverse__deconv.htm#gaca39caf529684901716c419be656fb7f">More...</a><br /></td></tr>
<tr class="separator:gaca39caf529684901716c419be656fb7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd1e49cc5f8f713c2b708b7047e635a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__confidence__cc.htm#gafd1e49cc5f8f713c2b708b7047e635a3">confidenceCC</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;seeds, const unsigned radius, const unsigned multiplier, const int iter, const double segmentedValue)</td></tr>
<tr class="memdesc:gafd1e49cc5f8f713c2b708b7047e635a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for confidence connected components.  <a href="group__image__func__confidence__cc.htm#gafd1e49cc5f8f713c2b708b7047e635a3">More...</a><br /></td></tr>
<tr class="separator:gafd1e49cc5f8f713c2b708b7047e635a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf9e6cd132a0d44b6381fcc973dcd4138"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__confidence__cc.htm#gaf9e6cd132a0d44b6381fcc973dcd4138">confidenceCC</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;seedx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;seedy, const unsigned radius, const unsigned multiplier, const int iter, const double segmentedValue)</td></tr>
<tr class="memdesc:gaf9e6cd132a0d44b6381fcc973dcd4138"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for confidence connected components.  <a href="group__image__func__confidence__cc.htm#gaf9e6cd132a0d44b6381fcc973dcd4138">More...</a><br /></td></tr>
<tr class="separator:gaf9e6cd132a0d44b6381fcc973dcd4138"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd8e8f9953f2d22878455bc0be617469"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__confidence__cc.htm#gacd8e8f9953f2d22878455bc0be617469">confidenceCC</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const size_t num_seeds, const unsigned *seedx, const unsigned *seedy, const unsigned radius, const unsigned multiplier, const int iter, const double segmentedValue)</td></tr>
<tr class="memdesc:gacd8e8f9953f2d22878455bc0be617469"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for confidence connected components.  <a href="group__image__func__confidence__cc.htm#gacd8e8f9953f2d22878455bc0be617469">More...</a><br /></td></tr>
<tr class="separator:gacd8e8f9953f2d22878455bc0be617469"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7bb6cefab347540526b1ac2584d006e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__index__func__lookup.htm#gac7bb6cefab347540526b1ac2584d006e">lookup</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, const int dim=-1)</td></tr>
<tr class="memdesc:gac7bb6cefab347540526b1ac2584d006e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lookup the values of an input array by indexing with another array.  <a href="group__index__func__lookup.htm#gac7bb6cefab347540526b1ac2584d006e">More...</a><br /></td></tr>
<tr class="separator:gac7bb6cefab347540526b1ac2584d006e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25f470817062b23ad3f74347ea44b17c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">copy</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;dst, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;src, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;idx0, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;idx1=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;idx2=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;idx3=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>)</td></tr>
<tr class="memdesc:ga25f470817062b23ad3f74347ea44b17c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy the values of an input array based on index.  <a href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">More...</a><br /></td></tr>
<tr class="separator:ga25f470817062b23ad3f74347ea44b17c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f26a132406721522f1dc45939c16a38"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__create.htm#ga1f26a132406721522f1dc45939c16a38">createStridedArray</a> (const void *data, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> offset, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> dims, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> strides, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> ty, const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> location)</td></tr>
<tr class="separator:ga1f26a132406721522f1dc45939c16a38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0965272516636da9304f7b7e181312ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__strides.htm#ga0965272516636da9304f7b7e181312ac">getStrides</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga0965272516636da9304f7b7e181312ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab0e18ce8a2173c02c97e5c351723ea4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__offset.htm#gaab0e18ce8a2173c02c97e5c351723ea4">getOffset</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:gaab0e18ce8a2173c02c97e5c351723ea4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b9055a482a20849c790617f3587b19f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6b9055a482a20849c790617f3587b19f">getRawPtr</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:a6b9055a482a20849c790617f3587b19f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga35d497b1aa8c6f2a843ab3b1212bb49f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__linear.htm#ga35d497b1aa8c6f2a843ab3b1212bb49f">isLinear</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga35d497b1aa8c6f2a843ab3b1212bb49f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae1c42a165ae7b6be86727cf6321a69c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__owner.htm#gae1c42a165ae7b6be86727cf6321a69c8">isOwner</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:gae1c42a165ae7b6be86727cf6321a69c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab016ef45fce266ab9545054bea1cb6b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gab016ef45fce266ab9545054bea1cb6b7">svd</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;u, <a class="el" href="classaf_1_1array.htm">array</a> &amp;s, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vt, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab016ef45fce266ab9545054bea1cb6b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SVD decomposition.  <a href="group__lapack__factor__func__svd.htm#gab016ef45fce266ab9545054bea1cb6b7">More...</a><br /></td></tr>
<tr class="separator:gab016ef45fce266ab9545054bea1cb6b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab551c4f09090010669e3906988ac8a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gaab551c4f09090010669e3906988ac8a1">svdInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;u, <a class="el" href="classaf_1_1array.htm">array</a> &amp;s, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vt, <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaab551c4f09090010669e3906988ac8a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SVD decomposition (in-place)  <a href="group__lapack__factor__func__svd.htm#gaab551c4f09090010669e3906988ac8a1">More...</a><br /></td></tr>
<tr class="separator:gaab551c4f09090010669e3906988ac8a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafdec123882c86755b3ce260d6abb36ec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__lu.htm#gafdec123882c86755b3ce260d6abb36ec">lu</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;pivot, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_lapack_piv=true)</td></tr>
<tr class="memdesc:gafdec123882c86755b3ce260d6abb36ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for LU decomposition in packed format.  <a href="group__lapack__factor__func__lu.htm#gafdec123882c86755b3ce260d6abb36ec">More...</a><br /></td></tr>
<tr class="separator:gafdec123882c86755b3ce260d6abb36ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb704a53283b1abb0419ce478c4ce217"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__lu.htm#gadb704a53283b1abb0419ce478c4ce217">lu</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="group__data__func__lower.htm#ga3217e07693fdd099fc9acc9065e0a66e">lower</a>, <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="group__data__func__upper.htm#ga724c96cef1c7ae0e9e6ce8ba33ac3eaa">upper</a>, <a class="el" href="classaf_1_1array.htm">array</a> &amp;pivot, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gadb704a53283b1abb0419ce478c4ce217"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for LU decomposition.  <a href="group__lapack__factor__func__lu.htm#gadb704a53283b1abb0419ce478c4ce217">More...</a><br /></td></tr>
<tr class="separator:gadb704a53283b1abb0419ce478c4ce217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae42d8e18ff303b659fda897409bc5702"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__lu.htm#gae42d8e18ff303b659fda897409bc5702">luInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;pivot, <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_lapack_piv=true)</td></tr>
<tr class="memdesc:gae42d8e18ff303b659fda897409bc5702"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for in place LU decomposition.  <a href="group__lapack__factor__func__lu.htm#gae42d8e18ff303b659fda897409bc5702">More...</a><br /></td></tr>
<tr class="separator:gae42d8e18ff303b659fda897409bc5702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4d0365e8dc9c0c588e52f19c53f7e83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__qr.htm#gab4d0365e8dc9c0c588e52f19c53f7e83">qr</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;tau, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab4d0365e8dc9c0c588e52f19c53f7e83"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for QR decomposition in packed format.  <a href="group__lapack__factor__func__qr.htm#gab4d0365e8dc9c0c588e52f19c53f7e83">More...</a><br /></td></tr>
<tr class="separator:gab4d0365e8dc9c0c588e52f19c53f7e83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac41bf187d43e3d84d6533ab443c07be8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__qr.htm#gac41bf187d43e3d84d6533ab443c07be8">qr</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;q, <a class="el" href="classaf_1_1array.htm">array</a> &amp;r, <a class="el" href="classaf_1_1array.htm">array</a> &amp;tau, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac41bf187d43e3d84d6533ab443c07be8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for QR decomposition.  <a href="group__lapack__factor__func__qr.htm#gac41bf187d43e3d84d6533ab443c07be8">More...</a><br /></td></tr>
<tr class="separator:gac41bf187d43e3d84d6533ab443c07be8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea212c00a2f241d64c0aa73d9b78e158"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__qr.htm#gaea212c00a2f241d64c0aa73d9b78e158">qrInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;tau, <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaea212c00a2f241d64c0aa73d9b78e158"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for QR decomposition.  <a href="group__lapack__factor__func__qr.htm#gaea212c00a2f241d64c0aa73d9b78e158">More...</a><br /></td></tr>
<tr class="separator:gaea212c00a2f241d64c0aa73d9b78e158"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4a8bbe24dd91ab1f5fdbe5b70940f64"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__cholesky.htm#gad4a8bbe24dd91ab1f5fdbe5b70940f64">cholesky</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_upper=true)</td></tr>
<tr class="memdesc:gad4a8bbe24dd91ab1f5fdbe5b70940f64"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for cholesky decomposition.  <a href="group__lapack__factor__func__cholesky.htm#gad4a8bbe24dd91ab1f5fdbe5b70940f64">More...</a><br /></td></tr>
<tr class="separator:gad4a8bbe24dd91ab1f5fdbe5b70940f64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac1d4ac4de57dea4841cb11c5e6865792"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__cholesky.htm#gac1d4ac4de57dea4841cb11c5e6865792">choleskyInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_upper=true)</td></tr>
<tr class="memdesc:gac1d4ac4de57dea4841cb11c5e6865792"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for in place cholesky decomposition.  <a href="group__lapack__factor__func__cholesky.htm#gac1d4ac4de57dea4841cb11c5e6865792">More...</a><br /></td></tr>
<tr class="separator:gac1d4ac4de57dea4841cb11c5e6865792"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa945e188a6a4860f50a8938d04638103"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__solve__func__gen.htm#gaa945e188a6a4860f50a8938d04638103">solve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> options=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:gaa945e188a6a4860f50a8938d04638103"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for solving a system of equations.  <a href="group__lapack__solve__func__gen.htm#gaa945e188a6a4860f50a8938d04638103">More...</a><br /></td></tr>
<tr class="separator:gaa945e188a6a4860f50a8938d04638103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb8e3d9894bfe9ef0d21380212637250"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__solve__lu__func__gen.htm#gafb8e3d9894bfe9ef0d21380212637250">solveLU</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;piv, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> options=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:gafb8e3d9894bfe9ef0d21380212637250"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for solving a system of equations.  <a href="group__lapack__solve__lu__func__gen.htm#gafb8e3d9894bfe9ef0d21380212637250">More...</a><br /></td></tr>
<tr class="separator:gafb8e3d9894bfe9ef0d21380212637250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b5273956b11bfe8a6284ba0fd1a7ce9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__inv.htm#ga9b5273956b11bfe8a6284ba0fd1a7ce9">inverse</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> options=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:ga9b5273956b11bfe8a6284ba0fd1a7ce9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverting a matrix.  <a href="group__lapack__ops__func__inv.htm#ga9b5273956b11bfe8a6284ba0fd1a7ce9">More...</a><br /></td></tr>
<tr class="separator:ga9b5273956b11bfe8a6284ba0fd1a7ce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabaa896b0ad90f59464682abfa080ff37"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__pinv.htm#gabaa896b0ad90f59464682abfa080ff37">pinverse</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double tol=1E-6, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> options=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:gabaa896b0ad90f59464682abfa080ff37"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for pseudo-inverting (Moore-Penrose) a matrix.  <a href="group__lapack__ops__func__pinv.htm#gabaa896b0ad90f59464682abfa080ff37">More...</a><br /></td></tr>
<tr class="separator:gabaa896b0ad90f59464682abfa080ff37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d6fa038bea18a33a4ea57a276a68937"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__rank.htm#ga5d6fa038bea18a33a4ea57a276a68937">rank</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double tol=1E-5)</td></tr>
<tr class="memdesc:ga5d6fa038bea18a33a4ea57a276a68937"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding the rank of a matrix.  <a href="group__lapack__ops__func__rank.htm#ga5d6fa038bea18a33a4ea57a276a68937">More...</a><br /></td></tr>
<tr class="separator:ga5d6fa038bea18a33a4ea57a276a68937"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17c069073fc6ccfe4d4b32829ae8342c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga17c069073fc6ccfe4d4b32829ae8342c"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__det.htm#ga17c069073fc6ccfe4d4b32829ae8342c">det</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga17c069073fc6ccfe4d4b32829ae8342c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding the determinant of a matrix.  <a href="group__lapack__ops__func__det.htm#ga17c069073fc6ccfe4d4b32829ae8342c">More...</a><br /></td></tr>
<tr class="separator:ga17c069073fc6ccfe4d4b32829ae8342c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gada407977a0136ba855b8bef162dc9fcf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__norm.htm#gada407977a0136ba855b8bef162dc9fcf">norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdd">normType</a> type=<a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdda7c80a116614cf5d15335226bc27e03ec">AF_NORM_EUCLID</a>, const double p=1, const double q=1)</td></tr>
<tr class="memdesc:gada407977a0136ba855b8bef162dc9fcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for norm of a matrix.  <a href="group__lapack__ops__func__norm.htm#gada407977a0136ba855b8bef162dc9fcf">More...</a><br /></td></tr>
<tr class="separator:gada407977a0136ba855b8bef162dc9fcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5d8d522712fa6039cae0dfdc00aad74"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__helper__func__available.htm#gad5d8d522712fa6039cae0dfdc00aad74">isLAPACKAvailable</a> ()</td></tr>
<tr class="memdesc:gad5d8d522712fa6039cae0dfdc00aad74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true is ArrayFire is compiled with LAPACK support.  <a href="group__lapack__helper__func__available.htm#gad5d8d522712fa6039cae0dfdc00aad74">More...</a><br /></td></tr>
<tr class="separator:gad5d8d522712fa6039cae0dfdc00aad74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad86c9831ef20ca900eae5e094da9764"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ml__convolution.htm#gaad86c9831ef20ca900eae5e094da9764">convolve2GradientNN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;incoming_gradient, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;original_signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;original_filter, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;convolved_output, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> stride, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> padding, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> dilation, <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">convGradientType</a> grad_type)</td></tr>
<tr class="memdesc:gaad86c9831ef20ca900eae5e094da9764"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ interface for calculating backward pass gradient of 2D convolution This function calculates the gradient with respect to the output of the <a class="el" href="group__signal__func__convolve2.htm#ga8a6da9b0bf8e0287d71d02e2cd763cde">convolve2NN()</a> function that uses the machine learning formulation for the dimensions of the signals and filters.  <a href="group__ml__convolution.htm#gaad86c9831ef20ca900eae5e094da9764">More...</a><br /></td></tr>
<tr class="separator:gaad86c9831ef20ca900eae5e094da9764"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe9a79d7b21f0a8fb7ace6920ead4772"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty, <a class="el" href="classaf_1_1randomEngine.htm">randomEngine</a> &amp;r)</td></tr>
<tr class="separator:gabe9a79d7b21f0a8fb7ace6920ead4772"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2e9602d5bcc87204842b634816afa8a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#ga2e9602d5bcc87204842b634816afa8a4">randn</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty, <a class="el" href="classaf_1_1randomEngine.htm">randomEngine</a> &amp;r)</td></tr>
<tr class="separator:ga2e9602d5bcc87204842b634816afa8a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15a5110a447509cab9589b2ad56c5e55"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">randu</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga15a5110a447509cab9589b2ad56c5e55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab3e2105aec551cb0bbcf104d437c0481"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#gab3e2105aec551cb0bbcf104d437c0481">randu</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:gab3e2105aec551cb0bbcf104d437c0481"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a08025609da7db72c3a22493f85a171"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#ga9a08025609da7db72c3a22493f85a171">randu</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga9a08025609da7db72c3a22493f85a171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0d335466e5f5a1cb821dc241804923b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#gae0d335466e5f5a1cb821dc241804923b">randu</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:gae0d335466e5f5a1cb821dc241804923b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac05c5b2de1cfc2d763b7d2943e9deee3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#gac05c5b2de1cfc2d763b7d2943e9deee3">randu</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:gac05c5b2de1cfc2d763b7d2943e9deee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae8aa1f5ec310aeb9e4cbd19d63998349"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#gae8aa1f5ec310aeb9e4cbd19d63998349">randn</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:gae8aa1f5ec310aeb9e4cbd19d63998349"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d7b55d3d0f34d71f30a70ed7a2d928d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#ga5d7b55d3d0f34d71f30a70ed7a2d928d">randn</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga5d7b55d3d0f34d71f30a70ed7a2d928d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5fe422f8cf2acc3c6f782f9148360f6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#ga5fe422f8cf2acc3c6f782f9148360f6c">randn</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga5fe422f8cf2acc3c6f782f9148360f6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga150fb95ddda0e37e8961254ca7afc8e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#ga150fb95ddda0e37e8961254ca7afc8e5">randn</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga150fb95ddda0e37e8961254ca7afc8e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9bc154f0bf07116ad208b2da4b71c3d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#ga9bc154f0bf07116ad208b2da4b71c3d8">randn</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="separator:ga9bc154f0bf07116ad208b2da4b71c3d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8f31e32f92c7a57c74d844232b078781"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__set__default__engine.htm#ga8f31e32f92c7a57c74d844232b078781">setDefaultRandomEngineType</a> (<a class="el" href="defines_8h.htm#a82a3bf91d6dd04661c63632d0fbf4934">randomEngineType</a> rtype)</td></tr>
<tr class="separator:ga8f31e32f92c7a57c74d844232b078781"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b4b964f45cc586a2eb63df24961ddb0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1randomEngine.htm">randomEngine</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__get__default__engine.htm#ga6b4b964f45cc586a2eb63df24961ddb0">getDefaultRandomEngine</a> (void)</td></tr>
<tr class="separator:ga6b4b964f45cc586a2eb63df24961ddb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacc0b010152a273ffc828ea4fc4436ff2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__set__seed.htm#gacc0b010152a273ffc828ea4fc4436ff2">setSeed</a> (const unsigned long long seed)</td></tr>
<tr class="memdesc:gacc0b010152a273ffc828ea4fc4436ff2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the seed of the default random number generator.  <a href="group__random__func__set__seed.htm#gacc0b010152a273ffc828ea4fc4436ff2">More...</a><br /></td></tr>
<tr class="separator:gacc0b010152a273ffc828ea4fc4436ff2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b82c624a5fe69834532ec5ac66078a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__get__seed.htm#ga0b82c624a5fe69834532ec5ac66078a6">getSeed</a> ()</td></tr>
<tr class="memdesc:ga0b82c624a5fe69834532ec5ac66078a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the seed of the default random number generator.  <a href="group__random__func__get__seed.htm#ga0b82c624a5fe69834532ec5ac66078a6">More...</a><br /></td></tr>
<tr class="separator:ga0b82c624a5fe69834532ec5ac66078a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76c2a517922af297d0d74bfe8a988d20"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx1.htm#ga76c2a517922af297d0d74bfe8a988d20">approx1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a50db9a815ef5d23eee60ca5bda328836">AF_INTERP_LINEAR</a>, const float off_grid=0.0f)</td></tr>
<tr class="memdesc:ga76c2a517922af297d0d74bfe8a988d20"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for data interpolation on one-dimensional signals.  <a href="group__signal__func__approx1.htm#ga76c2a517922af297d0d74bfe8a988d20">More...</a><br /></td></tr>
<tr class="separator:ga76c2a517922af297d0d74bfe8a988d20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6e477744cb71ec8ca6577fb5274cc1db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx2.htm#ga6e477744cb71ec8ca6577fb5274cc1db">approx2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos0, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos1, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a50db9a815ef5d23eee60ca5bda328836">AF_INTERP_LINEAR</a>, const float off_grid=0.0f)</td></tr>
<tr class="memdesc:ga6e477744cb71ec8ca6577fb5274cc1db"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for data interpolation on two-dimensional signals.  <a href="group__signal__func__approx2.htm#ga6e477744cb71ec8ca6577fb5274cc1db">More...</a><br /></td></tr>
<tr class="separator:ga6e477744cb71ec8ca6577fb5274cc1db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf8c2e28b335f758fc2db816d35d9b1ce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx1.htm#gaf8c2e28b335f758fc2db816d35d9b1ce">approx1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos, const int interp_dim, const double idx_start, const double idx_step, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a50db9a815ef5d23eee60ca5bda328836">AF_INTERP_LINEAR</a>, const float off_grid=0.0f)</td></tr>
<tr class="memdesc:gaf8c2e28b335f758fc2db816d35d9b1ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for data interpolation on one-dimensional signals.  <a href="group__signal__func__approx1.htm#gaf8c2e28b335f758fc2db816d35d9b1ce">More...</a><br /></td></tr>
<tr class="separator:gaf8c2e28b335f758fc2db816d35d9b1ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga457482f03f622cbec3d730cec9e76b6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx2.htm#ga457482f03f622cbec3d730cec9e76b6c">approx2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos0, const int interp_dim0, const double idx_start_dim0, const double idx_step_dim0, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos1, const int interp_dim1, const double idx_start_dim1, const double idx_step_dim1, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a50db9a815ef5d23eee60ca5bda328836">AF_INTERP_LINEAR</a>, const float off_grid=0.0f)</td></tr>
<tr class="memdesc:ga457482f03f622cbec3d730cec9e76b6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for data interpolation on two-dimensional signals.  <a href="group__signal__func__approx2.htm#ga457482f03f622cbec3d730cec9e76b6c">More...</a><br /></td></tr>
<tr class="separator:ga457482f03f622cbec3d730cec9e76b6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c64e0a83ceaed1de1d5b6a32750653a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga9c64e0a83ceaed1de1d5b6a32750653a">fftNorm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0)</td></tr>
<tr class="memdesc:ga9c64e0a83ceaed1de1d5b6a32750653a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on one dimensional signals.  <a href="group__signal__func__fft.htm#ga9c64e0a83ceaed1de1d5b6a32750653a">More...</a><br /></td></tr>
<tr class="separator:ga9c64e0a83ceaed1de1d5b6a32750653a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae6ba1ccca66f12a369d0428891d26622"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft2.htm#gae6ba1ccca66f12a369d0428891d26622">fft2Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0)</td></tr>
<tr class="memdesc:gae6ba1ccca66f12a369d0428891d26622"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on two dimensional signals.  <a href="group__signal__func__fft2.htm#gae6ba1ccca66f12a369d0428891d26622">More...</a><br /></td></tr>
<tr class="separator:gae6ba1ccca66f12a369d0428891d26622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade854aa82063f31221c67d4f958dc757"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft3.htm#gade854aa82063f31221c67d4f958dc757">fft3Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:gade854aa82063f31221c67d4f958dc757"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__fft3.htm#gade854aa82063f31221c67d4f958dc757">More...</a><br /></td></tr>
<tr class="separator:gade854aa82063f31221c67d4f958dc757"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7d171d51c68b8280a0219ab42170f46d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga7d171d51c68b8280a0219ab42170f46d">fftInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1)</td></tr>
<tr class="memdesc:ga7d171d51c68b8280a0219ab42170f46d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on one dimensional signals.  <a href="group__signal__func__fft.htm#ga7d171d51c68b8280a0219ab42170f46d">More...</a><br /></td></tr>
<tr class="separator:ga7d171d51c68b8280a0219ab42170f46d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec63a9c53a998da227197d206f2608b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft2.htm#gaec63a9c53a998da227197d206f2608b1">fft2InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1)</td></tr>
<tr class="memdesc:gaec63a9c53a998da227197d206f2608b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on two dimensional signals.  <a href="group__signal__func__fft2.htm#gaec63a9c53a998da227197d206f2608b1">More...</a><br /></td></tr>
<tr class="separator:gaec63a9c53a998da227197d206f2608b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab170f1ee7198643436c50b782c9fb312"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft3.htm#gab170f1ee7198643436c50b782c9fb312">fft3InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1)</td></tr>
<tr class="memdesc:gab170f1ee7198643436c50b782c9fb312"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__fft3.htm#gab170f1ee7198643436c50b782c9fb312">More...</a><br /></td></tr>
<tr class="separator:gab170f1ee7198643436c50b782c9fb312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b445e474508d96da691a9608dec5403"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga8b445e474508d96da691a9608dec5403">fft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0)</td></tr>
<tr class="memdesc:ga8b445e474508d96da691a9608dec5403"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on one dimensional signals.  <a href="group__signal__func__fft.htm#ga8b445e474508d96da691a9608dec5403">More...</a><br /></td></tr>
<tr class="separator:ga8b445e474508d96da691a9608dec5403"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab0fc99edd6bdb9e1a59556d108f86334"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft2.htm#gab0fc99edd6bdb9e1a59556d108f86334">fft2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0)</td></tr>
<tr class="memdesc:gab0fc99edd6bdb9e1a59556d108f86334"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on two dimensional signals.  <a href="group__signal__func__fft2.htm#gab0fc99edd6bdb9e1a59556d108f86334">More...</a><br /></td></tr>
<tr class="separator:gab0fc99edd6bdb9e1a59556d108f86334"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83ccdcb6f1fb05e76a41987c9c949563"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft3.htm#ga83ccdcb6f1fb05e76a41987c9c949563">fft3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:ga83ccdcb6f1fb05e76a41987c9c949563"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__fft3.htm#ga83ccdcb6f1fb05e76a41987c9c949563">More...</a><br /></td></tr>
<tr class="separator:ga83ccdcb6f1fb05e76a41987c9c949563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6e082e788e1085ae5e39794ddade9913"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga6e082e788e1085ae5e39794ddade9913">dft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> outDims)</td></tr>
<tr class="memdesc:ga6e082e788e1085ae5e39794ddade9913"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#ga6e082e788e1085ae5e39794ddade9913">More...</a><br /></td></tr>
<tr class="separator:ga6e082e788e1085ae5e39794ddade9913"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7216a4f11834c5e983d6d5e6b87c532c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga7216a4f11834c5e983d6d5e6b87c532c">dft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> outDims)</td></tr>
<tr class="memdesc:ga7216a4f11834c5e983d6d5e6b87c532c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#ga7216a4f11834c5e983d6d5e6b87c532c">More...</a><br /></td></tr>
<tr class="separator:ga7216a4f11834c5e983d6d5e6b87c532c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga291b032096457e725fa6bcd2e9b3ce30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga291b032096457e725fa6bcd2e9b3ce30">dft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga291b032096457e725fa6bcd2e9b3ce30"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#ga291b032096457e725fa6bcd2e9b3ce30">More...</a><br /></td></tr>
<tr class="separator:ga291b032096457e725fa6bcd2e9b3ce30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf63a9f9f549c8f660d0b27294d9ba37a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft.htm#gaf63a9f9f549c8f660d0b27294d9ba37a">ifftNorm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0)</td></tr>
<tr class="memdesc:gaf63a9f9f549c8f660d0b27294d9ba37a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on one dimensional signals.  <a href="group__signal__func__ifft.htm#gaf63a9f9f549c8f660d0b27294d9ba37a">More...</a><br /></td></tr>
<tr class="separator:gaf63a9f9f549c8f660d0b27294d9ba37a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68d6b74c2446cb00448784725d8ebc1a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft2.htm#ga68d6b74c2446cb00448784725d8ebc1a">ifft2Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0)</td></tr>
<tr class="memdesc:ga68d6b74c2446cb00448784725d8ebc1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on two dimensional signals.  <a href="group__signal__func__ifft2.htm#ga68d6b74c2446cb00448784725d8ebc1a">More...</a><br /></td></tr>
<tr class="separator:ga68d6b74c2446cb00448784725d8ebc1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae00c56fdd3efc957da9ec84c2bdaa64f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#gae00c56fdd3efc957da9ec84c2bdaa64f">ifft3Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:gae00c56fdd3efc957da9ec84c2bdaa64f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#gae00c56fdd3efc957da9ec84c2bdaa64f">More...</a><br /></td></tr>
<tr class="separator:gae00c56fdd3efc957da9ec84c2bdaa64f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cee5baba1961e509d4235dcd80c4073"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft.htm#ga5cee5baba1961e509d4235dcd80c4073">ifftInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1)</td></tr>
<tr class="memdesc:ga5cee5baba1961e509d4235dcd80c4073"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on one dimensional signals.  <a href="group__signal__func__ifft.htm#ga5cee5baba1961e509d4235dcd80c4073">More...</a><br /></td></tr>
<tr class="separator:ga5cee5baba1961e509d4235dcd80c4073"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab43fda5cc7981bd91f089731f634ec51"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft2.htm#gab43fda5cc7981bd91f089731f634ec51">ifft2InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1)</td></tr>
<tr class="memdesc:gab43fda5cc7981bd91f089731f634ec51"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on two dimensional signals.  <a href="group__signal__func__ifft2.htm#gab43fda5cc7981bd91f089731f634ec51">More...</a><br /></td></tr>
<tr class="separator:gab43fda5cc7981bd91f089731f634ec51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga133593d11131b304a3692048355f78e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#ga133593d11131b304a3692048355f78e7">ifft3InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1)</td></tr>
<tr class="memdesc:ga133593d11131b304a3692048355f78e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#ga133593d11131b304a3692048355f78e7">More...</a><br /></td></tr>
<tr class="separator:ga133593d11131b304a3692048355f78e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf78b830b324704ae7c96e7e608502963"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft.htm#gaf78b830b324704ae7c96e7e608502963">ifft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0)</td></tr>
<tr class="memdesc:gaf78b830b324704ae7c96e7e608502963"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on one dimensional signals.  <a href="group__signal__func__ifft.htm#gaf78b830b324704ae7c96e7e608502963">More...</a><br /></td></tr>
<tr class="separator:gaf78b830b324704ae7c96e7e608502963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga42c5ef4e312c3827cc8e0830f3d14950"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft2.htm#ga42c5ef4e312c3827cc8e0830f3d14950">ifft2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0)</td></tr>
<tr class="memdesc:ga42c5ef4e312c3827cc8e0830f3d14950"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on two dimensional signals.  <a href="group__signal__func__ifft2.htm#ga42c5ef4e312c3827cc8e0830f3d14950">More...</a><br /></td></tr>
<tr class="separator:ga42c5ef4e312c3827cc8e0830f3d14950"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb26d2805d8b62f2ed44145502c4ee4d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#gadb26d2805d8b62f2ed44145502c4ee4d">ifft3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:gadb26d2805d8b62f2ed44145502c4ee4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#gadb26d2805d8b62f2ed44145502c4ee4d">More...</a><br /></td></tr>
<tr class="separator:gadb26d2805d8b62f2ed44145502c4ee4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e03a61224c7b9d217b0099ce1d5be3a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga9e03a61224c7b9d217b0099ce1d5be3a">idft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> outDims)</td></tr>
<tr class="memdesc:ga9e03a61224c7b9d217b0099ce1d5be3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#ga9e03a61224c7b9d217b0099ce1d5be3a">More...</a><br /></td></tr>
<tr class="separator:ga9e03a61224c7b9d217b0099ce1d5be3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a47710d5128c3e4ffa79b00d9b5c1d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga1a47710d5128c3e4ffa79b00d9b5c1d0">idft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> outDims)</td></tr>
<tr class="memdesc:ga1a47710d5128c3e4ffa79b00d9b5c1d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#ga1a47710d5128c3e4ffa79b00d9b5c1d0">More...</a><br /></td></tr>
<tr class="separator:ga1a47710d5128c3e4ffa79b00d9b5c1d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc4ce84fc3ee55fe804a7d441450bf41"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#gabc4ce84fc3ee55fe804a7d441450bf41">idft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gabc4ce84fc3ee55fe804a7d441450bf41"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#gabc4ce84fc3ee55fe804a7d441450bf41">More...</a><br /></td></tr>
<tr class="separator:gabc4ce84fc3ee55fe804a7d441450bf41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaecfef8da267bdc9bddb802badf0d1da3"><td class="memTemplParams" colspan="2">template&lt;int rank&gt; </td></tr>
<tr class="memitem:gaecfef8da267bdc9bddb802badf0d1da3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__signal__func__fft__r2c.htm#gaecfef8da267bdc9bddb802badf0d1da3">fftR2C</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const double norm_factor=0)</td></tr>
<tr class="memdesc:gaecfef8da267bdc9bddb802badf0d1da3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for real to complex fast fourier transform for one dimensional signals.  <a href="group__signal__func__fft__r2c.htm#gaecfef8da267bdc9bddb802badf0d1da3">More...</a><br /></td></tr>
<tr class="separator:gaecfef8da267bdc9bddb802badf0d1da3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5a1faa1bcf98eff31909b7d8fe669dfe"><td class="memTemplParams" colspan="2">template&lt;int rank&gt; </td></tr>
<tr class="memitem:ga5a1faa1bcf98eff31909b7d8fe669dfe"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__signal__func__fft__r2c.htm#ga5a1faa1bcf98eff31909b7d8fe669dfe">fftR2C</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=0)</td></tr>
<tr class="memdesc:ga5a1faa1bcf98eff31909b7d8fe669dfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for real to complex fast fourier transform for one dimensional signals.  <a href="group__signal__func__fft__r2c.htm#ga5a1faa1bcf98eff31909b7d8fe669dfe">More...</a><br /></td></tr>
<tr class="separator:ga5a1faa1bcf98eff31909b7d8fe669dfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01fa22566a246623a7378960e4ac06a3"><td class="memTemplParams" colspan="2">template&lt;int rank&gt; </td></tr>
<tr class="memitem:ga01fa22566a246623a7378960e4ac06a3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__signal__func__fft__c2r.htm#ga01fa22566a246623a7378960e4ac06a3">fftC2R</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, bool is_odd=false, const double norm_factor=0)</td></tr>
<tr class="memdesc:ga01fa22566a246623a7378960e4ac06a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for complex to real fast fourier transform.  <a href="group__signal__func__fft__c2r.htm#ga01fa22566a246623a7378960e4ac06a3">More...</a><br /></td></tr>
<tr class="separator:ga01fa22566a246623a7378960e4ac06a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution any(one through three) dimensional signals.  <a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">More...</a><br /></td></tr>
<tr class="separator:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5e9f278ff9b46229184ca2adc144ece"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve__sep.htm#gae5e9f278ff9b46229184ca2adc144ece">convolve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;col_filter, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;row_filter, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:gae5e9f278ff9b46229184ca2adc144ece"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for separable convolution on two dimensional signals.  <a href="group__signal__func__convolve__sep.htm#gae5e9f278ff9b46229184ca2adc144ece">More...</a><br /></td></tr>
<tr class="separator:gae5e9f278ff9b46229184ca2adc144ece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72a117436a82ed5fe593fe7072c01968"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm#ga72a117436a82ed5fe593fe7072c01968">convolve1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:ga72a117436a82ed5fe593fe7072c01968"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on one dimensional signals.  <a href="group__signal__func__convolve1.htm#ga72a117436a82ed5fe593fe7072c01968">More...</a><br /></td></tr>
<tr class="separator:ga72a117436a82ed5fe593fe7072c01968"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0aec29b4d4c9cf4412420b91c96ffe6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve2.htm#ga0aec29b4d4c9cf4412420b91c96ffe6c">convolve2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:ga0aec29b4d4c9cf4412420b91c96ffe6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on two dimensional signals.  <a href="group__signal__func__convolve2.htm#ga0aec29b4d4c9cf4412420b91c96ffe6c">More...</a><br /></td></tr>
<tr class="separator:ga0aec29b4d4c9cf4412420b91c96ffe6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8a6da9b0bf8e0287d71d02e2cd763cde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve2.htm#ga8a6da9b0bf8e0287d71d02e2cd763cde">convolve2NN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> stride, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> padding, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> dilation)</td></tr>
<tr class="memdesc:ga8a6da9b0bf8e0287d71d02e2cd763cde"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for 2D convolution.  <a href="group__signal__func__convolve2.htm#ga8a6da9b0bf8e0287d71d02e2cd763cde">More...</a><br /></td></tr>
<tr class="separator:ga8a6da9b0bf8e0287d71d02e2cd763cde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga612982eb8719085e327ca764e4f728d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve3.htm#ga612982eb8719085e327ca764e4f728d6">convolve3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:ga612982eb8719085e327ca764e4f728d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on three dimensional signals.  <a href="group__signal__func__convolve3.htm#ga612982eb8719085e327ca764e4f728d6">More...</a><br /></td></tr>
<tr class="separator:ga612982eb8719085e327ca764e4f728d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga711d2440b2d954215a02d90ac8952af8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#ga711d2440b2d954215a02d90ac8952af8">fftConvolve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga711d2440b2d954215a02d90ac8952af8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for FFT-based convolution any(one through three) dimensional signals.  <a href="group__signal__func__convolve.htm#ga711d2440b2d954215a02d90ac8952af8">More...</a><br /></td></tr>
<tr class="separator:ga711d2440b2d954215a02d90ac8952af8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga95ec82427447ca372f760341e6e4da7d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm#ga95ec82427447ca372f760341e6e4da7d">fftConvolve1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga95ec82427447ca372f760341e6e4da7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on 1D signals using FFT.  <a href="group__signal__func__convolve1.htm#ga95ec82427447ca372f760341e6e4da7d">More...</a><br /></td></tr>
<tr class="separator:ga95ec82427447ca372f760341e6e4da7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9144b146cb6c74da32eb75fdf3570b27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve2.htm#ga9144b146cb6c74da32eb75fdf3570b27">fftConvolve2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga9144b146cb6c74da32eb75fdf3570b27"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on 2D signals using FFT.  <a href="group__signal__func__convolve2.htm#ga9144b146cb6c74da32eb75fdf3570b27">More...</a><br /></td></tr>
<tr class="separator:ga9144b146cb6c74da32eb75fdf3570b27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f8961d19f4fba3e585a14e3864fdd2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve3.htm#ga1f8961d19f4fba3e585a14e3864fdd2f">fftConvolve3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga1f8961d19f4fba3e585a14e3864fdd2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on 3D signals using FFT.  <a href="group__signal__func__convolve3.htm#ga1f8961d19f4fba3e585a14e3864fdd2f">More...</a><br /></td></tr>
<tr class="separator:ga1f8961d19f4fba3e585a14e3864fdd2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac80d4c15f750d3b70c31748c329e1282"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fir.htm#gac80d4c15f750d3b70c31748c329e1282">fir</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x)</td></tr>
<tr class="memdesc:gac80d4c15f750d3b70c31748c329e1282"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finite impulse response filter.  <a href="group__signal__func__fir.htm#gac80d4c15f750d3b70c31748c329e1282">More...</a><br /></td></tr>
<tr class="separator:gac80d4c15f750d3b70c31748c329e1282"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga050877395b6428d4c0ae57cf08f82e83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__iir.htm#ga050877395b6428d4c0ae57cf08f82e83">iir</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x)</td></tr>
<tr class="memdesc:ga050877395b6428d4c0ae57cf08f82e83"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for infinite impulse response filter.  <a href="group__signal__func__iir.htm#ga050877395b6428d4c0ae57cf08f82e83">More...</a><br /></td></tr>
<tr class="separator:ga050877395b6428d4c0ae57cf08f82e83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace207668a873b0f5f49d8a97a8df5928"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__medfilt.htm#gace207668a873b0f5f49d8a97a8df5928">medfilt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_length=3, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:gace207668a873b0f5f49d8a97a8df5928"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median filter.  <a href="group__image__func__medfilt.htm#gace207668a873b0f5f49d8a97a8df5928">More...</a><br /></td></tr>
<tr class="separator:gace207668a873b0f5f49d8a97a8df5928"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ed06c96f5e336e4cc60d001dc5cdd89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__medfilt.htm#ga3ed06c96f5e336e4cc60d001dc5cdd89">medfilt1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:ga3ed06c96f5e336e4cc60d001dc5cdd89"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median filter.  <a href="group__image__func__medfilt.htm#ga3ed06c96f5e336e4cc60d001dc5cdd89">More...</a><br /></td></tr>
<tr class="separator:ga3ed06c96f5e336e4cc60d001dc5cdd89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1316bb34afc339942353c54807ca4591"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__medfilt.htm#ga1316bb34afc339942353c54807ca4591">medfilt2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_length=3, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:ga1316bb34afc339942353c54807ca4591"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median filter.  <a href="group__image__func__medfilt.htm#ga1316bb34afc339942353c54807ca4591">More...</a><br /></td></tr>
<tr class="separator:ga1316bb34afc339942353c54807ca4591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4be4eadea7bc6db08b4d8faf7820d64"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af4be4eadea7bc6db08b4d8faf7820d64">setFFTPlanCacheSize</a> (size_t cacheSize)</td></tr>
<tr class="memdesc:af4be4eadea7bc6db08b4d8faf7820d64"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for setting plan cache size.  <a href="namespaceaf.htm#af4be4eadea7bc6db08b4d8faf7820d64">More...</a><br /></td></tr>
<tr class="separator:af4be4eadea7bc6db08b4d8faf7820d64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9a843c7e93b05e6b090ca32b271ebe9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">sparse</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="classaf_1_1array.htm">array</a> values, const <a class="el" href="classaf_1_1array.htm">array</a> rowIdx, const <a class="el" href="classaf_1_1array.htm">array</a> colIdx, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>)</td></tr>
<tr class="memdesc:gae9a843c7e93b05e6b090ca32b271ebe9"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array.  <a href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">More...</a><br /></td></tr>
<tr class="separator:gae9a843c7e93b05e6b090ca32b271ebe9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae4621e58bfaf6d80668309824fde86c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gae4621e58bfaf6d80668309824fde86c0">sparse</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nNZ, const void *const values, const int *const rowIdx, const int *const colIdx, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>, const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:gae4621e58bfaf6d80668309824fde86c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts host or device arrays of values, row indices and column indices into a sparse array on the device.  <a href="group__sparse__func__create.htm#gae4621e58bfaf6d80668309824fde86c0">More...</a><br /></td></tr>
<tr class="separator:gae4621e58bfaf6d80668309824fde86c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0d367d8c9daf27b36a6981bbfcdb970"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gac0d367d8c9daf27b36a6981bbfcdb970">sparse</a> (const <a class="el" href="classaf_1_1array.htm">array</a> <a class="el" href="group__sparse__func__dense.htm#ga1f39a8de17f18750bfe1ec8812a743a8">dense</a>, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>)</td></tr>
<tr class="memdesc:gac0d367d8c9daf27b36a6981bbfcdb970"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts a dense <a class="el" href="classaf_1_1array.htm">af::array</a> into a sparse array.  <a href="group__sparse__func__create.htm#gac0d367d8c9daf27b36a6981bbfcdb970">More...</a><br /></td></tr>
<tr class="separator:gac0d367d8c9daf27b36a6981bbfcdb970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga552d3a90dae9d2c6646a991100688162"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__convert__to.htm#ga552d3a90dae9d2c6646a991100688162">sparseConvertTo</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> destStrorage)</td></tr>
<tr class="separator:ga552d3a90dae9d2c6646a991100688162"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f39a8de17f18750bfe1ec8812a743a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__dense.htm#ga1f39a8de17f18750bfe1ec8812a743a8">dense</a> (const <a class="el" href="classaf_1_1array.htm">array</a> <a class="el" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">sparse</a>)</td></tr>
<tr class="separator:ga1f39a8de17f18750bfe1ec8812a743a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3f1675d5ad95eddbe0e5968c1e14df0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__info.htm#ga3f1675d5ad95eddbe0e5968c1e14df0f">sparseGetInfo</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;values, <a class="el" href="classaf_1_1array.htm">array</a> &amp;rowIdx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;colIdx, <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> &amp;stype, const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:ga3f1675d5ad95eddbe0e5968c1e14df0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5c4ce9092dd3470480461d79b75d59d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__values.htm#gaf5c4ce9092dd3470480461d79b75d59d">sparseGetValues</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:gaf5c4ce9092dd3470480461d79b75d59d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3bda3d6aa334ea126b175a84d0b43d46"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__row__idx.htm#ga3bda3d6aa334ea126b175a84d0b43d46">sparseGetRowIdx</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:ga3bda3d6aa334ea126b175a84d0b43d46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1960849b7d65a431216598d2752df46d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__col__idx.htm#ga1960849b7d65a431216598d2752df46d">sparseGetColIdx</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:ga1960849b7d65a431216598d2752df46d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf36b9a489570cc007d1f99cc9bd6d41e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__nnz.htm#gaf36b9a489570cc007d1f99cc9bd6d41e">sparseGetNNZ</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:gaf36b9a489570cc007d1f99cc9bd6d41e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8d495f6f59420e7b9dbf33811aba046c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__storage.htm#ga8d495f6f59420e7b9dbf33811aba046c">sparseGetStorage</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:ga8d495f6f59420e7b9dbf33811aba046c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga551de2061646e8d73aade26a27b53e39"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm#ga551de2061646e8d73aade26a27b53e39">mean</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga551de2061646e8d73aade26a27b53e39"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean.  <a href="group__stat__func__mean.htm#ga551de2061646e8d73aade26a27b53e39">More...</a><br /></td></tr>
<tr class="separator:ga551de2061646e8d73aade26a27b53e39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8cce333c8fc763d52464070ec9b3d825"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm#ga8cce333c8fc763d52464070ec9b3d825">mean</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga8cce333c8fc763d52464070ec9b3d825"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean of weighted inputs.  <a href="group__stat__func__mean.htm#ga8cce333c8fc763d52464070ec9b3d825">More...</a><br /></td></tr>
<tr class="separator:ga8cce333c8fc763d52464070ec9b3d825"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga413fdb917be8f5173f8b5650a181a120"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#ga413fdb917be8f5173f8b5650a181a120">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool isbiased=false, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga413fdb917be8f5173f8b5650a181a120"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance.  <a href="group__stat__func__var.htm#ga413fdb917be8f5173f8b5650a181a120">More...</a><br /></td></tr>
<tr class="separator:ga413fdb917be8f5173f8b5650a181a120"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4405591505b482f9f40b697aca4be72"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#gad4405591505b482f9f40b697aca4be72">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:gad4405591505b482f9f40b697aca4be72"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance of weighted inputs.  <a href="group__stat__func__var.htm#gad4405591505b482f9f40b697aca4be72">More...</a><br /></td></tr>
<tr class="separator:gad4405591505b482f9f40b697aca4be72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09da4429b5ec25c4df1a05a5a606f08e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a09da4429b5ec25c4df1a05a5a606f08e">meanvar</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="group__stat__func__mean.htm#ga551de2061646e8d73aade26a27b53e39">mean</a>, <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="group__stat__func__var.htm#ga413fdb917be8f5173f8b5650a181a120">var</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights, const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> bias=<a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6ae4f72a0687f083f8988f481f68c58a05">AF_VARIANCE_POPULATION</a>, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:a09da4429b5ec25c4df1a05a5a606f08e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean and variance.  <a href="namespaceaf.htm#a09da4429b5ec25c4df1a05a5a606f08e">More...</a><br /></td></tr>
<tr class="separator:a09da4429b5ec25c4df1a05a5a606f08e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaebaa1553ae823fd0229fc7e6abdf350"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__stdev.htm#gaaebaa1553ae823fd0229fc7e6abdf350">stdev</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:gaaebaa1553ae823fd0229fc7e6abdf350"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for standard deviation.  <a href="group__stat__func__stdev.htm#gaaebaa1553ae823fd0229fc7e6abdf350">More...</a><br /></td></tr>
<tr class="separator:gaaebaa1553ae823fd0229fc7e6abdf350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8930d1c25039e0d6d645607115932cb6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__cov.htm#ga8930d1c25039e0d6d645607115932cb6">cov</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;X, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;Y, const bool isbiased=false)</td></tr>
<tr class="memdesc:ga8930d1c25039e0d6d645607115932cb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for covariance.  <a href="group__stat__func__cov.htm#ga8930d1c25039e0d6d645607115932cb6">More...</a><br /></td></tr>
<tr class="separator:ga8930d1c25039e0d6d645607115932cb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga20441bd881f48caa47a1fbe6f066d377"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__median.htm#ga20441bd881f48caa47a1fbe6f066d377">median</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga20441bd881f48caa47a1fbe6f066d377"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median.  <a href="group__stat__func__median.htm#ga20441bd881f48caa47a1fbe6f066d377">More...</a><br /></td></tr>
<tr class="separator:ga20441bd881f48caa47a1fbe6f066d377"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeee2bb2f141534453367753ff6f860ac"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaeee2bb2f141534453367753ff6f860ac"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm#gaeee2bb2f141534453367753ff6f860ac">mean</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaeee2bb2f141534453367753ff6f860ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean of all elements.  <a href="group__stat__func__mean.htm#gaeee2bb2f141534453367753ff6f860ac">More...</a><br /></td></tr>
<tr class="separator:gaeee2bb2f141534453367753ff6f860ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa09bbb576bce65d2de50ab99d1ccb341"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaa09bbb576bce65d2de50ab99d1ccb341"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm#gaa09bbb576bce65d2de50ab99d1ccb341">mean</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights)</td></tr>
<tr class="memdesc:gaa09bbb576bce65d2de50ab99d1ccb341"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean of all elements in weighted input.  <a href="group__stat__func__mean.htm#gaa09bbb576bce65d2de50ab99d1ccb341">More...</a><br /></td></tr>
<tr class="separator:gaa09bbb576bce65d2de50ab99d1ccb341"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac726bf9890ba505b8433477e26c8854c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac726bf9890ba505b8433477e26c8854c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#gac726bf9890ba505b8433477e26c8854c">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool isbiased=false)</td></tr>
<tr class="memdesc:gac726bf9890ba505b8433477e26c8854c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance of all elements.  <a href="group__stat__func__var.htm#gac726bf9890ba505b8433477e26c8854c">More...</a><br /></td></tr>
<tr class="separator:gac726bf9890ba505b8433477e26c8854c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9532100bf99d1b9757250907b3d08917"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga9532100bf99d1b9757250907b3d08917"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#ga9532100bf99d1b9757250907b3d08917">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights)</td></tr>
<tr class="memdesc:ga9532100bf99d1b9757250907b3d08917"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance of all elements in weighted input.  <a href="group__stat__func__var.htm#ga9532100bf99d1b9757250907b3d08917">More...</a><br /></td></tr>
<tr class="separator:ga9532100bf99d1b9757250907b3d08917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga55df1afccd27eba77725b7096173cf98"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga55df1afccd27eba77725b7096173cf98"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__stdev.htm#ga55df1afccd27eba77725b7096173cf98">stdev</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga55df1afccd27eba77725b7096173cf98"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for standard deviation of all elements.  <a href="group__stat__func__stdev.htm#ga55df1afccd27eba77725b7096173cf98">More...</a><br /></td></tr>
<tr class="separator:ga55df1afccd27eba77725b7096173cf98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea933a2ea8e33f57a99437695f7a4bd6"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaea933a2ea8e33f57a99437695f7a4bd6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__median.htm#gaea933a2ea8e33f57a99437695f7a4bd6">median</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaea933a2ea8e33f57a99437695f7a4bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median of all elements.  <a href="group__stat__func__median.htm#gaea933a2ea8e33f57a99437695f7a4bd6">More...</a><br /></td></tr>
<tr class="separator:gaea933a2ea8e33f57a99437695f7a4bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac8876a9c064a313865fcf77b5604e01c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac8876a9c064a313865fcf77b5604e01c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__corrcoef.htm#gac8876a9c064a313865fcf77b5604e01c">corrcoef</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;X, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;Y)</td></tr>
<tr class="memdesc:gac8876a9c064a313865fcf77b5604e01c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for correlation coefficient.  <a href="group__stat__func__corrcoef.htm#gac8876a9c064a313865fcf77b5604e01c">More...</a><br /></td></tr>
<tr class="separator:gac8876a9c064a313865fcf77b5604e01c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa7fa372d9b69c9e245807f1d989bc32d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__topk.htm#gaa7fa372d9b69c9e245807f1d989bc32d">topk</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;values, <a class="el" href="classaf_1_1array.htm">array</a> &amp;indices, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int k, const int dim=-1, const <a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487b">topkFunction</a> order=<a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487ba91ed15b3164e5a3fd6cd3d688c40d640">AF_TOPK_MAX</a>)</td></tr>
<tr class="memdesc:gaa7fa372d9b69c9e245807f1d989bc32d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding top k elements along a given dimension.  <a href="group__stat__func__topk.htm#gaa7fa372d9b69c9e245807f1d989bc32d">More...</a><br /></td></tr>
<tr class="separator:gaa7fa372d9b69c9e245807f1d989bc32d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ffb3ceefb515e1778cf8c4d5e29db59"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a> (void(*fn)())</td></tr>
<tr class="separator:a9ffb3ceefb515e1778cf8c4d5e29db59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga66791369fe71d867943da676a15afe3a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__print.htm#ga66791369fe71d867943da676a15afe3a">print</a> (const char *<a class="el" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr)</td></tr>
<tr class="separator:ga66791369fe71d867943da676a15afe3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ee270beb74a90dbae9497e7f740c8b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__print.htm#ga7ee270beb74a90dbae9497e7f740c8b7">print</a> (const char *<a class="el" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const int precision)</td></tr>
<tr class="separator:ga7ee270beb74a90dbae9497e7f740c8b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf0d3dfb49f4f2aaac7a46222817ed48f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__save.htm#gaf0d3dfb49f4f2aaac7a46222817ed48f">saveArray</a> (const char *key, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const char *filename, const bool append=false)</td></tr>
<tr class="separator:gaf0d3dfb49f4f2aaac7a46222817ed48f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf78aa8f367fbd6f408e90f0851e0557a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#gaf78aa8f367fbd6f408e90f0851e0557a">readArray</a> (const char *filename, const unsigned <a class="el" href="classaf_1_1index.htm">index</a>)</td></tr>
<tr class="separator:gaf78aa8f367fbd6f408e90f0851e0557a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47670590753282be28e85892f59e37ce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga47670590753282be28e85892f59e37ce">readArray</a> (const char *filename, const char *key)</td></tr>
<tr class="separator:ga47670590753282be28e85892f59e37ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga276257d24b4be407b51f5be18c99faf7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga276257d24b4be407b51f5be18c99faf7">readArrayCheck</a> (const char *filename, const char *key)</td></tr>
<tr class="memdesc:ga276257d24b4be407b51f5be18c99faf7"><td class="mdescLeft">&#160;</td><td class="mdescRight">When reading by key, it may be a good idea to run this function first to check for the key and then call the readArray using the index.  <a href="group__stream__func__read.htm#ga276257d24b4be407b51f5be18c99faf7">More...</a><br /></td></tr>
<tr class="separator:ga276257d24b4be407b51f5be18c99faf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac268e4935efa88b80d1be6ccaa6a9093"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__tostring.htm#gac268e4935efa88b80d1be6ccaa6a9093">toString</a> (char **output, const char *<a class="el" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const int precision=4, const bool <a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>=true)</td></tr>
<tr class="separator:gac268e4935efa88b80d1be6ccaa6a9093"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae254d14d45f9fd3b284df6a36c01edf1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__tostring.htm#gae254d14d45f9fd3b284df6a36c01edf1">toString</a> (const char *<a class="el" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const int precision=4, const bool <a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>=true)</td></tr>
<tr class="separator:gae254d14d45f9fd3b284df6a36c01edf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af84ed5a10b4a532920fe0d94630d4df5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af84ed5a10b4a532920fe0d94630d4df5">exampleFunction</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">af_someenum_t</a> param)</td></tr>
<tr class="separator:af84ed5a10b4a532920fe0d94630d4df5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee762e36f152a4ee58d3d14619b009d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aee762e36f152a4ee58d3d14619b009d3">getSizeOf</a> (<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type)</td></tr>
<tr class="memdesc:aee762e36f152a4ee58d3d14619b009d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the type represented by an af_dtype enum.  <a href="namespaceaf.htm#aee762e36f152a4ee58d3d14619b009d3">More...</a><br /></td></tr>
<tr class="separator:aee762e36f152a4ee58d3d14619b009d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57b3bba143475372f321dbe85a22f603"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1features.htm">features</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__fast.htm#ga57b3bba143475372f321dbe85a22f603">fast</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float thr=20.0f, const unsigned arc_length=9, const bool non_max=true, const float feature_ratio=0.05f, const unsigned edge=3)</td></tr>
<tr class="memdesc:ga57b3bba143475372f321dbe85a22f603"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for FAST feature detector.  <a href="group__cv__func__fast.htm#ga57b3bba143475372f321dbe85a22f603">More...</a><br /></td></tr>
<tr class="separator:ga57b3bba143475372f321dbe85a22f603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21429404b11dc3bf6324c111901cc1c7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1features.htm">features</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__harris.htm#ga21429404b11dc3bf6324c111901cc1c7">harris</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned max_corners=500, const float min_response=1e5f, const float sigma=1.f, const unsigned block_size=0, const float k_thr=0.04f)</td></tr>
<tr class="memdesc:ga21429404b11dc3bf6324c111901cc1c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for Harris corner detector.  <a href="group__cv__func__harris.htm#ga21429404b11dc3bf6324c111901cc1c7">More...</a><br /></td></tr>
<tr class="separator:ga21429404b11dc3bf6324c111901cc1c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga174060bf74dfc2fce8db125d0d6b036d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__orb.htm#ga174060bf74dfc2fce8db125d0d6b036d">orb</a> (<a class="el" href="classaf_1_1features.htm">features</a> &amp;feat, <a class="el" href="classaf_1_1array.htm">array</a> &amp;desc, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;image, const float fast_thr=20.f, const unsigned max_feat=400, const float scl_fctr=1.5f, const unsigned levels=4, const bool blur_img=false)</td></tr>
<tr class="memdesc:ga174060bf74dfc2fce8db125d0d6b036d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for ORB feature descriptor.  <a href="group__cv__func__orb.htm#ga174060bf74dfc2fce8db125d0d6b036d">More...</a><br /></td></tr>
<tr class="separator:ga174060bf74dfc2fce8db125d0d6b036d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0a0eb54eea99248c9e8c3983c9765a11"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__sift.htm#ga0a0eb54eea99248c9e8c3983c9765a11">sift</a> (<a class="el" href="classaf_1_1features.htm">features</a> &amp;feat, <a class="el" href="classaf_1_1array.htm">array</a> &amp;desc, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned n_layers=3, const float contrast_thr=0.04f, const float edge_thr=10.f, const float init_sigma=1.6f, const bool double_input=true, const float intensity_scale=0.00390625f, const float feature_ratio=0.05f)</td></tr>
<tr class="memdesc:ga0a0eb54eea99248c9e8c3983c9765a11"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SIFT feature detector and descriptor.  <a href="group__cv__func__sift.htm#ga0a0eb54eea99248c9e8c3983c9765a11">More...</a><br /></td></tr>
<tr class="separator:ga0a0eb54eea99248c9e8c3983c9765a11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b5826848e54066a2b7b73a97b41ba58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__sift.htm#ga5b5826848e54066a2b7b73a97b41ba58">gloh</a> (<a class="el" href="classaf_1_1features.htm">features</a> &amp;feat, <a class="el" href="classaf_1_1array.htm">array</a> &amp;desc, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned n_layers=3, const float contrast_thr=0.04f, const float edge_thr=10.f, const float init_sigma=1.6f, const bool double_input=true, const float intensity_scale=0.00390625f, const float feature_ratio=0.05f)</td></tr>
<tr class="memdesc:ga5b5826848e54066a2b7b73a97b41ba58"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SIFT feature detector and GLOH descriptor.  <a href="group__cv__func__sift.htm#ga5b5826848e54066a2b7b73a97b41ba58">More...</a><br /></td></tr>
<tr class="separator:ga5b5826848e54066a2b7b73a97b41ba58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga742bed2ac1919eac88484cd6e97bcb76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__hamming__matcher.htm#ga742bed2ac1919eac88484cd6e97bcb76">hammingMatcher</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dist, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;query, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;train, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dist_dim=0, const unsigned n_dist=1)</td></tr>
<tr class="memdesc:ga742bed2ac1919eac88484cd6e97bcb76"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for Hamming matcher.  <a href="group__cv__func__hamming__matcher.htm#ga742bed2ac1919eac88484cd6e97bcb76">More...</a><br /></td></tr>
<tr class="separator:ga742bed2ac1919eac88484cd6e97bcb76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8839ead81cbcd6b433822205713bfe79"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__nearest__neighbour.htm#ga8839ead81cbcd6b433822205713bfe79">nearestNeighbour</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dist, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;query, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;train, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dist_dim=0, const unsigned n_dist=1, const <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a> dist_type=<a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba424a4d974dc66b0dc481ee4fc4333af2">AF_SSD</a>)</td></tr>
<tr class="memdesc:ga8839ead81cbcd6b433822205713bfe79"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ interface wrapper for determining the nearest neighbouring points to a given set of points.  <a href="group__cv__func__nearest__neighbour.htm#ga8839ead81cbcd6b433822205713bfe79">More...</a><br /></td></tr>
<tr class="separator:ga8839ead81cbcd6b433822205713bfe79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1877e7a99d609e27a878c51d9a48ba8f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__match__template.htm#ga1877e7a99d609e27a878c51d9a48ba8f">matchTemplate</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;searchImg, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;templateImg, const <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">matchType</a> mType=<a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafbac3c384561eb097c610a813629204ab9a">AF_SAD</a>)</td></tr>
<tr class="memdesc:ga1877e7a99d609e27a878c51d9a48ba8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for image template matching.  <a href="group__cv__func__match__template.htm#ga1877e7a99d609e27a878c51d9a48ba8f">More...</a><br /></td></tr>
<tr class="separator:ga1877e7a99d609e27a878c51d9a48ba8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga409460e2cee9f7df388aa5cffd98419f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1features.htm">features</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__susan.htm#ga409460e2cee9f7df388aa5cffd98419f">susan</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned radius=3, const float diff_thr=32.0f, const float geom_thr=10.0f, const float feature_ratio=0.05f, const unsigned edge=3)</td></tr>
<tr class="memdesc:ga409460e2cee9f7df388aa5cffd98419f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SUSAN corner detector.  <a href="group__cv__func__susan.htm#ga409460e2cee9f7df388aa5cffd98419f">More...</a><br /></td></tr>
<tr class="separator:ga409460e2cee9f7df388aa5cffd98419f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad88909b00e2ad8fe1c4e7da62f3b67b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__dog.htm#gad88909b00e2ad8fe1c4e7da62f3b67b6">dog</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int radius1, const int radius2)</td></tr>
<tr class="memdesc:gad88909b00e2ad8fe1c4e7da62f3b67b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for Difference of Gaussians.  <a href="group__cv__func__dog.htm#gad88909b00e2ad8fe1c4e7da62f3b67b6">More...</a><br /></td></tr>
<tr class="separator:gad88909b00e2ad8fe1c4e7da62f3b67b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47d0b44239fc6e59575a165a752c9329"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__homography.htm#ga47d0b44239fc6e59575a165a752c9329">homography</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;H, int &amp;inliers, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x_src, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;y_src, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x_dst, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;y_dst, const <a class="el" href="defines_8h.htm#a91b4a692ddf0ee8a7d29d19cc61e6204">af_homography_type</a> htype=<a class="el" href="defines_8h.htm#a91b4a692ddf0ee8a7d29d19cc61e6204a88ed6ce7373f504f274cce8ac68d209c">AF_HOMOGRAPHY_RANSAC</a>, const float inlier_thr=3.f, const unsigned iterations=1000, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> otype=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga47d0b44239fc6e59575a165a752c9329"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for Homography estimation.  <a href="group__cv__func__homography.htm#ga47d0b44239fc6e59575a165a752c9329">More...</a><br /></td></tr>
<tr class="separator:ga47d0b44239fc6e59575a165a752c9329"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a6376adaa49cd123a12eda6819a7e4f1e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6376adaa49cd123a12eda6819a7e4f1e">NaN</a></td></tr>
<tr class="separator:a6376adaa49cd123a12eda6819a7e4f1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a873d028925215930b231204b50712cdb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a873d028925215930b231204b50712cdb">Inf</a></td></tr>
<tr class="separator:a873d028925215930b231204b50712cdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a460631fd3c4d686ad85e199f2a08fe6a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">Pi</a></td></tr>
<tr class="separator:a460631fd3c4d686ad85e199f2a08fe6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a923f02ce0a21b98935aaffd645f717e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a923f02ce0a21b98935aaffd645f717e0">end</a></td></tr>
<tr class="memdesc:a923f02ce0a21b98935aaffd645f717e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">A special value representing the last value of an axis.  <a href="namespaceaf.htm#a923f02ce0a21b98935aaffd645f717e0">More...</a><br /></td></tr>
<tr class="separator:a923f02ce0a21b98935aaffd645f717e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5c1188f38105afaf8b3f383492a1c9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1seq.htm">seq</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a></td></tr>
<tr class="memdesc:af5c1188f38105afaf8b3f383492a1c9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">A special value representing the entire axis of an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>.  <a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">More...</a><br /></td></tr>
<tr class="separator:af5c1188f38105afaf8b3f383492a1c9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="abb644ea63cfe438ea51235af80ac8469"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb644ea63cfe438ea51235af80ac8469">&#9670;&nbsp;</a></span>af_cdouble</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structaf_1_1af__cdouble.htm">af::af_cdouble</a> <a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a686f38b2bf903b7168423db31b8ed17e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a686f38b2bf903b7168423db31b8ed17e">&#9670;&nbsp;</a></span>af_cfloat</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structaf_1_1af__cfloat.htm">af::af_cfloat</a> <a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4a413d6206892a435db389f022afc6d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a413d6206892a435db389f022afc6d8">&#9670;&nbsp;</a></span>Backend</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af_backend</a> <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">Backend</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00570">570</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ad529987e6641d166b1d9e2448fd9212d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad529987e6641d166b1d9e2448fd9212d">&#9670;&nbsp;</a></span>batchFunc_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classaf_1_1array.htm">array</a>(* batchFunc_t) (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gfor_8h_source.htm#l00035">35</a> of file <a class="el" href="gfor_8h_source.htm">gfor.h</a>.</p>

</div>
</div>
<a id="ad864b62ff8f81bf33a1df5647453d1dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad864b62ff8f81bf33a1df5647453d1dc">&#9670;&nbsp;</a></span>binaryOp</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">af_binary_op</a> <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">binaryOp</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00582">582</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a5fb048919b30c86d5e55a7275c48d0a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fb048919b30c86d5e55a7275c48d0a6">&#9670;&nbsp;</a></span>borderType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">af_border_type</a> <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00552">552</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ac36806c887ebaedac3bae28831366652"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac36806c887ebaedac3bae28831366652">&#9670;&nbsp;</a></span>cannyThreshold</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a179019caba59979e58ec07d81cd25ef2">af_canny_threshold</a> <a class="el" href="defines_8h.htm#a179019caba59979e58ec07d81cd25ef2">cannyThreshold</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00588">588</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="acd654c72624253fcd7fd88fe5298aa9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd654c72624253fcd7fd88fe5298aa9a">&#9670;&nbsp;</a></span>cdouble</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structaf_1_1af__cdouble.htm">af::af_cdouble</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="complex_8h_source.htm#l00052">52</a> of file <a class="el" href="complex_8h_source.htm">complex.h</a>.</p>

</div>
</div>
<a id="a63e29e484b92e217fe817fe78abc4f5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63e29e484b92e217fe817fe78abc4f5f">&#9670;&nbsp;</a></span>cfloat</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structaf_1_1af__cfloat.htm">af::af_cfloat</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="complex_8h_source.htm#l00051">51</a> of file <a class="el" href="complex_8h_source.htm">complex.h</a>.</p>

</div>
</div>
<a id="ac9622c24ded435e51b610ba590f91ff2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9622c24ded435e51b610ba590f91ff2">&#9670;&nbsp;</a></span>ColorMap</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574ae">af_colormap</a> <a class="el" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574ae">ColorMap</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00561">561</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ad5f01af1e3eb56329923af1f8c64b087"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5f01af1e3eb56329923af1f8c64b087">&#9670;&nbsp;</a></span>connectivity</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">af_connectivity</a> <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">connectivity</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00553">553</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="af20188b1d2c2b3bcf9c4322baacbd3a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af20188b1d2c2b3bcf9c4322baacbd3a7">&#9670;&nbsp;</a></span>convDomain</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">af_conv_domain</a> <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00559">559</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a89130764412e6c5aebf759a9ec97254c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89130764412e6c5aebf759a9ec97254c">&#9670;&nbsp;</a></span>convGradientType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">af_conv_gradient_type</a> <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">convGradientType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00599">599</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ae2a83fe427da320c754bed689d003878"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2a83fe427da320c754bed689d003878">&#9670;&nbsp;</a></span>convMode</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a> <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00558">558</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a9c172c922ec17f2c9857bac0790479eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c172c922ec17f2c9857bac0790479eb">&#9670;&nbsp;</a></span>CSpace</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">af_cspace_t</a> <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00555">555</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a206f19b6579d41e92bf86927433c0c85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a206f19b6579d41e92bf86927433c0c85">&#9670;&nbsp;</a></span>diffusionEq</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5">af_diffusion_eq</a> <a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5">diffusionEq</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00592">592</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a448f59f3b863561e0fbe00f04dbeca1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a448f59f3b863561e0fbe00f04dbeca1e">&#9670;&nbsp;</a></span>dtype</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="benchmarks_2blas_8cpp-example.htm#a3">benchmarks/blas.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00549">549</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a25da2a597c6a277565e1c11a78506444"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25da2a597c6a277565e1c11a78506444">&#9670;&nbsp;</a></span>fluxFunction</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbb">af_flux_function</a> <a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbb">fluxFunction</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00591">591</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a052cd0c70f2d9aff3c5d74d8ca56c559"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a052cd0c70f2d9aff3c5d74d8ca56c559">&#9670;&nbsp;</a></span>half</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structaf__half.htm">af_half</a> <a class="el" href="namespaceaf.htm#a052cd0c70f2d9aff3c5d74d8ca56c559">half</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="half_8h_source.htm#l00026">26</a> of file <a class="el" href="half_8h_source.htm">half.h</a>.</p>

</div>
</div>
<a id="afe269565ff45bd97459bb3cf2150401e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe269565ff45bd97459bb3cf2150401e">&#9670;&nbsp;</a></span>imageFormat</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6f">af_image_format</a> <a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6f">imageFormat</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00567">567</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a8ab719402a029bd12093bb06ed44d648"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ab719402a029bd12093bb06ed44d648">&#9670;&nbsp;</a></span>interpType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">af_interp_type</a> <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00551">551</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ae57101eac95e0d49b21404f33694e54b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae57101eac95e0d49b21404f33694e54b">&#9670;&nbsp;</a></span>inverseDeconvAlgo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a2bdf5ea652ab094b2e3dcbeebd0b35c6">af_inverse_deconv_algo</a> <a class="el" href="defines_8h.htm#a2bdf5ea652ab094b2e3dcbeebd0b35c6">inverseDeconvAlgo</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00598">598</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a811caf1c5dbbd2e1c8daa91f4240a74d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a811caf1c5dbbd2e1c8daa91f4240a74d">&#9670;&nbsp;</a></span>iterativeDeconvAlgo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a201e6b1dd1068c9795168fc25759a17c">af_iterative_deconv_algo</a> <a class="el" href="defines_8h.htm#a201e6b1dd1068c9795168fc25759a17c">iterativeDeconvAlgo</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00597">597</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="af32df3e457a9ab8750a8d7600c1edda9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af32df3e457a9ab8750a8d7600c1edda9">&#9670;&nbsp;</a></span>markerType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ada5c8e0c0cea5e50765377715ff2c02b">af_marker_type</a> <a class="el" href="defines_8h.htm#ada5c8e0c0cea5e50765377715ff2c02b">markerType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00573">573</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a2fbc54212b086e2da368d2926022b4a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fbc54212b086e2da368d2926022b4a1">&#9670;&nbsp;</a></span>matchType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a> <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">matchType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00554">554</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ab282c0f20fde4f1be35126023734a7cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab282c0f20fde4f1be35126023734a7cd">&#9670;&nbsp;</a></span>matProp</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">af_mat_prop</a> <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00560">560</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a74cf90148af957ec96ee6942c6f8ae93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74cf90148af957ec96ee6942c6f8ae93">&#9670;&nbsp;</a></span>momentType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">af_moment_type</a> <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">momentType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00576">576</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a9353f25407feae7798860da3be5d7490"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9353f25407feae7798860da3be5d7490">&#9670;&nbsp;</a></span>normType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdd">af_norm_type</a> <a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdd">normType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00562">562</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="aaa341d395616c73f5a587c8586e25115"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa341d395616c73f5a587c8586e25115">&#9670;&nbsp;</a></span>randomEngineType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a82a3bf91d6dd04661c63632d0fbf4934">af_random_engine_type</a> <a class="el" href="defines_8h.htm#a82a3bf91d6dd04661c63632d0fbf4934">randomEngineType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00585">585</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a4e673f8420522770732e9ce08d21701e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e673f8420522770732e9ce08d21701e">&#9670;&nbsp;</a></span>SomeEnum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">af_someenum_t</a> <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">SomeEnum</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00556">556</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="aaa328f52bf7d2de8150575946f73b13b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa328f52bf7d2de8150575946f73b13b">&#9670;&nbsp;</a></span>source</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a> <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">source</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00550">550</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a5ea5edbb7e84bd66f25c132ca6f438c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ea5edbb7e84bd66f25c132ca6f438c8">&#9670;&nbsp;</a></span>storage</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a> <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">storage</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00579">579</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a33671cc35a44160908e69af74f02b1d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33671cc35a44160908e69af74f02b1d1">&#9670;&nbsp;</a></span>timer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structaf_1_1timer.htm">af::timer</a> <a class="el" href="structaf_1_1timer.htm">timer</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Internal timer object. </p>

</div>
</div>
<a id="a6970270e3088f5dc1ea08555bc0d9eed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6970270e3088f5dc1ea08555bc0d9eed">&#9670;&nbsp;</a></span>topkFunction</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487b">af_topk_function</a> <a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487b">topkFunction</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00593">593</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ae820124eb78f8139748517b82f67c63d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae820124eb78f8139748517b82f67c63d">&#9670;&nbsp;</a></span>trans</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">af_mat_prop</a> <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">trans</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00557">557</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a5306a15fe3e16a8b44076ee2b2a8ed80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5306a15fe3e16a8b44076ee2b2a8ed80">&#9670;&nbsp;</a></span>varBias</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">varBias</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00596">596</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ad570a46373396ff1291de2e74e3bccda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad570a46373396ff1291de2e74e3bccda">&#9670;&nbsp;</a></span>YCCStd</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">af_ycc_std</a> <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">YCCStd</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00564">564</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a4aa5c4fc5d26607e1bfbd6d7b7e6e5a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4aa5c4fc5d26607e1bfbd6d7b7e6e5a7">&#9670;&nbsp;</a></span>abs() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double af::abs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aef8c240a34d08d2b4d95abf30499df18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef8c240a34d08d2b4d95abf30499df18">&#9670;&nbsp;</a></span>abs() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float af::abs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a35aa2f544c3762a14762de1451f0f141"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35aa2f544c3762a14762de1451f0f141">&#9670;&nbsp;</a></span>allTrueByKey()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::allTrueByKey </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>keys_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>vals_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for checking all true values in an array according to a key. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">keys_out</td><td>will contain the reduced keys in <code>vals</code> along <code>dim</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vals_out</td><td>will contain the reduced and of all values in <code>vals</code> along <code>dim</code> according to <code>keys</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">keys</td><td>is the key array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vals</td><td>is the array containing the values to be reduced </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The dimension along which the all true operation occurs</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd><code>dim</code> is -1 by default. -1 denotes the first non-singleton dimension. </dd>
<dd>
NaN values are ignored </dd></dl>

</div>
</div>
<a id="aa0eb9e160f5be4b95234543e5c47934b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0eb9e160f5be4b95234543e5c47934b">&#9670;&nbsp;</a></span>batchFunc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::batchFunc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceaf.htm#ad529987e6641d166b1d9e2448fd9212d">batchFunc_t</a>&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a7">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a4964be8c454e9ccf0ceeb91d6722cd9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4964be8c454e9ccf0ceeb91d6722cd9a">&#9670;&nbsp;</a></span>calcDim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> af::calcDim </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;&#160;</td>
          <td class="paramname"><em>seq</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> &amp;&#160;</td>
          <td class="paramname"><em>parentDim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of elements that will be represented by seq if applied on an array. </p>

</div>
</div>
<a id="a5d4d2a41fad7d816b70be0e92270dc5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d4d2a41fad7d816b70be0e92270dc5f">&#9670;&nbsp;</a></span>clamp() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::clamp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>hi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>C++ Interface for clamping an array between two values</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>Input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lo</td><td>Value for lower limit </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hi</td><td>Value for upper limit </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>array containing values from <code>in</code> clamped between <code>lo</code> and <code>hi</code> </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="image_processing_2filters_8cpp-example.htm#a9">image_processing/filters.cpp</a>, and <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a4">image_processing/image_editing.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a032b942dbb5c0da0f141b05425f5838d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a032b942dbb5c0da0f141b05425f5838d">&#9670;&nbsp;</a></span>clamp() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::clamp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>hi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p></p>
<p>C++ Interface for clamping an array between two values</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>Input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lo</td><td>Value for lower limit </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hi</td><td>Value for upper limit </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>array containing values from <code>in</code> clamped between <code>lo</code> and <code>hi</code> </dd></dl>

</div>
</div>
<a id="a75363590900b5d1831afb66bc34948e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75363590900b5d1831afb66bc34948e6">&#9670;&nbsp;</a></span>clamp() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::clamp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>lo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>hi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p></p>
<p>C++ Interface for clamping an array between two values</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>Input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lo</td><td>Value for lower limit </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hi</td><td>Value for upper limit </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>array containing values from <code>in</code> clamped between <code>lo</code> and <code>hi</code> </dd></dl>

</div>
</div>
<a id="a569199dd6c4177868175814f06f9364b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a569199dd6c4177868175814f06f9364b">&#9670;&nbsp;</a></span>clamp() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::clamp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>lo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>hi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p></p>
<p>C++ Interface for clamping an array between two values</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>Input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lo</td><td>Value for lower limit </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hi</td><td>Value for upper limit </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>array containing values from <code>in</code> clamped between <code>lo</code> and <code>hi</code> </dd></dl>

</div>
</div>
<a id="ab8544157cfaab8d43c217fe2ec8814b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8544157cfaab8d43c217fe2ec8814b8">&#9670;&nbsp;</a></span>conj() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> af::conj </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aee503b023cfbcf64eb2d230b7c24c280"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee503b023cfbcf64eb2d230b7c24c280">&#9670;&nbsp;</a></span>conj() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> af::conj </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af84ed5a10b4a532920fe0d94630d4df5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af84ed5a10b4a532920fe0d94630d4df5">&#9670;&nbsp;</a></span>exampleFunction()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::exampleFunction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">af_someenum_t</a>&#160;</td>
          <td class="paramname"><em>param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a53c4f9a4b5440458bffe355803514c90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53c4f9a4b5440458bffe355803514c90">&#9670;&nbsp;</a></span>filter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::filter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Image Filtering. </p>
<div class="fragment"><div class="line"><span class="comment">// filter (convolve) an image with a 3x3 sobel kernel</span></div>
<div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> h_kernel[] = { -2.0, -1.0,  0.0,</div>
<div class="line">                           -1.0,  0.0,  1.0,</div>
<div class="line">                            0.0,  1.0,  2.0 };</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> kernel = <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(3,3,h_kernel);</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> img_out = <a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>(img_in, kernel);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">image</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td>coefficient matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>filtered image (same size as input)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Filtering done using correlation. Array values outside bounds are assumed to have zero value (0).</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000016">Deprecated:</a></b></dt><dd>Use <a class="el" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a> instead </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a11">graphics/gravity_sim.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a0556249ae4e347c3494fac0de98e2cdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0556249ae4e347c3494fac0de98e2cdb">&#9670;&nbsp;</a></span>getActiveBackend()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af::Backend</a> af::getActiveBackend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af_backend</a> which is the backend is currently active </dd></dl>

</div>
</div>
<a id="a6b9055a482a20849c790617f3587b19f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b9055a482a20849c790617f3587b19f">&#9670;&nbsp;</a></span>getRawPtr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void* af::getRawPtr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>An multi dimensional array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the raw pointer location to the array.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This pointer may be shared with other arrays. Use this function with caution. </dd></dl>

</div>
</div>
<a id="aee762e36f152a4ee58d3d14619b009d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee762e36f152a4ee58d3d14619b009d3">&#9670;&nbsp;</a></span>getSizeOf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t af::getSizeOf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the type represented by an af_dtype enum. </p>

</div>
</div>
<a id="a9930f4b8e763020e7ad116b2050c9d6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9930f4b8e763020e7ad116b2050c9d6d">&#9670;&nbsp;</a></span>gforGet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool af::gforGet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab2c0d9de8596066acaba7c7788f75160"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2c0d9de8596066acaba7c7788f75160">&#9670;&nbsp;</a></span>gforSet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::gforSet </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa85d63e7305705ef5d9e07dd5b4759a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa85d63e7305705ef5d9e07dd5b4759a5">&#9670;&nbsp;</a></span>gforToggle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool af::gforToggle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abc25dea11e9bc0d60577906671e96cf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc25dea11e9bc0d60577906671e96cf4">&#9670;&nbsp;</a></span>imag() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double af::imag </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="addd3d679e7c6bc246a6867397ae7621e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addd3d679e7c6bc246a6867397ae7621e">&#9670;&nbsp;</a></span>imag() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float af::imag </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3c6bae4aadd8e506ef0da65eb0491e9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c6bae4aadd8e506ef0da65eb0491e9e">&#9670;&nbsp;</a></span>isSpan()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool af::isSpan </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;&#160;</td>
          <td class="paramname"><em>seq</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the <a class="el" href="structaf__seq.htm" title="C-style struct to creating sequences for indexing.">af_seq</a> object represents the entire range of an axis. </p>

</div>
</div>
<a id="a7018268791fadde166753d079cf70cd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7018268791fadde166753d079cf70cd3">&#9670;&nbsp;</a></span>log2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::log2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for logarithm base 2. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is input </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the logarithm of input in base 2 </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="machine_learning_2geneticalgorithm_8cpp-example.htm#a4">machine_learning/geneticalgorithm.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a09da4429b5ec25c4df1a05a5a606f08e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09da4429b5ec25c4df1a05a5a606f08e">&#9670;&nbsp;</a></span>meanvar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::meanvar </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a>&#160;</td>
          <td class="paramname"><em>bias</em> = <code><a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6ae4f72a0687f083f8988f481f68c58a05">AF_VARIANCE_POPULATION</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for mean and variance. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">mean</td><td>The mean of the input array along <code>dim</code> dimension </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">var</td><td>The variance of the input array along the <code>dim</code> dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>The weights to scale the input array before calculating the mean and varience. If empty, the input is not scaled </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias</td><td>The type of bias used for variance calculation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The dimension along which the variance and mean are calculated. Default is -1 meaning the first non-zero dim </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa23148bc47d3229ac683d35b8021fb1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa23148bc47d3229ac683d35b8021fb1d">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool af::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af130b743b5abe48393f8f8ac7c974a5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af130b743b5abe48393f8f8ac7c974a5a">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool af::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2e4beb0013455c2f7bd8b62872e42fb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e4beb0013455c2f7bd8b62872e42fb0">&#9670;&nbsp;</a></span>operator*() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afec6156a6be4817e8c8a9f35dadaa02a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afec6156a6be4817e8c8a9f35dadaa02a">&#9670;&nbsp;</a></span>operator*() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5eb9119ce56e8e55977e87a49e2202b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5eb9119ce56e8e55977e87a49e2202b7">&#9670;&nbsp;</a></span>operator*() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7e8ca4d949f34a9a383cbe40f1bdc3eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e8ca4d949f34a9a383cbe40f1bdc3eb">&#9670;&nbsp;</a></span>operator*() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8a5b87c2f04ff26e0d9bc1e326206b4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a5b87c2f04ff26e0d9bc1e326206b4f">&#9670;&nbsp;</a></span>operator*() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adccec94393986d8a0146a35c3272beb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adccec94393986d8a0146a35c3272beb9">&#9670;&nbsp;</a></span>operator*() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab4a2467013ed0391538417fdadd9502b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4a2467013ed0391538417fdadd9502b">&#9670;&nbsp;</a></span>operator*() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>second</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an element-wise multiplication of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects. </p>

</div>
</div>
<a id="affb6492206287a4237d5ef03b26bd809"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affb6492206287a4237d5ef03b26bd809">&#9670;&nbsp;</a></span>operator*() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa538e44274f4b18cfa6e904a3dbe7240"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa538e44274f4b18cfa6e904a3dbe7240">&#9670;&nbsp;</a></span>operator*() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator* </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aeff6602fcce587dbb5f21632a2503888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeff6602fcce587dbb5f21632a2503888">&#9670;&nbsp;</a></span>operator+() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a926c4185bb75e500faba82cdf9cdddd9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a926c4185bb75e500faba82cdf9cdddd9">&#9670;&nbsp;</a></span>operator+() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae52b439ba5a6833f5e087df42577f6cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae52b439ba5a6833f5e087df42577f6cc">&#9670;&nbsp;</a></span>operator+() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a56f913699ce888ebb5c61c47f5ebe6ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56f913699ce888ebb5c61c47f5ebe6ac">&#9670;&nbsp;</a></span>operator+() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adf2aae855409bc5da8cce9cca5ca3f1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf2aae855409bc5da8cce9cca5ca3f1b">&#9670;&nbsp;</a></span>operator+() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6897859c1e4f4602e1068dce9b6bd85e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6897859c1e4f4602e1068dce9b6bd85e">&#9670;&nbsp;</a></span>operator+() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2df370c0bde398ff344fbd890095a1d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2df370c0bde398ff344fbd890095a1d1">&#9670;&nbsp;</a></span>operator+() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>second</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an element-wise addition of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects. </p>

</div>
</div>
<a id="ae1f5776cdecb608a93c4bbf5687a8847"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1f5776cdecb608a93c4bbf5687a8847">&#9670;&nbsp;</a></span>operator+() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a93ada752dd00687a1ea0809ae79e2451"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93ada752dd00687a1ea0809ae79e2451">&#9670;&nbsp;</a></span>operator+() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator+ </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a33f925205c58a00259c401d680d660d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33f925205c58a00259c401d680d660d5">&#9670;&nbsp;</a></span>operator-() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8b2fa26470cb9cc89e2438bfe4f23a27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b2fa26470cb9cc89e2438bfe4f23a27">&#9670;&nbsp;</a></span>operator-() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2a8247be5b35d670a340ff4ce8385d5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a8247be5b35d670a340ff4ce8385d5f">&#9670;&nbsp;</a></span>operator-() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a375db4ddd1d64afdbfe7ed55894ca48b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a375db4ddd1d64afdbfe7ed55894ca48b">&#9670;&nbsp;</a></span>operator-() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7887ce8562cfc6b51dd4cdf1460ebb3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7887ce8562cfc6b51dd4cdf1460ebb3b">&#9670;&nbsp;</a></span>operator-() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac3371182b266ff7e22dc0d2871d7c815"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3371182b266ff7e22dc0d2871d7c815">&#9670;&nbsp;</a></span>operator-() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3eb4ad57dd953fe02223b5368b250ca8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3eb4ad57dd953fe02223b5368b250ca8">&#9670;&nbsp;</a></span>operator-() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>second</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an element-wise subtraction of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects. </p>

</div>
</div>
<a id="a30b734c7e774da12a212c48005515e5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30b734c7e774da12a212c48005515e5f">&#9670;&nbsp;</a></span>operator-() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab2652defdfd26f449f58668e1669113a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2652defdfd26f449f58668e1669113a">&#9670;&nbsp;</a></span>operator-() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator- </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a882ef10c610e99ecdb970e9cb8429089"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a882ef10c610e99ecdb970e9cb8429089">&#9670;&nbsp;</a></span>operator/() <span class="overload">[1/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8273d165f999c973b0eb4ff58c7ed4f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8273d165f999c973b0eb4ff58c7ed4f3">&#9670;&nbsp;</a></span>operator/() <span class="overload">[2/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a73e894d5cb9ae6a71f00a7883d2a2dac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73e894d5cb9ae6a71f00a7883d2a2dac">&#9670;&nbsp;</a></span>operator/() <span class="overload">[3/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0e49462300ca94268003ef56c80391ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e49462300ca94268003ef56c80391ae">&#9670;&nbsp;</a></span>operator/() <span class="overload">[4/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5ecf471527d86928c0fffd93337dd805"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ecf471527d86928c0fffd93337dd805">&#9670;&nbsp;</a></span>operator/() <span class="overload">[5/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a350a2c2a4a193a164610b2faa5d4c493"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a350a2c2a4a193a164610b2faa5d4c493">&#9670;&nbsp;</a></span>operator/() <span class="overload">[6/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a101ebe78e996ef54fc8f0b9e0d555381"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a101ebe78e996ef54fc8f0b9e0d555381">&#9670;&nbsp;</a></span>operator/() <span class="overload">[7/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> af::operator/ </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3bb9a7a9f462d6acccf42d5f82147dd6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bb9a7a9f462d6acccf42d5f82147dd6">&#9670;&nbsp;</a></span>operator/() <span class="overload">[8/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> af::operator/ </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a28b2a1ee007b59f8c5f69413e8c1a7e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28b2a1ee007b59f8c5f69413e8c1a7e2">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::ostream&amp; af::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab11d30f44bd5affed653ff11e0d9406d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab11d30f44bd5affed653ff11e0d9406d">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::ostream&amp; af::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4f5072be3c0830582537f38e2b49ab99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f5072be3c0830582537f38e2b49ab99">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::ostream&amp; af::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ostr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prints the elements of the <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> array separated by spaces. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">ostr</td><td>An ostream object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>The <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> object to be printed </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to the <code>ostr</code> after the <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> string as been streamed in </dd></dl>

<p class="definition">Definition at line <a class="el" href="dim4_8hpp_source.htm#l00115">115</a> of file <a class="el" href="dim4_8hpp_source.htm">dim4.hpp</a>.</p>

</div>
</div>
<a id="a6434134336ba158e9d3a7b40e65da918"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6434134336ba158e9d3a7b40e65da918">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af1fefa885fa781ae8c03c3c8fa25804b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1fefa885fa781ae8c03c3c8fa25804b">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool af::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af89e92a1b2fb8a38768fefa04b7df9ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af89e92a1b2fb8a38768fefa04b7df9ed">&#9670;&nbsp;</a></span>operator&gt;&gt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::istream&amp; af::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6f8b141f8a61fb46cf9b9550a74db5be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f8b141f8a61fb46cf9b9550a74db5be">&#9670;&nbsp;</a></span>operator&gt;&gt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::istream&amp; af::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a33bd4ad83b5c49fb3a8c5249c992a006"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33bd4ad83b5c49fb3a8c5249c992a006">&#9670;&nbsp;</a></span>operator&gt;&gt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::istream&amp; af::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>istr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads 4 dim_t values from an input stream and stores the results in a <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">istr</td><td>An istream object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>The <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> object that will store the values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The <code>istr</code> object after 4 dim_t values have been read from the input </dd></dl>

<p class="definition">Definition at line <a class="el" href="dim4_8hpp_source.htm#l00132">132</a> of file <a class="el" href="dim4_8hpp_source.htm">dim4.hpp</a>.</p>

</div>
</div>
<a id="a405b319b613a24a4d216030e4cddb101"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a405b319b613a24a4d216030e4cddb101">&#9670;&nbsp;</a></span>real() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double af::real </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a74dccc725330fc255aee141f613c418c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74dccc725330fc255aee141f613c418c">&#9670;&nbsp;</a></span>real() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float af::real </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a55ecb10c221b2648def30fad1e58d124"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55ecb10c221b2648def30fad1e58d124">&#9670;&nbsp;</a></span>seqElements()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t af::seqElements </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;&#160;</td>
          <td class="paramname"><em>seq</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of elements that the <a class="el" href="structaf__seq.htm" title="C-style struct to creating sequences for indexing.">af_seq</a> object represents. </p>

</div>
</div>
<a id="af4be4eadea7bc6db08b4d8faf7820d64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4be4eadea7bc6db08b4d8faf7820d64">&#9670;&nbsp;</a></span>setFFTPlanCacheSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::setFFTPlanCacheSize </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>cacheSize</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for setting plan cache size. </p>
<p>This function doesn't do anything if called when CPU backend is active. The plans associated with the most recently used array sizes are cached.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cacheSize</td><td>is the number of plans that shall be cached </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a83c8f1181fc87c30d649f3f1eb26a860"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83c8f1181fc87c30d649f3f1eb26a860">&#9670;&nbsp;</a></span>sigmoid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::sigmoid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for calculating sigmoid function of an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is input </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the sigmoid of <code>in</code> </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a4">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a5">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a11">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a3">machine_learning/perceptron.cpp</a>, and <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a10">machine_learning/rbm.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a9ffb3ceefb515e1778cf8c4d5e29db59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ffb3ceefb515e1778cf8c4d5e29db59">&#9670;&nbsp;</a></span>timeit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double af::timeit </td>
          <td>(</td>
          <td class="paramtype">void(*)()&#160;</td>
          <td class="paramname"><em>fn</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="benchmarks_2blas_8cpp-example.htm#a9">benchmarks/blas.cpp</a>, <a class="el" href="benchmarks_2cg_8cpp-example.htm#a21">benchmarks/cg.cpp</a>, <a class="el" href="benchmarks_2fft_8cpp-example.htm#a6">benchmarks/fft.cpp</a>, <a class="el" href="benchmarks_2pi_8cpp-example.htm#a7">benchmarks/pi.cpp</a>, <a class="el" href="getting_started_2convolve_8cpp-example.htm#a9">getting_started/convolve.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#a13">getting_started/vectorize.cpp</a>, and <a class="el" href="image_processing_2gradient_diffusion_8cpp-example.htm#a11">image_processing/gradient_diffusion.cpp</a>.</dd>
</dl>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a923f02ce0a21b98935aaffd645f717e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a923f02ce0a21b98935aaffd645f717e0">&#9670;&nbsp;</a></span>end</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int end</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A special value representing the last value of an axis. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="helloworld_2helloworld_8cpp-example.htm#a10">helloworld/helloworld.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a873d028925215930b231204b50712cdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a873d028925215930b231204b50712cdb">&#9670;&nbsp;</a></span>Inf</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double Inf</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6376adaa49cd123a12eda6819a7e4f1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6376adaa49cd123a12eda6819a7e4f1e">&#9670;&nbsp;</a></span>NaN</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double NaN</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a460631fd3c4d686ad85e199f2a08fe6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a460631fd3c4d686ad85e199f2a08fe6a">&#9670;&nbsp;</a></span>Pi</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double Pi</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="graphics_2plot2d_8cpp-example.htm#a5">graphics/plot2d.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a6">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a23">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2image_demo_8cpp-example.htm#a6">image_processing/image_demo.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a3">image_processing/image_editing.cpp</a>, and <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a13">machine_learning/naive_bayes.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="af5c1188f38105afaf8b3f383492a1c9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5c1188f38105afaf8b3f383492a1c9f">&#9670;&nbsp;</a></span>span</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1seq.htm">seq</a> span</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A special value representing the entire axis of an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="financial_2heston_model_8cpp-example.htm#a4">financial/heston_model.cpp</a>, <a class="el" href="getting_started_2integer_8cpp-example.htm#a7">getting_started/integer.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#a4">getting_started/vectorize.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a5">graphics/gravity_sim.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a9">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a11">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2image_demo_8cpp-example.htm#a1">image_processing/image_demo.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a10">image_processing/image_editing.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a7">image_processing/morphing.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a3">image_processing/pyramids.cpp</a>, <a class="el" href="lin_algebra_2svd_8cpp-example.htm#a7">lin_algebra/svd.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a4">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a14">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#a9">machine_learning/kmeans.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a4">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a8">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a6">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a14">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a15">machine_learning/rbm.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a10">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a53c4f9a4b5440458bffe355803514c90"><div class="ttname"><a href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">af::filter</a></div><div class="ttdeci">AFAPI array filter(const array &amp;image, const array &amp;kernel)</div><div class="ttdoc">Image Filtering.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
