<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: af Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('namespaceaf.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle"><div class="title">af Namespace Reference</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm">array</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi dimensional data container.  <a href="classaf_1_1array.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1dim4.htm">dim4</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic object that represents size and shape.  <a href="classaf_1_1dim4.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01af_1_1cdouble_01_4.htm">dtype_traits&lt; af::cdouble &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01af_1_1cfloat_01_4.htm">dtype_traits&lt; af::cfloat &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01char_01_4.htm">dtype_traits&lt; char &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01double_01_4.htm">dtype_traits&lt; double &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01float_01_4.htm">dtype_traits&lt; float &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01half_01_4.htm">dtype_traits&lt; half &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01int_01_4.htm">dtype_traits&lt; int &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01long_01long_01_4.htm">dtype_traits&lt; long long &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01short_01_4.htm">dtype_traits&lt; short &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01std_1_1complex_3_01double_01_4_01_4.htm">dtype_traits&lt; std::complex&lt; double &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01std_1_1complex_3_01float_01_4_01_4.htm">dtype_traits&lt; std::complex&lt; float &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01unsigned_01_4.htm">dtype_traits&lt; unsigned &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01unsigned_01char_01_4.htm">dtype_traits&lt; unsigned char &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01unsigned_01long_01long_01_4.htm">dtype_traits&lt; unsigned long long &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1dtype__traits_3_01unsigned_01short_01_4.htm">dtype_traits&lt; unsigned short &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1event.htm">event</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ RAII interface for manipulating events.  <a href="classaf_1_1event.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1exception.htm">exception</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An ArrayFire exception class.  <a href="classaf_1_1exception.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1features.htm">features</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a feature returned by a feature detector.  <a href="classaf_1_1features.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1index.htm">index</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrapper for af_index.  <a href="classaf_1_1index.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1randomEngine.htm">randomEngine</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface - Random Number Generation Engine Class.  <a href="classaf_1_1randomEngine.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1seq.htm">seq</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">seq is used to create sequences for indexing <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>  <a href="classaf_1_1seq.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structaf_1_1timer.htm">timer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal timer object.  <a href="structaf_1_1timer.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1Window.htm">Window</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classaf_1_1Window.htm" title="Window object to render af::arrays.">Window</a> object to render af::arrays.  <a href="classaf_1_1Window.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a686f38b2bf903b7168423db31b8ed17e"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structaf_1_1af__cfloat.htm">af::af_cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a686f38b2bf903b7168423db31b8ed17e">af_cfloat</a></td></tr>
<tr class="separator:a686f38b2bf903b7168423db31b8ed17e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb644ea63cfe438ea51235af80ac8469"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structaf_1_1af__cdouble.htm">af::af_cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#abb644ea63cfe438ea51235af80ac8469">af_cdouble</a></td></tr>
<tr class="separator:abb644ea63cfe438ea51235af80ac8469"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63e29e484b92e217fe817fe78abc4f5f"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structaf_1_1af__cfloat.htm">af::af_cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a></td></tr>
<tr class="separator:a63e29e484b92e217fe817fe78abc4f5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd654c72624253fcd7fd88fe5298aa9a"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structaf_1_1af__cdouble.htm">af::af_cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a></td></tr>
<tr class="separator:acd654c72624253fcd7fd88fe5298aa9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a448f59f3b863561e0fbe00f04dbeca1e"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">dtype</a></td></tr>
<tr class="separator:a448f59f3b863561e0fbe00f04dbeca1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa328f52bf7d2de8150575946f73b13b"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aaa328f52bf7d2de8150575946f73b13b">source</a></td></tr>
<tr class="separator:aaa328f52bf7d2de8150575946f73b13b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ab719402a029bd12093bb06ed44d648"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">af_interp_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8ab719402a029bd12093bb06ed44d648">interpType</a></td></tr>
<tr class="separator:a8ab719402a029bd12093bb06ed44d648"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fb048919b30c86d5e55a7275c48d0a6"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">af_border_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5fb048919b30c86d5e55a7275c48d0a6">borderType</a></td></tr>
<tr class="separator:a5fb048919b30c86d5e55a7275c48d0a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5f01af1e3eb56329923af1f8c64b087"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">af_connectivity</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad5f01af1e3eb56329923af1f8c64b087">connectivity</a></td></tr>
<tr class="separator:ad5f01af1e3eb56329923af1f8c64b087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fbc54212b086e2da368d2926022b4a1"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2fbc54212b086e2da368d2926022b4a1">matchType</a></td></tr>
<tr class="separator:a2fbc54212b086e2da368d2926022b4a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c172c922ec17f2c9857bac0790479eb"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">af_cspace_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9c172c922ec17f2c9857bac0790479eb">CSpace</a></td></tr>
<tr class="separator:a9c172c922ec17f2c9857bac0790479eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e673f8420522770732e9ce08d21701e"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">af_someenum_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4e673f8420522770732e9ce08d21701e">SomeEnum</a></td></tr>
<tr class="separator:a4e673f8420522770732e9ce08d21701e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae820124eb78f8139748517b82f67c63d"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">af_mat_prop</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae820124eb78f8139748517b82f67c63d">trans</a></td></tr>
<tr class="separator:ae820124eb78f8139748517b82f67c63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2a83fe427da320c754bed689d003878"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae2a83fe427da320c754bed689d003878">convMode</a></td></tr>
<tr class="separator:ae2a83fe427da320c754bed689d003878"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af20188b1d2c2b3bcf9c4322baacbd3a7"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">af_conv_domain</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af20188b1d2c2b3bcf9c4322baacbd3a7">convDomain</a></td></tr>
<tr class="separator:af20188b1d2c2b3bcf9c4322baacbd3a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab282c0f20fde4f1be35126023734a7cd"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">af_mat_prop</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ab282c0f20fde4f1be35126023734a7cd">matProp</a></td></tr>
<tr class="separator:ab282c0f20fde4f1be35126023734a7cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9622c24ded435e51b610ba590f91ff2"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574ae">af_colormap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ac9622c24ded435e51b610ba590f91ff2">ColorMap</a></td></tr>
<tr class="separator:ac9622c24ded435e51b610ba590f91ff2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9353f25407feae7798860da3be5d7490"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdd">af_norm_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9353f25407feae7798860da3be5d7490">normType</a></td></tr>
<tr class="separator:a9353f25407feae7798860da3be5d7490"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad570a46373396ff1291de2e74e3bccda"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">af_ycc_std</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad570a46373396ff1291de2e74e3bccda">YCCStd</a></td></tr>
<tr class="separator:ad570a46373396ff1291de2e74e3bccda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe269565ff45bd97459bb3cf2150401e"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6f">af_image_format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#afe269565ff45bd97459bb3cf2150401e">imageFormat</a></td></tr>
<tr class="separator:afe269565ff45bd97459bb3cf2150401e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a413d6206892a435db389f022afc6d8"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af_backend</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4a413d6206892a435db389f022afc6d8">Backend</a></td></tr>
<tr class="separator:a4a413d6206892a435db389f022afc6d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af32df3e457a9ab8750a8d7600c1edda9"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ada5c8e0c0cea5e50765377715ff2c02b">af_marker_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af32df3e457a9ab8750a8d7600c1edda9">markerType</a></td></tr>
<tr class="separator:af32df3e457a9ab8750a8d7600c1edda9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74cf90148af957ec96ee6942c6f8ae93"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">af_moment_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a74cf90148af957ec96ee6942c6f8ae93">momentType</a></td></tr>
<tr class="separator:a74cf90148af957ec96ee6942c6f8ae93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ea5edbb7e84bd66f25c132ca6f438c8"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5ea5edbb7e84bd66f25c132ca6f438c8">storage</a></td></tr>
<tr class="separator:a5ea5edbb7e84bd66f25c132ca6f438c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad864b62ff8f81bf33a1df5647453d1dc"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">af_binary_op</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad864b62ff8f81bf33a1df5647453d1dc">binaryOp</a></td></tr>
<tr class="separator:ad864b62ff8f81bf33a1df5647453d1dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa341d395616c73f5a587c8586e25115"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a82a3bf91d6dd04661c63632d0fbf4934">af_random_engine_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aaa341d395616c73f5a587c8586e25115">randomEngineType</a></td></tr>
<tr class="separator:aaa341d395616c73f5a587c8586e25115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac36806c887ebaedac3bae28831366652"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a179019caba59979e58ec07d81cd25ef2">af_canny_threshold</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ac36806c887ebaedac3bae28831366652">cannyThreshold</a></td></tr>
<tr class="separator:ac36806c887ebaedac3bae28831366652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25da2a597c6a277565e1c11a78506444"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbb">af_flux_function</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a25da2a597c6a277565e1c11a78506444">fluxFunction</a></td></tr>
<tr class="separator:a25da2a597c6a277565e1c11a78506444"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a206f19b6579d41e92bf86927433c0c85"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5">af_diffusion_eq</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a206f19b6579d41e92bf86927433c0c85">diffusionEq</a></td></tr>
<tr class="separator:a206f19b6579d41e92bf86927433c0c85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6970270e3088f5dc1ea08555bc0d9eed"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487b">af_topk_function</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6970270e3088f5dc1ea08555bc0d9eed">topkFunction</a></td></tr>
<tr class="separator:a6970270e3088f5dc1ea08555bc0d9eed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5306a15fe3e16a8b44076ee2b2a8ed80"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5306a15fe3e16a8b44076ee2b2a8ed80">varBias</a></td></tr>
<tr class="separator:a5306a15fe3e16a8b44076ee2b2a8ed80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a811caf1c5dbbd2e1c8daa91f4240a74d"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a201e6b1dd1068c9795168fc25759a17c">af_iterative_deconv_algo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a811caf1c5dbbd2e1c8daa91f4240a74d">iterativeDeconvAlgo</a></td></tr>
<tr class="separator:a811caf1c5dbbd2e1c8daa91f4240a74d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae57101eac95e0d49b21404f33694e54b"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#a2bdf5ea652ab094b2e3dcbeebd0b35c6">af_inverse_deconv_algo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae57101eac95e0d49b21404f33694e54b">inverseDeconvAlgo</a></td></tr>
<tr class="separator:ae57101eac95e0d49b21404f33694e54b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89130764412e6c5aebf759a9ec97254c"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">af_conv_gradient_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a89130764412e6c5aebf759a9ec97254c">convGradientType</a></td></tr>
<tr class="separator:a89130764412e6c5aebf759a9ec97254c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad529987e6641d166b1d9e2448fd9212d"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classaf_1_1array.htm">array</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad529987e6641d166b1d9e2448fd9212d">batchFunc_t</a>) (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ad529987e6641d166b1d9e2448fd9212d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052cd0c70f2d9aff3c5d74d8ca56c559"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structaf__half.htm">af_half</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a052cd0c70f2d9aff3c5d74d8ca56c559">half</a></td></tr>
<tr class="separator:a052cd0c70f2d9aff3c5d74d8ca56c559"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33671cc35a44160908e69af74f02b1d1"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structaf_1_1timer.htm">af::timer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a33671cc35a44160908e69af74f02b1d1">timer</a></td></tr>
<tr class="memdesc:a33671cc35a44160908e69af74f02b1d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal timer object.  <a href="namespaceaf.htm#a33671cc35a44160908e69af74f02b1d1">More...</a><br /></td></tr>
<tr class="separator:a33671cc35a44160908e69af74f02b1d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga5eb9a966c94aa56af61707c91637e8df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">sum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga5eb9a966c94aa56af61707c91637e8df"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over a given dimension.  <a href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">More...</a><br /></td></tr>
<tr class="separator:ga5eb9a966c94aa56af61707c91637e8df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b86f360dbdc7c10855170543a0973fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga7b86f360dbdc7c10855170543a0973fa">sum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga7b86f360dbdc7c10855170543a0973fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over a given dimension, replacing any NaNs with a specified value.  <a href="group__reduce__func__sum.htm#ga7b86f360dbdc7c10855170543a0973fa">More...</a><br /></td></tr>
<tr class="separator:ga7b86f360dbdc7c10855170543a0973fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf824416b15f9ac38eb7ae82f8b107dd4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm#gaf824416b15f9ac38eb7ae82f8b107dd4">sumByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:gaf824416b15f9ac38eb7ae82f8b107dd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over a given dimension, according to an array of keys.  <a href="group__reduce__func__sum__by__key.htm#gaf824416b15f9ac38eb7ae82f8b107dd4">More...</a><br /></td></tr>
<tr class="separator:gaf824416b15f9ac38eb7ae82f8b107dd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7760781f95bbcab67067432e22ad2ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm#gae7760781f95bbcab67067432e22ad2ee">sumByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim, const double nanval)</td></tr>
<tr class="memdesc:gae7760781f95bbcab67067432e22ad2ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over a given dimension, replacing any NaNs with a specified value, according to an array of keys.  <a href="group__reduce__func__sum__by__key.htm#gae7760781f95bbcab67067432e22ad2ee">More...</a><br /></td></tr>
<tr class="separator:gae7760781f95bbcab67067432e22ad2ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90e43292bac747efc222a38bdccf34b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga90e43292bac747efc222a38bdccf34b2">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga90e43292bac747efc222a38bdccf34b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over a given dimension.  <a href="group__reduce__func__product.htm#ga90e43292bac747efc222a38bdccf34b2">More...</a><br /></td></tr>
<tr class="separator:ga90e43292bac747efc222a38bdccf34b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb69f6a3502483e593c52c081c81e096"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gafb69f6a3502483e593c52c081c81e096">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:gafb69f6a3502483e593c52c081c81e096"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over a given dimension, replacing any NaNs with a specified value.  <a href="group__reduce__func__product.htm#gafb69f6a3502483e593c52c081c81e096">More...</a><br /></td></tr>
<tr class="separator:gafb69f6a3502483e593c52c081c81e096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8226a1e3167531bfa487f608048c4367"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm#ga8226a1e3167531bfa487f608048c4367">productByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga8226a1e3167531bfa487f608048c4367"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over a given dimension, according to an array of keys.  <a href="group__reduce__func__product__by__key.htm#ga8226a1e3167531bfa487f608048c4367">More...</a><br /></td></tr>
<tr class="separator:ga8226a1e3167531bfa487f608048c4367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf480670f14e63ee1842bb44395c53aad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm#gaf480670f14e63ee1842bb44395c53aad">productByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim, const double nanval)</td></tr>
<tr class="memdesc:gaf480670f14e63ee1842bb44395c53aad"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over a given dimension, replacing any NaNs with a specified value, according to an array of keys.  <a href="group__reduce__func__product__by__key.htm#gaf480670f14e63ee1842bb44395c53aad">More...</a><br /></td></tr>
<tr class="separator:gaf480670f14e63ee1842bb44395c53aad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c4c0c89dbc59ae5e20fb7e5438ceca5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga5c4c0c89dbc59ae5e20fb7e5438ceca5">min</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga5c4c0c89dbc59ae5e20fb7e5438ceca5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum along a given dimension.  <a href="group__reduce__func__min.htm#ga5c4c0c89dbc59ae5e20fb7e5438ceca5">More...</a><br /></td></tr>
<tr class="separator:ga5c4c0c89dbc59ae5e20fb7e5438ceca5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9551f9cadf477be72f1491dfb720ddb7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min__by__key.htm#ga9551f9cadf477be72f1491dfb720ddb7">minByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga9551f9cadf477be72f1491dfb720ddb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum along a given dimension, according to an array of keys.  <a href="group__reduce__func__min__by__key.htm#ga9551f9cadf477be72f1491dfb720ddb7">More...</a><br /></td></tr>
<tr class="separator:ga9551f9cadf477be72f1491dfb720ddb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8487a88bf44e0c88af44fec99cc205b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga8487a88bf44e0c88af44fec99cc205b1">max</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga8487a88bf44e0c88af44fec99cc205b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum along a given dimension.  <a href="group__reduce__func__max.htm#ga8487a88bf44e0c88af44fec99cc205b1">More...</a><br /></td></tr>
<tr class="separator:ga8487a88bf44e0c88af44fec99cc205b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b0803c5e3c0041a9aa538423be4492a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max__by__key.htm#ga6b0803c5e3c0041a9aa538423be4492a">maxByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga6b0803c5e3c0041a9aa538423be4492a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum along a given dimension, according to an array of keys.  <a href="group__reduce__func__max__by__key.htm#ga6b0803c5e3c0041a9aa538423be4492a">More...</a><br /></td></tr>
<tr class="separator:ga6b0803c5e3c0041a9aa538423be4492a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae06bb92d6971c28cf3458f2d652f09f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#gae06bb92d6971c28cf3458f2d652f09f1">max</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;val, <a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;ragged_len, const int dim)</td></tr>
<tr class="memdesc:gae06bb92d6971c28cf3458f2d652f09f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the ragged maximum along a given dimension.  <a href="group__reduce__func__max.htm#gae06bb92d6971c28cf3458f2d652f09f1">More...</a><br /></td></tr>
<tr class="separator:gae06bb92d6971c28cf3458f2d652f09f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac84565e66f5f7b6e7ba8f044d5ed3359"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gac84565e66f5f7b6e7ba8f044d5ed3359">allTrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:gac84565e66f5f7b6e7ba8f044d5ed3359"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if all values along a given dimension are true.  <a href="group__reduce__func__all__true.htm#gac84565e66f5f7b6e7ba8f044d5ed3359">More...</a><br /></td></tr>
<tr class="separator:gac84565e66f5f7b6e7ba8f044d5ed3359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf56b0c3cd607d1678b8356a49952d89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#adf56b0c3cd607d1678b8356a49952d89">allTrueByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:adf56b0c3cd607d1678b8356a49952d89"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if all values along a given dimension are true, according to an array of keys.  <a href="namespaceaf.htm#adf56b0c3cd607d1678b8356a49952d89">More...</a><br /></td></tr>
<tr class="separator:adf56b0c3cd607d1678b8356a49952d89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17fa69942f503dadf6f83b75528d89e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga17fa69942f503dadf6f83b75528d89e5">anyTrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga17fa69942f503dadf6f83b75528d89e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if any values along a given dimension are true.  <a href="group__reduce__func__any__true.htm#ga17fa69942f503dadf6f83b75528d89e5">More...</a><br /></td></tr>
<tr class="separator:ga17fa69942f503dadf6f83b75528d89e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2314bdafee79d2a062ce435e512c8ed2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__anytrue__by__key.htm#ga2314bdafee79d2a062ce435e512c8ed2">anyTrueByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga2314bdafee79d2a062ce435e512c8ed2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if any values along a given dimension are true, according to an array of keys.  <a href="group__reduce__func__anytrue__by__key.htm#ga2314bdafee79d2a062ce435e512c8ed2">More...</a><br /></td></tr>
<tr class="separator:ga2314bdafee79d2a062ce435e512c8ed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga93235c9215589d1a6448e8cda3903b92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#ga93235c9215589d1a6448e8cda3903b92">count</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga93235c9215589d1a6448e8cda3903b92"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to count non-zero values in an array along a given dimension.  <a href="group__reduce__func__count.htm#ga93235c9215589d1a6448e8cda3903b92">More...</a><br /></td></tr>
<tr class="separator:ga93235c9215589d1a6448e8cda3903b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b29c56e8ab7b0bbc6220001a941e167"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count__by__key.htm#ga5b29c56e8ab7b0bbc6220001a941e167">countByKey</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;keys_out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals_out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga5b29c56e8ab7b0bbc6220001a941e167"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to count non-zero values in an array, according to an array of keys.  <a href="group__reduce__func__count__by__key.htm#ga5b29c56e8ab7b0bbc6220001a941e167">More...</a><br /></td></tr>
<tr class="separator:ga5b29c56e8ab7b0bbc6220001a941e167"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37626f6fd496af2bac2ea5791f201c48"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga37626f6fd496af2bac2ea5791f201c48"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga37626f6fd496af2bac2ea5791f201c48">sum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga37626f6fd496af2bac2ea5791f201c48"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over all dimensions.  <a href="group__reduce__func__sum.htm#ga37626f6fd496af2bac2ea5791f201c48">More...</a><br /></td></tr>
<tr class="separator:ga37626f6fd496af2bac2ea5791f201c48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0a61f0efaf87941e373e1c59814fd52"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac0a61f0efaf87941e373e1c59814fd52"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#gac0a61f0efaf87941e373e1c59814fd52">sum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, double nanval)</td></tr>
<tr class="memdesc:gac0a61f0efaf87941e373e1c59814fd52"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over all dimensions, replacing any NaNs with a specified value.  <a href="group__reduce__func__sum.htm#gac0a61f0efaf87941e373e1c59814fd52">More...</a><br /></td></tr>
<tr class="separator:gac0a61f0efaf87941e373e1c59814fd52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga681e83804fcd068877eb3eb2c446c312"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga681e83804fcd068877eb3eb2c446c312"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga681e83804fcd068877eb3eb2c446c312">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga681e83804fcd068877eb3eb2c446c312"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over the first non-singleton dimension.  <a href="group__reduce__func__product.htm#ga681e83804fcd068877eb3eb2c446c312">More...</a><br /></td></tr>
<tr class="separator:ga681e83804fcd068877eb3eb2c446c312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec2cbbfd730bf3008e93a261849ac5d2"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaec2cbbfd730bf3008e93a261849ac5d2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gaec2cbbfd730bf3008e93a261849ac5d2">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, double nanval)</td></tr>
<tr class="memdesc:gaec2cbbfd730bf3008e93a261849ac5d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over the first non-singleton dimension, replacing any NaNs with a specified value.  <a href="group__reduce__func__product.htm#gaec2cbbfd730bf3008e93a261849ac5d2">More...</a><br /></td></tr>
<tr class="separator:gaec2cbbfd730bf3008e93a261849ac5d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf09dd005f0a9f451b1bca3ffac70e7ab"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaf09dd005f0a9f451b1bca3ffac70e7ab"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#gaf09dd005f0a9f451b1bca3ffac70e7ab">min</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaf09dd005f0a9f451b1bca3ffac70e7ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum along the first non-singleton dimension.  <a href="group__reduce__func__min.htm#gaf09dd005f0a9f451b1bca3ffac70e7ab">More...</a><br /></td></tr>
<tr class="separator:gaf09dd005f0a9f451b1bca3ffac70e7ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac40e9fa0a64ec009dde1297427f120aa"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac40e9fa0a64ec009dde1297427f120aa"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#gac40e9fa0a64ec009dde1297427f120aa">max</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac40e9fa0a64ec009dde1297427f120aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum along the first non-singleton dimension.  <a href="group__reduce__func__max.htm#gac40e9fa0a64ec009dde1297427f120aa">More...</a><br /></td></tr>
<tr class="separator:gac40e9fa0a64ec009dde1297427f120aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb9655ba7cd3745065799ce9f7e8d28a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gabb9655ba7cd3745065799ce9f7e8d28a"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gabb9655ba7cd3745065799ce9f7e8d28a">allTrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gabb9655ba7cd3745065799ce9f7e8d28a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if all values along the first non-singleton dimension are true.  <a href="group__reduce__func__all__true.htm#gabb9655ba7cd3745065799ce9f7e8d28a">More...</a><br /></td></tr>
<tr class="separator:gabb9655ba7cd3745065799ce9f7e8d28a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga312a2f8f6f7e28613c77bd9bfc35e8cc"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga312a2f8f6f7e28613c77bd9bfc35e8cc"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga312a2f8f6f7e28613c77bd9bfc35e8cc">anyTrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga312a2f8f6f7e28613c77bd9bfc35e8cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if any values along the first non-singleton dimension are true.  <a href="group__reduce__func__any__true.htm#ga312a2f8f6f7e28613c77bd9bfc35e8cc">More...</a><br /></td></tr>
<tr class="separator:ga312a2f8f6f7e28613c77bd9bfc35e8cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ae8d49cb27ef8db55ce5515a2ac13be"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga7ae8d49cb27ef8db55ce5515a2ac13be"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#ga7ae8d49cb27ef8db55ce5515a2ac13be">count</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga7ae8d49cb27ef8db55ce5515a2ac13be"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to count non-zero values along the first non-singleton dimension.  <a href="group__reduce__func__count.htm#ga7ae8d49cb27ef8db55ce5515a2ac13be">More...</a><br /></td></tr>
<tr class="separator:ga7ae8d49cb27ef8db55ce5515a2ac13be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04e9dbdf3a13496f57f20d34293ac287"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga04e9dbdf3a13496f57f20d34293ac287">min</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;val, <a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga04e9dbdf3a13496f57f20d34293ac287"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum and its location along a given dimension.  <a href="group__reduce__func__min.htm#ga04e9dbdf3a13496f57f20d34293ac287">More...</a><br /></td></tr>
<tr class="separator:ga04e9dbdf3a13496f57f20d34293ac287"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6232d3cd68325c2a605e39e749e31b7d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga6232d3cd68325c2a605e39e749e31b7d">max</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;val, <a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga6232d3cd68325c2a605e39e749e31b7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum and its location along a given dimension.  <a href="group__reduce__func__max.htm#ga6232d3cd68325c2a605e39e749e31b7d">More...</a><br /></td></tr>
<tr class="separator:ga6232d3cd68325c2a605e39e749e31b7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74007ed6e8218671421447bd01e3330d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga74007ed6e8218671421447bd01e3330d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga74007ed6e8218671421447bd01e3330d">min</a> (T *val, unsigned *idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga74007ed6e8218671421447bd01e3330d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum and its location over all dimensions.  <a href="group__reduce__func__min.htm#ga74007ed6e8218671421447bd01e3330d">More...</a><br /></td></tr>
<tr class="separator:ga74007ed6e8218671421447bd01e3330d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4327ca06c9ce994c2fea59282b9abc32"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga4327ca06c9ce994c2fea59282b9abc32"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga4327ca06c9ce994c2fea59282b9abc32">max</a> (T *val, unsigned *idx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga4327ca06c9ce994c2fea59282b9abc32"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum and its location over all dimensions.  <a href="group__reduce__func__max.htm#ga4327ca06c9ce994c2fea59282b9abc32">More...</a><br /></td></tr>
<tr class="separator:ga4327ca06c9ce994c2fea59282b9abc32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83c2f9661d07b4bfce62be839991a343"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__accum.htm#ga83c2f9661d07b4bfce62be839991a343">accum</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:ga83c2f9661d07b4bfce62be839991a343"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the cumulative sum (inclusive) along a given dimension.  <a href="group__scan__func__accum.htm#ga83c2f9661d07b4bfce62be839991a343">More...</a><br /></td></tr>
<tr class="separator:ga83c2f9661d07b4bfce62be839991a343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f3d7f394334cb40cbd94e13310ce67b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scan.htm#ga1f3d7f394334cb40cbd94e13310ce67b">scan</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0, <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">binaryOp</a> op=<a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6ca335c219d88e113349f6ce08e830314a1">AF_BINARY_ADD</a>, bool inclusive_scan=true)</td></tr>
<tr class="memdesc:ga1f3d7f394334cb40cbd94e13310ce67b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to scan an array (generalized) over a given dimension.  <a href="group__scan__func__scan.htm#ga1f3d7f394334cb40cbd94e13310ce67b">More...</a><br /></td></tr>
<tr class="separator:ga1f3d7f394334cb40cbd94e13310ce67b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga48d35dd5d7aeeb3c36d417100f456c6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scanbykey.htm#ga48d35dd5d7aeeb3c36d417100f456c6d">scanByKey</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;key, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0, <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">binaryOp</a> op=<a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6ca335c219d88e113349f6ce08e830314a1">AF_BINARY_ADD</a>, bool inclusive_scan=true)</td></tr>
<tr class="memdesc:ga48d35dd5d7aeeb3c36d417100f456c6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to scan an array (generalized) over a given dimension, according to an array of keys.  <a href="group__scan__func__scanbykey.htm#ga48d35dd5d7aeeb3c36d417100f456c6d">More...</a><br /></td></tr>
<tr class="separator:ga48d35dd5d7aeeb3c36d417100f456c6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab18ab26e00f633d0e088ae0489e02d15"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__where.htm#gab18ab26e00f633d0e088ae0489e02d15">where</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab18ab26e00f633d0e088ae0489e02d15"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to locate the indices of the non-zero values in an array.  <a href="group__scan__func__where.htm#gab18ab26e00f633d0e088ae0489e02d15">More...</a><br /></td></tr>
<tr class="separator:gab18ab26e00f633d0e088ae0489e02d15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3a3a95b7a45a84d94eeda1b1d605f7b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff1.htm#ga3a3a95b7a45a84d94eeda1b1d605f7b3">diff1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:ga3a3a95b7a45a84d94eeda1b1d605f7b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the first order difference in an array over a given dimension.  <a href="group__calc__func__diff1.htm#ga3a3a95b7a45a84d94eeda1b1d605f7b3">More...</a><br /></td></tr>
<tr class="separator:ga3a3a95b7a45a84d94eeda1b1d605f7b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaddf45b7b4bf48c01ba9564c0873bc98a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff2.htm#gaddf45b7b4bf48c01ba9564c0873bc98a">diff2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:gaddf45b7b4bf48c01ba9564c0873bc98a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the second order difference in an array over a given dimension.  <a href="group__calc__func__diff2.htm#gaddf45b7b4bf48c01ba9564c0873bc98a">More...</a><br /></td></tr>
<tr class="separator:gaddf45b7b4bf48c01ba9564c0873bc98a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f74f8a10ffa77dd348676e2366e2c5e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort.htm#ga2f74f8a10ffa77dd348676e2366e2c5e">sort</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:ga2f74f8a10ffa77dd348676e2366e2c5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sort an array over a given dimension.  <a href="group__sort__func__sort.htm#ga2f74f8a10ffa77dd348676e2366e2c5e">More...</a><br /></td></tr>
<tr class="separator:ga2f74f8a10ffa77dd348676e2366e2c5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5e79c62e5b42fc36b20dcd484e9d1c1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__index.htm#gad5e79c62e5b42fc36b20dcd484e9d1c1">sort</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;indices, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:gad5e79c62e5b42fc36b20dcd484e9d1c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sort an array over a given dimension and to return the original indices.  <a href="group__sort__func__sort__index.htm#gad5e79c62e5b42fc36b20dcd484e9d1c1">More...</a><br /></td></tr>
<tr class="separator:gad5e79c62e5b42fc36b20dcd484e9d1c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdb089c49951cb1a3c6cb9c2193ac750"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__keys.htm#gabdb089c49951cb1a3c6cb9c2193ac750">sort</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out_keys, <a class="el" href="classaf_1_1array.htm">array</a> &amp;out_values, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;keys, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;values, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:gabdb089c49951cb1a3c6cb9c2193ac750"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sort an array over a given dimension, according to an array of keys.  <a href="group__sort__func__sort__keys.htm#gabdb089c49951cb1a3c6cb9c2193ac750">More...</a><br /></td></tr>
<tr class="separator:gabdb089c49951cb1a3c6cb9c2193ac750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf09723158ed9d22aba6dd63c2f33c88c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__unique.htm#gaf09723158ed9d22aba6dd63c2f33c88c">setUnique</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_sorted=false)</td></tr>
<tr class="memdesc:gaf09723158ed9d22aba6dd63c2f33c88c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the unique values in an array.  <a href="group__set__func__unique.htm#gaf09723158ed9d22aba6dd63c2f33c88c">More...</a><br /></td></tr>
<tr class="separator:gaf09723158ed9d22aba6dd63c2f33c88c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ff9b187c331b6961b03060f3af9ccff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__union.htm#ga4ff9b187c331b6961b03060f3af9ccff">setUnion</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const bool is_unique=false)</td></tr>
<tr class="memdesc:ga4ff9b187c331b6961b03060f3af9ccff"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the union of two arrays.  <a href="group__set__func__union.htm#ga4ff9b187c331b6961b03060f3af9ccff">More...</a><br /></td></tr>
<tr class="separator:ga4ff9b187c331b6961b03060f3af9ccff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e3116fd981e45f3267bbc404d6487cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__intersect.htm#ga4e3116fd981e45f3267bbc404d6487cc">setIntersect</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const bool is_unique=false)</td></tr>
<tr class="memdesc:ga4e3116fd981e45f3267bbc404d6487cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the intersection of two arrays.  <a href="group__set__func__intersect.htm#ga4e3116fd981e45f3267bbc404d6487cc">More...</a><br /></td></tr>
<tr class="separator:ga4e3116fd981e45f3267bbc404d6487cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab7263a0ddf1274df8236ae35bd47f97b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__min.htm#gab7263a0ddf1274df8236ae35bd47f97b">min</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab7263a0ddf1274df8236ae35bd47f97b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise minimum between two arrays.  <a href="group__arith__func__min.htm#gab7263a0ddf1274df8236ae35bd47f97b">More...</a><br /></td></tr>
<tr class="separator:gab7263a0ddf1274df8236ae35bd47f97b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga49d779932680f4c307dc3a0955b0c8aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__min.htm#ga49d779932680f4c307dc3a0955b0c8aa">min</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:ga49d779932680f4c307dc3a0955b0c8aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise minimum between an array and a scalar value.  <a href="group__arith__func__min.htm#ga49d779932680f4c307dc3a0955b0c8aa">More...</a><br /></td></tr>
<tr class="separator:ga49d779932680f4c307dc3a0955b0c8aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ecbbb9ab2a8fd1f6b2792a75ebda11a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__min.htm#ga3ecbbb9ab2a8fd1f6b2792a75ebda11a">min</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga3ecbbb9ab2a8fd1f6b2792a75ebda11a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise minimum between an array and a scalar value.  <a href="group__arith__func__min.htm#ga3ecbbb9ab2a8fd1f6b2792a75ebda11a">More...</a><br /></td></tr>
<tr class="separator:ga3ecbbb9ab2a8fd1f6b2792a75ebda11a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae015e7d89f6bde5375244258d4250a32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__max.htm#gae015e7d89f6bde5375244258d4250a32">max</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae015e7d89f6bde5375244258d4250a32"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise maximum between two arrays.  <a href="group__arith__func__max.htm#gae015e7d89f6bde5375244258d4250a32">More...</a><br /></td></tr>
<tr class="separator:gae015e7d89f6bde5375244258d4250a32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacbeec971cc7ba6bb0916ea04685ac30e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__max.htm#gacbeec971cc7ba6bb0916ea04685ac30e">max</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:gacbeec971cc7ba6bb0916ea04685ac30e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise maximum between an array and a scalar value.  <a href="group__arith__func__max.htm#gacbeec971cc7ba6bb0916ea04685ac30e">More...</a><br /></td></tr>
<tr class="separator:gacbeec971cc7ba6bb0916ea04685ac30e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ce99c80071bb646463f8aecafe17c7f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__max.htm#ga4ce99c80071bb646463f8aecafe17c7f">max</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4ce99c80071bb646463f8aecafe17c7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise maximum between an array and a scalar value.  <a href="group__arith__func__max.htm#ga4ce99c80071bb646463f8aecafe17c7f">More...</a><br /></td></tr>
<tr class="separator:ga4ce99c80071bb646463f8aecafe17c7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04a72240299a891b0d950e2c517e4a9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga04a72240299a891b0d950e2c517e4a9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the absolute value.  <a href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">More...</a><br /></td></tr>
<tr class="separator:ga04a72240299a891b0d950e2c517e4a9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ff1281766ca6b30a8e1c3e1163f4ead"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__arg.htm#ga4ff1281766ca6b30a8e1c3e1163f4ead">arg</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga4ff1281766ca6b30a8e1c3e1163f4ead"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the phase angle (in radians) of a complex array.  <a href="group__arith__func__arg.htm#ga4ff1281766ca6b30a8e1c3e1163f4ead">More...</a><br /></td></tr>
<tr class="separator:ga4ff1281766ca6b30a8e1c3e1163f4ead"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae966f38d9a7ead2fe25e4f7ba661a512"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sign.htm#gae966f38d9a7ead2fe25e4f7ba661a512">sign</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gae966f38d9a7ead2fe25e4f7ba661a512"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the sign of elements in an array.  <a href="group__arith__func__sign.htm#gae966f38d9a7ead2fe25e4f7ba661a512">More...</a><br /></td></tr>
<tr class="separator:gae966f38d9a7ead2fe25e4f7ba661a512"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60c90dbd268f909f21cee46e5001f96a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__round.htm#ga60c90dbd268f909f21cee46e5001f96a">round</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga60c90dbd268f909f21cee46e5001f96a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to round numbers.  <a href="group__arith__func__round.htm#ga60c90dbd268f909f21cee46e5001f96a">More...</a><br /></td></tr>
<tr class="separator:ga60c90dbd268f909f21cee46e5001f96a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1ba83310cab8448c8073bdd1db2b5f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__trunc.htm#gab1ba83310cab8448c8073bdd1db2b5f8">trunc</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab1ba83310cab8448c8073bdd1db2b5f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to truncate numbers.  <a href="group__arith__func__trunc.htm#gab1ba83310cab8448c8073bdd1db2b5f8">More...</a><br /></td></tr>
<tr class="separator:gab1ba83310cab8448c8073bdd1db2b5f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf885d5dcafe962759c75da5da37ce31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__floor.htm#gaaf885d5dcafe962759c75da5da37ce31">floor</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaaf885d5dcafe962759c75da5da37ce31"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to floor numbers.  <a href="group__arith__func__floor.htm#gaaf885d5dcafe962759c75da5da37ce31">More...</a><br /></td></tr>
<tr class="separator:gaaf885d5dcafe962759c75da5da37ce31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad751368621daa925c6a5d5a4b2f88233"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ceil.htm#gad751368621daa925c6a5d5a4b2f88233">ceil</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gad751368621daa925c6a5d5a4b2f88233"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to ceil numbers.  <a href="group__arith__func__ceil.htm#gad751368621daa925c6a5d5a4b2f88233">More...</a><br /></td></tr>
<tr class="separator:gad751368621daa925c6a5d5a4b2f88233"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad65c32b144ce6352260090e89be18c99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sin.htm#gad65c32b144ce6352260090e89be18c99">sin</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gad65c32b144ce6352260090e89be18c99"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the sine function.  <a href="group__arith__func__sin.htm#gad65c32b144ce6352260090e89be18c99">More...</a><br /></td></tr>
<tr class="separator:gad65c32b144ce6352260090e89be18c99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80c63bb4cd301157a1a9ad8c5bfe4aaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cos.htm#ga80c63bb4cd301157a1a9ad8c5bfe4aaa">cos</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga80c63bb4cd301157a1a9ad8c5bfe4aaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the cosine function.  <a href="group__arith__func__cos.htm#ga80c63bb4cd301157a1a9ad8c5bfe4aaa">More...</a><br /></td></tr>
<tr class="separator:ga80c63bb4cd301157a1a9ad8c5bfe4aaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c1b803ffbc144c23087a34766eaa10f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tan.htm#ga8c1b803ffbc144c23087a34766eaa10f">tan</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga8c1b803ffbc144c23087a34766eaa10f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the tangent function.  <a href="group__arith__func__tan.htm#ga8c1b803ffbc144c23087a34766eaa10f">More...</a><br /></td></tr>
<tr class="separator:ga8c1b803ffbc144c23087a34766eaa10f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga533b24b121e7f3df304f3dbb0220a494"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asin.htm#ga533b24b121e7f3df304f3dbb0220a494">asin</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga533b24b121e7f3df304f3dbb0220a494"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse sine function.  <a href="group__arith__func__asin.htm#ga533b24b121e7f3df304f3dbb0220a494">More...</a><br /></td></tr>
<tr class="separator:ga533b24b121e7f3df304f3dbb0220a494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5fe5965a0243e9982171a0715382cf66"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acos.htm#ga5fe5965a0243e9982171a0715382cf66">acos</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga5fe5965a0243e9982171a0715382cf66"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse cosine function.  <a href="group__arith__func__acos.htm#ga5fe5965a0243e9982171a0715382cf66">More...</a><br /></td></tr>
<tr class="separator:ga5fe5965a0243e9982171a0715382cf66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4d0599379df92612d9916f5d481f688"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#gab4d0599379df92612d9916f5d481f688">atan</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab4d0599379df92612d9916f5d481f688"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse tangent function.  <a href="group__arith__func__atan.htm#gab4d0599379df92612d9916f5d481f688">More...</a><br /></td></tr>
<tr class="separator:gab4d0599379df92612d9916f5d481f688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2be957de4196a3185cc15528c3d0c4d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sinh.htm#ga2be957de4196a3185cc15528c3d0c4d1">sinh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga2be957de4196a3185cc15528c3d0c4d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the hyperbolic sine function.  <a href="group__arith__func__sinh.htm#ga2be957de4196a3185cc15528c3d0c4d1">More...</a><br /></td></tr>
<tr class="separator:ga2be957de4196a3185cc15528c3d0c4d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d4cca44d8f2037e285ea6021ca0d094"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cosh.htm#ga6d4cca44d8f2037e285ea6021ca0d094">cosh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga6d4cca44d8f2037e285ea6021ca0d094"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the hyperbolic cosine function.  <a href="group__arith__func__cosh.htm#ga6d4cca44d8f2037e285ea6021ca0d094">More...</a><br /></td></tr>
<tr class="separator:ga6d4cca44d8f2037e285ea6021ca0d094"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb123558731ea1f083b6f60d85809708"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tanh.htm#gafb123558731ea1f083b6f60d85809708">tanh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gafb123558731ea1f083b6f60d85809708"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the hyperbolic tangent function.  <a href="group__arith__func__tanh.htm#gafb123558731ea1f083b6f60d85809708">More...</a><br /></td></tr>
<tr class="separator:gafb123558731ea1f083b6f60d85809708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6104aa17f156f9b682dbe13ef033b61"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asinh.htm#gac6104aa17f156f9b682dbe13ef033b61">asinh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac6104aa17f156f9b682dbe13ef033b61"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse hyperbolic sine function.  <a href="group__arith__func__asinh.htm#gac6104aa17f156f9b682dbe13ef033b61">More...</a><br /></td></tr>
<tr class="separator:gac6104aa17f156f9b682dbe13ef033b61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa76c8497cf72723b843962b7ebafc00"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acosh.htm#gafa76c8497cf72723b843962b7ebafc00">acosh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gafa76c8497cf72723b843962b7ebafc00"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse hyperbolic cosine function.  <a href="group__arith__func__acosh.htm#gafa76c8497cf72723b843962b7ebafc00">More...</a><br /></td></tr>
<tr class="separator:gafa76c8497cf72723b843962b7ebafc00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga893e5a4bdddb5414347ca9e3d39925ab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atanh.htm#ga893e5a4bdddb5414347ca9e3d39925ab">atanh</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga893e5a4bdddb5414347ca9e3d39925ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse hyperbolic tangent function.  <a href="group__arith__func__atanh.htm#ga893e5a4bdddb5414347ca9e3d39925ab">More...</a><br /></td></tr>
<tr class="separator:ga893e5a4bdddb5414347ca9e3d39925ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58d06a6595a56ad5f79a7cfebaf2ca9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__real.htm#ga58d06a6595a56ad5f79a7cfebaf2ca9e">real</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga58d06a6595a56ad5f79a7cfebaf2ca9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the real part of a complex array.  <a href="group__arith__func__real.htm#ga58d06a6595a56ad5f79a7cfebaf2ca9e">More...</a><br /></td></tr>
<tr class="separator:ga58d06a6595a56ad5f79a7cfebaf2ca9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc5d46cd82835c90cf030f31ef5f904b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__imag.htm#gafc5d46cd82835c90cf030f31ef5f904b">imag</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gafc5d46cd82835c90cf030f31ef5f904b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the imaginary part of a complex array.  <a href="group__arith__func__imag.htm#gafc5d46cd82835c90cf030f31ef5f904b">More...</a><br /></td></tr>
<tr class="separator:gafc5d46cd82835c90cf030f31ef5f904b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19f10686a918b51dc75da9a86add1353"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__conjg.htm#ga19f10686a918b51dc75da9a86add1353">conjg</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga19f10686a918b51dc75da9a86add1353"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the complex conjugate of an input array.  <a href="group__arith__func__conjg.htm#ga19f10686a918b51dc75da9a86add1353">More...</a><br /></td></tr>
<tr class="separator:ga19f10686a918b51dc75da9a86add1353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe3fc0e6a0e013cbe8265fcd0c777f77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gafe3fc0e6a0e013cbe8265fcd0c777f77">root</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;nth_root, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;value)</td></tr>
<tr class="memdesc:gafe3fc0e6a0e013cbe8265fcd0c777f77"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the nth root.  <a href="group__arith__func__root.htm#gafe3fc0e6a0e013cbe8265fcd0c777f77">More...</a><br /></td></tr>
<tr class="separator:gafe3fc0e6a0e013cbe8265fcd0c777f77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee34baf07e32006550ae3392d125e253"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gaee34baf07e32006550ae3392d125e253">root</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;nth_root, const double value)</td></tr>
<tr class="memdesc:gaee34baf07e32006550ae3392d125e253"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the nth root.  <a href="group__arith__func__root.htm#gaee34baf07e32006550ae3392d125e253">More...</a><br /></td></tr>
<tr class="separator:gaee34baf07e32006550ae3392d125e253"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacdd2f7e7d1b11b6ec8de05a114e96677"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gacdd2f7e7d1b11b6ec8de05a114e96677">root</a> (const double nth_root, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;value)</td></tr>
<tr class="memdesc:gacdd2f7e7d1b11b6ec8de05a114e96677"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the nth root.  <a href="group__arith__func__root.htm#gacdd2f7e7d1b11b6ec8de05a114e96677">More...</a><br /></td></tr>
<tr class="separator:gacdd2f7e7d1b11b6ec8de05a114e96677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25484c08c4af7cc892c45e92b5a5ae43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sigmoid.htm#ga25484c08c4af7cc892c45e92b5a5ae43">sigmoid</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga25484c08c4af7cc892c45e92b5a5ae43"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the logistical sigmoid function.  <a href="group__arith__func__sigmoid.htm#ga25484c08c4af7cc892c45e92b5a5ae43">More...</a><br /></td></tr>
<tr class="separator:ga25484c08c4af7cc892c45e92b5a5ae43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga583acbad8eb6db6ee6b8b363e2c38710"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">exp</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga583acbad8eb6db6ee6b8b363e2c38710"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the exponential.  <a href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">More...</a><br /></td></tr>
<tr class="separator:ga583acbad8eb6db6ee6b8b363e2c38710"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaacc08428562cc9da985443467e97a517"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__expm1.htm#gaacc08428562cc9da985443467e97a517">expm1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaacc08428562cc9da985443467e97a517"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the exponential of an array minus 1, <code>exp(in) - 1</code>.  <a href="group__arith__func__expm1.htm#gaacc08428562cc9da985443467e97a517">More...</a><br /></td></tr>
<tr class="separator:gaacc08428562cc9da985443467e97a517"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga514378f292bd6cff8f22a377ec79d5ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erf.htm#ga514378f292bd6cff8f22a377ec79d5ca">erf</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga514378f292bd6cff8f22a377ec79d5ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the error function.  <a href="group__arith__func__erf.htm#ga514378f292bd6cff8f22a377ec79d5ca">More...</a><br /></td></tr>
<tr class="separator:ga514378f292bd6cff8f22a377ec79d5ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5639fa042b89e51308ddd3e22c1dad2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erfc.htm#gaa5639fa042b89e51308ddd3e22c1dad2">erfc</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaa5639fa042b89e51308ddd3e22c1dad2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the complementary error function.  <a href="group__arith__func__erfc.htm#gaa5639fa042b89e51308ddd3e22c1dad2">More...</a><br /></td></tr>
<tr class="separator:gaa5639fa042b89e51308ddd3e22c1dad2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga706e8267880cf69e751ac197bc8aef30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log.htm#ga706e8267880cf69e751ac197bc8aef30">log</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga706e8267880cf69e751ac197bc8aef30"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the natural logarithm.  <a href="group__arith__func__log.htm#ga706e8267880cf69e751ac197bc8aef30">More...</a><br /></td></tr>
<tr class="separator:ga706e8267880cf69e751ac197bc8aef30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf1f1354103963df98ce14abc047b7e1e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log1p.htm#gaf1f1354103963df98ce14abc047b7e1e">log1p</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaf1f1354103963df98ce14abc047b7e1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the natural logarithm of 1 + input, <code>ln(1+in)</code>.  <a href="group__arith__func__log1p.htm#gaf1f1354103963df98ce14abc047b7e1e">More...</a><br /></td></tr>
<tr class="separator:gaf1f1354103963df98ce14abc047b7e1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa705a35c9981fcc18298812033676b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log10.htm#gafa705a35c9981fcc18298812033676b2">log10</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gafa705a35c9981fcc18298812033676b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the base 10 logarithm.  <a href="group__arith__func__log10.htm#gafa705a35c9981fcc18298812033676b2">More...</a><br /></td></tr>
<tr class="separator:gafa705a35c9981fcc18298812033676b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1e7c6eb6b42ed166c1e85e242304eb8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae1e7c6eb6b42ed166c1e85e242304eb8">log2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ae1e7c6eb6b42ed166c1e85e242304eb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the base 2 logarithm.  <a href="namespaceaf.htm#ae1e7c6eb6b42ed166c1e85e242304eb8">More...</a><br /></td></tr>
<tr class="separator:ae1e7c6eb6b42ed166c1e85e242304eb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdfe0e5a01f91a1079451b1e094a6893"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sqrt.htm#gabdfe0e5a01f91a1079451b1e094a6893">sqrt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gabdfe0e5a01f91a1079451b1e094a6893"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the square root.  <a href="group__arith__func__sqrt.htm#gabdfe0e5a01f91a1079451b1e094a6893">More...</a><br /></td></tr>
<tr class="separator:gabdfe0e5a01f91a1079451b1e094a6893"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebafe312a006f27d80bd0777f85baef9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rsqrt.htm#gaebafe312a006f27d80bd0777f85baef9">rsqrt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaebafe312a006f27d80bd0777f85baef9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the reciprocal square root.  <a href="group__arith__func__rsqrt.htm#gaebafe312a006f27d80bd0777f85baef9">More...</a><br /></td></tr>
<tr class="separator:gaebafe312a006f27d80bd0777f85baef9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5898f2bff28dfa170f93c8ddf914d77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cbrt.htm#gad5898f2bff28dfa170f93c8ddf914d77">cbrt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gad5898f2bff28dfa170f93c8ddf914d77"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the cube root.  <a href="group__arith__func__cbrt.htm#gad5898f2bff28dfa170f93c8ddf914d77">More...</a><br /></td></tr>
<tr class="separator:gad5898f2bff28dfa170f93c8ddf914d77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01bad677c74dd25185abec9add252328"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__factorial.htm#ga01bad677c74dd25185abec9add252328">factorial</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga01bad677c74dd25185abec9add252328"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the factorial.  <a href="group__arith__func__factorial.htm#ga01bad677c74dd25185abec9add252328">More...</a><br /></td></tr>
<tr class="separator:ga01bad677c74dd25185abec9add252328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac1e740132998e766fad33114ac972285"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tgamma.htm#gac1e740132998e766fad33114ac972285">tgamma</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac1e740132998e766fad33114ac972285"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the gamma function.  <a href="group__arith__func__tgamma.htm#gac1e740132998e766fad33114ac972285">More...</a><br /></td></tr>
<tr class="separator:gac1e740132998e766fad33114ac972285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga847513dd059428a526f5207409eebdb6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lgamma.htm#ga847513dd059428a526f5207409eebdb6">lgamma</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga847513dd059428a526f5207409eebdb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the logarithm of the absolute value of the gamma function.  <a href="group__arith__func__lgamma.htm#ga847513dd059428a526f5207409eebdb6">More...</a><br /></td></tr>
<tr class="separator:ga847513dd059428a526f5207409eebdb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b76c8e189148a555cbd5634f16f3da5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__iszero.htm#ga0b76c8e189148a555cbd5634f16f3da5">iszero</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga0b76c8e189148a555cbd5634f16f3da5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check which values are zero.  <a href="group__arith__func__iszero.htm#ga0b76c8e189148a555cbd5634f16f3da5">More...</a><br /></td></tr>
<tr class="separator:ga0b76c8e189148a555cbd5634f16f3da5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b657f1911a16abbaf7c8211bc27ae45"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isinf.htm#ga7b657f1911a16abbaf7c8211bc27ae45">isInf</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga7b657f1911a16abbaf7c8211bc27ae45"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if values are infinite.  <a href="group__arith__func__isinf.htm#ga7b657f1911a16abbaf7c8211bc27ae45">More...</a><br /></td></tr>
<tr class="separator:ga7b657f1911a16abbaf7c8211bc27ae45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga462cf8505197a9ad3e12a48f530bba31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isnan.htm#ga462cf8505197a9ad3e12a48f530bba31">isNaN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga462cf8505197a9ad3e12a48f530bba31"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if values are NaN.  <a href="group__arith__func__isnan.htm#ga462cf8505197a9ad3e12a48f530bba31">More...</a><br /></td></tr>
<tr class="separator:ga462cf8505197a9ad3e12a48f530bba31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac807fa17346b6c4d05acef85d4f7c00e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__setbackend.htm#gac807fa17346b6c4d05acef85d4f7c00e">setBackend</a> (const <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">Backend</a> bknd)</td></tr>
<tr class="separator:gac807fa17346b6c4d05acef85d4f7c00e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73e1330a23f5c72a2ad7b073bb4f1226"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getbackendcount.htm#ga73e1330a23f5c72a2ad7b073bb4f1226">getBackendCount</a> ()</td></tr>
<tr class="separator:ga73e1330a23f5c72a2ad7b073bb4f1226"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga713d8092be09d225c62c9917deb35673"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getavailbackends.htm#ga713d8092be09d225c62c9917deb35673">getAvailableBackends</a> ()</td></tr>
<tr class="memdesc:ga713d8092be09d225c62c9917deb35673"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a flag of all available backends.  <a href="group__unified__func__getavailbackends.htm#ga713d8092be09d225c62c9917deb35673">More...</a><br /></td></tr>
<tr class="separator:ga713d8092be09d225c62c9917deb35673"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1ef4d377f243223d435f3e298c5b8dc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af::Backend</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getbackendid.htm#ga1ef4d377f243223d435f3e298c5b8dc9">getBackendId</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga1ef4d377f243223d435f3e298c5b8dc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c4cd12a67eb27fc57129e4e7ff06a03"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af::Backend</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a7c4cd12a67eb27fc57129e4e7ff06a03">getActiveBackend</a> ()</td></tr>
<tr class="separator:a7c4cd12a67eb27fc57129e4e7ff06a03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5213425c1fc7aa9f96901292f4092f24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getdeviceid.htm#ga5213425c1fc7aa9f96901292f4092f24">getDeviceId</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga5213425c1fc7aa9f96901292f4092f24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac061af289fcd39a07a3efba0f33fb17f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#gac061af289fcd39a07a3efba0f33fb17f">matmul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optLhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optRhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:gac061af289fcd39a07a3efba0f33fb17f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply two matrices.  <a href="group__blas__func__matmul.htm#gac061af289fcd39a07a3efba0f33fb17f">More...</a><br /></td></tr>
<tr class="separator:gac061af289fcd39a07a3efba0f33fb17f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf308bc06987aa90c6ef3f1435a8b00cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#gaf308bc06987aa90c6ef3f1435a8b00cd">matmulNT</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf308bc06987aa90c6ef3f1435a8b00cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply two matrices.  <a href="group__blas__func__matmul.htm#gaf308bc06987aa90c6ef3f1435a8b00cd">More...</a><br /></td></tr>
<tr class="separator:gaf308bc06987aa90c6ef3f1435a8b00cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf7a46a31434131ceb3d43a93ab0fba3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#gaaf7a46a31434131ceb3d43a93ab0fba3">matmulTN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaaf7a46a31434131ceb3d43a93ab0fba3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply two matrices.  <a href="group__blas__func__matmul.htm#gaaf7a46a31434131ceb3d43a93ab0fba3">More...</a><br /></td></tr>
<tr class="separator:gaaf7a46a31434131ceb3d43a93ab0fba3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga109ee835f4a634252336ef9a1dc4fa14"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#ga109ee835f4a634252336ef9a1dc4fa14">matmulTT</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga109ee835f4a634252336ef9a1dc4fa14"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply two matrices.  <a href="group__blas__func__matmul.htm#ga109ee835f4a634252336ef9a1dc4fa14">More...</a><br /></td></tr>
<tr class="separator:ga109ee835f4a634252336ef9a1dc4fa14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga805419371b0fe290c18c05dea2744956"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#ga805419371b0fe290c18c05dea2744956">matmul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;c)</td></tr>
<tr class="memdesc:ga805419371b0fe290c18c05dea2744956"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to chain multiply three matrices.  <a href="group__blas__func__matmul.htm#ga805419371b0fe290c18c05dea2744956">More...</a><br /></td></tr>
<tr class="separator:ga805419371b0fe290c18c05dea2744956"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga10f94a05c94f9633647ed73120a7cbc3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm#ga10f94a05c94f9633647ed73120a7cbc3">matmul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;d)</td></tr>
<tr class="memdesc:ga10f94a05c94f9633647ed73120a7cbc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to chain multiply three matrices.  <a href="group__blas__func__matmul.htm#ga10f94a05c94f9633647ed73120a7cbc3">More...</a><br /></td></tr>
<tr class="separator:ga10f94a05c94f9633647ed73120a7cbc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab98b9a8de187c5e58e946658e62161ca"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gab98b9a8de187c5e58e946658e62161ca"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__blas__func__dot.htm#gab98b9a8de187c5e58e946658e62161ca">dot</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optLhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optRhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:gab98b9a8de187c5e58e946658e62161ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to compute the dot product.  <a href="group__blas__func__dot.htm#gab98b9a8de187c5e58e946658e62161ca">More...</a><br /></td></tr>
<tr class="separator:gab98b9a8de187c5e58e946658e62161ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga144c5ae563979cfbf0b32e587190dfdc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__dot.htm#ga144c5ae563979cfbf0b32e587190dfdc">dot</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optLhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> optRhs=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="separator:ga144c5ae563979cfbf0b32e587190dfdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2bd8af48bf13afaa2646e9449a8092f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__transpose.htm#gac2bd8af48bf13afaa2646e9449a8092f">transpose</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool conjugate=false)</td></tr>
<tr class="memdesc:gac2bd8af48bf13afaa2646e9449a8092f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to transpose a matrix.  <a href="group__blas__func__transpose.htm#gac2bd8af48bf13afaa2646e9449a8092f">More...</a><br /></td></tr>
<tr class="separator:gac2bd8af48bf13afaa2646e9449a8092f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa944b1470094cfea4bd60a78bd7d712b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__transpose.htm#gaa944b1470094cfea4bd60a78bd7d712b">transposeInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool conjugate=false)</td></tr>
<tr class="memdesc:gaa944b1470094cfea4bd60a78bd7d712b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to transpose a matrix in-place.  <a href="group__blas__func__transpose.htm#gaa944b1470094cfea4bd60a78bd7d712b">More...</a><br /></td></tr>
<tr class="separator:gaa944b1470094cfea4bd60a78bd7d712b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c2c5743f38866401302792aef256803"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__count.htm#ga5c2c5743f38866401302792aef256803">devicecount</a> ()</td></tr>
<tr class="separator:ga5c2c5743f38866401302792aef256803"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4588ab8d2f3bff001113c64b2e33fdc2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__get.htm#ga4588ab8d2f3bff001113c64b2e33fdc2">deviceget</a> ()</td></tr>
<tr class="separator:ga4588ab8d2f3bff001113c64b2e33fdc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabf1c330afdaa1295676ebfffaf16415f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__set.htm#gabf1c330afdaa1295676ebfffaf16415f">deviceset</a> (const int device)</td></tr>
<tr class="separator:gabf1c330afdaa1295676ebfffaf16415f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8613b6ec9fda1269f7f766939b4344b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#gab8613b6ec9fda1269f7f766939b4344b">loadimage</a> (const char *filename, const bool is_color=false)</td></tr>
<tr class="separator:gab8613b6ec9fda1269f7f766939b4344b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b479db4d95eb2551b5536a20b76e737"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__save.htm#ga7b479db4d95eb2551b5536a20b76e737">saveimage</a> (const char *filename, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga7b479db4d95eb2551b5536a20b76e737"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8ff8bfb143eec968fe09777c15721d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gauss.htm#gad8ff8bfb143eec968fe09777c15721d6">gaussiankernel</a> (const int rows, const int cols, const double sig_r=0, const double sig_c=0)</td></tr>
<tr class="separator:gad8ff8bfb143eec968fe09777c15721d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32e8768b9ea70aa11e64ba392baa1dbe"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga32e8768b9ea70aa11e64ba392baa1dbe"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#ga32e8768b9ea70aa11e64ba392baa1dbe">alltrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga32e8768b9ea70aa11e64ba392baa1dbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3a4c8df0d405caa45e15a8b7a0918d12"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga3a4c8df0d405caa45e15a8b7a0918d12"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga3a4c8df0d405caa45e15a8b7a0918d12">anytrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga3a4c8df0d405caa45e15a8b7a0918d12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae22441682aaa76a4a56c7b0092e4dd37"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gae22441682aaa76a4a56c7b0092e4dd37">alltrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="separator:gae22441682aaa76a4a56c7b0092e4dd37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58d8dd05f639114cda488339422b8807"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga58d8dd05f639114cda488339422b8807">anytrue</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="separator:ga58d8dd05f639114cda488339422b8807"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa808f25ea9c7b0b84fe223df2f21231b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__unique.htm#gaa808f25ea9c7b0b84fe223df2f21231b">setunique</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_sorted=false)</td></tr>
<tr class="separator:gaa808f25ea9c7b0b84fe223df2f21231b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1db930f06f5ffc915ae93f657c7e52af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__union.htm#ga1db930f06f5ffc915ae93f657c7e52af">setunion</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const bool is_unique=false)</td></tr>
<tr class="separator:ga1db930f06f5ffc915ae93f657c7e52af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7189b9e7da6454ea0d5f276837cd6c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__intersect.htm#gac7189b9e7da6454ea0d5f276837cd6c0">setintersect</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const bool is_unique=false)</td></tr>
<tr class="separator:gac7189b9e7da6454ea0d5f276837cd6c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fc5f0b779d3361a1af8f451f221a15b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histequal.htm#ga7fc5f0b779d3361a1af8f451f221a15b">histequal</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;hist)</td></tr>
<tr class="separator:ga7fc5f0b779d3361a1af8f451f221a15b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga85a29a929ed8b79daa7d8b5883512fc0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__colorspace.htm#ga85a29a929ed8b79daa7d8b5883512fc0">colorspace</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;image, const <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a> to, const <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a> from)</td></tr>
<tr class="separator:ga85a29a929ed8b79daa7d8b5883512fc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad52a2c5f1ab995d9aa53ef47a2bb5a24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;image, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;kernel)</td></tr>
<tr class="memdesc:ad52a2c5f1ab995d9aa53ef47a2bb5a24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Image Filtering.  <a href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">More...</a><br /></td></tr>
<tr class="separator:ad52a2c5f1ab995d9aa53ef47a2bb5a24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd7319a353407a7cef7f94e5eea446a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gacd7319a353407a7cef7f94e5eea446a8">mul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="separator:gacd7319a353407a7cef7f94e5eea446a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacbd96c756161bef655001ed3bc6e157f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gacbd96c756161bef655001ed3bc6e157f"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gacbd96c756161bef655001ed3bc6e157f">mul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:gacbd96c756161bef655001ed3bc6e157f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga07b2dba9921e544eef36c03798cc66a7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__prop.htm#ga07b2dba9921e544eef36c03798cc66a7">deviceprop</a> (char *d_name, char *d_platform, char *d_toolkit, char *d_compute)</td></tr>
<tr class="separator:ga07b2dba9921e544eef36c03798cc66a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06aee90a32f9cdf9a4fa8232d3ca6b58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a06aee90a32f9cdf9a4fa8232d3ca6b58">real</a> (<a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a> val)</td></tr>
<tr class="separator:a06aee90a32f9cdf9a4fa8232d3ca6b58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e62f696a0f75d54d55c205f94286a33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2e62f696a0f75d54d55c205f94286a33">real</a> (<a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a> val)</td></tr>
<tr class="separator:a2e62f696a0f75d54d55c205f94286a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a641f057361e77a9ec71d9f4c003ee0af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a641f057361e77a9ec71d9f4c003ee0af">imag</a> (<a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a> val)</td></tr>
<tr class="separator:a641f057361e77a9ec71d9f4c003ee0af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d2cdad117867128624600ac14894725"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9d2cdad117867128624600ac14894725">imag</a> (<a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a> val)</td></tr>
<tr class="separator:a9d2cdad117867128624600ac14894725"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f0b23e6c6a8020d83258b0200421d0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4f0b23e6c6a8020d83258b0200421d0f">operator+</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a4f0b23e6c6a8020d83258b0200421d0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc28042789bcdea972b91bc2f86e680d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#adc28042789bcdea972b91bc2f86e680d">operator+</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:adc28042789bcdea972b91bc2f86e680d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31b78a28d3b1a0ad6d74c1304e7ef5d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a31b78a28d3b1a0ad6d74c1304e7ef5d6">operator-</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a31b78a28d3b1a0ad6d74c1304e7ef5d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaac3a4c0a6f898bc2c16f99d6b47a41"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aaaac3a4c0a6f898bc2c16f99d6b47a41">operator-</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:aaaac3a4c0a6f898bc2c16f99d6b47a41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbe9ee001efd62c1d35c8ad33ba99f91"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#afbe9ee001efd62c1d35c8ad33ba99f91">operator*</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:afbe9ee001efd62c1d35c8ad33ba99f91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65b75dfec258ab175132df4a6a9cb3e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a65b75dfec258ab175132df4a6a9cb3e0">operator*</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a65b75dfec258ab175132df4a6a9cb3e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a201022fdc4b8eb871b8237001795ed77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a201022fdc4b8eb871b8237001795ed77">operator/</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a201022fdc4b8eb871b8237001795ed77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43a63b7dc75e092d399c2b27de175541"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a43a63b7dc75e092d399c2b27de175541">operator/</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a43a63b7dc75e092d399c2b27de175541"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28918ac5c8ea8c7902881bb42f5fa607"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a28918ac5c8ea8c7902881bb42f5fa607">operator+</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a28918ac5c8ea8c7902881bb42f5fa607"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dd1c63d0d1fed6545ae8ba8f1689bd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8dd1c63d0d1fed6545ae8ba8f1689bd3">operator+</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a8dd1c63d0d1fed6545ae8ba8f1689bd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81d24e8e1a63bbf1e1f7d4c56f579688"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a81d24e8e1a63bbf1e1f7d4c56f579688">operator/</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a81d24e8e1a63bbf1e1f7d4c56f579688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b2581c863bb406916fa42ba0eb508f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9b2581c863bb406916fa42ba0eb508f8">operator/</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a9b2581c863bb406916fa42ba0eb508f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6012983167e758d7b92b8e85d2e2a0f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6012983167e758d7b92b8e85d2e2a0f1">operator-</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a6012983167e758d7b92b8e85d2e2a0f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8462cd1c46b3f51904538a6bbf78698b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8462cd1c46b3f51904538a6bbf78698b">operator-</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a8462cd1c46b3f51904538a6bbf78698b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb49e7fa15ff651f7e69b8c7e56fd660"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#afb49e7fa15ff651f7e69b8c7e56fd660">operator*</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:afb49e7fa15ff651f7e69b8c7e56fd660"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b794a755ec6e1b1037e3e1a90cad264"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6b794a755ec6e1b1037e3e1a90cad264">operator*</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a6b794a755ec6e1b1037e3e1a90cad264"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a548e085243ca6b70550448772662cbf2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a548e085243ca6b70550448772662cbf2">operator+</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs)</td></tr>
<tr class="separator:a548e085243ca6b70550448772662cbf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e66835528f7b2515d8dd590a8484602"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8e66835528f7b2515d8dd590a8484602">operator+</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs)</td></tr>
<tr class="separator:a8e66835528f7b2515d8dd590a8484602"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a345f9096703542da4f9f33f61266a347"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a345f9096703542da4f9f33f61266a347">operator+</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a345f9096703542da4f9f33f61266a347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eff9e14b645853d9ecaeb28bdd672eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2eff9e14b645853d9ecaeb28bdd672eb">operator+</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a2eff9e14b645853d9ecaeb28bdd672eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb7ae075dae54a4f1b961958430f6a37"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#acb7ae075dae54a4f1b961958430f6a37">operator-</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs)</td></tr>
<tr class="separator:acb7ae075dae54a4f1b961958430f6a37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9886c8d2ddb8188703f0a6da7bcc7224"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9886c8d2ddb8188703f0a6da7bcc7224">operator-</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs)</td></tr>
<tr class="separator:a9886c8d2ddb8188703f0a6da7bcc7224"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2311456bef761fefe27fd18633302fc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2311456bef761fefe27fd18633302fc9">operator-</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a2311456bef761fefe27fd18633302fc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d9ce41934b4dd860dbc1b172ae900ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8d9ce41934b4dd860dbc1b172ae900ed">operator-</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a8d9ce41934b4dd860dbc1b172ae900ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af919ae4a18d716fa25b6c1f6f834f0bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af919ae4a18d716fa25b6c1f6f834f0bd">operator*</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs)</td></tr>
<tr class="separator:af919ae4a18d716fa25b6c1f6f834f0bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c9e72c7d2af604f1868e19500c1b0a9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a8c9e72c7d2af604f1868e19500c1b0a9">operator*</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs)</td></tr>
<tr class="separator:a8c9e72c7d2af604f1868e19500c1b0a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae60d06d007b863082d7bdc0bf45af5e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae60d06d007b863082d7bdc0bf45af5e0">operator*</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ae60d06d007b863082d7bdc0bf45af5e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac00f01162b34aa2861b21bf993c3d41f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ac00f01162b34aa2861b21bf993c3d41f">operator*</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:ac00f01162b34aa2861b21bf993c3d41f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a195b6115d405bd1d20efffb91dac22f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a195b6115d405bd1d20efffb91dac22f0">operator/</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs)</td></tr>
<tr class="separator:a195b6115d405bd1d20efffb91dac22f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15f031c2fbc772ee7fdf7736b92b7fe0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a15f031c2fbc772ee7fdf7736b92b7fe0">operator/</a> (const double &amp;rhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs)</td></tr>
<tr class="separator:a15f031c2fbc772ee7fdf7736b92b7fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a251b063d3d3bb5fcc9b1df7506d8a8e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a251b063d3d3bb5fcc9b1df7506d8a8e6">operator/</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a251b063d3d3bb5fcc9b1df7506d8a8e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d6c28486784a703ea3afb2416e8823f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a3d6c28486784a703ea3afb2416e8823f">operator/</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a3d6c28486784a703ea3afb2416e8823f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a975e403a051085dd0f647dde28877b5b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a975e403a051085dd0f647dde28877b5b">operator==</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a975e403a051085dd0f647dde28877b5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a058ce8d362278d7b88b262ba95ae09af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a058ce8d362278d7b88b262ba95ae09af">operator==</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a058ce8d362278d7b88b262ba95ae09af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73cfc38311108e33f486afc399fba8cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a73cfc38311108e33f486afc399fba8cc">operator!=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:a73cfc38311108e33f486afc399fba8cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a526131ac979bb4f1734f6191e485e227"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a526131ac979bb4f1734f6191e485e227">operator!=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:a526131ac979bb4f1734f6191e485e227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f91014cbceb630065a42b34b7f93cf6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a0f91014cbceb630065a42b34b7f93cf6">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;in)</td></tr>
<tr class="separator:a0f91014cbceb630065a42b34b7f93cf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4109ee2fb51a564c9075c13a2405f332"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a4109ee2fb51a564c9075c13a2405f332">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;in)</td></tr>
<tr class="separator:a4109ee2fb51a564c9075c13a2405f332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f6208e9c3ceea9d12967e414b54d034"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a3f6208e9c3ceea9d12967e414b54d034">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;in)</td></tr>
<tr class="separator:a3f6208e9c3ceea9d12967e414b54d034"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5641c25525e5216b872b536310ed0cc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5641c25525e5216b872b536310ed0cc9">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;in)</td></tr>
<tr class="separator:a5641c25525e5216b872b536310ed0cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ad14e331503163f2d243acdb1279889"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a5ad14e331503163f2d243acdb1279889">abs</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="separator:a5ad14e331503163f2d243acdb1279889"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace7a551738a61478b291d73517e5afb0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ace7a551738a61478b291d73517e5afb0">abs</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="separator:ace7a551738a61478b291d73517e5afb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af79f2d4bb81e1d4b64fef1a603a19586"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af79f2d4bb81e1d4b64fef1a603a19586">conj</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="separator:af79f2d4bb81e1d4b64fef1a603a19586"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7ed0bb4bafb11f669133ff8d1da571a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aa7ed0bb4bafb11f669133ff8d1da571a">conj</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="separator:aa7ed0bb4bafb11f669133ff8d1da571a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0db7363474e85542f16e4bbcf57fe842"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga0db7363474e85542f16e4bbcf57fe842"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a> (T val, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="memdesc:ga0db7363474e85542f16e4bbcf57fe842"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate an array with elements set to a specified value.  <a href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">More...</a><br /></td></tr>
<tr class="separator:ga0db7363474e85542f16e4bbcf57fe842"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3882545ed9a0b31b6b7b1f09f7d84b0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac3882545ed9a0b31b6b7b1f09f7d84b0"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#gac3882545ed9a0b31b6b7b1f09f7d84b0">constant</a> (T val, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="memdesc:gac3882545ed9a0b31b6b7b1f09f7d84b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a 1-D array with elements set to a specified value.  <a href="group__data__func__constant.htm#gac3882545ed9a0b31b6b7b1f09f7d84b0">More...</a><br /></td></tr>
<tr class="separator:gac3882545ed9a0b31b6b7b1f09f7d84b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc2b2ba9121c4ed8622f3005ff1e101e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gafc2b2ba9121c4ed8622f3005ff1e101e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#gafc2b2ba9121c4ed8622f3005ff1e101e">constant</a> (T val, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="memdesc:gafc2b2ba9121c4ed8622f3005ff1e101e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a 2-D array with elements set to a specified value.  <a href="group__data__func__constant.htm#gafc2b2ba9121c4ed8622f3005ff1e101e">More...</a><br /></td></tr>
<tr class="separator:gafc2b2ba9121c4ed8622f3005ff1e101e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e083aa3bc8ff22d23a2a0b10fc4dd10"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga9e083aa3bc8ff22d23a2a0b10fc4dd10"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#ga9e083aa3bc8ff22d23a2a0b10fc4dd10">constant</a> (T val, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="memdesc:ga9e083aa3bc8ff22d23a2a0b10fc4dd10"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a 3-D array with elements set to a specified value.  <a href="group__data__func__constant.htm#ga9e083aa3bc8ff22d23a2a0b10fc4dd10">More...</a><br /></td></tr>
<tr class="separator:ga9e083aa3bc8ff22d23a2a0b10fc4dd10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58ae1c5eb6b795649332352a3e969d3b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga58ae1c5eb6b795649332352a3e969d3b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm#ga58ae1c5eb6b795649332352a3e969d3b">constant</a> (T val, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> ty=(<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>) <a class="el" href="structaf_1_1dtype__traits.htm">dtype_traits</a>&lt; T &gt;::ctype)</td></tr>
<tr class="memdesc:ga58ae1c5eb6b795649332352a3e969d3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a 4-D array with elements set to a specified value.  <a href="group__data__func__constant.htm#ga58ae1c5eb6b795649332352a3e969d3b">More...</a><br /></td></tr>
<tr class="separator:ga58ae1c5eb6b795649332352a3e969d3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1dcf8d1baa51e7b343d43b57e0760df1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#ga1dcf8d1baa51e7b343d43b57e0760df1">identity</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga1dcf8d1baa51e7b343d43b57e0760df1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate an identity array.  <a href="group__data__func__identity.htm#ga1dcf8d1baa51e7b343d43b57e0760df1">More...</a><br /></td></tr>
<tr class="separator:ga1dcf8d1baa51e7b343d43b57e0760df1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a7bb5d1064fe53ad491a0685fff8137"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#ga7a7bb5d1064fe53ad491a0685fff8137">identity</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga7a7bb5d1064fe53ad491a0685fff8137"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a 1-D identity array.  <a href="group__data__func__identity.htm#ga7a7bb5d1064fe53ad491a0685fff8137">More...</a><br /></td></tr>
<tr class="separator:ga7a7bb5d1064fe53ad491a0685fff8137"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafefc19baa6b8e0e2a2e8dfb9d429b15c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#gafefc19baa6b8e0e2a2e8dfb9d429b15c">identity</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gafefc19baa6b8e0e2a2e8dfb9d429b15c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a 2-D identity array.  <a href="group__data__func__identity.htm#gafefc19baa6b8e0e2a2e8dfb9d429b15c">More...</a><br /></td></tr>
<tr class="separator:gafefc19baa6b8e0e2a2e8dfb9d429b15c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5004ac981128e81e34fe177886b38e4b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#ga5004ac981128e81e34fe177886b38e4b">identity</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga5004ac981128e81e34fe177886b38e4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a 3-D identity array.  <a href="group__data__func__identity.htm#ga5004ac981128e81e34fe177886b38e4b">More...</a><br /></td></tr>
<tr class="separator:ga5004ac981128e81e34fe177886b38e4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f8f46d001dfbac14005394afda59ba8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm#ga5f8f46d001dfbac14005394afda59ba8">identity</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga5f8f46d001dfbac14005394afda59ba8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a 4-D identity array.  <a href="group__data__func__identity.htm#ga5f8f46d001dfbac14005394afda59ba8">More...</a><br /></td></tr>
<tr class="separator:ga5f8f46d001dfbac14005394afda59ba8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabed40660d2001b8d273d251cd4992c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__range.htm#gaabed40660d2001b8d273d251cd4992c3">range</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const int seq_dim=-1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gaabed40660d2001b8d273d251cd4992c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate an array with <code>[0, n-1]</code> values along the <code>seq_dim</code> dimension and tiled across other dimensions of shape <code><a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a></code>.  <a href="group__data__func__range.htm#gaabed40660d2001b8d273d251cd4992c3">More...</a><br /></td></tr>
<tr class="separator:gaabed40660d2001b8d273d251cd4992c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab38b319cb42fdde1b57d80823233c519"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__range.htm#gab38b319cb42fdde1b57d80823233c519">range</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3=1, const int seq_dim=-1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gab38b319cb42fdde1b57d80823233c519"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate an array with <code>[0, n-1]</code> values along the <code>seq_dim</code> dimension and tiled across other dimensions described by dimension parameters.  <a href="group__data__func__range.htm#gab38b319cb42fdde1b57d80823233c519">More...</a><br /></td></tr>
<tr class="separator:gab38b319cb42fdde1b57d80823233c519"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga440f01f3a85d20f5adc677ed1c9f0deb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__iota.htm#ga440f01f3a85d20f5adc677ed1c9f0deb">iota</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;tile_dims=<a class="el" href="classaf_1_1dim4.htm">dim4</a>(1), const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga440f01f3a85d20f5adc677ed1c9f0deb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate an array with <code>[0, n-1]</code> values modified to specified dimensions and tiling.  <a href="group__data__func__iota.htm#ga440f01f3a85d20f5adc677ed1c9f0deb">More...</a><br /></td></tr>
<tr class="separator:ga440f01f3a85d20f5adc677ed1c9f0deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2edf122701d157ee0af36d2950376174"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__diag.htm#ga2edf122701d157ee0af36d2950376174">diag</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int num=0, const bool extract=true)</td></tr>
<tr class="memdesc:ga2edf122701d157ee0af36d2950376174"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to extract the diagonal from an array.  <a href="group__data__func__diag.htm#ga2edf122701d157ee0af36d2950376174">More...</a><br /></td></tr>
<tr class="separator:ga2edf122701d157ee0af36d2950376174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa829b2ec622d809f760a39a631162772"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__join.htm#gaa829b2ec622d809f760a39a631162772">join</a> (const int dim, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second)</td></tr>
<tr class="memdesc:gaa829b2ec622d809f760a39a631162772"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to join 2 arrays along a dimension.  <a href="group__manip__func__join.htm#gaa829b2ec622d809f760a39a631162772">More...</a><br /></td></tr>
<tr class="separator:gaa829b2ec622d809f760a39a631162772"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga164f14cd2d779505eaa986de7ad3e79d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__join.htm#ga164f14cd2d779505eaa986de7ad3e79d">join</a> (const int dim, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;third)</td></tr>
<tr class="memdesc:ga164f14cd2d779505eaa986de7ad3e79d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to join 3 arrays along a dimension.  <a href="group__manip__func__join.htm#ga164f14cd2d779505eaa986de7ad3e79d">More...</a><br /></td></tr>
<tr class="separator:ga164f14cd2d779505eaa986de7ad3e79d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga33a15cf54c9f51cdee54f955ca3fe2d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__join.htm#ga33a15cf54c9f51cdee54f955ca3fe2d5">join</a> (const int dim, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;first, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;second, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;third, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;fourth)</td></tr>
<tr class="memdesc:ga33a15cf54c9f51cdee54f955ca3fe2d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to join 4 arrays along a dimension.  <a href="group__manip__func__join.htm#ga33a15cf54c9f51cdee54f955ca3fe2d5">More...</a><br /></td></tr>
<tr class="separator:ga33a15cf54c9f51cdee54f955ca3fe2d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeba95584319d7d90e2c371391db0083b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">tile</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</td></tr>
<tr class="memdesc:gaeba95584319d7d90e2c371391db0083b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a tiled array.  <a href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">More...</a><br /></td></tr>
<tr class="separator:gaeba95584319d7d90e2c371391db0083b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad1cbdb13e8bfc25cce86ae44650a67f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__tile.htm#gad1cbdb13e8bfc25cce86ae44650a67f7">tile</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims)</td></tr>
<tr class="memdesc:gad1cbdb13e8bfc25cce86ae44650a67f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to generate a tiled array.  <a href="group__manip__func__tile.htm#gad1cbdb13e8bfc25cce86ae44650a67f7">More...</a><br /></td></tr>
<tr class="separator:gad1cbdb13e8bfc25cce86ae44650a67f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga642d691220a06b0aafa1123e722a5937"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__reorder.htm#ga642d691220a06b0aafa1123e722a5937">reorder</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned x, const unsigned y=1, const unsigned z=2, const unsigned w=3)</td></tr>
<tr class="memdesc:ga642d691220a06b0aafa1123e722a5937"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to reorder an array.  <a href="group__manip__func__reorder.htm#ga642d691220a06b0aafa1123e722a5937">More...</a><br /></td></tr>
<tr class="separator:ga642d691220a06b0aafa1123e722a5937"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga731b20f4fcf65b45342c3ff4a37599c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__shift.htm#ga731b20f4fcf65b45342c3ff4a37599c2">shift</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int x, const int y=0, const int z=0, const int w=0)</td></tr>
<tr class="memdesc:ga731b20f4fcf65b45342c3ff4a37599c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to shift an array.  <a href="group__manip__func__shift.htm#ga731b20f4fcf65b45342c3ff4a37599c2">More...</a><br /></td></tr>
<tr class="separator:ga731b20f4fcf65b45342c3ff4a37599c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga13488a6c9e298fd44dd343347d7b156d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">moddims</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims)</td></tr>
<tr class="memdesc:ga13488a6c9e298fd44dd343347d7b156d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to modify the dimensions of an input array to a specified shape.  <a href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">More...</a><br /></td></tr>
<tr class="separator:ga13488a6c9e298fd44dd343347d7b156d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d85f72a6f06c8f9dba22e25842a3654"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__moddims.htm#ga6d85f72a6f06c8f9dba22e25842a3654">moddims</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3=1)</td></tr>
<tr class="memdesc:ga6d85f72a6f06c8f9dba22e25842a3654"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to modify the dimensions of an input array to a specified shape.  <a href="group__manip__func__moddims.htm#ga6d85f72a6f06c8f9dba22e25842a3654">More...</a><br /></td></tr>
<tr class="separator:ga6d85f72a6f06c8f9dba22e25842a3654"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9acd429485a00a251dad3cc34119a81e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__moddims.htm#ga9acd429485a00a251dad3cc34119a81e">moddims</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned ndims, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *const dims)</td></tr>
<tr class="memdesc:ga9acd429485a00a251dad3cc34119a81e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to modify the dimensions of an input array to a specified shape.  <a href="group__manip__func__moddims.htm#ga9acd429485a00a251dad3cc34119a81e">More...</a><br /></td></tr>
<tr class="separator:ga9acd429485a00a251dad3cc34119a81e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0b04a65e0b17278203a2a5a952be02f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__flat.htm#gac0b04a65e0b17278203a2a5a952be02f">flat</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac0b04a65e0b17278203a2a5a952be02f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to flatten an array.  <a href="group__manip__func__flat.htm#gac0b04a65e0b17278203a2a5a952be02f">More...</a><br /></td></tr>
<tr class="separator:gac0b04a65e0b17278203a2a5a952be02f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6ff6ec075121a26867608360ced85c86"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__flip.htm#ga6ff6ec075121a26867608360ced85c86">flip</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned dim)</td></tr>
<tr class="memdesc:ga6ff6ec075121a26867608360ced85c86"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to flip an array.  <a href="group__manip__func__flip.htm#ga6ff6ec075121a26867608360ced85c86">More...</a><br /></td></tr>
<tr class="separator:ga6ff6ec075121a26867608360ced85c86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga66eb3da220db252236c6d48e3a6811f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__lower.htm#ga66eb3da220db252236c6d48e3a6811f1">lower</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, bool is_unit_diag=false)</td></tr>
<tr class="memdesc:ga66eb3da220db252236c6d48e3a6811f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the lower triangle array.  <a href="group__data__func__lower.htm#ga66eb3da220db252236c6d48e3a6811f1">More...</a><br /></td></tr>
<tr class="separator:ga66eb3da220db252236c6d48e3a6811f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf31c8b029aa632a17995a2f018f0da0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__upper.htm#gaf31c8b029aa632a17995a2f018f0da0f">upper</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, bool is_unit_diag=false)</td></tr>
<tr class="memdesc:gaf31c8b029aa632a17995a2f018f0da0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the upper triangle array.  <a href="group__data__func__upper.htm#gaf31c8b029aa632a17995a2f018f0da0f">More...</a><br /></td></tr>
<tr class="separator:gaf31c8b029aa632a17995a2f018f0da0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a2bf0110367961d084bc6b5d33f7555"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga1a2bf0110367961d084bc6b5d33f7555">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="memdesc:ga1a2bf0110367961d084bc6b5d33f7555"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to select elements based on a conditional array.  <a href="group__data__func__select.htm#ga1a2bf0110367961d084bc6b5d33f7555">More...</a><br /></td></tr>
<tr class="separator:ga1a2bf0110367961d084bc6b5d33f7555"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2e5a2caa0786e248d6a1a8e59132e3ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga2e5a2caa0786e248d6a1a8e59132e3ae">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const double &amp;b)</td></tr>
<tr class="memdesc:ga2e5a2caa0786e248d6a1a8e59132e3ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to select elements based on a conditional array.  <a href="group__data__func__select.htm#ga2e5a2caa0786e248d6a1a8e59132e3ae">More...</a><br /></td></tr>
<tr class="separator:ga2e5a2caa0786e248d6a1a8e59132e3ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga29a86089dfdedc54a73b662884ff50c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga29a86089dfdedc54a73b662884ff50c4">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const double &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="memdesc:ga29a86089dfdedc54a73b662884ff50c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to select elements based on a conditional array.  <a href="group__data__func__select.htm#ga29a86089dfdedc54a73b662884ff50c4">More...</a><br /></td></tr>
<tr class="separator:ga29a86089dfdedc54a73b662884ff50c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21eeef8e69367938673753fafe539431"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__replace.htm#ga21eeef8e69367938673753fafe539431">replace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="memdesc:ga21eeef8e69367938673753fafe539431"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to replace elements of an array with elements of another array.  <a href="group__data__func__replace.htm#ga21eeef8e69367938673753fafe539431">More...</a><br /></td></tr>
<tr class="separator:ga21eeef8e69367938673753fafe539431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8b827f65943af0ef1a4284607b896dc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__replace.htm#gad8b827f65943af0ef1a4284607b896dc">replace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const double &amp;b)</td></tr>
<tr class="memdesc:gad8b827f65943af0ef1a4284607b896dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to replace elements of an array with a scalar value.  <a href="group__data__func__replace.htm#gad8b827f65943af0ef1a4284607b896dc">More...</a><br /></td></tr>
<tr class="separator:gad8b827f65943af0ef1a4284607b896dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf4d4417bd591fe34932975f63156cfad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__pad.htm#gaf4d4417bd591fe34932975f63156cfad">pad</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;beginPadding, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;endPadding, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> padFillType)</td></tr>
<tr class="memdesc:gaf4d4417bd591fe34932975f63156cfad"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to pad an array.  <a href="group__data__func__pad.htm#gaf4d4417bd591fe34932975f63156cfad">More...</a><br /></td></tr>
<tr class="separator:gaf4d4417bd591fe34932975f63156cfad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga535fa2e8db78bb8ef75b493be85b6a89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__replace.htm#ga535fa2e8db78bb8ef75b493be85b6a89">replace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const long long b)</td></tr>
<tr class="memdesc:ga535fa2e8db78bb8ef75b493be85b6a89"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to replace elements of an array with a scalar value.  <a href="group__data__func__replace.htm#ga535fa2e8db78bb8ef75b493be85b6a89">More...</a><br /></td></tr>
<tr class="separator:ga535fa2e8db78bb8ef75b493be85b6a89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga33b4c68b6bdf6bde59a4e2e15d6f93aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__replace.htm#ga33b4c68b6bdf6bde59a4e2e15d6f93aa">replace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const unsigned long long b)</td></tr>
<tr class="memdesc:ga33b4c68b6bdf6bde59a4e2e15d6f93aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to replace elements of an array with a scalar value.  <a href="group__data__func__replace.htm#ga33b4c68b6bdf6bde59a4e2e15d6f93aa">More...</a><br /></td></tr>
<tr class="separator:ga33b4c68b6bdf6bde59a4e2e15d6f93aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1ce2692e572c3096d1f07a4ca88124cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga1ce2692e572c3096d1f07a4ca88124cf">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const long long b)</td></tr>
<tr class="memdesc:ga1ce2692e572c3096d1f07a4ca88124cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to select elements based on a conditional array.  <a href="group__data__func__select.htm#ga1ce2692e572c3096d1f07a4ca88124cf">More...</a><br /></td></tr>
<tr class="separator:ga1ce2692e572c3096d1f07a4ca88124cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7a0cec3888a202b5cda70d1cdd4e839"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#gad7a0cec3888a202b5cda70d1cdd4e839">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const unsigned long long b)</td></tr>
<tr class="memdesc:gad7a0cec3888a202b5cda70d1cdd4e839"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to select elements based on a conditional array.  <a href="group__data__func__select.htm#gad7a0cec3888a202b5cda70d1cdd4e839">More...</a><br /></td></tr>
<tr class="separator:gad7a0cec3888a202b5cda70d1cdd4e839"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7318c05c7926602875c5c37a0c3ebffc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga7318c05c7926602875c5c37a0c3ebffc">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const long long a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="memdesc:ga7318c05c7926602875c5c37a0c3ebffc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to select elements based on a conditional array.  <a href="group__data__func__select.htm#ga7318c05c7926602875c5c37a0c3ebffc">More...</a><br /></td></tr>
<tr class="separator:ga7318c05c7926602875c5c37a0c3ebffc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga476b37fa907af005061688f60fda6839"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm#ga476b37fa907af005061688f60fda6839">select</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;cond, const unsigned long long a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="memdesc:ga476b37fa907af005061688f60fda6839"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to select elements based on a conditional array.  <a href="group__data__func__select.htm#ga476b37fa907af005061688f60fda6839">More...</a><br /></td></tr>
<tr class="separator:ga476b37fa907af005061688f60fda6839"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e22b6ff6e0940bb31577bea2863ca27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">info</a> ()</td></tr>
<tr class="separator:ga3e22b6ff6e0940bb31577bea2863ca27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac959f891fcff4d2525e9dbb270235500"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__info__string.htm#gac959f891fcff4d2525e9dbb270235500">infoString</a> (const bool verbose=false)</td></tr>
<tr class="separator:gac959f891fcff4d2525e9dbb270235500"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad73a199c39ee55fa8a295ef3bca46774"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__prop.htm#gad73a199c39ee55fa8a295ef3bca46774">deviceInfo</a> (char *d_name, char *d_platform, char *d_toolkit, char *d_compute)</td></tr>
<tr class="separator:gad73a199c39ee55fa8a295ef3bca46774"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3331f90484be3a50b5863882252991d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__count.htm#gaf3331f90484be3a50b5863882252991d">getDeviceCount</a> ()</td></tr>
<tr class="memdesc:gaf3331f90484be3a50b5863882252991d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of devices.  <a href="group__device__func__count.htm#gaf3331f90484be3a50b5863882252991d">More...</a><br /></td></tr>
<tr class="separator:gaf3331f90484be3a50b5863882252991d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a0f9a1ed58f64d8e3184e582abcd9e4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__get.htm#ga2a0f9a1ed58f64d8e3184e582abcd9e4">getDevice</a> ()</td></tr>
<tr class="memdesc:ga2a0f9a1ed58f64d8e3184e582abcd9e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current device ID.  <a href="group__device__func__get.htm#ga2a0f9a1ed58f64d8e3184e582abcd9e4">More...</a><br /></td></tr>
<tr class="separator:ga2a0f9a1ed58f64d8e3184e582abcd9e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga96c00636f1a3b786889f12c6c680bc2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__dbl.htm#ga96c00636f1a3b786889f12c6c680bc2c">isDoubleAvailable</a> (const int device)</td></tr>
<tr class="memdesc:ga96c00636f1a3b786889f12c6c680bc2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries the current device for double precision floating point support.  <a href="group__device__func__dbl.htm#ga96c00636f1a3b786889f12c6c680bc2c">More...</a><br /></td></tr>
<tr class="separator:ga96c00636f1a3b786889f12c6c680bc2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1bbff916666265d4a7d16e1452e2db4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__half.htm#gaa1bbff916666265d4a7d16e1452e2db4">isHalfAvailable</a> (const int device)</td></tr>
<tr class="memdesc:gaa1bbff916666265d4a7d16e1452e2db4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries the current device for half precision floating point support.  <a href="group__device__func__half.htm#gaa1bbff916666265d4a7d16e1452e2db4">More...</a><br /></td></tr>
<tr class="separator:gaa1bbff916666265d4a7d16e1452e2db4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7c36828c21e7efc06a067bbc47d8d3b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">setDevice</a> (const int device)</td></tr>
<tr class="memdesc:gad7c36828c21e7efc06a067bbc47d8d3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the current device.  <a href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">More...</a><br /></td></tr>
<tr class="separator:gad7c36828c21e7efc06a067bbc47d8d3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e9c28bad482dc590cac930515f14bfb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">sync</a> (const int device=-1)</td></tr>
<tr class="memdesc:ga4e9c28bad482dc590cac930515f14bfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks until the <code>device</code> is finished processing.  <a href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">More...</a><br /></td></tr>
<tr class="separator:ga4e9c28bad482dc590cac930515f14bfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab013c750b4b42af693e73f699a317bb7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free.htm#gab013c750b4b42af693e73f699a317bb7">free</a> (const void *ptr)</td></tr>
<tr class="memdesc:gab013c750b4b42af693e73f699a317bb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns memory to ArrayFire's memory manager.   <a href="group__device__func__free.htm#gab013c750b4b42af693e73f699a317bb7">More...</a><br /></td></tr>
<tr class="separator:gab013c750b4b42af693e73f699a317bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadc2eee7c38b4c0321a13106ea4237879"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free.htm#gadc2eee7c38b4c0321a13106ea4237879">freeV2</a> (const void *ptr)</td></tr>
<tr class="separator:gadc2eee7c38b4c0321a13106ea4237879"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d59036286cce87f60c76444813222e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free__pinned.htm#ga5d59036286cce87f60c76444813222e2">freePinned</a> (const void *ptr)</td></tr>
<tr class="memdesc:ga5d59036286cce87f60c76444813222e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free pinned memory allocated by ArrayFire's memory manager.   <a href="group__device__func__free__pinned.htm#ga5d59036286cce87f60c76444813222e2">More...</a><br /></td></tr>
<tr class="separator:ga5d59036286cce87f60c76444813222e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0638e5ea6142e47290e6703095d045d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc__host.htm#gaa0638e5ea6142e47290e6703095d045d">allocHost</a> (const size_t elements, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type)</td></tr>
<tr class="memdesc:gaa0638e5ea6142e47290e6703095d045d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate memory on host.  <a href="group__device__func__alloc__host.htm#gaa0638e5ea6142e47290e6703095d045d">More...</a><br /></td></tr>
<tr class="separator:gaa0638e5ea6142e47290e6703095d045d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19fd5dd17e953726380c3cee9a78a573"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga19fd5dd17e953726380c3cee9a78a573"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__device__func__alloc__host.htm#ga19fd5dd17e953726380c3cee9a78a573">allocHost</a> (const size_t elements)</td></tr>
<tr class="memdesc:ga19fd5dd17e953726380c3cee9a78a573"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate memory on host.  <a href="group__device__func__alloc__host.htm#ga19fd5dd17e953726380c3cee9a78a573">More...</a><br /></td></tr>
<tr class="separator:ga19fd5dd17e953726380c3cee9a78a573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5eca016a830211c6b0b6dcddf57d8236"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free__host.htm#ga5eca016a830211c6b0b6dcddf57d8236">freeHost</a> (const void *ptr)</td></tr>
<tr class="memdesc:ga5eca016a830211c6b0b6dcddf57d8236"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free memory allocated internally by ArrayFire.  <a href="group__device__func__free__host.htm#ga5eca016a830211c6b0b6dcddf57d8236">More...</a><br /></td></tr>
<tr class="separator:ga5eca016a830211c6b0b6dcddf57d8236"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0007f92737ed60d5286af34fd8652b0d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga0007f92737ed60d5286af34fd8652b0d">setMemStepSize</a> (const size_t size)</td></tr>
<tr class="memdesc:ga0007f92737ed60d5286af34fd8652b0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the resolution of memory chunks.  <a href="group__device__func__mem.htm#ga0007f92737ed60d5286af34fd8652b0d">More...</a><br /></td></tr>
<tr class="separator:ga0007f92737ed60d5286af34fd8652b0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1c5fab925db5bc7f7fbcd2d656bf601"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#gaa1c5fab925db5bc7f7fbcd2d656bf601">getMemStepSize</a> ()</td></tr>
<tr class="memdesc:gaa1c5fab925db5bc7f7fbcd2d656bf601"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the resolution of memory chunks.  <a href="group__device__func__mem.htm#gaa1c5fab925db5bc7f7fbcd2d656bf601">More...</a><br /></td></tr>
<tr class="separator:gaa1c5fab925db5bc7f7fbcd2d656bf601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a745e99be6a39c1603a9d92dcbf45470c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a745e99be6a39c1603a9d92dcbf45470c">operator+</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;first, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;second)</td></tr>
<tr class="memdesc:a745e99be6a39c1603a9d92dcbf45470c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an element-wise addition of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects.  <a href="namespaceaf.htm#a745e99be6a39c1603a9d92dcbf45470c">More...</a><br /></td></tr>
<tr class="separator:a745e99be6a39c1603a9d92dcbf45470c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67ec82371793632c89d548d00863a0a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a67ec82371793632c89d548d00863a0a2">operator-</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;first, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;second)</td></tr>
<tr class="memdesc:a67ec82371793632c89d548d00863a0a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an element-wise subtraction of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects.  <a href="namespaceaf.htm#a67ec82371793632c89d548d00863a0a2">More...</a><br /></td></tr>
<tr class="separator:a67ec82371793632c89d548d00863a0a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9136a6ff4820c764c790613826e0ea99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9136a6ff4820c764c790613826e0ea99">operator*</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;first, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;second)</td></tr>
<tr class="memdesc:a9136a6ff4820c764c790613826e0ea99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an element-wise multiplication of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects.  <a href="namespaceaf.htm#a9136a6ff4820c764c790613826e0ea99">More...</a><br /></td></tr>
<tr class="separator:a9136a6ff4820c764c790613826e0ea99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a442db806245b9bf44dc7fa8aa490edad"><td class="memItemLeft" align="right" valign="top">static std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a442db806245b9bf44dc7fa8aa490edad">operator&lt;&lt;</a> (std::ostream &amp;ostr, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims)</td></tr>
<tr class="memdesc:a442db806245b9bf44dc7fa8aa490edad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints the elements of the <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> array separated by spaces.  <a href="namespaceaf.htm#a442db806245b9bf44dc7fa8aa490edad">More...</a><br /></td></tr>
<tr class="separator:a442db806245b9bf44dc7fa8aa490edad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e9a80145cb2a84fd67fe8b833272d2f"><td class="memItemLeft" align="right" valign="top">static std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a7e9a80145cb2a84fd67fe8b833272d2f">operator&gt;&gt;</a> (std::istream &amp;istr, <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims)</td></tr>
<tr class="memdesc:a7e9a80145cb2a84fd67fe8b833272d2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads 4 dim_t values from an input stream and stores the results in a <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a>.  <a href="namespaceaf.htm#a7e9a80145cb2a84fd67fe8b833272d2f">More...</a><br /></td></tr>
<tr class="separator:a7e9a80145cb2a84fd67fe8b833272d2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc400c0d694369b9eaab95dbe2c428d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#adc400c0d694369b9eaab95dbe2c428d5">isSpan</a> (const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;<a class="el" href="classaf_1_1seq.htm">seq</a>)</td></tr>
<tr class="memdesc:adc400c0d694369b9eaab95dbe2c428d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the <a class="el" href="structaf__seq.htm" title="C-style struct to creating sequences for indexing.">af_seq</a> object represents the entire range of an axis.  <a href="namespaceaf.htm#adc400c0d694369b9eaab95dbe2c428d5">More...</a><br /></td></tr>
<tr class="separator:adc400c0d694369b9eaab95dbe2c428d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab34319c95aba4f44b9ab7dd932f86d7d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ab34319c95aba4f44b9ab7dd932f86d7d">seqElements</a> (const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;<a class="el" href="classaf_1_1seq.htm">seq</a>)</td></tr>
<tr class="memdesc:ab34319c95aba4f44b9ab7dd932f86d7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements that the <a class="el" href="structaf__seq.htm" title="C-style struct to creating sequences for indexing.">af_seq</a> object represents.  <a href="namespaceaf.htm#ab34319c95aba4f44b9ab7dd932f86d7d">More...</a><br /></td></tr>
<tr class="separator:ab34319c95aba4f44b9ab7dd932f86d7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aade28a393541c633079883197de15d09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#aade28a393541c633079883197de15d09">calcDim</a> (const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;<a class="el" href="classaf_1_1seq.htm">seq</a>, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> &amp;parentDim)</td></tr>
<tr class="memdesc:aade28a393541c633079883197de15d09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements that will be represented by seq if applied on an array.  <a href="namespaceaf.htm#aade28a393541c633079883197de15d09">More...</a><br /></td></tr>
<tr class="separator:aade28a393541c633079883197de15d09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76a503c77a806b1dca90a81105059366"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a76a503c77a806b1dca90a81105059366">gforToggle</a> ()</td></tr>
<tr class="separator:a76a503c77a806b1dca90a81105059366"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7debbbc4c5b507ba54881b062628273a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a7debbbc4c5b507ba54881b062628273a">gforGet</a> ()</td></tr>
<tr class="separator:a7debbbc4c5b507ba54881b062628273a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9439687e23de25efb55901e4e0fd5900"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9439687e23de25efb55901e4e0fd5900">gforSet</a> (bool val)</td></tr>
<tr class="separator:a9439687e23de25efb55901e4e0fd5900"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adff4ec9e49610e9b8b20666e13e7e647"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#adff4ec9e49610e9b8b20666e13e7e647">batchFunc</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs, <a class="el" href="namespaceaf.htm#ad529987e6641d166b1d9e2448fd9212d">batchFunc_t</a> func)</td></tr>
<tr class="separator:adff4ec9e49610e9b8b20666e13e7e647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98d1d8b7f0cd46065014f3bf4d73adda"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__grad.htm#ga98d1d8b7f0cd46065014f3bf4d73adda">grad</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;dx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dy, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga98d1d8b7f0cd46065014f3bf4d73adda"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating the gradients.  <a href="group__calc__func__grad.htm#ga98d1d8b7f0cd46065014f3bf4d73adda">More...</a><br /></td></tr>
<tr class="separator:ga98d1d8b7f0cd46065014f3bf4d73adda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5a57870c43a81ec21fcdb7a11bef20d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">loadImage</a> (const char *filename, const bool is_color=false)</td></tr>
<tr class="memdesc:ga5a57870c43a81ec21fcdb7a11bef20d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image.  <a href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">More...</a><br /></td></tr>
<tr class="separator:ga5a57870c43a81ec21fcdb7a11bef20d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90bcd11fa9641e7543a07e72df46de1e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__save.htm#ga90bcd11fa9641e7543a07e72df46de1e">saveImage</a> (const char *filename, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga90bcd11fa9641e7543a07e72df46de1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for saving an image.  <a href="group__imageio__func__save.htm#ga90bcd11fa9641e7543a07e72df46de1e">More...</a><br /></td></tr>
<tr class="separator:ga90bcd11fa9641e7543a07e72df46de1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7e7ebada03123bba983dfe7e24cfc56c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__load.htm#ga7e7ebada03123bba983dfe7e24cfc56c">loadImageMem</a> (const void *ptr)</td></tr>
<tr class="memdesc:ga7e7ebada03123bba983dfe7e24cfc56c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image from memory.  <a href="group__imagemem__func__load.htm#ga7e7ebada03123bba983dfe7e24cfc56c">More...</a><br /></td></tr>
<tr class="separator:ga7e7ebada03123bba983dfe7e24cfc56c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga30d6b01bf14a68410a717c45486f565e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__save.htm#ga30d6b01bf14a68410a717c45486f565e">saveImageMem</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6f">imageFormat</a> format=<a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6fa21fabb1b254e14691a1f99e8c6ed4f3f">AF_FIF_PNG</a>)</td></tr>
<tr class="memdesc:ga30d6b01bf14a68410a717c45486f565e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for saving an image to memory.  <a href="group__imagemem__func__save.htm#ga30d6b01bf14a68410a717c45486f565e">More...</a><br /></td></tr>
<tr class="separator:ga30d6b01bf14a68410a717c45486f565e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e1f1f3781ba8f2b86bf875207feb82b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__delete.htm#ga9e1f1f3781ba8f2b86bf875207feb82b">deleteImageMem</a> (void *ptr)</td></tr>
<tr class="memdesc:ga9e1f1f3781ba8f2b86bf875207feb82b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for deleting memory created by <a class="el" href="group__imagemem__func__save.htm#ga30d6b01bf14a68410a717c45486f565e">saveImageMem</a> or <a class="el" href="group__imagemem__func__save.htm#gae9f582ee747e6ac5c75209dc6224be8a">af_save_image_memory</a>.  <a href="group__imagemem__func__delete.htm#ga9e1f1f3781ba8f2b86bf875207feb82b">More...</a><br /></td></tr>
<tr class="separator:ga9e1f1f3781ba8f2b86bf875207feb82b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a0bf2412867519de8dcd3aa63d27a16"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga6a0bf2412867519de8dcd3aa63d27a16">loadImageNative</a> (const char *filename)</td></tr>
<tr class="memdesc:ga6a0bf2412867519de8dcd3aa63d27a16"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image as its original type.  <a href="group__imageio__func__load.htm#ga6a0bf2412867519de8dcd3aa63d27a16">More...</a><br /></td></tr>
<tr class="separator:ga6a0bf2412867519de8dcd3aa63d27a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7692b88458a5df179ab6590151bf2999"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__save.htm#ga7692b88458a5df179ab6590151bf2999">saveImageNative</a> (const char *filename, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga7692b88458a5df179ab6590151bf2999"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for saving an image without modifications.  <a href="group__imageio__func__save.htm#ga7692b88458a5df179ab6590151bf2999">More...</a><br /></td></tr>
<tr class="separator:ga7692b88458a5df179ab6590151bf2999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd858a64f9c2dc1055a1722aefe7ce14"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__available.htm#gacd858a64f9c2dc1055a1722aefe7ce14">isImageIOAvailable</a> ()</td></tr>
<tr class="memdesc:gacd858a64f9c2dc1055a1722aefe7ce14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to check if Image IO is available.  <a href="group__imageio__func__available.htm#gacd858a64f9c2dc1055a1722aefe7ce14">More...</a><br /></td></tr>
<tr class="separator:gacd858a64f9c2dc1055a1722aefe7ce14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa80038ec7db0ce0836c79d2c8a75e788"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__resize.htm#gaa80038ec7db0ce0836c79d2c8a75e788">resize</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:gaa80038ec7db0ce0836c79d2c8a75e788"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for resizing an image to specified dimensions.  <a href="group__transform__func__resize.htm#gaa80038ec7db0ce0836c79d2c8a75e788">More...</a><br /></td></tr>
<tr class="separator:gaa80038ec7db0ce0836c79d2c8a75e788"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76b715aa9c08e7221482acbbd447fb88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__resize.htm#ga76b715aa9c08e7221482acbbd447fb88">resize</a> (const float scale0, const float scale1, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga76b715aa9c08e7221482acbbd447fb88"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for resizing an image to specified scales.  <a href="group__transform__func__resize.htm#ga76b715aa9c08e7221482acbbd447fb88">More...</a><br /></td></tr>
<tr class="separator:ga76b715aa9c08e7221482acbbd447fb88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad72a3f0b32e23115cdc510fb6f1697a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__resize.htm#gaad72a3f0b32e23115cdc510fb6f1697a">resize</a> (const float <a class="el" href="group__transform__func__scale.htm#ga0f7deb928b92209e0ef2c2371b1ad51b">scale</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:gaad72a3f0b32e23115cdc510fb6f1697a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for resizing an image to specified scale.  <a href="group__transform__func__resize.htm#gaad72a3f0b32e23115cdc510fb6f1697a">More...</a><br /></td></tr>
<tr class="separator:gaad72a3f0b32e23115cdc510fb6f1697a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7bc5a84bcc12ec50800f918f2fc7da5d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__rotate.htm#ga7bc5a84bcc12ec50800f918f2fc7da5d">rotate</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float theta, const bool crop=true, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga7bc5a84bcc12ec50800f918f2fc7da5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for rotating an image.  <a href="group__transform__func__rotate.htm#ga7bc5a84bcc12ec50800f918f2fc7da5d">More...</a><br /></td></tr>
<tr class="separator:ga7bc5a84bcc12ec50800f918f2fc7da5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62d399998f63e3a919e6dde241ec6a08"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__transform.htm#ga62d399998f63e3a919e6dde241ec6a08">transform</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;transform, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>, const bool <a class="el" href="group__lapack__ops__func__inv.htm#ga37f8f6819563ba1ac26230b9a93e5c8a">inverse</a>=true)</td></tr>
<tr class="memdesc:ga62d399998f63e3a919e6dde241ec6a08"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for transforming an image.  <a href="group__transform__func__transform.htm#ga62d399998f63e3a919e6dde241ec6a08">More...</a><br /></td></tr>
<tr class="separator:ga62d399998f63e3a919e6dde241ec6a08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae962f397a0447364857ad2f8475719c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__coordinates.htm#gae962f397a0447364857ad2f8475719c2">transformCoordinates</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;tf, const float d0, const float d1)</td></tr>
<tr class="memdesc:gae962f397a0447364857ad2f8475719c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for transforming coordinates.  <a href="group__transform__func__coordinates.htm#gae962f397a0447364857ad2f8475719c2">More...</a><br /></td></tr>
<tr class="separator:gae962f397a0447364857ad2f8475719c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9478a180bc3822354a01cb06e1905133"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__translate.htm#ga9478a180bc3822354a01cb06e1905133">translate</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float trans0, const float trans1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga9478a180bc3822354a01cb06e1905133"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for translating an image.  <a href="group__transform__func__translate.htm#ga9478a180bc3822354a01cb06e1905133">More...</a><br /></td></tr>
<tr class="separator:ga9478a180bc3822354a01cb06e1905133"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f7deb928b92209e0ef2c2371b1ad51b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__scale.htm#ga0f7deb928b92209e0ef2c2371b1ad51b">scale</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float scale0, const float scale1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:ga0f7deb928b92209e0ef2c2371b1ad51b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for scaling an image.  <a href="group__transform__func__scale.htm#ga0f7deb928b92209e0ef2c2371b1ad51b">More...</a><br /></td></tr>
<tr class="separator:ga0f7deb928b92209e0ef2c2371b1ad51b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaef2efb5088584ad9896a7c89af1bea69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__skew.htm#gaef2efb5088584ad9896a7c89af1bea69">skew</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float skew0, const float skew1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const bool <a class="el" href="group__lapack__ops__func__inv.htm#ga37f8f6819563ba1ac26230b9a93e5c8a">inverse</a>=true, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a5357aed0afbcd45da3d48f080bf5a8bf">AF_INTERP_NEAREST</a>)</td></tr>
<tr class="memdesc:gaef2efb5088584ad9896a7c89af1bea69"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for skewing an image.  <a href="group__transform__func__skew.htm#gaef2efb5088584ad9896a7c89af1bea69">More...</a><br /></td></tr>
<tr class="separator:gaef2efb5088584ad9896a7c89af1bea69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabecce3d57eb1880bdfc680992b2c15f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__bilateral.htm#gabecce3d57eb1880bdfc680992b2c15f6">bilateral</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float spatial_sigma, const float chromatic_sigma, const bool is_color=false)</td></tr>
<tr class="memdesc:gabecce3d57eb1880bdfc680992b2c15f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for bilateral filter.  <a href="group__image__func__bilateral.htm#gabecce3d57eb1880bdfc680992b2c15f6">More...</a><br /></td></tr>
<tr class="separator:gabecce3d57eb1880bdfc680992b2c15f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf97fd7eb81e8ec41c816eeda9104ae24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histogram.htm#gaf97fd7eb81e8ec41c816eeda9104ae24">histogram</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned nbins, const double minval, const double maxval)</td></tr>
<tr class="memdesc:gaf97fd7eb81e8ec41c816eeda9104ae24"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for histogram.  <a href="group__image__func__histogram.htm#gaf97fd7eb81e8ec41c816eeda9104ae24">More...</a><br /></td></tr>
<tr class="separator:gaf97fd7eb81e8ec41c816eeda9104ae24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc26a14b95c1f36ef2ae9963d9b0344a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histogram.htm#gabc26a14b95c1f36ef2ae9963d9b0344a">histogram</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned nbins)</td></tr>
<tr class="memdesc:gabc26a14b95c1f36ef2ae9963d9b0344a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for histogram.  <a href="group__image__func__histogram.htm#gabc26a14b95c1f36ef2ae9963d9b0344a">More...</a><br /></td></tr>
<tr class="separator:gabc26a14b95c1f36ef2ae9963d9b0344a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac19e2d4cf301ef9f0293bf62aed584e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__mean__shift.htm#gac19e2d4cf301ef9f0293bf62aed584e6">meanShift</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float spatial_sigma, const float chromatic_sigma, const unsigned iter, const bool is_color=false)</td></tr>
<tr class="memdesc:gac19e2d4cf301ef9f0293bf62aed584e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean shift.  <a href="group__image__func__mean__shift.htm#gac19e2d4cf301ef9f0293bf62aed584e6">More...</a><br /></td></tr>
<tr class="separator:gac19e2d4cf301ef9f0293bf62aed584e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6e133f1e3d6109340feb5fef2f41a86b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__minfilt.htm#ga6e133f1e3d6109340feb5fef2f41a86b">minfilt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_length=3, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:ga6e133f1e3d6109340feb5fef2f41a86b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for minimum filter.  <a href="group__image__func__minfilt.htm#ga6e133f1e3d6109340feb5fef2f41a86b">More...</a><br /></td></tr>
<tr class="separator:ga6e133f1e3d6109340feb5fef2f41a86b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7e6e7169ecf6a1137516080e13b223cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__maxfilt.htm#ga7e6e7169ecf6a1137516080e13b223cc">maxfilt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_length=3, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:ga7e6e7169ecf6a1137516080e13b223cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for maximum filter.  <a href="group__image__func__maxfilt.htm#ga7e6e7169ecf6a1137516080e13b223cc">More...</a><br /></td></tr>
<tr class="separator:ga7e6e7169ecf6a1137516080e13b223cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d435bca1e30a440267624056654e9eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__dilate.htm#ga0d435bca1e30a440267624056654e9eb">dilate</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;mask)</td></tr>
<tr class="memdesc:ga0d435bca1e30a440267624056654e9eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for image dilation (max filter)  <a href="group__image__func__dilate.htm#ga0d435bca1e30a440267624056654e9eb">More...</a><br /></td></tr>
<tr class="separator:ga0d435bca1e30a440267624056654e9eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd32acbc0595a62f94d6256153db2ec2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__dilate3d.htm#gacd32acbc0595a62f94d6256153db2ec2">dilate3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;mask)</td></tr>
<tr class="memdesc:gacd32acbc0595a62f94d6256153db2ec2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for 3D image dilation.  <a href="group__image__func__dilate3d.htm#gacd32acbc0595a62f94d6256153db2ec2">More...</a><br /></td></tr>
<tr class="separator:gacd32acbc0595a62f94d6256153db2ec2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa25e0009132b5aa83b6462b732cbf031"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__erode.htm#gaa25e0009132b5aa83b6462b732cbf031">erode</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;mask)</td></tr>
<tr class="memdesc:gaa25e0009132b5aa83b6462b732cbf031"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for image erosion (min filter)  <a href="group__image__func__erode.htm#gaa25e0009132b5aa83b6462b732cbf031">More...</a><br /></td></tr>
<tr class="separator:gaa25e0009132b5aa83b6462b732cbf031"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8fcdd19419c3c72283947ef567d806d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__erode3d.htm#ga8fcdd19419c3c72283947ef567d806d5">erode3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;mask)</td></tr>
<tr class="memdesc:ga8fcdd19419c3c72283947ef567d806d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for 3d for image erosion.  <a href="group__image__func__erode3d.htm#ga8fcdd19419c3c72283947ef567d806d5">More...</a><br /></td></tr>
<tr class="separator:ga8fcdd19419c3c72283947ef567d806d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf631c72f5d9f2bcb719841d08443926c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__regions.htm#gaf631c72f5d9f2bcb719841d08443926c">regions</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">af::connectivity</a> <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">connectivity</a>=<a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28bea5c1141bbd2404f74471630455d8653bf">AF_CONNECTIVITY_4</a>, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gaf631c72f5d9f2bcb719841d08443926c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for getting regions in an image.  <a href="group__image__func__regions.htm#gaf631c72f5d9f2bcb719841d08443926c">More...</a><br /></td></tr>
<tr class="separator:gaf631c72f5d9f2bcb719841d08443926c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7918bbf6f3e37d5bab9d9fb5a1a46607"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__sobel.htm#ga7918bbf6f3e37d5bab9d9fb5a1a46607">sobel</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;dx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dy, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;img, const unsigned ker_size=3)</td></tr>
<tr class="memdesc:ga7918bbf6f3e37d5bab9d9fb5a1a46607"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for extracting sobel gradients.  <a href="group__image__func__sobel.htm#ga7918bbf6f3e37d5bab9d9fb5a1a46607">More...</a><br /></td></tr>
<tr class="separator:ga7918bbf6f3e37d5bab9d9fb5a1a46607"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac04b9919b218b95074177e6de225bfc5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__sobel.htm#gac04b9919b218b95074177e6de225bfc5">sobel</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;img, const unsigned ker_size=3, const bool isFast=false)</td></tr>
<tr class="memdesc:gac04b9919b218b95074177e6de225bfc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for sobel filtering.  <a href="group__image__func__sobel.htm#gac04b9919b218b95074177e6de225bfc5">More...</a><br /></td></tr>
<tr class="separator:gac04b9919b218b95074177e6de225bfc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga96e322e3aba443889897b9bb45471bf4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2gray.htm#ga96e322e3aba443889897b9bb45471bf4">rgb2gray</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float rPercent=0.2126f, const float gPercent=0.7152f, const float bPercent=0.0722f)</td></tr>
<tr class="memdesc:ga96e322e3aba443889897b9bb45471bf4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for RGB to gray conversion.  <a href="group__image__func__rgb2gray.htm#ga96e322e3aba443889897b9bb45471bf4">More...</a><br /></td></tr>
<tr class="separator:ga96e322e3aba443889897b9bb45471bf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaceb5f8f3c104403afb89e7f59673dda7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gray2rgb.htm#gaceb5f8f3c104403afb89e7f59673dda7">gray2rgb</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float rFactor=1.0, const float gFactor=1.0, const float bFactor=1.0)</td></tr>
<tr class="memdesc:gaceb5f8f3c104403afb89e7f59673dda7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for gray to RGB conversion.  <a href="group__image__func__gray2rgb.htm#gaceb5f8f3c104403afb89e7f59673dda7">More...</a><br /></td></tr>
<tr class="separator:gaceb5f8f3c104403afb89e7f59673dda7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac9f1fae4807432e9f1710ec745d2b25d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histequal.htm#gac9f1fae4807432e9f1710ec745d2b25d">histEqual</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;hist)</td></tr>
<tr class="memdesc:gac9f1fae4807432e9f1710ec745d2b25d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for histogram equalization.  <a href="group__image__func__histequal.htm#gac9f1fae4807432e9f1710ec745d2b25d">More...</a><br /></td></tr>
<tr class="separator:gac9f1fae4807432e9f1710ec745d2b25d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd7cc37308ee4d90a0071968073987e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gauss.htm#gacd7cc37308ee4d90a0071968073987e5">gaussianKernel</a> (const int rows, const int cols, const double sig_r=0, const double sig_c=0)</td></tr>
<tr class="memdesc:gacd7cc37308ee4d90a0071968073987e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for generating gausian kernels.  <a href="group__image__func__gauss.htm#gacd7cc37308ee4d90a0071968073987e5">More...</a><br /></td></tr>
<tr class="separator:gacd7cc37308ee4d90a0071968073987e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga92b9afdbfee1b3ccec61ebd1d872064a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__hsv2rgb.htm#ga92b9afdbfee1b3ccec61ebd1d872064a">hsv2rgb</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga92b9afdbfee1b3ccec61ebd1d872064a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for converting HSV to RGB.  <a href="group__image__func__hsv2rgb.htm#ga92b9afdbfee1b3ccec61ebd1d872064a">More...</a><br /></td></tr>
<tr class="separator:ga92b9afdbfee1b3ccec61ebd1d872064a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf8952088e8e38e6a1e44addacf441e8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2hsv.htm#gaf8952088e8e38e6a1e44addacf441e8a">rgb2hsv</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaf8952088e8e38e6a1e44addacf441e8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for converting RGB to HSV.  <a href="group__image__func__rgb2hsv.htm#gaf8952088e8e38e6a1e44addacf441e8a">More...</a><br /></td></tr>
<tr class="separator:gaf8952088e8e38e6a1e44addacf441e8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad2913948b841a2e14e2596e32d5dbc31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__colorspace.htm#gad2913948b841a2e14e2596e32d5dbc31">colorSpace</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;image, const <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a> to, const <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a> from)</td></tr>
<tr class="memdesc:gad2913948b841a2e14e2596e32d5dbc31"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for colorspace conversion.  <a href="group__image__func__colorspace.htm#gad2913948b841a2e14e2596e32d5dbc31">More...</a><br /></td></tr>
<tr class="separator:gad2913948b841a2e14e2596e32d5dbc31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac65c28b7e78bc25d5e442a0159afee53"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">unwrap</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py=0, const bool is_column=true)</td></tr>
<tr class="memdesc:gac65c28b7e78bc25d5e442a0159afee53"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for rearranging windowed sections of an input into columns (or rows)  <a href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">More...</a><br /></td></tr>
<tr class="separator:gac65c28b7e78bc25d5e442a0159afee53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8270837c6d109f49c783c5ea286b4cea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__wrap.htm#ga8270837c6d109f49c783c5ea286b4cea">wrap</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> ox, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> oy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py=0, const bool is_column=true)</td></tr>
<tr class="memdesc:ga8270837c6d109f49c783c5ea286b4cea"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for performing the opposite of <a class="el" href="group__image__func__unwrap.htm#gac65c28b7e78bc25d5e442a0159afee53">unwrap</a>.  <a href="group__image__func__wrap.htm#ga8270837c6d109f49c783c5ea286b4cea">More...</a><br /></td></tr>
<tr class="separator:ga8270837c6d109f49c783c5ea286b4cea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga391d3a4eafe00c06334eeadbfcdf0237"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__sat.htm#ga391d3a4eafe00c06334eeadbfcdf0237">sat</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga391d3a4eafe00c06334eeadbfcdf0237"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for summed area tables.  <a href="group__image__func__sat.htm#ga391d3a4eafe00c06334eeadbfcdf0237">More...</a><br /></td></tr>
<tr class="separator:ga391d3a4eafe00c06334eeadbfcdf0237"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2faad6d2a5dc0f568547c719b2e7b805"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__ycbcr2rgb.htm#ga2faad6d2a5dc0f568547c719b2e7b805">ycbcr2rgb</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">YCCStd</a> standard=<a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4a6bf76f6da5ac2f402c332a9c577f349f">AF_YCC_601</a>)</td></tr>
<tr class="memdesc:ga2faad6d2a5dc0f568547c719b2e7b805"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for converting YCbCr to RGB.  <a href="group__image__func__ycbcr2rgb.htm#ga2faad6d2a5dc0f568547c719b2e7b805">More...</a><br /></td></tr>
<tr class="separator:ga2faad6d2a5dc0f568547c719b2e7b805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga48c473e4cf44c12e2f1be25b5f816805"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2ycbcr.htm#ga48c473e4cf44c12e2f1be25b5f816805">rgb2ycbcr</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">YCCStd</a> standard=<a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4a6bf76f6da5ac2f402c332a9c577f349f">AF_YCC_601</a>)</td></tr>
<tr class="memdesc:ga48c473e4cf44c12e2f1be25b5f816805"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for converting RGB to YCbCr.  <a href="group__image__func__rgb2ycbcr.htm#ga48c473e4cf44c12e2f1be25b5f816805">More...</a><br /></td></tr>
<tr class="separator:ga48c473e4cf44c12e2f1be25b5f816805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga524d080d05f2e7fb10356d300404d543"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__moments.htm#ga524d080d05f2e7fb10356d300404d543">moments</a> (double *out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">momentType</a> moment=<a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0a438c36c62e4d61011c3d2de0a20be0a7">AF_MOMENT_FIRST_ORDER</a>)</td></tr>
<tr class="memdesc:ga524d080d05f2e7fb10356d300404d543"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating an image moment.  <a href="group__image__func__moments.htm#ga524d080d05f2e7fb10356d300404d543">More...</a><br /></td></tr>
<tr class="separator:ga524d080d05f2e7fb10356d300404d543"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabf3140e73a010f09afdd55063caa3205"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__moments.htm#gabf3140e73a010f09afdd55063caa3205">moments</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">momentType</a> moment=<a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0a438c36c62e4d61011c3d2de0a20be0a7">AF_MOMENT_FIRST_ORDER</a>)</td></tr>
<tr class="memdesc:gabf3140e73a010f09afdd55063caa3205"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for calculating image moments.  <a href="group__image__func__moments.htm#gabf3140e73a010f09afdd55063caa3205">More...</a><br /></td></tr>
<tr class="separator:gabf3140e73a010f09afdd55063caa3205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79334eae16255b8a33f4f1a672f7cac6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__canny.htm#ga79334eae16255b8a33f4f1a672f7cac6">canny</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a179019caba59979e58ec07d81cd25ef2">cannyThreshold</a> thresholdType, const float lowThresholdRatio, const float highThresholdRatio, const unsigned sobelWindow=3, const bool isFast=false)</td></tr>
<tr class="memdesc:ga79334eae16255b8a33f4f1a672f7cac6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for canny edge detector.  <a href="group__image__func__canny.htm#ga79334eae16255b8a33f4f1a672f7cac6">More...</a><br /></td></tr>
<tr class="separator:ga79334eae16255b8a33f4f1a672f7cac6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4cd2183544530cdc61e6073bd120a65e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__anisotropic__diffusion.htm#ga4cd2183544530cdc61e6073bd120a65e">anisotropicDiffusion</a> (const <a class="el" href="classaf_1_1array.htm">af::array</a> &amp;in, const float timestep, const float conductance, const unsigned iterations, const <a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbb">fluxFunction</a> fftype=<a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbba356bf447a07e7dc28779dccb650e432a">AF_FLUX_EXPONENTIAL</a>, const <a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5">diffusionEq</a> diffusionKind=<a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5af54c5e7995abd1cf6286da145f6d0295">AF_DIFFUSION_GRAD</a>)</td></tr>
<tr class="memdesc:ga4cd2183544530cdc61e6073bd120a65e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for gradient anisotropic(non-linear diffusion) smoothing.  <a href="group__image__func__anisotropic__diffusion.htm#ga4cd2183544530cdc61e6073bd120a65e">More...</a><br /></td></tr>
<tr class="separator:ga4cd2183544530cdc61e6073bd120a65e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga002abbf6b18cd02d9251ef5452d3b917"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__iterative__deconv.htm#ga002abbf6b18cd02d9251ef5452d3b917">iterativeDeconv</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;ker, const unsigned iterations, const float relaxFactor, const <a class="el" href="defines_8h.htm#a201e6b1dd1068c9795168fc25759a17c">iterativeDeconvAlgo</a> algo)</td></tr>
<tr class="memdesc:ga002abbf6b18cd02d9251ef5452d3b917"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for Iterative deconvolution algorithm.  <a href="group__image__func__iterative__deconv.htm#ga002abbf6b18cd02d9251ef5452d3b917">More...</a><br /></td></tr>
<tr class="separator:ga002abbf6b18cd02d9251ef5452d3b917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga646a68fa926eb8d2c331f3c469d708fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__inverse__deconv.htm#ga646a68fa926eb8d2c331f3c469d708fe">inverseDeconv</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;psf, const float gamma, const <a class="el" href="defines_8h.htm#a2bdf5ea652ab094b2e3dcbeebd0b35c6">inverseDeconvAlgo</a> algo)</td></tr>
<tr class="memdesc:ga646a68fa926eb8d2c331f3c469d708fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for Tikhonov deconvolution algorithm.  <a href="group__image__func__inverse__deconv.htm#ga646a68fa926eb8d2c331f3c469d708fe">More...</a><br /></td></tr>
<tr class="separator:ga646a68fa926eb8d2c331f3c469d708fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga172e5c4343bcce8404a78bd8c036f1cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__confidence__cc.htm#ga172e5c4343bcce8404a78bd8c036f1cd">confidenceCC</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;seeds, const unsigned radius, const unsigned multiplier, const int iter, const double segmentedValue)</td></tr>
<tr class="memdesc:ga172e5c4343bcce8404a78bd8c036f1cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for confidence connected components.  <a href="group__image__func__confidence__cc.htm#ga172e5c4343bcce8404a78bd8c036f1cd">More...</a><br /></td></tr>
<tr class="separator:ga172e5c4343bcce8404a78bd8c036f1cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6bfd0c74e03ae16cf05621c13b0a8e0d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__confidence__cc.htm#ga6bfd0c74e03ae16cf05621c13b0a8e0d">confidenceCC</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;seedx, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;seedy, const unsigned radius, const unsigned multiplier, const int iter, const double segmentedValue)</td></tr>
<tr class="memdesc:ga6bfd0c74e03ae16cf05621c13b0a8e0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for confidence connected components.  <a href="group__image__func__confidence__cc.htm#ga6bfd0c74e03ae16cf05621c13b0a8e0d">More...</a><br /></td></tr>
<tr class="separator:ga6bfd0c74e03ae16cf05621c13b0a8e0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae35264fc15d92776d86dd1d0b80a397d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__confidence__cc.htm#gae35264fc15d92776d86dd1d0b80a397d">confidenceCC</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const size_t num_seeds, const unsigned *seedx, const unsigned *seedy, const unsigned radius, const unsigned multiplier, const int iter, const double segmentedValue)</td></tr>
<tr class="memdesc:gae35264fc15d92776d86dd1d0b80a397d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for confidence connected components.  <a href="group__image__func__confidence__cc.htm#gae35264fc15d92776d86dd1d0b80a397d">More...</a><br /></td></tr>
<tr class="separator:gae35264fc15d92776d86dd1d0b80a397d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae2c89b3f3b1e644ca1c445c1eff64b35"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__index__func__lookup.htm#gae2c89b3f3b1e644ca1c445c1eff64b35">lookup</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, const int dim=-1)</td></tr>
<tr class="memdesc:gae2c89b3f3b1e644ca1c445c1eff64b35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lookup the values of an input array by indexing with another array.  <a href="group__index__func__lookup.htm#gae2c89b3f3b1e644ca1c445c1eff64b35">More...</a><br /></td></tr>
<tr class="separator:gae2c89b3f3b1e644ca1c445c1eff64b35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabd372476b5e573382eee3295ba906f59"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__index__func__index.htm#gabd372476b5e573382eee3295ba906f59">copy</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;dst, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;src, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;idx0, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;idx1=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;idx2=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;idx3=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>)</td></tr>
<tr class="memdesc:gabd372476b5e573382eee3295ba906f59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy the values of an input array based on index.  <a href="group__index__func__index.htm#gabd372476b5e573382eee3295ba906f59">More...</a><br /></td></tr>
<tr class="separator:gabd372476b5e573382eee3295ba906f59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga168e1dd7b337f3d1569f92ddabe76092"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__create.htm#ga168e1dd7b337f3d1569f92ddabe76092">createStridedArray</a> (const void *data, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> offset, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> dims, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> strides, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> ty, const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> location)</td></tr>
<tr class="separator:ga168e1dd7b337f3d1569f92ddabe76092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad2d889503eada0f27b4cefd78291550a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__strides.htm#gad2d889503eada0f27b4cefd78291550a">getStrides</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:gad2d889503eada0f27b4cefd78291550a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga474305cc5ff71416139089ddb8d75afa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__offset.htm#ga474305cc5ff71416139089ddb8d75afa">getOffset</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga474305cc5ff71416139089ddb8d75afa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f08b894e170a2ee882e6072af2f52c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a0f08b894e170a2ee882e6072af2f52c8">getRawPtr</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:a0f08b894e170a2ee882e6072af2f52c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga796bcf5896163aebf740b84dbc52dd94"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__linear.htm#ga796bcf5896163aebf740b84dbc52dd94">isLinear</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga796bcf5896163aebf740b84dbc52dd94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ae6931a2af65ecfc6b6803bc3ad0891"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__internal__func__owner.htm#ga7ae6931a2af65ecfc6b6803bc3ad0891">isOwner</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga7ae6931a2af65ecfc6b6803bc3ad0891"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec191cdf321f030c3bc3b9aee598d256"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gaec191cdf321f030c3bc3b9aee598d256">svd</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;u, <a class="el" href="classaf_1_1array.htm">array</a> &amp;s, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vt, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaec191cdf321f030c3bc3b9aee598d256"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform singular value decomposition.  <a href="group__lapack__factor__func__svd.htm#gaec191cdf321f030c3bc3b9aee598d256">More...</a><br /></td></tr>
<tr class="separator:gaec191cdf321f030c3bc3b9aee598d256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab3f0e525c4e75b96c9a8f2501a517d9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gab3f0e525c4e75b96c9a8f2501a517d9f">svdInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;u, <a class="el" href="classaf_1_1array.htm">array</a> &amp;s, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vt, <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab3f0e525c4e75b96c9a8f2501a517d9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform in-place singular value decomposition.  <a href="group__lapack__factor__func__svd.htm#gab3f0e525c4e75b96c9a8f2501a517d9f">More...</a><br /></td></tr>
<tr class="separator:gab3f0e525c4e75b96c9a8f2501a517d9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab924fc338d4cb57fa91bed1517fece09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__lu.htm#gab924fc338d4cb57fa91bed1517fece09">lu</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;pivot, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_lapack_piv=true)</td></tr>
<tr class="memdesc:gab924fc338d4cb57fa91bed1517fece09"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform LU decomposition in packed format.  <a href="group__lapack__factor__func__lu.htm#gab924fc338d4cb57fa91bed1517fece09">More...</a><br /></td></tr>
<tr class="separator:gab924fc338d4cb57fa91bed1517fece09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e1fd76d9c5bce2f9e4a8e4612b2d9e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__lu.htm#ga4e1fd76d9c5bce2f9e4a8e4612b2d9e8">lu</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="group__data__func__lower.htm#ga66eb3da220db252236c6d48e3a6811f1">lower</a>, <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="group__data__func__upper.htm#gaf31c8b029aa632a17995a2f018f0da0f">upper</a>, <a class="el" href="classaf_1_1array.htm">array</a> &amp;pivot, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga4e1fd76d9c5bce2f9e4a8e4612b2d9e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform LU decomposition.  <a href="group__lapack__factor__func__lu.htm#ga4e1fd76d9c5bce2f9e4a8e4612b2d9e8">More...</a><br /></td></tr>
<tr class="separator:ga4e1fd76d9c5bce2f9e4a8e4612b2d9e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga41a2c8735cc4bef6481b783a644b748f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__lu.htm#ga41a2c8735cc4bef6481b783a644b748f">luInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;pivot, <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_lapack_piv=true)</td></tr>
<tr class="memdesc:ga41a2c8735cc4bef6481b783a644b748f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform in-place LU decomposition.  <a href="group__lapack__factor__func__lu.htm#ga41a2c8735cc4bef6481b783a644b748f">More...</a><br /></td></tr>
<tr class="separator:ga41a2c8735cc4bef6481b783a644b748f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga945b84930a40c6d28b68ba8e1aff7f9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__qr.htm#ga945b84930a40c6d28b68ba8e1aff7f9f">qr</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out, <a class="el" href="classaf_1_1array.htm">array</a> &amp;tau, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga945b84930a40c6d28b68ba8e1aff7f9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform QR decomposition in packed format.  <a href="group__lapack__factor__func__qr.htm#ga945b84930a40c6d28b68ba8e1aff7f9f">More...</a><br /></td></tr>
<tr class="separator:ga945b84930a40c6d28b68ba8e1aff7f9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga159ac5755f9c9a02c2fde107242ebeb4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__qr.htm#ga159ac5755f9c9a02c2fde107242ebeb4">qr</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;q, <a class="el" href="classaf_1_1array.htm">array</a> &amp;r, <a class="el" href="classaf_1_1array.htm">array</a> &amp;tau, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga159ac5755f9c9a02c2fde107242ebeb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform QR decomposition.  <a href="group__lapack__factor__func__qr.htm#ga159ac5755f9c9a02c2fde107242ebeb4">More...</a><br /></td></tr>
<tr class="separator:ga159ac5755f9c9a02c2fde107242ebeb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga390a78c486702f9c9bc085bc6d5c692d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__qr.htm#ga390a78c486702f9c9bc085bc6d5c692d">qrInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;tau, <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga390a78c486702f9c9bc085bc6d5c692d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform QR decomposition.  <a href="group__lapack__factor__func__qr.htm#ga390a78c486702f9c9bc085bc6d5c692d">More...</a><br /></td></tr>
<tr class="separator:ga390a78c486702f9c9bc085bc6d5c692d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3d0b14baa3d18e44456a84ebacf5e8d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__cholesky.htm#gac3d0b14baa3d18e44456a84ebacf5e8d">cholesky</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;out, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_upper=true)</td></tr>
<tr class="memdesc:gac3d0b14baa3d18e44456a84ebacf5e8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform Cholesky decomposition.  <a href="group__lapack__factor__func__cholesky.htm#gac3d0b14baa3d18e44456a84ebacf5e8d">More...</a><br /></td></tr>
<tr class="separator:gac3d0b14baa3d18e44456a84ebacf5e8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7137da1ad3edd534fe4dffa77bb47f35"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__cholesky.htm#ga7137da1ad3edd534fe4dffa77bb47f35">choleskyInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool is_upper=true)</td></tr>
<tr class="memdesc:ga7137da1ad3edd534fe4dffa77bb47f35"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to perform in-place Cholesky decomposition.  <a href="group__lapack__factor__func__cholesky.htm#ga7137da1ad3edd534fe4dffa77bb47f35">More...</a><br /></td></tr>
<tr class="separator:ga7137da1ad3edd534fe4dffa77bb47f35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c73ce6c4c15839370ac73626574871c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__solve__func__gen.htm#ga8c73ce6c4c15839370ac73626574871c">solve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> options=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:ga8c73ce6c4c15839370ac73626574871c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to solve a system of equations.  <a href="group__lapack__solve__func__gen.htm#ga8c73ce6c4c15839370ac73626574871c">More...</a><br /></td></tr>
<tr class="separator:ga8c73ce6c4c15839370ac73626574871c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b6f63a87ec6a5864f73da5e0ba3be72"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__solve__lu__func__gen.htm#ga5b6f63a87ec6a5864f73da5e0ba3be72">solveLU</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;piv, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> options=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:ga5b6f63a87ec6a5864f73da5e0ba3be72"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to solve a system of equations.  <a href="group__lapack__solve__lu__func__gen.htm#ga5b6f63a87ec6a5864f73da5e0ba3be72">More...</a><br /></td></tr>
<tr class="separator:ga5b6f63a87ec6a5864f73da5e0ba3be72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37f8f6819563ba1ac26230b9a93e5c8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__inv.htm#ga37f8f6819563ba1ac26230b9a93e5c8a">inverse</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> options=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:ga37f8f6819563ba1ac26230b9a93e5c8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to invert a matrix.  <a href="group__lapack__ops__func__inv.htm#ga37f8f6819563ba1ac26230b9a93e5c8a">More...</a><br /></td></tr>
<tr class="separator:ga37f8f6819563ba1ac26230b9a93e5c8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga149247585e00a8656b33d46895fcd3bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__pinv.htm#ga149247585e00a8656b33d46895fcd3bb">pinverse</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double tol=1E-6, const <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a> options=<a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421daccba98c5b50e203da4c452c2c00c3d3e">AF_MAT_NONE</a>)</td></tr>
<tr class="memdesc:ga149247585e00a8656b33d46895fcd3bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to pseudo-invert (Moore-Penrose) a matrix.  <a href="group__lapack__ops__func__pinv.htm#ga149247585e00a8656b33d46895fcd3bb">More...</a><br /></td></tr>
<tr class="separator:ga149247585e00a8656b33d46895fcd3bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58e9f01c467698ef0c66217e007e9ede"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__rank.htm#ga58e9f01c467698ef0c66217e007e9ede">rank</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double tol=1E-5)</td></tr>
<tr class="memdesc:ga58e9f01c467698ef0c66217e007e9ede"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the rank of a matrix.  <a href="group__lapack__ops__func__rank.htm#ga58e9f01c467698ef0c66217e007e9ede">More...</a><br /></td></tr>
<tr class="separator:ga58e9f01c467698ef0c66217e007e9ede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab110b2dfdba8c14b889f898172339619"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gab110b2dfdba8c14b889f898172339619"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__det.htm#gab110b2dfdba8c14b889f898172339619">det</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab110b2dfdba8c14b889f898172339619"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the determinant of a matrix.  <a href="group__lapack__ops__func__det.htm#gab110b2dfdba8c14b889f898172339619">More...</a><br /></td></tr>
<tr class="separator:gab110b2dfdba8c14b889f898172339619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b62f862f74db52f777edfa6a9351173"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__norm.htm#ga2b62f862f74db52f777edfa6a9351173">norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdd">normType</a> type=<a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdda7c80a116614cf5d15335226bc27e03ec">AF_NORM_EUCLID</a>, const double p=1, const double q=1)</td></tr>
<tr class="memdesc:ga2b62f862f74db52f777edfa6a9351173"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the norm of a matrix.  <a href="group__lapack__ops__func__norm.htm#ga2b62f862f74db52f777edfa6a9351173">More...</a><br /></td></tr>
<tr class="separator:ga2b62f862f74db52f777edfa6a9351173"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaedc7cb96aee53e92ab2174bbe26efb17"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__helper__func__available.htm#gaedc7cb96aee53e92ab2174bbe26efb17">isLAPACKAvailable</a> ()</td></tr>
<tr class="memdesc:gaedc7cb96aee53e92ab2174bbe26efb17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if ArrayFire is compiled with LAPACK support.  <a href="group__lapack__helper__func__available.htm#gaedc7cb96aee53e92ab2174bbe26efb17">More...</a><br /></td></tr>
<tr class="separator:gaedc7cb96aee53e92ab2174bbe26efb17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62f08adcdb27753346a1767b99ece09a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ml__convolution.htm#ga62f08adcdb27753346a1767b99ece09a">convolve2GradientNN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;incoming_gradient, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;original_signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;original_filter, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;convolved_output, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> stride, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> padding, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> dilation, <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">convGradientType</a> grad_type)</td></tr>
<tr class="memdesc:ga62f08adcdb27753346a1767b99ece09a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ interface for calculating backward pass gradient of 2D convolution This function calculates the gradient with respect to the output of the <a class="el" href="group__signal__func__convolve2.htm#gadb0ed76775f542fae5ead3b02ba12d0e">convolve2NN</a> function that uses the machine learning formulation for the dimensions of the signals and filters.  <a href="group__ml__convolution.htm#ga62f08adcdb27753346a1767b99ece09a">More...</a><br /></td></tr>
<tr class="separator:ga62f08adcdb27753346a1767b99ece09a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga828798e84ab467f6f8568830f1c853f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">randu</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty, <a class="el" href="classaf_1_1randomEngine.htm">randomEngine</a> &amp;r)</td></tr>
<tr class="memdesc:ga828798e84ab467f6f8568830f1c853f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers uniformly distributed.  <a href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">More...</a><br /></td></tr>
<tr class="separator:ga828798e84ab467f6f8568830f1c853f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac164aa9deb983d34d236ee50587cfd88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#gac164aa9deb983d34d236ee50587cfd88">randn</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty, <a class="el" href="classaf_1_1randomEngine.htm">randomEngine</a> &amp;r)</td></tr>
<tr class="memdesc:gac164aa9deb983d34d236ee50587cfd88"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers normally distributed.  <a href="group__random__func__randn.htm#gac164aa9deb983d34d236ee50587cfd88">More...</a><br /></td></tr>
<tr class="separator:gac164aa9deb983d34d236ee50587cfd88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0db3d521aece7e644aac4f68680bcb74"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#ga0db3d521aece7e644aac4f68680bcb74">randu</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga0db3d521aece7e644aac4f68680bcb74"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers uniformly distributed.  <a href="group__random__func__randu.htm#ga0db3d521aece7e644aac4f68680bcb74">More...</a><br /></td></tr>
<tr class="separator:ga0db3d521aece7e644aac4f68680bcb74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga118fb12535d112a83e3de3416c4783b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#ga118fb12535d112a83e3de3416c4783b6">randu</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga118fb12535d112a83e3de3416c4783b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers uniformly distributed.  <a href="group__random__func__randu.htm#ga118fb12535d112a83e3de3416c4783b6">More...</a><br /></td></tr>
<tr class="separator:ga118fb12535d112a83e3de3416c4783b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga96dc547395d9777c5b57cd441d5fa93b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#ga96dc547395d9777c5b57cd441d5fa93b">randu</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga96dc547395d9777c5b57cd441d5fa93b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers uniformly distributed.  <a href="group__random__func__randu.htm#ga96dc547395d9777c5b57cd441d5fa93b">More...</a><br /></td></tr>
<tr class="separator:ga96dc547395d9777c5b57cd441d5fa93b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace942c31566c39b11f228e2d7f807e0c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#gace942c31566c39b11f228e2d7f807e0c">randu</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gace942c31566c39b11f228e2d7f807e0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers uniformly distributed.  <a href="group__random__func__randu.htm#gace942c31566c39b11f228e2d7f807e0c">More...</a><br /></td></tr>
<tr class="separator:gace942c31566c39b11f228e2d7f807e0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7594120459afd628cecf14f3ea6d01d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm#gac7594120459afd628cecf14f3ea6d01d">randu</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gac7594120459afd628cecf14f3ea6d01d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers uniformly distributed.  <a href="group__random__func__randu.htm#gac7594120459afd628cecf14f3ea6d01d">More...</a><br /></td></tr>
<tr class="separator:gac7594120459afd628cecf14f3ea6d01d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac842317602044f2a0799c52e3c96a6dc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#gac842317602044f2a0799c52e3c96a6dc">randn</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gac842317602044f2a0799c52e3c96a6dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers normally distributed.  <a href="group__random__func__randn.htm#gac842317602044f2a0799c52e3c96a6dc">More...</a><br /></td></tr>
<tr class="separator:gac842317602044f2a0799c52e3c96a6dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab21c1ae1bf2995c0e8cf2cdfd7b78d9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#gab21c1ae1bf2995c0e8cf2cdfd7b78d9f">randn</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gab21c1ae1bf2995c0e8cf2cdfd7b78d9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers normally distributed.  <a href="group__random__func__randn.htm#gab21c1ae1bf2995c0e8cf2cdfd7b78d9f">More...</a><br /></td></tr>
<tr class="separator:gab21c1ae1bf2995c0e8cf2cdfd7b78d9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga40f407d3d2dbe9c5b338ef79e8c08081"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#ga40f407d3d2dbe9c5b338ef79e8c08081">randn</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga40f407d3d2dbe9c5b338ef79e8c08081"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers normally distributed.  <a href="group__random__func__randn.htm#ga40f407d3d2dbe9c5b338ef79e8c08081">More...</a><br /></td></tr>
<tr class="separator:ga40f407d3d2dbe9c5b338ef79e8c08081"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0fc352fcb3da7b16d75748fa7986355"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#gac0fc352fcb3da7b16d75748fa7986355">randn</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gac0fc352fcb3da7b16d75748fa7986355"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers normally distributed.  <a href="group__random__func__randn.htm#gac0fc352fcb3da7b16d75748fa7986355">More...</a><br /></td></tr>
<tr class="separator:gac0fc352fcb3da7b16d75748fa7986355"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed19697523e812a427a3b3edd0c2425b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm#gaed19697523e812a427a3b3edd0c2425b">randn</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d2, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> d3, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gaed19697523e812a427a3b3edd0c2425b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create an array of random numbers normally distributed.  <a href="group__random__func__randn.htm#gaed19697523e812a427a3b3edd0c2425b">More...</a><br /></td></tr>
<tr class="separator:gaed19697523e812a427a3b3edd0c2425b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga20fe40959adfeb1c9a93568a3c7bde0d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__set__default__engine.htm#ga20fe40959adfeb1c9a93568a3c7bde0d">setDefaultRandomEngineType</a> (<a class="el" href="defines_8h.htm#a82a3bf91d6dd04661c63632d0fbf4934">randomEngineType</a> rtype)</td></tr>
<tr class="memdesc:ga20fe40959adfeb1c9a93568a3c7bde0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to set the default random engine type.  <a href="group__random__func__set__default__engine.htm#ga20fe40959adfeb1c9a93568a3c7bde0d">More...</a><br /></td></tr>
<tr class="separator:ga20fe40959adfeb1c9a93568a3c7bde0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga053fc2fe1384a95d500a407d339fd2c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1randomEngine.htm">randomEngine</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__get__default__engine.htm#ga053fc2fe1384a95d500a407d339fd2c4">getDefaultRandomEngine</a> (void)</td></tr>
<tr class="memdesc:ga053fc2fe1384a95d500a407d339fd2c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to get the default random engine type.  <a href="group__random__func__get__default__engine.htm#ga053fc2fe1384a95d500a407d339fd2c4">More...</a><br /></td></tr>
<tr class="separator:ga053fc2fe1384a95d500a407d339fd2c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98520813a79daf2a43ebe8cc212d5a67"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__set__seed.htm#ga98520813a79daf2a43ebe8cc212d5a67">setSeed</a> (const unsigned long long seed)</td></tr>
<tr class="memdesc:ga98520813a79daf2a43ebe8cc212d5a67"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to set the seed of the default random number generator.  <a href="group__random__func__set__seed.htm#ga98520813a79daf2a43ebe8cc212d5a67">More...</a><br /></td></tr>
<tr class="separator:ga98520813a79daf2a43ebe8cc212d5a67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15c54a2dc3bd505808974bf8bf662c3d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__get__seed.htm#ga15c54a2dc3bd505808974bf8bf662c3d">getSeed</a> ()</td></tr>
<tr class="memdesc:ga15c54a2dc3bd505808974bf8bf662c3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to get the seed of the default random number generator.  <a href="group__random__func__get__seed.htm#ga15c54a2dc3bd505808974bf8bf662c3d">More...</a><br /></td></tr>
<tr class="separator:ga15c54a2dc3bd505808974bf8bf662c3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabd004f943d8a8df6d00064fd965680ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx1.htm#gabd004f943d8a8df6d00064fd965680ee">approx1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a50db9a815ef5d23eee60ca5bda328836">AF_INTERP_LINEAR</a>, const float off_grid=0.0f)</td></tr>
<tr class="memdesc:gabd004f943d8a8df6d00064fd965680ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for data interpolation on one-dimensional signals.  <a href="group__signal__func__approx1.htm#gabd004f943d8a8df6d00064fd965680ee">More...</a><br /></td></tr>
<tr class="separator:gabd004f943d8a8df6d00064fd965680ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae1caef95088d57fda2eafbd83b41a0c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx2.htm#gae1caef95088d57fda2eafbd83b41a0c0">approx2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos0, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos1, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a50db9a815ef5d23eee60ca5bda328836">AF_INTERP_LINEAR</a>, const float off_grid=0.0f)</td></tr>
<tr class="memdesc:gae1caef95088d57fda2eafbd83b41a0c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for data interpolation on two-dimensional signals.  <a href="group__signal__func__approx2.htm#gae1caef95088d57fda2eafbd83b41a0c0">More...</a><br /></td></tr>
<tr class="separator:gae1caef95088d57fda2eafbd83b41a0c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga421512476569e80223f43ee3ab838b30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx1.htm#ga421512476569e80223f43ee3ab838b30">approx1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos, const int interp_dim, const double idx_start, const double idx_step, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a50db9a815ef5d23eee60ca5bda328836">AF_INTERP_LINEAR</a>, const float off_grid=0.0f)</td></tr>
<tr class="memdesc:ga421512476569e80223f43ee3ab838b30"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for data interpolation on one-dimensional signals.  <a href="group__signal__func__approx1.htm#ga421512476569e80223f43ee3ab838b30">More...</a><br /></td></tr>
<tr class="separator:ga421512476569e80223f43ee3ab838b30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga70abdc5624f02f683fa93aed57d86033"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx2.htm#ga70abdc5624f02f683fa93aed57d86033">approx2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos0, const int interp_dim0, const double idx_start_dim0, const double idx_step_dim0, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;pos1, const int interp_dim1, const double idx_start_dim1, const double idx_step_dim1, const <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a> method=<a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68a50db9a815ef5d23eee60ca5bda328836">AF_INTERP_LINEAR</a>, const float off_grid=0.0f)</td></tr>
<tr class="memdesc:ga70abdc5624f02f683fa93aed57d86033"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for data interpolation on two-dimensional signals.  <a href="group__signal__func__approx2.htm#ga70abdc5624f02f683fa93aed57d86033">More...</a><br /></td></tr>
<tr class="separator:ga70abdc5624f02f683fa93aed57d86033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee63590502b451b3ebaec4a61df44b6a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#gaee63590502b451b3ebaec4a61df44b6a">fftNorm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0)</td></tr>
<tr class="memdesc:gaee63590502b451b3ebaec4a61df44b6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on one dimensional signals.  <a href="group__signal__func__fft.htm#gaee63590502b451b3ebaec4a61df44b6a">More...</a><br /></td></tr>
<tr class="separator:gaee63590502b451b3ebaec4a61df44b6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5100f87051ff5b35237bbd8cd197e55e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft2.htm#ga5100f87051ff5b35237bbd8cd197e55e">fft2Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0)</td></tr>
<tr class="memdesc:ga5100f87051ff5b35237bbd8cd197e55e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on two dimensional signals.  <a href="group__signal__func__fft2.htm#ga5100f87051ff5b35237bbd8cd197e55e">More...</a><br /></td></tr>
<tr class="separator:ga5100f87051ff5b35237bbd8cd197e55e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga52e33a2bee728d0f4718035d2fb13393"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft3.htm#ga52e33a2bee728d0f4718035d2fb13393">fft3Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:ga52e33a2bee728d0f4718035d2fb13393"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__fft3.htm#ga52e33a2bee728d0f4718035d2fb13393">More...</a><br /></td></tr>
<tr class="separator:ga52e33a2bee728d0f4718035d2fb13393"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae8b5e5d6e9894905364e05d90d6d5916"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#gae8b5e5d6e9894905364e05d90d6d5916">fftInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:gae8b5e5d6e9894905364e05d90d6d5916"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on one dimensional signals.  <a href="group__signal__func__fft.htm#gae8b5e5d6e9894905364e05d90d6d5916">More...</a><br /></td></tr>
<tr class="separator:gae8b5e5d6e9894905364e05d90d6d5916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ae6dae641f14b8225629f3b372f00af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft2.htm#ga5ae6dae641f14b8225629f3b372f00af">fft2InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:ga5ae6dae641f14b8225629f3b372f00af"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on two dimensional signals.  <a href="group__signal__func__fft2.htm#ga5ae6dae641f14b8225629f3b372f00af">More...</a><br /></td></tr>
<tr class="separator:ga5ae6dae641f14b8225629f3b372f00af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c676d4c97fb19756ea1be8334c86e52"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft3.htm#ga9c676d4c97fb19756ea1be8334c86e52">fft3InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:ga9c676d4c97fb19756ea1be8334c86e52"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__fft3.htm#ga9c676d4c97fb19756ea1be8334c86e52">More...</a><br /></td></tr>
<tr class="separator:ga9c676d4c97fb19756ea1be8334c86e52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga840fd149f2d5b50e0060c88682432068"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga840fd149f2d5b50e0060c88682432068">fft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0)</td></tr>
<tr class="memdesc:ga840fd149f2d5b50e0060c88682432068"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on one dimensional signals.  <a href="group__signal__func__fft.htm#ga840fd149f2d5b50e0060c88682432068">More...</a><br /></td></tr>
<tr class="separator:ga840fd149f2d5b50e0060c88682432068"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5888d7f92cdf12ef712a145f55e7729b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft2.htm#ga5888d7f92cdf12ef712a145f55e7729b">fft2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0)</td></tr>
<tr class="memdesc:ga5888d7f92cdf12ef712a145f55e7729b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on two dimensional signals.  <a href="group__signal__func__fft2.htm#ga5888d7f92cdf12ef712a145f55e7729b">More...</a><br /></td></tr>
<tr class="separator:ga5888d7f92cdf12ef712a145f55e7729b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaa70e58e4a322b99184a5014da045f2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft3.htm#gaaa70e58e4a322b99184a5014da045f2f">fft3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:gaaa70e58e4a322b99184a5014da045f2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__fft3.htm#gaaa70e58e4a322b99184a5014da045f2f">More...</a><br /></td></tr>
<tr class="separator:gaaa70e58e4a322b99184a5014da045f2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga87f209d0288ee0bafe8dda36f07aeadb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga87f209d0288ee0bafe8dda36f07aeadb">dft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> outDims)</td></tr>
<tr class="memdesc:ga87f209d0288ee0bafe8dda36f07aeadb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#ga87f209d0288ee0bafe8dda36f07aeadb">More...</a><br /></td></tr>
<tr class="separator:ga87f209d0288ee0bafe8dda36f07aeadb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2c1b5fe6a4fd638d4d2e6484d3998b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#gaf2c1b5fe6a4fd638d4d2e6484d3998b7">dft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> outDims)</td></tr>
<tr class="memdesc:gaf2c1b5fe6a4fd638d4d2e6484d3998b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#gaf2c1b5fe6a4fd638d4d2e6484d3998b7">More...</a><br /></td></tr>
<tr class="separator:gaf2c1b5fe6a4fd638d4d2e6484d3998b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3798660ce25b9a31cd3d3209fc2e631"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#gac3798660ce25b9a31cd3d3209fc2e631">dft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gac3798660ce25b9a31cd3d3209fc2e631"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#gac3798660ce25b9a31cd3d3209fc2e631">More...</a><br /></td></tr>
<tr class="separator:gac3798660ce25b9a31cd3d3209fc2e631"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8df461e89474443ca68363682cb29977"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft.htm#ga8df461e89474443ca68363682cb29977">ifftNorm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0)</td></tr>
<tr class="memdesc:ga8df461e89474443ca68363682cb29977"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on one dimensional signals.  <a href="group__signal__func__ifft.htm#ga8df461e89474443ca68363682cb29977">More...</a><br /></td></tr>
<tr class="separator:ga8df461e89474443ca68363682cb29977"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5243cf1eaf17c10ddeb829dc94365c57"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft2.htm#ga5243cf1eaf17c10ddeb829dc94365c57">ifft2Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0)</td></tr>
<tr class="memdesc:ga5243cf1eaf17c10ddeb829dc94365c57"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on two dimensional signals.  <a href="group__signal__func__ifft2.htm#ga5243cf1eaf17c10ddeb829dc94365c57">More...</a><br /></td></tr>
<tr class="separator:ga5243cf1eaf17c10ddeb829dc94365c57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga372a8550836fcb1dcc86339a2e494ace"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#ga372a8550836fcb1dcc86339a2e494ace">ifft3Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:ga372a8550836fcb1dcc86339a2e494ace"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#ga372a8550836fcb1dcc86339a2e494ace">More...</a><br /></td></tr>
<tr class="separator:ga372a8550836fcb1dcc86339a2e494ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91ebb243a3dc565513f45c422d22e3e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft.htm#ga91ebb243a3dc565513f45c422d22e3e5">ifftInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:ga91ebb243a3dc565513f45c422d22e3e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on one dimensional signals.  <a href="group__signal__func__ifft.htm#ga91ebb243a3dc565513f45c422d22e3e5">More...</a><br /></td></tr>
<tr class="separator:ga91ebb243a3dc565513f45c422d22e3e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad9c160c529140a77dc2f073919cd9d13"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft2.htm#gad9c160c529140a77dc2f073919cd9d13">ifft2InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:gad9c160c529140a77dc2f073919cd9d13"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on two dimensional signals.  <a href="group__signal__func__ifft2.htm#gad9c160c529140a77dc2f073919cd9d13">More...</a><br /></td></tr>
<tr class="separator:gad9c160c529140a77dc2f073919cd9d13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga788e530c135fe44102aa1cfd50e9b709"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#ga788e530c135fe44102aa1cfd50e9b709">ifft3InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:ga788e530c135fe44102aa1cfd50e9b709"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#ga788e530c135fe44102aa1cfd50e9b709">More...</a><br /></td></tr>
<tr class="separator:ga788e530c135fe44102aa1cfd50e9b709"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafea0d39402886fc82ccb9413552ec9b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft.htm#gafea0d39402886fc82ccb9413552ec9b8">ifft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0)</td></tr>
<tr class="memdesc:gafea0d39402886fc82ccb9413552ec9b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on one dimensional signals.  <a href="group__signal__func__ifft.htm#gafea0d39402886fc82ccb9413552ec9b8">More...</a><br /></td></tr>
<tr class="separator:gafea0d39402886fc82ccb9413552ec9b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7d66318300d9403cfe85bdc357039926"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft2.htm#ga7d66318300d9403cfe85bdc357039926">ifft2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0)</td></tr>
<tr class="memdesc:ga7d66318300d9403cfe85bdc357039926"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on two dimensional signals.  <a href="group__signal__func__ifft2.htm#ga7d66318300d9403cfe85bdc357039926">More...</a><br /></td></tr>
<tr class="separator:ga7d66318300d9403cfe85bdc357039926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga912e3a8448d02178c48dc8769e0a9f8d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#ga912e3a8448d02178c48dc8769e0a9f8d">ifft3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:ga912e3a8448d02178c48dc8769e0a9f8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#ga912e3a8448d02178c48dc8769e0a9f8d">More...</a><br /></td></tr>
<tr class="separator:ga912e3a8448d02178c48dc8769e0a9f8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0f8836bb065857952c128e412a70926"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#gae0f8836bb065857952c128e412a70926">idft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> outDims)</td></tr>
<tr class="memdesc:gae0f8836bb065857952c128e412a70926"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#gae0f8836bb065857952c128e412a70926">More...</a><br /></td></tr>
<tr class="separator:gae0f8836bb065857952c128e412a70926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadc397f1c92eddecb098466683964f975"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#gadc397f1c92eddecb098466683964f975">idft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> outDims)</td></tr>
<tr class="memdesc:gadc397f1c92eddecb098466683964f975"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#gadc397f1c92eddecb098466683964f975">More...</a><br /></td></tr>
<tr class="separator:gadc397f1c92eddecb098466683964f975"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7541a644803ff3cd47f2f8e15832cbe4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm#ga7541a644803ff3cd47f2f8e15832cbe4">idft</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga7541a644803ff3cd47f2f8e15832cbe4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on any(1d, 2d, 3d) dimensional signals.  <a href="group__signal__func__fft.htm#ga7541a644803ff3cd47f2f8e15832cbe4">More...</a><br /></td></tr>
<tr class="separator:ga7541a644803ff3cd47f2f8e15832cbe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e4bbe7360417ad297ad219222c516bd"><td class="memTemplParams" colspan="2">template&lt;int rank&gt; </td></tr>
<tr class="memitem:ga4e4bbe7360417ad297ad219222c516bd"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__signal__func__fft__r2c.htm#ga4e4bbe7360417ad297ad219222c516bd">fftR2C</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;dims, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:ga4e4bbe7360417ad297ad219222c516bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for real to complex fast fourier transform for one dimensional signals.  <a href="group__signal__func__fft__r2c.htm#ga4e4bbe7360417ad297ad219222c516bd">More...</a><br /></td></tr>
<tr class="separator:ga4e4bbe7360417ad297ad219222c516bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab604b9aa9c0164961ed4d1750176c22b"><td class="memTemplParams" colspan="2">template&lt;int rank&gt; </td></tr>
<tr class="memitem:gab604b9aa9c0164961ed4d1750176c22b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__signal__func__fft__r2c.htm#gab604b9aa9c0164961ed4d1750176c22b">fftR2C</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:gab604b9aa9c0164961ed4d1750176c22b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for real to complex fast fourier transform for one dimensional signals.  <a href="group__signal__func__fft__r2c.htm#gab604b9aa9c0164961ed4d1750176c22b">More...</a><br /></td></tr>
<tr class="separator:gab604b9aa9c0164961ed4d1750176c22b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0db4f96fcb84525e984915e2b088046"><td class="memTemplParams" colspan="2">template&lt;int rank&gt; </td></tr>
<tr class="memitem:gac0db4f96fcb84525e984915e2b088046"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__signal__func__fft__c2r.htm#gac0db4f96fcb84525e984915e2b088046">fftC2R</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, bool is_odd=false, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:gac0db4f96fcb84525e984915e2b088046"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for complex to real fast fourier transform.  <a href="group__signal__func__fft__c2r.htm#gac0db4f96fcb84525e984915e2b088046">More...</a><br /></td></tr>
<tr class="separator:gac0db4f96fcb84525e984915e2b088046"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga801b0f4a09a017ccb196fac3c0dc417b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">convolve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:ga801b0f4a09a017ccb196fac3c0dc417b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution any(one through three) dimensional signals.  <a href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">More...</a><br /></td></tr>
<tr class="separator:ga801b0f4a09a017ccb196fac3c0dc417b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga88fc0fdac44400823c5a91d678bc4588"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve__sep.htm#ga88fc0fdac44400823c5a91d678bc4588">convolve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;col_filter, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;row_filter, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga88fc0fdac44400823c5a91d678bc4588"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for separable convolution on two dimensional signals.  <a href="group__signal__func__convolve__sep.htm#ga88fc0fdac44400823c5a91d678bc4588">More...</a><br /></td></tr>
<tr class="separator:ga88fc0fdac44400823c5a91d678bc4588"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7f5bd1038b2991e2db8e44f6c3b3efbd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm#ga7f5bd1038b2991e2db8e44f6c3b3efbd">convolve1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:ga7f5bd1038b2991e2db8e44f6c3b3efbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on one dimensional signals.  <a href="group__signal__func__convolve1.htm#ga7f5bd1038b2991e2db8e44f6c3b3efbd">More...</a><br /></td></tr>
<tr class="separator:ga7f5bd1038b2991e2db8e44f6c3b3efbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f5f0f717d86b9beda5086c3b1a3ff4d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve2.htm#ga5f5f0f717d86b9beda5086c3b1a3ff4d">convolve2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:ga5f5f0f717d86b9beda5086c3b1a3ff4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on two dimensional signals.  <a href="group__signal__func__convolve2.htm#ga5f5f0f717d86b9beda5086c3b1a3ff4d">More...</a><br /></td></tr>
<tr class="separator:ga5f5f0f717d86b9beda5086c3b1a3ff4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb0ed76775f542fae5ead3b02ba12d0e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve2.htm#gadb0ed76775f542fae5ead3b02ba12d0e">convolve2NN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> stride, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> padding, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> dilation)</td></tr>
<tr class="memdesc:gadb0ed76775f542fae5ead3b02ba12d0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for 2D convolution.  <a href="group__signal__func__convolve2.htm#gadb0ed76775f542fae5ead3b02ba12d0e">More...</a><br /></td></tr>
<tr class="separator:gadb0ed76775f542fae5ead3b02ba12d0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga61a55490dbf96126bd43e4bf815a6cad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve3.htm#ga61a55490dbf96126bd43e4bf815a6cad">convolve3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:ga61a55490dbf96126bd43e4bf815a6cad"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on three dimensional signals.  <a href="group__signal__func__convolve3.htm#ga61a55490dbf96126bd43e4bf815a6cad">More...</a><br /></td></tr>
<tr class="separator:ga61a55490dbf96126bd43e4bf815a6cad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga95cc430f1c610ed4409ebdd83156b278"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#ga95cc430f1c610ed4409ebdd83156b278">fftConvolve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga95cc430f1c610ed4409ebdd83156b278"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for FFT-based convolution any(one through three) dimensional signals.  <a href="group__signal__func__convolve.htm#ga95cc430f1c610ed4409ebdd83156b278">More...</a><br /></td></tr>
<tr class="separator:ga95cc430f1c610ed4409ebdd83156b278"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34460fcab1f1683d8834a9488210a795"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm#ga34460fcab1f1683d8834a9488210a795">fftConvolve1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga34460fcab1f1683d8834a9488210a795"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on 1D signals using FFT.  <a href="group__signal__func__convolve1.htm#ga34460fcab1f1683d8834a9488210a795">More...</a><br /></td></tr>
<tr class="separator:ga34460fcab1f1683d8834a9488210a795"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga65a03ef8559c89195994007b94ca9b82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve2.htm#ga65a03ef8559c89195994007b94ca9b82">fftConvolve2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga65a03ef8559c89195994007b94ca9b82"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on 2D signals using FFT.  <a href="group__signal__func__convolve2.htm#ga65a03ef8559c89195994007b94ca9b82">More...</a><br /></td></tr>
<tr class="separator:ga65a03ef8559c89195994007b94ca9b82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90cd382a765dfde5f1e114db8a45a928"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve3.htm#ga90cd382a765dfde5f1e114db8a45a928">fftConvolve3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga90cd382a765dfde5f1e114db8a45a928"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on 3D signals using FFT.  <a href="group__signal__func__convolve3.htm#ga90cd382a765dfde5f1e114db8a45a928">More...</a><br /></td></tr>
<tr class="separator:ga90cd382a765dfde5f1e114db8a45a928"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3b9636788162beebb313fa8cc67ac8a7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fir.htm#ga3b9636788162beebb313fa8cc67ac8a7">fir</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x)</td></tr>
<tr class="memdesc:ga3b9636788162beebb313fa8cc67ac8a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finite impulse response filter.  <a href="group__signal__func__fir.htm#ga3b9636788162beebb313fa8cc67ac8a7">More...</a><br /></td></tr>
<tr class="separator:ga3b9636788162beebb313fa8cc67ac8a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ccd475bfe8c3ca5df87639595d12d68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__iir.htm#ga2ccd475bfe8c3ca5df87639595d12d68">iir</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x)</td></tr>
<tr class="memdesc:ga2ccd475bfe8c3ca5df87639595d12d68"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for infinite impulse response filter.  <a href="group__signal__func__iir.htm#ga2ccd475bfe8c3ca5df87639595d12d68">More...</a><br /></td></tr>
<tr class="separator:ga2ccd475bfe8c3ca5df87639595d12d68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga70dbebc9a35d6533ad847d09b1a54bec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__medfilt.htm#ga70dbebc9a35d6533ad847d09b1a54bec">medfilt</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_length=3, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:ga70dbebc9a35d6533ad847d09b1a54bec"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median filter.  <a href="group__image__func__medfilt.htm#ga70dbebc9a35d6533ad847d09b1a54bec">More...</a><br /></td></tr>
<tr class="separator:ga70dbebc9a35d6533ad847d09b1a54bec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab6b0565d20e8bd4ce93ceaca92d6dcc4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__medfilt.htm#gab6b0565d20e8bd4ce93ceaca92d6dcc4">medfilt1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:gab6b0565d20e8bd4ce93ceaca92d6dcc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median filter.  <a href="group__image__func__medfilt.htm#gab6b0565d20e8bd4ce93ceaca92d6dcc4">More...</a><br /></td></tr>
<tr class="separator:gab6b0565d20e8bd4ce93ceaca92d6dcc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1677276274ca6b60cec9023aa8d0a5a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__medfilt.htm#ga1677276274ca6b60cec9023aa8d0a5a5">medfilt2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_length=3, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wind_width=3, const <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a> edge_pad=<a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113aa9ec0ad516e307a4d215cb9cb43cceb7">AF_PAD_ZERO</a>)</td></tr>
<tr class="memdesc:ga1677276274ca6b60cec9023aa8d0a5a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median filter.  <a href="group__image__func__medfilt.htm#ga1677276274ca6b60cec9023aa8d0a5a5">More...</a><br /></td></tr>
<tr class="separator:ga1677276274ca6b60cec9023aa8d0a5a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adae4ba27bc8beed887774815c469f74e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#adae4ba27bc8beed887774815c469f74e">setFFTPlanCacheSize</a> (size_t cacheSize)</td></tr>
<tr class="memdesc:adae4ba27bc8beed887774815c469f74e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for setting plan cache size.  <a href="namespaceaf.htm#adae4ba27bc8beed887774815c469f74e">More...</a><br /></td></tr>
<tr class="separator:adae4ba27bc8beed887774815c469f74e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad804ab05ba8ecadf15104e5a1e3d3d09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">sparse</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="classaf_1_1array.htm">array</a> values, const <a class="el" href="classaf_1_1array.htm">array</a> rowIdx, const <a class="el" href="classaf_1_1array.htm">array</a> colIdx, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>)</td></tr>
<tr class="memdesc:gad804ab05ba8ecadf15104e5a1e3d3d09"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array.  <a href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">More...</a><br /></td></tr>
<tr class="separator:gad804ab05ba8ecadf15104e5a1e3d3d09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga181b7d4904864f42876867cf19219c98"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#ga181b7d4904864f42876867cf19219c98">sparse</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nNZ, const void *const values, const int *const rowIdx, const int *const colIdx, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>, const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:ga181b7d4904864f42876867cf19219c98"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts host or device arrays of values, row indices and column indices into a sparse array on the device.  <a href="group__sparse__func__create.htm#ga181b7d4904864f42876867cf19219c98">More...</a><br /></td></tr>
<tr class="separator:ga181b7d4904864f42876867cf19219c98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf99b5c24ee2a3ab06f9ee201e3f943fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gaf99b5c24ee2a3ab06f9ee201e3f943fb">sparse</a> (const <a class="el" href="classaf_1_1array.htm">array</a> <a class="el" href="group__sparse__func__dense.htm#ga613b7c7af7fb5bb7ae792cb056b7bd6d">dense</a>, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>)</td></tr>
<tr class="memdesc:gaf99b5c24ee2a3ab06f9ee201e3f943fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts a dense <a class="el" href="classaf_1_1array.htm">af::array</a> into a sparse array.  <a href="group__sparse__func__create.htm#gaf99b5c24ee2a3ab06f9ee201e3f943fb">More...</a><br /></td></tr>
<tr class="separator:gaf99b5c24ee2a3ab06f9ee201e3f943fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade6974709ebd7989b21bcb9cbee39bbd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__convert__to.htm#gade6974709ebd7989b21bcb9cbee39bbd">sparseConvertTo</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> destStrorage)</td></tr>
<tr class="separator:gade6974709ebd7989b21bcb9cbee39bbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga613b7c7af7fb5bb7ae792cb056b7bd6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__dense.htm#ga613b7c7af7fb5bb7ae792cb056b7bd6d">dense</a> (const <a class="el" href="classaf_1_1array.htm">array</a> <a class="el" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">sparse</a>)</td></tr>
<tr class="separator:ga613b7c7af7fb5bb7ae792cb056b7bd6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae3fcd24ce557c36e2ab6d6bbaf9b7efa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__info.htm#gae3fcd24ce557c36e2ab6d6bbaf9b7efa">sparseGetInfo</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;values, <a class="el" href="classaf_1_1array.htm">array</a> &amp;rowIdx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;colIdx, <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> &amp;stype, const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:gae3fcd24ce557c36e2ab6d6bbaf9b7efa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b1d0bc650d7880e10c973e0a63b99fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__values.htm#ga0b1d0bc650d7880e10c973e0a63b99fb">sparseGetValues</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:ga0b1d0bc650d7880e10c973e0a63b99fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga744f0fdab752c5d706e08c20e48aadc7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__row__idx.htm#ga744f0fdab752c5d706e08c20e48aadc7">sparseGetRowIdx</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:ga744f0fdab752c5d706e08c20e48aadc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga857fb62f5012a895070668a134cd2fd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__col__idx.htm#ga857fb62f5012a895070668a134cd2fd2">sparseGetColIdx</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:ga857fb62f5012a895070668a134cd2fd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80f3ea8f80399fbb76d1a8048635765c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__nnz.htm#ga80f3ea8f80399fbb76d1a8048635765c">sparseGetNNZ</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:ga80f3ea8f80399fbb76d1a8048635765c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae4df3db6ba11054c75deae068e5695ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__storage.htm#gae4df3db6ba11054c75deae068e5695ad">sparseGetStorage</a> (const <a class="el" href="classaf_1_1array.htm">array</a> in)</td></tr>
<tr class="separator:gae4df3db6ba11054c75deae068e5695ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4cc3ee9a9aa91806d52ba6bca6288b04"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm#ga4cc3ee9a9aa91806d52ba6bca6288b04">mean</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga4cc3ee9a9aa91806d52ba6bca6288b04"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean.  <a href="group__stat__func__mean.htm#ga4cc3ee9a9aa91806d52ba6bca6288b04">More...</a><br /></td></tr>
<tr class="separator:ga4cc3ee9a9aa91806d52ba6bca6288b04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab1cd34dff991f160e65caa7109a31ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm#gaab1cd34dff991f160e65caa7109a31ef">mean</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:gaab1cd34dff991f160e65caa7109a31ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean of weighted inputs.  <a href="group__stat__func__mean.htm#gaab1cd34dff991f160e65caa7109a31ef">More...</a><br /></td></tr>
<tr class="separator:gaab1cd34dff991f160e65caa7109a31ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15da39f142c646212b8e881bf14575e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#ga15da39f142c646212b8e881bf14575e9">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool isbiased=false, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga15da39f142c646212b8e881bf14575e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance.  <a href="group__stat__func__var.htm#ga15da39f142c646212b8e881bf14575e9">More...</a><br /></td></tr>
<tr class="separator:ga15da39f142c646212b8e881bf14575e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2be08efff9f8a0364db1da5965a09d99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#ga2be08efff9f8a0364db1da5965a09d99">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> bias, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga2be08efff9f8a0364db1da5965a09d99"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance.  <a href="group__stat__func__var.htm#ga2be08efff9f8a0364db1da5965a09d99">More...</a><br /></td></tr>
<tr class="separator:ga2be08efff9f8a0364db1da5965a09d99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4816fc6ab68bc5e7273abbf6b32a2b1a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#ga4816fc6ab68bc5e7273abbf6b32a2b1a">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga4816fc6ab68bc5e7273abbf6b32a2b1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance of weighted inputs.  <a href="group__stat__func__var.htm#ga4816fc6ab68bc5e7273abbf6b32a2b1a">More...</a><br /></td></tr>
<tr class="separator:ga4816fc6ab68bc5e7273abbf6b32a2b1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2149bdb2e5ac3c3593441332edda163c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a2149bdb2e5ac3c3593441332edda163c">meanvar</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="group__stat__func__mean.htm#ga4cc3ee9a9aa91806d52ba6bca6288b04">mean</a>, <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="group__stat__func__var.htm#ga15da39f142c646212b8e881bf14575e9">var</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights, const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> bias=<a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6ae4f72a0687f083f8988f481f68c58a05">AF_VARIANCE_POPULATION</a>, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:a2149bdb2e5ac3c3593441332edda163c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean and variance.  <a href="namespaceaf.htm#a2149bdb2e5ac3c3593441332edda163c">More...</a><br /></td></tr>
<tr class="separator:a2149bdb2e5ac3c3593441332edda163c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1635a37d1b8a7156edba1549aa9d0178"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__stdev.htm#ga1635a37d1b8a7156edba1549aa9d0178">stdev</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga1635a37d1b8a7156edba1549aa9d0178"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for standard deviation.  <a href="group__stat__func__stdev.htm#ga1635a37d1b8a7156edba1549aa9d0178">More...</a><br /></td></tr>
<tr class="separator:ga1635a37d1b8a7156edba1549aa9d0178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4fb1183b5666f8455594bea2694d0c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__stdev.htm#gad4fb1183b5666f8455594bea2694d0c4">stdev</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> bias, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:gad4fb1183b5666f8455594bea2694d0c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for standard deviation.  <a href="group__stat__func__stdev.htm#gad4fb1183b5666f8455594bea2694d0c4">More...</a><br /></td></tr>
<tr class="separator:gad4fb1183b5666f8455594bea2694d0c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1614b303b77f3856a212bbb4a796908"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__cov.htm#gaa1614b303b77f3856a212bbb4a796908">cov</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;X, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;Y, const bool isbiased=false)</td></tr>
<tr class="memdesc:gaa1614b303b77f3856a212bbb4a796908"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for covariance.  <a href="group__stat__func__cov.htm#gaa1614b303b77f3856a212bbb4a796908">More...</a><br /></td></tr>
<tr class="separator:gaa1614b303b77f3856a212bbb4a796908"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d52a232e3503434ba4eb8dd8d0f6a09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__cov.htm#ga1d52a232e3503434ba4eb8dd8d0f6a09">cov</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;X, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;Y, const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> bias)</td></tr>
<tr class="memdesc:ga1d52a232e3503434ba4eb8dd8d0f6a09"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for covariance.  <a href="group__stat__func__cov.htm#ga1d52a232e3503434ba4eb8dd8d0f6a09">More...</a><br /></td></tr>
<tr class="separator:ga1d52a232e3503434ba4eb8dd8d0f6a09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6c170573573ae397b18f4b3b38f13f29"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__median.htm#ga6c170573573ae397b18f4b3b38f13f29">median</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim=-1)</td></tr>
<tr class="memdesc:ga6c170573573ae397b18f4b3b38f13f29"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median.  <a href="group__stat__func__median.htm#ga6c170573573ae397b18f4b3b38f13f29">More...</a><br /></td></tr>
<tr class="separator:ga6c170573573ae397b18f4b3b38f13f29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga036c72970f13458fd8649bebd28fabb3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga036c72970f13458fd8649bebd28fabb3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm#ga036c72970f13458fd8649bebd28fabb3">mean</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga036c72970f13458fd8649bebd28fabb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean of all elements.  <a href="group__stat__func__mean.htm#ga036c72970f13458fd8649bebd28fabb3">More...</a><br /></td></tr>
<tr class="separator:ga036c72970f13458fd8649bebd28fabb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a3ed118fac6743ca71022bdf3e3b99b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga1a3ed118fac6743ca71022bdf3e3b99b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm#ga1a3ed118fac6743ca71022bdf3e3b99b">mean</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights)</td></tr>
<tr class="memdesc:ga1a3ed118fac6743ca71022bdf3e3b99b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for mean of all elements in weighted input.  <a href="group__stat__func__mean.htm#ga1a3ed118fac6743ca71022bdf3e3b99b">More...</a><br /></td></tr>
<tr class="separator:ga1a3ed118fac6743ca71022bdf3e3b99b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga125d9bb2ab282cd6b9cec9f9fc763be4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga125d9bb2ab282cd6b9cec9f9fc763be4"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#ga125d9bb2ab282cd6b9cec9f9fc763be4">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const bool isbiased=false)</td></tr>
<tr class="memdesc:ga125d9bb2ab282cd6b9cec9f9fc763be4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance of all elements.  <a href="group__stat__func__var.htm#ga125d9bb2ab282cd6b9cec9f9fc763be4">More...</a><br /></td></tr>
<tr class="separator:ga125d9bb2ab282cd6b9cec9f9fc763be4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a13eca3b692375397464ea35249bd72"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga7a13eca3b692375397464ea35249bd72"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#ga7a13eca3b692375397464ea35249bd72">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> bias)</td></tr>
<tr class="memdesc:ga7a13eca3b692375397464ea35249bd72"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance of all elements.  <a href="group__stat__func__var.htm#ga7a13eca3b692375397464ea35249bd72">More...</a><br /></td></tr>
<tr class="separator:ga7a13eca3b692375397464ea35249bd72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0cca5d8f3637b6a5cb60ed2830256c2b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga0cca5d8f3637b6a5cb60ed2830256c2b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm#ga0cca5d8f3637b6a5cb60ed2830256c2b">var</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;weights)</td></tr>
<tr class="memdesc:ga0cca5d8f3637b6a5cb60ed2830256c2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for variance of all elements in weighted input.  <a href="group__stat__func__var.htm#ga0cca5d8f3637b6a5cb60ed2830256c2b">More...</a><br /></td></tr>
<tr class="separator:ga0cca5d8f3637b6a5cb60ed2830256c2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6433b6a91f811356c1ef7f876b0149ff"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga6433b6a91f811356c1ef7f876b0149ff"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__stdev.htm#ga6433b6a91f811356c1ef7f876b0149ff">stdev</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga6433b6a91f811356c1ef7f876b0149ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for standard deviation of all elements.  <a href="group__stat__func__stdev.htm#ga6433b6a91f811356c1ef7f876b0149ff">More...</a><br /></td></tr>
<tr class="separator:ga6433b6a91f811356c1ef7f876b0149ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga16b742de1551b654ed787751c022c79b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga16b742de1551b654ed787751c022c79b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__stdev.htm#ga16b742de1551b654ed787751c022c79b">stdev</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> bias)</td></tr>
<tr class="memdesc:ga16b742de1551b654ed787751c022c79b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for standard deviation of all elements.  <a href="group__stat__func__stdev.htm#ga16b742de1551b654ed787751c022c79b">More...</a><br /></td></tr>
<tr class="separator:ga16b742de1551b654ed787751c022c79b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3d18d7c34d42649a6375f6451e96eb25"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga3d18d7c34d42649a6375f6451e96eb25"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__median.htm#ga3d18d7c34d42649a6375f6451e96eb25">median</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga3d18d7c34d42649a6375f6451e96eb25"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for median of all elements.  <a href="group__stat__func__median.htm#ga3d18d7c34d42649a6375f6451e96eb25">More...</a><br /></td></tr>
<tr class="separator:ga3d18d7c34d42649a6375f6451e96eb25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga669d1d719f9cd0057591c5b9eebc06c6"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga669d1d719f9cd0057591c5b9eebc06c6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__stat__func__corrcoef.htm#ga669d1d719f9cd0057591c5b9eebc06c6">corrcoef</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;X, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;Y)</td></tr>
<tr class="memdesc:ga669d1d719f9cd0057591c5b9eebc06c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for correlation coefficient.  <a href="group__stat__func__corrcoef.htm#ga669d1d719f9cd0057591c5b9eebc06c6">More...</a><br /></td></tr>
<tr class="separator:ga669d1d719f9cd0057591c5b9eebc06c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e47e9fcf3117e5385152d2ef53c7eda"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__topk.htm#ga4e47e9fcf3117e5385152d2ef53c7eda">topk</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;values, <a class="el" href="classaf_1_1array.htm">array</a> &amp;indices, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int k, const int dim=-1, const <a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487b">topkFunction</a> order=<a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487ba91ed15b3164e5a3fd6cd3d688c40d640">AF_TOPK_MAX</a>)</td></tr>
<tr class="memdesc:ga4e47e9fcf3117e5385152d2ef53c7eda"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for finding top k elements along a given dimension.  <a href="group__stat__func__topk.htm#ga4e47e9fcf3117e5385152d2ef53c7eda">More...</a><br /></td></tr>
<tr class="separator:ga4e47e9fcf3117e5385152d2ef53c7eda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08955393264b77be242246c0b1148687"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a> (void(*fn)())</td></tr>
<tr class="separator:a08955393264b77be242246c0b1148687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadbb054980a05dbe4755bae9a4046fcac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__print.htm#gadbb054980a05dbe4755bae9a4046fcac">print</a> (const char *<a class="el" href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr)</td></tr>
<tr class="separator:gadbb054980a05dbe4755bae9a4046fcac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb479414a4833b1f41f87356d9787b52"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__print.htm#gadb479414a4833b1f41f87356d9787b52">print</a> (const char *<a class="el" href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const int precision)</td></tr>
<tr class="separator:gadb479414a4833b1f41f87356d9787b52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade6a266935429ab4e5c80340ec25cfc6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__save.htm#gade6a266935429ab4e5c80340ec25cfc6">saveArray</a> (const char *key, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const char *filename, const bool append=false)</td></tr>
<tr class="separator:gade6a266935429ab4e5c80340ec25cfc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga96a8b4909401cefdb3f9d4664b45f8c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga96a8b4909401cefdb3f9d4664b45f8c0">readArray</a> (const char *filename, const unsigned <a class="el" href="classaf_1_1index.htm">index</a>)</td></tr>
<tr class="separator:ga96a8b4909401cefdb3f9d4664b45f8c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47da900d867a0000a381bc840d3fa784"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga47da900d867a0000a381bc840d3fa784">readArray</a> (const char *filename, const char *key)</td></tr>
<tr class="separator:ga47da900d867a0000a381bc840d3fa784"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00cda45b2d6dd66daf68d5aa7d36ee81"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga00cda45b2d6dd66daf68d5aa7d36ee81">readArrayCheck</a> (const char *filename, const char *key)</td></tr>
<tr class="memdesc:ga00cda45b2d6dd66daf68d5aa7d36ee81"><td class="mdescLeft">&#160;</td><td class="mdescRight">When reading by key, it may be a good idea to run this function first to check for the key and then call the readArray using the index.  <a href="group__stream__func__read.htm#ga00cda45b2d6dd66daf68d5aa7d36ee81">More...</a><br /></td></tr>
<tr class="separator:ga00cda45b2d6dd66daf68d5aa7d36ee81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga53519777bcbcb1d4a3f2762d684b98c6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__tostring.htm#ga53519777bcbcb1d4a3f2762d684b98c6">toString</a> (char **output, const char *<a class="el" href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const int precision=4, const bool <a class="el" href="group__blas__func__transpose.htm#gac2bd8af48bf13afaa2646e9449a8092f">transpose</a>=true)</td></tr>
<tr class="separator:ga53519777bcbcb1d4a3f2762d684b98c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7bac1566a2dd875e241951927ac3f56d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__tostring.htm#ga7bac1566a2dd875e241951927ac3f56d">toString</a> (const char *<a class="el" href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const int precision=4, const bool <a class="el" href="group__blas__func__transpose.htm#gac2bd8af48bf13afaa2646e9449a8092f">transpose</a>=true)</td></tr>
<tr class="separator:ga7bac1566a2dd875e241951927ac3f56d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f30b1e01d093bdb2fba364eab04c20"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a38f30b1e01d093bdb2fba364eab04c20">exampleFunction</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">af_someenum_t</a> param)</td></tr>
<tr class="separator:a38f30b1e01d093bdb2fba364eab04c20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f61942066de7a396124871e8fd09b0c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a9f61942066de7a396124871e8fd09b0c">getSizeOf</a> (<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type)</td></tr>
<tr class="memdesc:a9f61942066de7a396124871e8fd09b0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the type represented by an af_dtype enum.  <a href="namespaceaf.htm#a9f61942066de7a396124871e8fd09b0c">More...</a><br /></td></tr>
<tr class="separator:a9f61942066de7a396124871e8fd09b0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac54efa48b057138403fd18cf697e0bd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1features.htm">features</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__fast.htm#gac54efa48b057138403fd18cf697e0bd3">fast</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const float thr=20.0f, const unsigned arc_length=9, const bool non_max=true, const float feature_ratio=0.05f, const unsigned edge=3)</td></tr>
<tr class="memdesc:gac54efa48b057138403fd18cf697e0bd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for FAST feature detector.  <a href="group__cv__func__fast.htm#gac54efa48b057138403fd18cf697e0bd3">More...</a><br /></td></tr>
<tr class="separator:gac54efa48b057138403fd18cf697e0bd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4853cd2b2d177a13a1e49fe6738398c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1features.htm">features</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__harris.htm#gab4853cd2b2d177a13a1e49fe6738398c">harris</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned max_corners=500, const float min_response=1e5f, const float sigma=1.f, const unsigned block_size=0, const float k_thr=0.04f)</td></tr>
<tr class="memdesc:gab4853cd2b2d177a13a1e49fe6738398c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for Harris corner detector.  <a href="group__cv__func__harris.htm#gab4853cd2b2d177a13a1e49fe6738398c">More...</a><br /></td></tr>
<tr class="separator:gab4853cd2b2d177a13a1e49fe6738398c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1657fbfc6cb751537e7d0d09c11f8bbb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__orb.htm#ga1657fbfc6cb751537e7d0d09c11f8bbb">orb</a> (<a class="el" href="classaf_1_1features.htm">features</a> &amp;feat, <a class="el" href="classaf_1_1array.htm">array</a> &amp;desc, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;image, const float fast_thr=20.f, const unsigned max_feat=400, const float scl_fctr=1.5f, const unsigned levels=4, const bool blur_img=false)</td></tr>
<tr class="memdesc:ga1657fbfc6cb751537e7d0d09c11f8bbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for ORB feature descriptor.  <a href="group__cv__func__orb.htm#ga1657fbfc6cb751537e7d0d09c11f8bbb">More...</a><br /></td></tr>
<tr class="separator:ga1657fbfc6cb751537e7d0d09c11f8bbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa28a7bba69ed97169c181699d325656a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__sift.htm#gaa28a7bba69ed97169c181699d325656a">sift</a> (<a class="el" href="classaf_1_1features.htm">features</a> &amp;feat, <a class="el" href="classaf_1_1array.htm">array</a> &amp;desc, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned n_layers=3, const float contrast_thr=0.04f, const float edge_thr=10.f, const float init_sigma=1.6f, const bool double_input=true, const float intensity_scale=0.00390625f, const float feature_ratio=0.05f)</td></tr>
<tr class="memdesc:gaa28a7bba69ed97169c181699d325656a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SIFT feature detector and descriptor.  <a href="group__cv__func__sift.htm#gaa28a7bba69ed97169c181699d325656a">More...</a><br /></td></tr>
<tr class="separator:gaa28a7bba69ed97169c181699d325656a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga612b989d65258643a4d42e071a87b317"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__sift.htm#ga612b989d65258643a4d42e071a87b317">gloh</a> (<a class="el" href="classaf_1_1features.htm">features</a> &amp;feat, <a class="el" href="classaf_1_1array.htm">array</a> &amp;desc, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned n_layers=3, const float contrast_thr=0.04f, const float edge_thr=10.f, const float init_sigma=1.6f, const bool double_input=true, const float intensity_scale=0.00390625f, const float feature_ratio=0.05f)</td></tr>
<tr class="memdesc:ga612b989d65258643a4d42e071a87b317"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SIFT feature detector and GLOH descriptor.  <a href="group__cv__func__sift.htm#ga612b989d65258643a4d42e071a87b317">More...</a><br /></td></tr>
<tr class="separator:ga612b989d65258643a4d42e071a87b317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga080ad7f1fc0b890c0d4ba5f4ef46997c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__hamming__matcher.htm#ga080ad7f1fc0b890c0d4ba5f4ef46997c">hammingMatcher</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dist, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;query, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;train, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dist_dim=0, const unsigned n_dist=1)</td></tr>
<tr class="memdesc:ga080ad7f1fc0b890c0d4ba5f4ef46997c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for Hamming matcher.  <a href="group__cv__func__hamming__matcher.htm#ga080ad7f1fc0b890c0d4ba5f4ef46997c">More...</a><br /></td></tr>
<tr class="separator:ga080ad7f1fc0b890c0d4ba5f4ef46997c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9973d0dd5241f71c2fafb9ebd5095d78"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__nearest__neighbour.htm#ga9973d0dd5241f71c2fafb9ebd5095d78">nearestNeighbour</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dist, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;query, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;train, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dist_dim=0, const unsigned n_dist=1, const <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a> dist_type=<a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba424a4d974dc66b0dc481ee4fc4333af2">AF_SSD</a>)</td></tr>
<tr class="memdesc:ga9973d0dd5241f71c2fafb9ebd5095d78"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ interface wrapper for determining the nearest neighbouring points to a given set of points.  <a href="group__cv__func__nearest__neighbour.htm#ga9973d0dd5241f71c2fafb9ebd5095d78">More...</a><br /></td></tr>
<tr class="separator:ga9973d0dd5241f71c2fafb9ebd5095d78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga52aea5e045417d33eb8ed8037da48d3c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__match__template.htm#ga52aea5e045417d33eb8ed8037da48d3c">matchTemplate</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;searchImg, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;templateImg, const <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">matchType</a> mType=<a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafbac3c384561eb097c610a813629204ab9a">AF_SAD</a>)</td></tr>
<tr class="memdesc:ga52aea5e045417d33eb8ed8037da48d3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for image template matching.  <a href="group__cv__func__match__template.htm#ga52aea5e045417d33eb8ed8037da48d3c">More...</a><br /></td></tr>
<tr class="separator:ga52aea5e045417d33eb8ed8037da48d3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga983c12db4a95d063ed7a802ae488be70"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1features.htm">features</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__susan.htm#ga983c12db4a95d063ed7a802ae488be70">susan</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const unsigned radius=3, const float diff_thr=32.0f, const float geom_thr=10.0f, const float feature_ratio=0.05f, const unsigned edge=3)</td></tr>
<tr class="memdesc:ga983c12db4a95d063ed7a802ae488be70"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SUSAN corner detector.  <a href="group__cv__func__susan.htm#ga983c12db4a95d063ed7a802ae488be70">More...</a><br /></td></tr>
<tr class="separator:ga983c12db4a95d063ed7a802ae488be70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga280a0c1c41b0b5fc85f84431ff9de01b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__dog.htm#ga280a0c1c41b0b5fc85f84431ff9de01b">dog</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int radius1, const int radius2)</td></tr>
<tr class="memdesc:ga280a0c1c41b0b5fc85f84431ff9de01b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for Difference of Gaussians.  <a href="group__cv__func__dog.htm#ga280a0c1c41b0b5fc85f84431ff9de01b">More...</a><br /></td></tr>
<tr class="separator:ga280a0c1c41b0b5fc85f84431ff9de01b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa715595e3e68382edec95ebf90555b47"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__homography.htm#gaa715595e3e68382edec95ebf90555b47">homography</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;H, int &amp;inliers, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x_src, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;y_src, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x_dst, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;y_dst, const <a class="el" href="defines_8h.htm#a91b4a692ddf0ee8a7d29d19cc61e6204">af_homography_type</a> htype=<a class="el" href="defines_8h.htm#a91b4a692ddf0ee8a7d29d19cc61e6204a88ed6ce7373f504f274cce8ac68d209c">AF_HOMOGRAPHY_RANSAC</a>, const float inlier_thr=3.f, const unsigned iterations=1000, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> otype=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:gaa715595e3e68382edec95ebf90555b47"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for Homography estimation.  <a href="group__cv__func__homography.htm#gaa715595e3e68382edec95ebf90555b47">More...</a><br /></td></tr>
<tr class="separator:gaa715595e3e68382edec95ebf90555b47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga7a28608d80d434a0019bc3090b0d29b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#ga7a28608d80d434a0019bc3090b0d29b4">clamp</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lo, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;hi)</td></tr>
<tr class="separator:ga7a28608d80d434a0019bc3090b0d29b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga674981125b5e6d923d7be80ba793cf08"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#ga674981125b5e6d923d7be80ba793cf08">clamp</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lo, const double hi)</td></tr>
<tr class="separator:ga674981125b5e6d923d7be80ba793cf08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e1e2a3a430d163ab71680e81b238aec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#ga3e1e2a3a430d163ab71680e81b238aec">clamp</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double lo, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;hi)</td></tr>
<tr class="separator:ga3e1e2a3a430d163ab71680e81b238aec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga778bd7924602127bfc7e1bbc8c1d1347"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#ga778bd7924602127bfc7e1bbc8c1d1347">clamp</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double lo, const double hi)</td></tr>
<tr class="separator:ga778bd7924602127bfc7e1bbc8c1d1347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga20d1ab30acd4ba437f6d3c53a757d345"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rem.htm#ga20d1ab30acd4ba437f6d3c53a757d345">rem</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga20d1ab30acd4ba437f6d3c53a757d345"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ad02745e5b4d752eb702aa890ea9906"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rem.htm#ga5ad02745e5b4d752eb702aa890ea9906">rem</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="separator:ga5ad02745e5b4d752eb702aa890ea9906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga08818ec8b1dc3f41a7149ca035ba7c30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rem.htm#ga08818ec8b1dc3f41a7149ca035ba7c30">rem</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga08818ec8b1dc3f41a7149ca035ba7c30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gaaa28b62e9e553d4bc4738d99bba0dd39"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gaaa28b62e9e553d4bc4738d99bba0dd39">mod</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gaaa28b62e9e553d4bc4738d99bba0dd39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga731d6f227a94a632764e485d1baefcb0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga731d6f227a94a632764e485d1baefcb0">mod</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="separator:ga731d6f227a94a632764e485d1baefcb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa33acaca64e1bd8e77a2f62fb4ac2db1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gaa33acaca64e1bd8e77a2f62fb4ac2db1">mod</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gaa33acaca64e1bd8e77a2f62fb4ac2db1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga290faa6384905def505b523879d4022d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__hypot.htm#ga290faa6384905def505b523879d4022d">hypot</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga290faa6384905def505b523879d4022d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the length of the hypotenuse of two inputs.  <a href="group__arith__func__hypot.htm#ga290faa6384905def505b523879d4022d">More...</a><br /></td></tr>
<tr class="separator:ga290faa6384905def505b523879d4022d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd5eb0f3d303923e17ce12825289b3b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__hypot.htm#gafd5eb0f3d303923e17ce12825289b3b7">hypot</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:gafd5eb0f3d303923e17ce12825289b3b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the length of the hypotenuse of two inputs.   <a href="group__arith__func__hypot.htm#gafd5eb0f3d303923e17ce12825289b3b7">More...</a><br /></td></tr>
<tr class="separator:gafd5eb0f3d303923e17ce12825289b3b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga88a9c238de12dd93f9ea3938bdf0ee2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__hypot.htm#ga88a9c238de12dd93f9ea3938bdf0ee2c">hypot</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga88a9c238de12dd93f9ea3938bdf0ee2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the length of the hypotenuse of two inputs.   <a href="group__arith__func__hypot.htm#ga88a9c238de12dd93f9ea3938bdf0ee2c">More...</a><br /></td></tr>
<tr class="separator:ga88a9c238de12dd93f9ea3938bdf0ee2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga4d78567a4f07d1e2031d37610bbef86a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#ga4d78567a4f07d1e2031d37610bbef86a">atan2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4d78567a4f07d1e2031d37610bbef86a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse tangent of two arrays.  <a href="group__arith__func__atan.htm#ga4d78567a4f07d1e2031d37610bbef86a">More...</a><br /></td></tr>
<tr class="separator:ga4d78567a4f07d1e2031d37610bbef86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6532fa8f9580cdbc7499dd9a01f343f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#ga6532fa8f9580cdbc7499dd9a01f343f0">atan2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:ga6532fa8f9580cdbc7499dd9a01f343f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse tangent of two arrays.   <a href="group__arith__func__atan.htm#ga6532fa8f9580cdbc7499dd9a01f343f0">More...</a><br /></td></tr>
<tr class="separator:ga6532fa8f9580cdbc7499dd9a01f343f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga946ca072ff37ae2439862a3c28519abb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#ga946ca072ff37ae2439862a3c28519abb">atan2</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga946ca072ff37ae2439862a3c28519abb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse tangent of two arrays.   <a href="group__arith__func__atan.htm#ga946ca072ff37ae2439862a3c28519abb">More...</a><br /></td></tr>
<tr class="separator:ga946ca072ff37ae2439862a3c28519abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga44ff7fc2e3e8ed0489fe78b5d724d0f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#ga44ff7fc2e3e8ed0489fe78b5d724d0f8">complex</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga44ff7fc2e3e8ed0489fe78b5d724d0f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create a complex array from a single real array.  <a href="group__arith__func__cplx.htm#ga44ff7fc2e3e8ed0489fe78b5d724d0f8">More...</a><br /></td></tr>
<tr class="separator:ga44ff7fc2e3e8ed0489fe78b5d724d0f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga26aae98c96aa6b8fbf7ad2052e12d0b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#ga26aae98c96aa6b8fbf7ad2052e12d0b4">complex</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;real_, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;imag_)</td></tr>
<tr class="memdesc:ga26aae98c96aa6b8fbf7ad2052e12d0b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create a complex array from two real arrays.  <a href="group__arith__func__cplx.htm#ga26aae98c96aa6b8fbf7ad2052e12d0b4">More...</a><br /></td></tr>
<tr class="separator:ga26aae98c96aa6b8fbf7ad2052e12d0b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d957c17ce3875722a10b626c9b0b2d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#ga1d957c17ce3875722a10b626c9b0b2d9">complex</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;real_, const double imag_)</td></tr>
<tr class="memdesc:ga1d957c17ce3875722a10b626c9b0b2d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create a complex array from a single real array for the real component and a single scalar for each imaginary component.  <a href="group__arith__func__cplx.htm#ga1d957c17ce3875722a10b626c9b0b2d9">More...</a><br /></td></tr>
<tr class="separator:ga1d957c17ce3875722a10b626c9b0b2d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae033ce031ad7732d15a0fe42245a6e0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#gae033ce031ad7732d15a0fe42245a6e0f">complex</a> (const double real_, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;imag_)</td></tr>
<tr class="memdesc:gae033ce031ad7732d15a0fe42245a6e0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create a complex array from a single scalar for each real component and a single real array for the imaginary component.  <a href="group__arith__func__cplx.htm#gae033ce031ad7732d15a0fe42245a6e0f">More...</a><br /></td></tr>
<tr class="separator:gae033ce031ad7732d15a0fe42245a6e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga3bfbc7fe4ed35c215dc26c5c377dd761"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga3bfbc7fe4ed35c215dc26c5c377dd761">pow</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;base, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;exponent)</td></tr>
<tr class="memdesc:ga3bfbc7fe4ed35c215dc26c5c377dd761"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to raise a base to a power (or exponent).  <a href="group__arith__func__pow.htm#ga3bfbc7fe4ed35c215dc26c5c377dd761">More...</a><br /></td></tr>
<tr class="separator:ga3bfbc7fe4ed35c215dc26c5c377dd761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga59bc058729eeaebe35ee047d16dc0331"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga59bc058729eeaebe35ee047d16dc0331">pow</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;base, const double exponent)</td></tr>
<tr class="memdesc:ga59bc058729eeaebe35ee047d16dc0331"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to raise a base to a power (or exponent).   <a href="group__arith__func__pow.htm#ga59bc058729eeaebe35ee047d16dc0331">More...</a><br /></td></tr>
<tr class="separator:ga59bc058729eeaebe35ee047d16dc0331"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0c871c4580a80a5ecfb34189cb28db7b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga0c871c4580a80a5ecfb34189cb28db7b">pow</a> (const double base, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;exponent)</td></tr>
<tr class="memdesc:ga0c871c4580a80a5ecfb34189cb28db7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to raise a base to a power (or exponent).   <a href="group__arith__func__pow.htm#ga0c871c4580a80a5ecfb34189cb28db7b">More...</a><br /></td></tr>
<tr class="separator:ga0c871c4580a80a5ecfb34189cb28db7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15965c869d1e79c2d850f22e700860c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga15965c869d1e79c2d850f22e700860c0">pow2</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:ga15965c869d1e79c2d850f22e700860c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to raise 2 to a power (or exponent).  <a href="group__arith__func__pow.htm#ga15965c869d1e79c2d850f22e700860c0">More...</a><br /></td></tr>
<tr class="separator:ga15965c869d1e79c2d850f22e700860c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga918dd1bfad5bcfdc8b3338a2b3c54d07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga918dd1bfad5bcfdc8b3338a2b3c54d07">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga918dd1bfad5bcfdc8b3338a2b3c54d07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.  <a href="group__arith__func__add.htm#ga918dd1bfad5bcfdc8b3338a2b3c54d07">More...</a><br /></td></tr>
<tr class="separator:ga918dd1bfad5bcfdc8b3338a2b3c54d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ef554e3106f1341927510d064486978"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga4ef554e3106f1341927510d064486978">operator+</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4ef554e3106f1341927510d064486978"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga4ef554e3106f1341927510d064486978">More...</a><br /></td></tr>
<tr class="separator:ga4ef554e3106f1341927510d064486978"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga16e7d61b2dd96634bca838223c6a5b1d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga16e7d61b2dd96634bca838223c6a5b1d">operator+</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga16e7d61b2dd96634bca838223c6a5b1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga16e7d61b2dd96634bca838223c6a5b1d">More...</a><br /></td></tr>
<tr class="separator:ga16e7d61b2dd96634bca838223c6a5b1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac43d865f183331949951ca922f74f0bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gac43d865f183331949951ca922f74f0bb">operator+</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac43d865f183331949951ca922f74f0bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gac43d865f183331949951ca922f74f0bb">More...</a><br /></td></tr>
<tr class="separator:gac43d865f183331949951ca922f74f0bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf61afba9e7d3e2a751c5fc8d1f147fc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gaf61afba9e7d3e2a751c5fc8d1f147fc9">operator+</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf61afba9e7d3e2a751c5fc8d1f147fc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gaf61afba9e7d3e2a751c5fc8d1f147fc9">More...</a><br /></td></tr>
<tr class="separator:gaf61afba9e7d3e2a751c5fc8d1f147fc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6c04e78bfc3d8ce06a01c397ce3bba4d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga6c04e78bfc3d8ce06a01c397ce3bba4d">operator+</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6c04e78bfc3d8ce06a01c397ce3bba4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga6c04e78bfc3d8ce06a01c397ce3bba4d">More...</a><br /></td></tr>
<tr class="separator:ga6c04e78bfc3d8ce06a01c397ce3bba4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea510a20f5953dcc6d73f7ccd9a8ef26"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gaea510a20f5953dcc6d73f7ccd9a8ef26">operator+</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaea510a20f5953dcc6d73f7ccd9a8ef26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gaea510a20f5953dcc6d73f7ccd9a8ef26">More...</a><br /></td></tr>
<tr class="separator:gaea510a20f5953dcc6d73f7ccd9a8ef26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga704cbd47ea184532710c160be1ca32d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga704cbd47ea184532710c160be1ca32d6">operator+</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga704cbd47ea184532710c160be1ca32d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga704cbd47ea184532710c160be1ca32d6">More...</a><br /></td></tr>
<tr class="separator:ga704cbd47ea184532710c160be1ca32d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e31e354d31be58af68065a55fdc47c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga5e31e354d31be58af68065a55fdc47c9">operator+</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5e31e354d31be58af68065a55fdc47c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga5e31e354d31be58af68065a55fdc47c9">More...</a><br /></td></tr>
<tr class="separator:ga5e31e354d31be58af68065a55fdc47c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaee1bf845c9c3cb938b34010442e3f76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gaaee1bf845c9c3cb938b34010442e3f76">operator+</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaaee1bf845c9c3cb938b34010442e3f76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gaaee1bf845c9c3cb938b34010442e3f76">More...</a><br /></td></tr>
<tr class="separator:gaaee1bf845c9c3cb938b34010442e3f76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a0b880f9891da4bc5c4a126a4443253"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga6a0b880f9891da4bc5c4a126a4443253">operator+</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6a0b880f9891da4bc5c4a126a4443253"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga6a0b880f9891da4bc5c4a126a4443253">More...</a><br /></td></tr>
<tr class="separator:ga6a0b880f9891da4bc5c4a126a4443253"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga13c0420414660e280845460a827f104c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga13c0420414660e280845460a827f104c">operator+</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga13c0420414660e280845460a827f104c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga13c0420414660e280845460a827f104c">More...</a><br /></td></tr>
<tr class="separator:ga13c0420414660e280845460a827f104c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f370203092da730c52fb7d183385f32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga2f370203092da730c52fb7d183385f32">operator+</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2f370203092da730c52fb7d183385f32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga2f370203092da730c52fb7d183385f32">More...</a><br /></td></tr>
<tr class="separator:ga2f370203092da730c52fb7d183385f32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec6769e590ee9faf5013aeeb2542da10"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gaec6769e590ee9faf5013aeeb2542da10">operator+</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaec6769e590ee9faf5013aeeb2542da10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gaec6769e590ee9faf5013aeeb2542da10">More...</a><br /></td></tr>
<tr class="separator:gaec6769e590ee9faf5013aeeb2542da10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga777e8d2bb37a16d7d07ba0fb231324c7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga777e8d2bb37a16d7d07ba0fb231324c7">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga777e8d2bb37a16d7d07ba0fb231324c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga777e8d2bb37a16d7d07ba0fb231324c7">More...</a><br /></td></tr>
<tr class="separator:ga777e8d2bb37a16d7d07ba0fb231324c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b183c910389bee0ef962be8fccfe4d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga9b183c910389bee0ef962be8fccfe4d8">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga9b183c910389bee0ef962be8fccfe4d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga9b183c910389bee0ef962be8fccfe4d8">More...</a><br /></td></tr>
<tr class="separator:ga9b183c910389bee0ef962be8fccfe4d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7719b59a4a0fb668c75d61c4fe2bee5a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga7719b59a4a0fb668c75d61c4fe2bee5a">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga7719b59a4a0fb668c75d61c4fe2bee5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga7719b59a4a0fb668c75d61c4fe2bee5a">More...</a><br /></td></tr>
<tr class="separator:ga7719b59a4a0fb668c75d61c4fe2bee5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga67ba2d3c7b7e82f32f2970a77906710c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga67ba2d3c7b7e82f32f2970a77906710c">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga67ba2d3c7b7e82f32f2970a77906710c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga67ba2d3c7b7e82f32f2970a77906710c">More...</a><br /></td></tr>
<tr class="separator:ga67ba2d3c7b7e82f32f2970a77906710c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaace723b2ec3ea1152c10d2d5a8af7a18"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gaace723b2ec3ea1152c10d2d5a8af7a18">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:gaace723b2ec3ea1152c10d2d5a8af7a18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gaace723b2ec3ea1152c10d2d5a8af7a18">More...</a><br /></td></tr>
<tr class="separator:gaace723b2ec3ea1152c10d2d5a8af7a18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32d61b7c113ac576d06cbf0320465bfd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga32d61b7c113ac576d06cbf0320465bfd">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga32d61b7c113ac576d06cbf0320465bfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga32d61b7c113ac576d06cbf0320465bfd">More...</a><br /></td></tr>
<tr class="separator:ga32d61b7c113ac576d06cbf0320465bfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab94aeca146295c5561439ad9c5e1d5c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gab94aeca146295c5561439ad9c5e1d5c3">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:gab94aeca146295c5561439ad9c5e1d5c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gab94aeca146295c5561439ad9c5e1d5c3">More...</a><br /></td></tr>
<tr class="separator:gab94aeca146295c5561439ad9c5e1d5c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga45d11a1abc78a9ecbacb866a1c390a7c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga45d11a1abc78a9ecbacb866a1c390a7c">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga45d11a1abc78a9ecbacb866a1c390a7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga45d11a1abc78a9ecbacb866a1c390a7c">More...</a><br /></td></tr>
<tr class="separator:ga45d11a1abc78a9ecbacb866a1c390a7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabeeeeb9d29d667019d7dd43c5580747c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gabeeeeb9d29d667019d7dd43c5580747c">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gabeeeeb9d29d667019d7dd43c5580747c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gabeeeeb9d29d667019d7dd43c5580747c">More...</a><br /></td></tr>
<tr class="separator:gabeeeeb9d29d667019d7dd43c5580747c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cb37831bc2d611ab2cf44f73cde6d91"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga5cb37831bc2d611ab2cf44f73cde6d91">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga5cb37831bc2d611ab2cf44f73cde6d91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga5cb37831bc2d611ab2cf44f73cde6d91">More...</a><br /></td></tr>
<tr class="separator:ga5cb37831bc2d611ab2cf44f73cde6d91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5fff47dfe785b7b00b9c569efe740d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gaf5fff47dfe785b7b00b9c569efe740d9">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:gaf5fff47dfe785b7b00b9c569efe740d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gaf5fff47dfe785b7b00b9c569efe740d9">More...</a><br /></td></tr>
<tr class="separator:gaf5fff47dfe785b7b00b9c569efe740d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaa43f69d1991897393b5f7f61374b2db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gaaa43f69d1991897393b5f7f61374b2db">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaaa43f69d1991897393b5f7f61374b2db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gaaa43f69d1991897393b5f7f61374b2db">More...</a><br /></td></tr>
<tr class="separator:gaaa43f69d1991897393b5f7f61374b2db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacf3f9cf109c39e00da2974ad34a419a9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gacf3f9cf109c39e00da2974ad34a419a9">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:gacf3f9cf109c39e00da2974ad34a419a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga256d973767c56a8f3f64e56e785a28c1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga256d973767c56a8f3f64e56e785a28c1">operator+</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga256d973767c56a8f3f64e56e785a28c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga256d973767c56a8f3f64e56e785a28c1">More...</a><br /></td></tr>
<tr class="separator:ga256d973767c56a8f3f64e56e785a28c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb35c8e5b03f4cc84f5aaf099c99fe26"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gadb35c8e5b03f4cc84f5aaf099c99fe26">operator+</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gadb35c8e5b03f4cc84f5aaf099c99fe26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#gadb35c8e5b03f4cc84f5aaf099c99fe26">More...</a><br /></td></tr>
<tr class="separator:gadb35c8e5b03f4cc84f5aaf099c99fe26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76c232349043133cb15140df8bcde636"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga76c232349043133cb15140df8bcde636">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga76c232349043133cb15140df8bcde636"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds two arrays or an array and a value.   <a href="group__arith__func__add.htm#ga76c232349043133cb15140df8bcde636">More...</a><br /></td></tr>
<tr class="separator:ga76c232349043133cb15140df8bcde636"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaff03d1473446909c2c43391aeceefcc4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#gaff03d1473446909c2c43391aeceefcc4">operator+</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gaff03d1473446909c2c43391aeceefcc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga4faecd4f2d07671aeefaa9d6d5d90d3f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga4faecd4f2d07671aeefaa9d6d5d90d3f">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4faecd4f2d07671aeefaa9d6d5d90d3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.  <a href="group__arith__func__sub.htm#ga4faecd4f2d07671aeefaa9d6d5d90d3f">More...</a><br /></td></tr>
<tr class="separator:ga4faecd4f2d07671aeefaa9d6d5d90d3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9835b1289128a5b12e37c0c56a232060"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga9835b1289128a5b12e37c0c56a232060">operator-</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9835b1289128a5b12e37c0c56a232060"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga9835b1289128a5b12e37c0c56a232060">More...</a><br /></td></tr>
<tr class="separator:ga9835b1289128a5b12e37c0c56a232060"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6a11e1e58a7597cd1b4b1108db025ec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gac6a11e1e58a7597cd1b4b1108db025ec">operator-</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac6a11e1e58a7597cd1b4b1108db025ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gac6a11e1e58a7597cd1b4b1108db025ec">More...</a><br /></td></tr>
<tr class="separator:gac6a11e1e58a7597cd1b4b1108db025ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad84975138edf312c00e859939a32a60c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gad84975138edf312c00e859939a32a60c">operator-</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad84975138edf312c00e859939a32a60c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gad84975138edf312c00e859939a32a60c">More...</a><br /></td></tr>
<tr class="separator:gad84975138edf312c00e859939a32a60c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab544b2e14e9b0402f6e42b9bf2438acc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gab544b2e14e9b0402f6e42b9bf2438acc">operator-</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab544b2e14e9b0402f6e42b9bf2438acc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gab544b2e14e9b0402f6e42b9bf2438acc">More...</a><br /></td></tr>
<tr class="separator:gab544b2e14e9b0402f6e42b9bf2438acc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c557aff48312c37b62c9a4234d5cb0d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga8c557aff48312c37b62c9a4234d5cb0d">operator-</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8c557aff48312c37b62c9a4234d5cb0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga8c557aff48312c37b62c9a4234d5cb0d">More...</a><br /></td></tr>
<tr class="separator:ga8c557aff48312c37b62c9a4234d5cb0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6448a1872c20e26c693194f9c092c3c1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga6448a1872c20e26c693194f9c092c3c1">operator-</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6448a1872c20e26c693194f9c092c3c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga6448a1872c20e26c693194f9c092c3c1">More...</a><br /></td></tr>
<tr class="separator:ga6448a1872c20e26c693194f9c092c3c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad9e69afb1b6ef5e71b33b7fbcbdf1330"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gad9e69afb1b6ef5e71b33b7fbcbdf1330">operator-</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad9e69afb1b6ef5e71b33b7fbcbdf1330"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gad9e69afb1b6ef5e71b33b7fbcbdf1330">More...</a><br /></td></tr>
<tr class="separator:gad9e69afb1b6ef5e71b33b7fbcbdf1330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga787e799774ce604b10d20dcac596bb5f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga787e799774ce604b10d20dcac596bb5f">operator-</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga787e799774ce604b10d20dcac596bb5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga787e799774ce604b10d20dcac596bb5f">More...</a><br /></td></tr>
<tr class="separator:ga787e799774ce604b10d20dcac596bb5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e6631a64fcf62f0c52cde0e13f60428"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga0e6631a64fcf62f0c52cde0e13f60428">operator-</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga0e6631a64fcf62f0c52cde0e13f60428"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga0e6631a64fcf62f0c52cde0e13f60428">More...</a><br /></td></tr>
<tr class="separator:ga0e6631a64fcf62f0c52cde0e13f60428"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4216859e701eb731e1512d70d25d7ef1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga4216859e701eb731e1512d70d25d7ef1">operator-</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4216859e701eb731e1512d70d25d7ef1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga4216859e701eb731e1512d70d25d7ef1">More...</a><br /></td></tr>
<tr class="separator:ga4216859e701eb731e1512d70d25d7ef1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeb05b2a93e4d8eb069e4e5f666b485fd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gaeb05b2a93e4d8eb069e4e5f666b485fd">operator-</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaeb05b2a93e4d8eb069e4e5f666b485fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gaeb05b2a93e4d8eb069e4e5f666b485fd">More...</a><br /></td></tr>
<tr class="separator:gaeb05b2a93e4d8eb069e4e5f666b485fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9bb1d13b317289dab357e73afc4f4fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gae9bb1d13b317289dab357e73afc4f4fb">operator-</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae9bb1d13b317289dab357e73afc4f4fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gae9bb1d13b317289dab357e73afc4f4fb">More...</a><br /></td></tr>
<tr class="separator:gae9bb1d13b317289dab357e73afc4f4fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf051829f848b76a5b80908c41b67b076"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gaf051829f848b76a5b80908c41b67b076">operator-</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf051829f848b76a5b80908c41b67b076"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gaf051829f848b76a5b80908c41b67b076">More...</a><br /></td></tr>
<tr class="separator:gaf051829f848b76a5b80908c41b67b076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b95e08cea8e1c0381fe81c24cdc6aa1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga2b95e08cea8e1c0381fe81c24cdc6aa1">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga2b95e08cea8e1c0381fe81c24cdc6aa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga2b95e08cea8e1c0381fe81c24cdc6aa1">More...</a><br /></td></tr>
<tr class="separator:ga2b95e08cea8e1c0381fe81c24cdc6aa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68e274c6c0430a580e748204f09094cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga68e274c6c0430a580e748204f09094cd">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga68e274c6c0430a580e748204f09094cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga68e274c6c0430a580e748204f09094cd">More...</a><br /></td></tr>
<tr class="separator:ga68e274c6c0430a580e748204f09094cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6073e70f61124322588f05bc46643fed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga6073e70f61124322588f05bc46643fed">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga6073e70f61124322588f05bc46643fed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga6073e70f61124322588f05bc46643fed">More...</a><br /></td></tr>
<tr class="separator:ga6073e70f61124322588f05bc46643fed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9cf4553b34cdbb3176f1f51a1fc988e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga9cf4553b34cdbb3176f1f51a1fc988e8">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga9cf4553b34cdbb3176f1f51a1fc988e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga9cf4553b34cdbb3176f1f51a1fc988e8">More...</a><br /></td></tr>
<tr class="separator:ga9cf4553b34cdbb3176f1f51a1fc988e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga761a1b8fc2a0f8f6f89846618eea72b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga761a1b8fc2a0f8f6f89846618eea72b7">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga761a1b8fc2a0f8f6f89846618eea72b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga761a1b8fc2a0f8f6f89846618eea72b7">More...</a><br /></td></tr>
<tr class="separator:ga761a1b8fc2a0f8f6f89846618eea72b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f2875deebf646134736b70d3af51d98"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga1f2875deebf646134736b70d3af51d98">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga1f2875deebf646134736b70d3af51d98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga1f2875deebf646134736b70d3af51d98">More...</a><br /></td></tr>
<tr class="separator:ga1f2875deebf646134736b70d3af51d98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5be00fcf698a3f38d75810f25f85421b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga5be00fcf698a3f38d75810f25f85421b">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga5be00fcf698a3f38d75810f25f85421b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga5be00fcf698a3f38d75810f25f85421b">More...</a><br /></td></tr>
<tr class="separator:ga5be00fcf698a3f38d75810f25f85421b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaae1dd361598d06e9f78dd96eb264b72"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gaaae1dd361598d06e9f78dd96eb264b72">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gaaae1dd361598d06e9f78dd96eb264b72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gaaae1dd361598d06e9f78dd96eb264b72">More...</a><br /></td></tr>
<tr class="separator:gaaae1dd361598d06e9f78dd96eb264b72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3fe7874bde2e8c8c6280559af6bab61"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gaf3fe7874bde2e8c8c6280559af6bab61">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gaf3fe7874bde2e8c8c6280559af6bab61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gaf3fe7874bde2e8c8c6280559af6bab61">More...</a><br /></td></tr>
<tr class="separator:gaf3fe7874bde2e8c8c6280559af6bab61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf029c32567fbd9556896c865341d7561"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gaf029c32567fbd9556896c865341d7561">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:gaf029c32567fbd9556896c865341d7561"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gaf029c32567fbd9556896c865341d7561">More...</a><br /></td></tr>
<tr class="separator:gaf029c32567fbd9556896c865341d7561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga43e598427aeb0e9f2f7de5a61797abc2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga43e598427aeb0e9f2f7de5a61797abc2">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga43e598427aeb0e9f2f7de5a61797abc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga43e598427aeb0e9f2f7de5a61797abc2">More...</a><br /></td></tr>
<tr class="separator:ga43e598427aeb0e9f2f7de5a61797abc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d19cac56b4653f554564eace7b1ad8d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga6d19cac56b4653f554564eace7b1ad8d">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6d19cac56b4653f554564eace7b1ad8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga6d19cac56b4653f554564eace7b1ad8d">More...</a><br /></td></tr>
<tr class="separator:ga6d19cac56b4653f554564eace7b1ad8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga192af477f22c8eaa1ae38b4135fedba2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga192af477f22c8eaa1ae38b4135fedba2">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga192af477f22c8eaa1ae38b4135fedba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae3511ffe8feeb3011ab027fd39f933ab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gae3511ffe8feeb3011ab027fd39f933ab">operator-</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae3511ffe8feeb3011ab027fd39f933ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#gae3511ffe8feeb3011ab027fd39f933ab">More...</a><br /></td></tr>
<tr class="separator:gae3511ffe8feeb3011ab027fd39f933ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8f787a117994d8e3b51440350530f3e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga8f787a117994d8e3b51440350530f3e2">operator-</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8f787a117994d8e3b51440350530f3e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga8f787a117994d8e3b51440350530f3e2">More...</a><br /></td></tr>
<tr class="separator:ga8f787a117994d8e3b51440350530f3e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5467af3b6562f75aaf821b1e60f22f4c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga5467af3b6562f75aaf821b1e60f22f4c">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga5467af3b6562f75aaf821b1e60f22f4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts two arrays or an array and a value.   <a href="group__arith__func__sub.htm#ga5467af3b6562f75aaf821b1e60f22f4c">More...</a><br /></td></tr>
<tr class="separator:ga5467af3b6562f75aaf821b1e60f22f4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad3247960c06b434d106eeb128929ae2e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#gad3247960c06b434d106eeb128929ae2e">operator-</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gad3247960c06b434d106eeb128929ae2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga90c245863eb9dec4930c8b0c5cb400aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga90c245863eb9dec4930c8b0c5cb400aa">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga90c245863eb9dec4930c8b0c5cb400aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.  <a href="group__arith__func__mul.htm#ga90c245863eb9dec4930c8b0c5cb400aa">More...</a><br /></td></tr>
<tr class="separator:ga90c245863eb9dec4930c8b0c5cb400aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac7a1654e00181341aac3a25ffb3689f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gaac7a1654e00181341aac3a25ffb3689f">operator*</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaac7a1654e00181341aac3a25ffb3689f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gaac7a1654e00181341aac3a25ffb3689f">More...</a><br /></td></tr>
<tr class="separator:gaac7a1654e00181341aac3a25ffb3689f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8d243b0d851a1e59fa253bce62daf92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gab8d243b0d851a1e59fa253bce62daf92">operator*</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab8d243b0d851a1e59fa253bce62daf92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gab8d243b0d851a1e59fa253bce62daf92">More...</a><br /></td></tr>
<tr class="separator:gab8d243b0d851a1e59fa253bce62daf92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d7b284fb3dee8bbc24753128015106b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga5d7b284fb3dee8bbc24753128015106b">operator*</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5d7b284fb3dee8bbc24753128015106b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga5d7b284fb3dee8bbc24753128015106b">More...</a><br /></td></tr>
<tr class="separator:ga5d7b284fb3dee8bbc24753128015106b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga93058240610343bb4e1db0e08b6e40ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga93058240610343bb4e1db0e08b6e40ac">operator*</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga93058240610343bb4e1db0e08b6e40ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga93058240610343bb4e1db0e08b6e40ac">More...</a><br /></td></tr>
<tr class="separator:ga93058240610343bb4e1db0e08b6e40ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7da5272a3d6037debcd6ff0e4360c028"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga7da5272a3d6037debcd6ff0e4360c028">operator*</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7da5272a3d6037debcd6ff0e4360c028"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga7da5272a3d6037debcd6ff0e4360c028">More...</a><br /></td></tr>
<tr class="separator:ga7da5272a3d6037debcd6ff0e4360c028"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8797658c5673f262c6600b7008f2f347"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga8797658c5673f262c6600b7008f2f347">operator*</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8797658c5673f262c6600b7008f2f347"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga8797658c5673f262c6600b7008f2f347">More...</a><br /></td></tr>
<tr class="separator:ga8797658c5673f262c6600b7008f2f347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc5e5b970def587606bc8de0308ee47a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gafc5e5b970def587606bc8de0308ee47a">operator*</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gafc5e5b970def587606bc8de0308ee47a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gafc5e5b970def587606bc8de0308ee47a">More...</a><br /></td></tr>
<tr class="separator:gafc5e5b970def587606bc8de0308ee47a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0a6264b28bdeeed7edbdd220e74d6d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gae0a6264b28bdeeed7edbdd220e74d6d7">operator*</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae0a6264b28bdeeed7edbdd220e74d6d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gae0a6264b28bdeeed7edbdd220e74d6d7">More...</a><br /></td></tr>
<tr class="separator:gae0a6264b28bdeeed7edbdd220e74d6d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga051be2573d48f7bf0bb306fc63ce3b19"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga051be2573d48f7bf0bb306fc63ce3b19">operator*</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga051be2573d48f7bf0bb306fc63ce3b19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga051be2573d48f7bf0bb306fc63ce3b19">More...</a><br /></td></tr>
<tr class="separator:ga051be2573d48f7bf0bb306fc63ce3b19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5641dc5a9d13cb3641fe7609e898eec6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga5641dc5a9d13cb3641fe7609e898eec6">operator*</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5641dc5a9d13cb3641fe7609e898eec6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga5641dc5a9d13cb3641fe7609e898eec6">More...</a><br /></td></tr>
<tr class="separator:ga5641dc5a9d13cb3641fe7609e898eec6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1249b8c4c07d51c127155412f25c6f12"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga1249b8c4c07d51c127155412f25c6f12">operator*</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga1249b8c4c07d51c127155412f25c6f12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga1249b8c4c07d51c127155412f25c6f12">More...</a><br /></td></tr>
<tr class="separator:ga1249b8c4c07d51c127155412f25c6f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4aaaced148b8c9ba4839cf2ba7a7d75c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga4aaaced148b8c9ba4839cf2ba7a7d75c">operator*</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4aaaced148b8c9ba4839cf2ba7a7d75c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga4aaaced148b8c9ba4839cf2ba7a7d75c">More...</a><br /></td></tr>
<tr class="separator:ga4aaaced148b8c9ba4839cf2ba7a7d75c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7f61ec410c7a3183db5ee7ccb4ce690"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gac7f61ec410c7a3183db5ee7ccb4ce690">operator*</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac7f61ec410c7a3183db5ee7ccb4ce690"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gac7f61ec410c7a3183db5ee7ccb4ce690">More...</a><br /></td></tr>
<tr class="separator:gac7f61ec410c7a3183db5ee7ccb4ce690"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba3e044bc82f432a69275fd26e74a834"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gaba3e044bc82f432a69275fd26e74a834">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gaba3e044bc82f432a69275fd26e74a834"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gaba3e044bc82f432a69275fd26e74a834">More...</a><br /></td></tr>
<tr class="separator:gaba3e044bc82f432a69275fd26e74a834"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc88ea10d3d1fb29c2c3b8d29736c808"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gabc88ea10d3d1fb29c2c3b8d29736c808">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:gabc88ea10d3d1fb29c2c3b8d29736c808"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gabc88ea10d3d1fb29c2c3b8d29736c808">More...</a><br /></td></tr>
<tr class="separator:gabc88ea10d3d1fb29c2c3b8d29736c808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8610b04b3541b807f8268737e396c1db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga8610b04b3541b807f8268737e396c1db">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga8610b04b3541b807f8268737e396c1db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga8610b04b3541b807f8268737e396c1db">More...</a><br /></td></tr>
<tr class="separator:ga8610b04b3541b807f8268737e396c1db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga97f49d4213f7cdc984d07e815d7cedd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga97f49d4213f7cdc984d07e815d7cedd2">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga97f49d4213f7cdc984d07e815d7cedd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga97f49d4213f7cdc984d07e815d7cedd2">More...</a><br /></td></tr>
<tr class="separator:ga97f49d4213f7cdc984d07e815d7cedd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f68bc574b1da82ec869fff588d860fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga1f68bc574b1da82ec869fff588d860fe">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga1f68bc574b1da82ec869fff588d860fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga1f68bc574b1da82ec869fff588d860fe">More...</a><br /></td></tr>
<tr class="separator:ga1f68bc574b1da82ec869fff588d860fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38504acedd1944e5179f3c90f7b5b174"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga38504acedd1944e5179f3c90f7b5b174">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga38504acedd1944e5179f3c90f7b5b174"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga38504acedd1944e5179f3c90f7b5b174">More...</a><br /></td></tr>
<tr class="separator:ga38504acedd1944e5179f3c90f7b5b174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f57e9ac04ed269ba5f32e8319dd9f5f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga0f57e9ac04ed269ba5f32e8319dd9f5f">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga0f57e9ac04ed269ba5f32e8319dd9f5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga0f57e9ac04ed269ba5f32e8319dd9f5f">More...</a><br /></td></tr>
<tr class="separator:ga0f57e9ac04ed269ba5f32e8319dd9f5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb52ece3e88e3fc597d34d06f42977e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gadb52ece3e88e3fc597d34d06f42977e2">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gadb52ece3e88e3fc597d34d06f42977e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gadb52ece3e88e3fc597d34d06f42977e2">More...</a><br /></td></tr>
<tr class="separator:gadb52ece3e88e3fc597d34d06f42977e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae55ccde9fa4dba7dc0f3e53ff9d95961"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gae55ccde9fa4dba7dc0f3e53ff9d95961">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gae55ccde9fa4dba7dc0f3e53ff9d95961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gae55ccde9fa4dba7dc0f3e53ff9d95961">More...</a><br /></td></tr>
<tr class="separator:gae55ccde9fa4dba7dc0f3e53ff9d95961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab7729525bd9e03ea6c795520d883b719"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gab7729525bd9e03ea6c795520d883b719">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:gab7729525bd9e03ea6c795520d883b719"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gab7729525bd9e03ea6c795520d883b719">More...</a><br /></td></tr>
<tr class="separator:gab7729525bd9e03ea6c795520d883b719"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b6489b2b7aa2f1c798e6dba42f1e283"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga4b6489b2b7aa2f1c798e6dba42f1e283">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga4b6489b2b7aa2f1c798e6dba42f1e283"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga4b6489b2b7aa2f1c798e6dba42f1e283">More...</a><br /></td></tr>
<tr class="separator:ga4b6489b2b7aa2f1c798e6dba42f1e283"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee4fe51e0d5bf012b0b275d9a0925133"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gaee4fe51e0d5bf012b0b275d9a0925133">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaee4fe51e0d5bf012b0b275d9a0925133"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gaee4fe51e0d5bf012b0b275d9a0925133">More...</a><br /></td></tr>
<tr class="separator:gaee4fe51e0d5bf012b0b275d9a0925133"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga591ac9049e96d529c9cbb26781eade95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga591ac9049e96d529c9cbb26781eade95">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga591ac9049e96d529c9cbb26781eade95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74f2658ff8a3780fa4e99089a23f47bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga74f2658ff8a3780fa4e99089a23f47bc">operator*</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga74f2658ff8a3780fa4e99089a23f47bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga74f2658ff8a3780fa4e99089a23f47bc">More...</a><br /></td></tr>
<tr class="separator:ga74f2658ff8a3780fa4e99089a23f47bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga747a75695ef5a017c10f6f90f6c258d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga747a75695ef5a017c10f6f90f6c258d8">operator*</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga747a75695ef5a017c10f6f90f6c258d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga747a75695ef5a017c10f6f90f6c258d8">More...</a><br /></td></tr>
<tr class="separator:ga747a75695ef5a017c10f6f90f6c258d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32d5a9dd384214e5e53d3a574ba97c76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga32d5a9dd384214e5e53d3a574ba97c76">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga32d5a9dd384214e5e53d3a574ba97c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga32d5a9dd384214e5e53d3a574ba97c76">More...</a><br /></td></tr>
<tr class="separator:ga32d5a9dd384214e5e53d3a574ba97c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c8bdba20fe1ac44b9837833f5326ca7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga8c8bdba20fe1ac44b9837833f5326ca7">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga8c8bdba20fe1ac44b9837833f5326ca7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gac7a9219fcd1bbba9c0434517597d31f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gac7a9219fcd1bbba9c0434517597d31f9">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac7a9219fcd1bbba9c0434517597d31f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.  <a href="group__arith__func__div.htm#gac7a9219fcd1bbba9c0434517597d31f9">More...</a><br /></td></tr>
<tr class="separator:gac7a9219fcd1bbba9c0434517597d31f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga88549b63504e5a03ac9a952746cbaadd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga88549b63504e5a03ac9a952746cbaadd">operator/</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga88549b63504e5a03ac9a952746cbaadd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga88549b63504e5a03ac9a952746cbaadd">More...</a><br /></td></tr>
<tr class="separator:ga88549b63504e5a03ac9a952746cbaadd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11ede17c49eb79aa4949de2725583a9a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga11ede17c49eb79aa4949de2725583a9a">operator/</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga11ede17c49eb79aa4949de2725583a9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga11ede17c49eb79aa4949de2725583a9a">More...</a><br /></td></tr>
<tr class="separator:ga11ede17c49eb79aa4949de2725583a9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2521511e74c4a3473c46eb1ac785dc3a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga2521511e74c4a3473c46eb1ac785dc3a">operator/</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2521511e74c4a3473c46eb1ac785dc3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga2521511e74c4a3473c46eb1ac785dc3a">More...</a><br /></td></tr>
<tr class="separator:ga2521511e74c4a3473c46eb1ac785dc3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8dfc1ecd97920c6e5ee9f15f3f0e45f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga8dfc1ecd97920c6e5ee9f15f3f0e45f1">operator/</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8dfc1ecd97920c6e5ee9f15f3f0e45f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga8dfc1ecd97920c6e5ee9f15f3f0e45f1">More...</a><br /></td></tr>
<tr class="separator:ga8dfc1ecd97920c6e5ee9f15f3f0e45f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7ff040825dcd81d626759dd0ca9461f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gad7ff040825dcd81d626759dd0ca9461f">operator/</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad7ff040825dcd81d626759dd0ca9461f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gad7ff040825dcd81d626759dd0ca9461f">More...</a><br /></td></tr>
<tr class="separator:gad7ff040825dcd81d626759dd0ca9461f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3bbf8b911c33a9f807fe87ae8aa85076"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga3bbf8b911c33a9f807fe87ae8aa85076">operator/</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga3bbf8b911c33a9f807fe87ae8aa85076"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga3bbf8b911c33a9f807fe87ae8aa85076">More...</a><br /></td></tr>
<tr class="separator:ga3bbf8b911c33a9f807fe87ae8aa85076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga13eb6566125c03361397c7034a5c3a3b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga13eb6566125c03361397c7034a5c3a3b">operator/</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga13eb6566125c03361397c7034a5c3a3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga13eb6566125c03361397c7034a5c3a3b">More...</a><br /></td></tr>
<tr class="separator:ga13eb6566125c03361397c7034a5c3a3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga43a09070fb51fcbf7477bdc2964e7816"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga43a09070fb51fcbf7477bdc2964e7816">operator/</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga43a09070fb51fcbf7477bdc2964e7816"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga43a09070fb51fcbf7477bdc2964e7816">More...</a><br /></td></tr>
<tr class="separator:ga43a09070fb51fcbf7477bdc2964e7816"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaa15d1ff741a42685c44249d3d5309ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gaaa15d1ff741a42685c44249d3d5309ea">operator/</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaaa15d1ff741a42685c44249d3d5309ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gaaa15d1ff741a42685c44249d3d5309ea">More...</a><br /></td></tr>
<tr class="separator:gaaa15d1ff741a42685c44249d3d5309ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8192587f54a219759ca533e4ab75c464"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga8192587f54a219759ca533e4ab75c464">operator/</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8192587f54a219759ca533e4ab75c464"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga8192587f54a219759ca533e4ab75c464">More...</a><br /></td></tr>
<tr class="separator:ga8192587f54a219759ca533e4ab75c464"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f0f8e472ba7acd544c6cf4860b08064"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga6f0f8e472ba7acd544c6cf4860b08064">operator/</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6f0f8e472ba7acd544c6cf4860b08064"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga6f0f8e472ba7acd544c6cf4860b08064">More...</a><br /></td></tr>
<tr class="separator:ga6f0f8e472ba7acd544c6cf4860b08064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5eb9bce7a9a472d7389206f083a512bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga5eb9bce7a9a472d7389206f083a512bb">operator/</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5eb9bce7a9a472d7389206f083a512bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga5eb9bce7a9a472d7389206f083a512bb">More...</a><br /></td></tr>
<tr class="separator:ga5eb9bce7a9a472d7389206f083a512bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8ecd3e3b8d80fdecd9112ca8643222b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga8ecd3e3b8d80fdecd9112ca8643222b6">operator/</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8ecd3e3b8d80fdecd9112ca8643222b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga8ecd3e3b8d80fdecd9112ca8643222b6">More...</a><br /></td></tr>
<tr class="separator:ga8ecd3e3b8d80fdecd9112ca8643222b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4859157798bfdd81b857aa0557c9d32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gab4859157798bfdd81b857aa0557c9d32">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gab4859157798bfdd81b857aa0557c9d32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gab4859157798bfdd81b857aa0557c9d32">More...</a><br /></td></tr>
<tr class="separator:gab4859157798bfdd81b857aa0557c9d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1ed6293b46357914802f25244b014567"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga1ed6293b46357914802f25244b014567">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga1ed6293b46357914802f25244b014567"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga1ed6293b46357914802f25244b014567">More...</a><br /></td></tr>
<tr class="separator:ga1ed6293b46357914802f25244b014567"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaffd94b99847ae639f27d172db6b12323"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gaffd94b99847ae639f27d172db6b12323">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:gaffd94b99847ae639f27d172db6b12323"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gaffd94b99847ae639f27d172db6b12323">More...</a><br /></td></tr>
<tr class="separator:gaffd94b99847ae639f27d172db6b12323"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf6c762f308633eab3a159d45be19bc8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gaf6c762f308633eab3a159d45be19bc8a">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:gaf6c762f308633eab3a159d45be19bc8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gaf6c762f308633eab3a159d45be19bc8a">More...</a><br /></td></tr>
<tr class="separator:gaf6c762f308633eab3a159d45be19bc8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad13f72d4bd5930670943df280d236db7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gad13f72d4bd5930670943df280d236db7">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:gad13f72d4bd5930670943df280d236db7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gad13f72d4bd5930670943df280d236db7">More...</a><br /></td></tr>
<tr class="separator:gad13f72d4bd5930670943df280d236db7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6445d5b69ed9fd523d840588d6f2b710"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga6445d5b69ed9fd523d840588d6f2b710">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga6445d5b69ed9fd523d840588d6f2b710"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga6445d5b69ed9fd523d840588d6f2b710">More...</a><br /></td></tr>
<tr class="separator:ga6445d5b69ed9fd523d840588d6f2b710"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5ad2f1264bc67e3059fe6c52b7c9fb3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gae5ad2f1264bc67e3059fe6c52b7c9fb3">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:gae5ad2f1264bc67e3059fe6c52b7c9fb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gae5ad2f1264bc67e3059fe6c52b7c9fb3">More...</a><br /></td></tr>
<tr class="separator:gae5ad2f1264bc67e3059fe6c52b7c9fb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa4f3f4eca02c1b60df99d814a944ee74"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gaa4f3f4eca02c1b60df99d814a944ee74">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gaa4f3f4eca02c1b60df99d814a944ee74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gaa4f3f4eca02c1b60df99d814a944ee74">More...</a><br /></td></tr>
<tr class="separator:gaa4f3f4eca02c1b60df99d814a944ee74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacc4587a45147f264416395dce6a1e7cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gacc4587a45147f264416395dce6a1e7cd">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gacc4587a45147f264416395dce6a1e7cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gacc4587a45147f264416395dce6a1e7cd">More...</a><br /></td></tr>
<tr class="separator:gacc4587a45147f264416395dce6a1e7cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2806dcf22803b5b48428b0722f8332fc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga2806dcf22803b5b48428b0722f8332fc">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga2806dcf22803b5b48428b0722f8332fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga2806dcf22803b5b48428b0722f8332fc">More...</a><br /></td></tr>
<tr class="separator:ga2806dcf22803b5b48428b0722f8332fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf83133a2448c09e9badaf3f0d6bf70bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gaf83133a2448c09e9badaf3f0d6bf70bc">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:gaf83133a2448c09e9badaf3f0d6bf70bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gaf83133a2448c09e9badaf3f0d6bf70bc">More...</a><br /></td></tr>
<tr class="separator:gaf83133a2448c09e9badaf3f0d6bf70bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3df79e8bfe8bc183beeb0e9788c3f657"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga3df79e8bfe8bc183beeb0e9788c3f657">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga3df79e8bfe8bc183beeb0e9788c3f657"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga3df79e8bfe8bc183beeb0e9788c3f657">More...</a><br /></td></tr>
<tr class="separator:ga3df79e8bfe8bc183beeb0e9788c3f657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga67e05f1b3d6fa5601ad8531218dd3087"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga67e05f1b3d6fa5601ad8531218dd3087">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga67e05f1b3d6fa5601ad8531218dd3087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae6547556f9d0ff3e5e7cde6b6525ff2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gae6547556f9d0ff3e5e7cde6b6525ff2f">operator/</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae6547556f9d0ff3e5e7cde6b6525ff2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#gae6547556f9d0ff3e5e7cde6b6525ff2f">More...</a><br /></td></tr>
<tr class="separator:gae6547556f9d0ff3e5e7cde6b6525ff2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04bd4faedee476392a2c968071d12cfa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga04bd4faedee476392a2c968071d12cfa">operator/</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga04bd4faedee476392a2c968071d12cfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga04bd4faedee476392a2c968071d12cfa">More...</a><br /></td></tr>
<tr class="separator:ga04bd4faedee476392a2c968071d12cfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f245e59c31cabb009d18da6a1a62631"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga9f245e59c31cabb009d18da6a1a62631">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga9f245e59c31cabb009d18da6a1a62631"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides two arrays or an array and a value.   <a href="group__arith__func__div.htm#ga9f245e59c31cabb009d18da6a1a62631">More...</a><br /></td></tr>
<tr class="separator:ga9f245e59c31cabb009d18da6a1a62631"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae3b8cb05fbad3680b14eeea657eca42e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#gae3b8cb05fbad3680b14eeea657eca42e">operator/</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gae3b8cb05fbad3680b14eeea657eca42e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gaa06c948dd656312c23268d11ad8773e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaa06c948dd656312c23268d11ad8773e9">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa06c948dd656312c23268d11ad8773e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.  <a href="group__arith__func__eq.htm#gaa06c948dd656312c23268d11ad8773e9">More...</a><br /></td></tr>
<tr class="separator:gaa06c948dd656312c23268d11ad8773e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa45c66739a3539627f5e61cd0a5921f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaa45c66739a3539627f5e61cd0a5921f9">operator==</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa45c66739a3539627f5e61cd0a5921f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gaa45c66739a3539627f5e61cd0a5921f9">More...</a><br /></td></tr>
<tr class="separator:gaa45c66739a3539627f5e61cd0a5921f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63a7b53ce6700b22e00c68bee164484f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga63a7b53ce6700b22e00c68bee164484f">operator==</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga63a7b53ce6700b22e00c68bee164484f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga63a7b53ce6700b22e00c68bee164484f">More...</a><br /></td></tr>
<tr class="separator:ga63a7b53ce6700b22e00c68bee164484f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab9be88f20659e084fdd46a4885c67096"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gab9be88f20659e084fdd46a4885c67096">operator==</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab9be88f20659e084fdd46a4885c67096"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gab9be88f20659e084fdd46a4885c67096">More...</a><br /></td></tr>
<tr class="separator:gab9be88f20659e084fdd46a4885c67096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga492b1a27f9c5d7652e66cb28afc17c1d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga492b1a27f9c5d7652e66cb28afc17c1d">operator==</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga492b1a27f9c5d7652e66cb28afc17c1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga492b1a27f9c5d7652e66cb28afc17c1d">More...</a><br /></td></tr>
<tr class="separator:ga492b1a27f9c5d7652e66cb28afc17c1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3a4b28f93498089c339b2a9207ed8edf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga3a4b28f93498089c339b2a9207ed8edf">operator==</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga3a4b28f93498089c339b2a9207ed8edf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga3a4b28f93498089c339b2a9207ed8edf">More...</a><br /></td></tr>
<tr class="separator:ga3a4b28f93498089c339b2a9207ed8edf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga847be211f66a170690a090e99080965b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga847be211f66a170690a090e99080965b">operator==</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga847be211f66a170690a090e99080965b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga847be211f66a170690a090e99080965b">More...</a><br /></td></tr>
<tr class="separator:ga847be211f66a170690a090e99080965b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0ab2385db6ddd4193c2a95b8695f3f72"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga0ab2385db6ddd4193c2a95b8695f3f72">operator==</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga0ab2385db6ddd4193c2a95b8695f3f72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga0ab2385db6ddd4193c2a95b8695f3f72">More...</a><br /></td></tr>
<tr class="separator:ga0ab2385db6ddd4193c2a95b8695f3f72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f005066f72173f5ec5985556499adf8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga9f005066f72173f5ec5985556499adf8">operator==</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9f005066f72173f5ec5985556499adf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga9f005066f72173f5ec5985556499adf8">More...</a><br /></td></tr>
<tr class="separator:ga9f005066f72173f5ec5985556499adf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae4f18a25458554583c90d3bdd496fffd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gae4f18a25458554583c90d3bdd496fffd">operator==</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae4f18a25458554583c90d3bdd496fffd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gae4f18a25458554583c90d3bdd496fffd">More...</a><br /></td></tr>
<tr class="separator:gae4f18a25458554583c90d3bdd496fffd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae75f8d37e2c2d150849b8ad7b98973de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gae75f8d37e2c2d150849b8ad7b98973de">operator==</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae75f8d37e2c2d150849b8ad7b98973de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gae75f8d37e2c2d150849b8ad7b98973de">More...</a><br /></td></tr>
<tr class="separator:gae75f8d37e2c2d150849b8ad7b98973de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7d30e99ec171958086e1b58b97253fad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga7d30e99ec171958086e1b58b97253fad">operator==</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7d30e99ec171958086e1b58b97253fad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga7d30e99ec171958086e1b58b97253fad">More...</a><br /></td></tr>
<tr class="separator:ga7d30e99ec171958086e1b58b97253fad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e1265565b6d49b4b1a455cc206dd56d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga8e1265565b6d49b4b1a455cc206dd56d">operator==</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8e1265565b6d49b4b1a455cc206dd56d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga8e1265565b6d49b4b1a455cc206dd56d">More...</a><br /></td></tr>
<tr class="separator:ga8e1265565b6d49b4b1a455cc206dd56d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0993c0211a8a82e13f683a286ed4623c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga0993c0211a8a82e13f683a286ed4623c">operator==</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga0993c0211a8a82e13f683a286ed4623c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga0993c0211a8a82e13f683a286ed4623c">More...</a><br /></td></tr>
<tr class="separator:ga0993c0211a8a82e13f683a286ed4623c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacfb12c26e75c23e3f8528206f8a24159"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gacfb12c26e75c23e3f8528206f8a24159">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gacfb12c26e75c23e3f8528206f8a24159"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gacfb12c26e75c23e3f8528206f8a24159">More...</a><br /></td></tr>
<tr class="separator:gacfb12c26e75c23e3f8528206f8a24159"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3dce3d1bddf17a9e0663bff05263d3d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga3dce3d1bddf17a9e0663bff05263d3d0">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga3dce3d1bddf17a9e0663bff05263d3d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga3dce3d1bddf17a9e0663bff05263d3d0">More...</a><br /></td></tr>
<tr class="separator:ga3dce3d1bddf17a9e0663bff05263d3d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae25a8580de8bbfb27c16b33cd5c49f12"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gae25a8580de8bbfb27c16b33cd5c49f12">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:gae25a8580de8bbfb27c16b33cd5c49f12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gae25a8580de8bbfb27c16b33cd5c49f12">More...</a><br /></td></tr>
<tr class="separator:gae25a8580de8bbfb27c16b33cd5c49f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f885d83af417538cc0b2bebf629ec07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga6f885d83af417538cc0b2bebf629ec07">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga6f885d83af417538cc0b2bebf629ec07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga6f885d83af417538cc0b2bebf629ec07">More...</a><br /></td></tr>
<tr class="separator:ga6f885d83af417538cc0b2bebf629ec07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadc11fea0c5dddb0580a7363c33cce890"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gadc11fea0c5dddb0580a7363c33cce890">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:gadc11fea0c5dddb0580a7363c33cce890"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gadc11fea0c5dddb0580a7363c33cce890">More...</a><br /></td></tr>
<tr class="separator:gadc11fea0c5dddb0580a7363c33cce890"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c825855225f60b39212165d55cfa0ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga4c825855225f60b39212165d55cfa0ad">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga4c825855225f60b39212165d55cfa0ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga4c825855225f60b39212165d55cfa0ad">More...</a><br /></td></tr>
<tr class="separator:ga4c825855225f60b39212165d55cfa0ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7526dde0264b6954901520361eaa4242"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga7526dde0264b6954901520361eaa4242">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga7526dde0264b6954901520361eaa4242"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga7526dde0264b6954901520361eaa4242">More...</a><br /></td></tr>
<tr class="separator:ga7526dde0264b6954901520361eaa4242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d9885754d1efd4b34e9e9701d17b31a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga6d9885754d1efd4b34e9e9701d17b31a">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga6d9885754d1efd4b34e9e9701d17b31a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga6d9885754d1efd4b34e9e9701d17b31a">More...</a><br /></td></tr>
<tr class="separator:ga6d9885754d1efd4b34e9e9701d17b31a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaef618dc7e563e466eb95b76f068b3395"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaef618dc7e563e466eb95b76f068b3395">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gaef618dc7e563e466eb95b76f068b3395"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gaef618dc7e563e466eb95b76f068b3395">More...</a><br /></td></tr>
<tr class="separator:gaef618dc7e563e466eb95b76f068b3395"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae32a1a87c88e059210dddd946e348265"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gae32a1a87c88e059210dddd946e348265">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:gae32a1a87c88e059210dddd946e348265"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gae32a1a87c88e059210dddd946e348265">More...</a><br /></td></tr>
<tr class="separator:gae32a1a87c88e059210dddd946e348265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga021b01c18cffba56d93eb4283a4356bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga021b01c18cffba56d93eb4283a4356bb">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga021b01c18cffba56d93eb4283a4356bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga021b01c18cffba56d93eb4283a4356bb">More...</a><br /></td></tr>
<tr class="separator:ga021b01c18cffba56d93eb4283a4356bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga67716abd9142ed601fb3cff785a906e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga67716abd9142ed601fb3cff785a906e3">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga67716abd9142ed601fb3cff785a906e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga67716abd9142ed601fb3cff785a906e3">More...</a><br /></td></tr>
<tr class="separator:ga67716abd9142ed601fb3cff785a906e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8bb0c5a16fce6f092f645204887daaca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga8bb0c5a16fce6f092f645204887daaca">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga8bb0c5a16fce6f092f645204887daaca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b34f0e0b55d0f26b97f366545522086"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga5b34f0e0b55d0f26b97f366545522086">operator==</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5b34f0e0b55d0f26b97f366545522086"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga5b34f0e0b55d0f26b97f366545522086">More...</a><br /></td></tr>
<tr class="separator:ga5b34f0e0b55d0f26b97f366545522086"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaffff6d5cb2a350c76eac90fea6dc5954"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#gaffff6d5cb2a350c76eac90fea6dc5954">operator==</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaffff6d5cb2a350c76eac90fea6dc5954"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#gaffff6d5cb2a350c76eac90fea6dc5954">More...</a><br /></td></tr>
<tr class="separator:gaffff6d5cb2a350c76eac90fea6dc5954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga975ced74a170856849ed8fbf2e2cbf7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga975ced74a170856849ed8fbf2e2cbf7e">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga975ced74a170856849ed8fbf2e2cbf7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an equality operation on two arrays or an array and a value.   <a href="group__arith__func__eq.htm#ga975ced74a170856849ed8fbf2e2cbf7e">More...</a><br /></td></tr>
<tr class="separator:ga975ced74a170856849ed8fbf2e2cbf7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e351a068a1df168dd3ffcdf7abcccbf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga3e351a068a1df168dd3ffcdf7abcccbf">operator==</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga3e351a068a1df168dd3ffcdf7abcccbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga800463531c9a4d8f81d0e729383ce520"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga800463531c9a4d8f81d0e729383ce520">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga800463531c9a4d8f81d0e729383ce520"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.  <a href="group__arith__func__neq.htm#ga800463531c9a4d8f81d0e729383ce520">More...</a><br /></td></tr>
<tr class="separator:ga800463531c9a4d8f81d0e729383ce520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad84723aa153f67ee4a385a966e5ae255"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gad84723aa153f67ee4a385a966e5ae255">operator!=</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad84723aa153f67ee4a385a966e5ae255"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gad84723aa153f67ee4a385a966e5ae255">More...</a><br /></td></tr>
<tr class="separator:gad84723aa153f67ee4a385a966e5ae255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadc689edd5a6ea078750e771fd7084be1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gadc689edd5a6ea078750e771fd7084be1">operator!=</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gadc689edd5a6ea078750e771fd7084be1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gadc689edd5a6ea078750e771fd7084be1">More...</a><br /></td></tr>
<tr class="separator:gadc689edd5a6ea078750e771fd7084be1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac1e4238dd07e0f1b269822ce65ae306f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gac1e4238dd07e0f1b269822ce65ae306f">operator!=</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac1e4238dd07e0f1b269822ce65ae306f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gac1e4238dd07e0f1b269822ce65ae306f">More...</a><br /></td></tr>
<tr class="separator:gac1e4238dd07e0f1b269822ce65ae306f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac47cbf6387f153f59f2b4d299de26b53"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gac47cbf6387f153f59f2b4d299de26b53">operator!=</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac47cbf6387f153f59f2b4d299de26b53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gac47cbf6387f153f59f2b4d299de26b53">More...</a><br /></td></tr>
<tr class="separator:gac47cbf6387f153f59f2b4d299de26b53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab2fc3cea73accb2a8892df75e1b496d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gab2fc3cea73accb2a8892df75e1b496d4">operator!=</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab2fc3cea73accb2a8892df75e1b496d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gab2fc3cea73accb2a8892df75e1b496d4">More...</a><br /></td></tr>
<tr class="separator:gab2fc3cea73accb2a8892df75e1b496d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe1227023c50f8df272a1880d00d9054"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gabe1227023c50f8df272a1880d00d9054">operator!=</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gabe1227023c50f8df272a1880d00d9054"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gabe1227023c50f8df272a1880d00d9054">More...</a><br /></td></tr>
<tr class="separator:gabe1227023c50f8df272a1880d00d9054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b300aed924275729974003489756591"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga4b300aed924275729974003489756591">operator!=</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4b300aed924275729974003489756591"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga4b300aed924275729974003489756591">More...</a><br /></td></tr>
<tr class="separator:ga4b300aed924275729974003489756591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa03ae66d7dccf6c1db1bf0b9cb7e678b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gaa03ae66d7dccf6c1db1bf0b9cb7e678b">operator!=</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa03ae66d7dccf6c1db1bf0b9cb7e678b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gaa03ae66d7dccf6c1db1bf0b9cb7e678b">More...</a><br /></td></tr>
<tr class="separator:gaa03ae66d7dccf6c1db1bf0b9cb7e678b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga53474985f25e750de2bcecd3e65c94de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga53474985f25e750de2bcecd3e65c94de">operator!=</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga53474985f25e750de2bcecd3e65c94de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga53474985f25e750de2bcecd3e65c94de">More...</a><br /></td></tr>
<tr class="separator:ga53474985f25e750de2bcecd3e65c94de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4084c56b10fb2b3863308a752cfcfa3e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga4084c56b10fb2b3863308a752cfcfa3e">operator!=</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4084c56b10fb2b3863308a752cfcfa3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga4084c56b10fb2b3863308a752cfcfa3e">More...</a><br /></td></tr>
<tr class="separator:ga4084c56b10fb2b3863308a752cfcfa3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3841f402d6229f19e7dc625efad6e14f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga3841f402d6229f19e7dc625efad6e14f">operator!=</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga3841f402d6229f19e7dc625efad6e14f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga3841f402d6229f19e7dc625efad6e14f">More...</a><br /></td></tr>
<tr class="separator:ga3841f402d6229f19e7dc625efad6e14f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34e57ec1821f5fd6bd2e8eee05060376"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga34e57ec1821f5fd6bd2e8eee05060376">operator!=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga34e57ec1821f5fd6bd2e8eee05060376"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga34e57ec1821f5fd6bd2e8eee05060376">More...</a><br /></td></tr>
<tr class="separator:ga34e57ec1821f5fd6bd2e8eee05060376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b75d1b8327cb6aaeff8d8c80bca51a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga9b75d1b8327cb6aaeff8d8c80bca51a4">operator!=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9b75d1b8327cb6aaeff8d8c80bca51a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga9b75d1b8327cb6aaeff8d8c80bca51a4">More...</a><br /></td></tr>
<tr class="separator:ga9b75d1b8327cb6aaeff8d8c80bca51a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga746a0da26fba71ef9f4315f74dcbc054"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga746a0da26fba71ef9f4315f74dcbc054">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga746a0da26fba71ef9f4315f74dcbc054"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga746a0da26fba71ef9f4315f74dcbc054">More...</a><br /></td></tr>
<tr class="separator:ga746a0da26fba71ef9f4315f74dcbc054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga36f195044e8f58ea5fc3d9170497f610"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga36f195044e8f58ea5fc3d9170497f610">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga36f195044e8f58ea5fc3d9170497f610"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga36f195044e8f58ea5fc3d9170497f610">More...</a><br /></td></tr>
<tr class="separator:ga36f195044e8f58ea5fc3d9170497f610"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac86f1f671a502e4941619712c02b6aee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gac86f1f671a502e4941619712c02b6aee">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:gac86f1f671a502e4941619712c02b6aee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gac86f1f671a502e4941619712c02b6aee">More...</a><br /></td></tr>
<tr class="separator:gac86f1f671a502e4941619712c02b6aee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeb795025ad80552e94248c36fbfade65"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gaeb795025ad80552e94248c36fbfade65">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:gaeb795025ad80552e94248c36fbfade65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gaeb795025ad80552e94248c36fbfade65">More...</a><br /></td></tr>
<tr class="separator:gaeb795025ad80552e94248c36fbfade65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae53b3e46b3702449d6021b3e7d26f35d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gae53b3e46b3702449d6021b3e7d26f35d">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:gae53b3e46b3702449d6021b3e7d26f35d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gae53b3e46b3702449d6021b3e7d26f35d">More...</a><br /></td></tr>
<tr class="separator:gae53b3e46b3702449d6021b3e7d26f35d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac1bc83bb0dd35214f84a104be299ebd5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gac1bc83bb0dd35214f84a104be299ebd5">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:gac1bc83bb0dd35214f84a104be299ebd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gac1bc83bb0dd35214f84a104be299ebd5">More...</a><br /></td></tr>
<tr class="separator:gac1bc83bb0dd35214f84a104be299ebd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c10433683449d616c34aa0870671320"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga7c10433683449d616c34aa0870671320">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga7c10433683449d616c34aa0870671320"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga7c10433683449d616c34aa0870671320">More...</a><br /></td></tr>
<tr class="separator:ga7c10433683449d616c34aa0870671320"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8073ab0e098591dea7e9f99039075a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gad8073ab0e098591dea7e9f99039075a8">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gad8073ab0e098591dea7e9f99039075a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gad8073ab0e098591dea7e9f99039075a8">More...</a><br /></td></tr>
<tr class="separator:gad8073ab0e098591dea7e9f99039075a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0bb90f15fd609a4ad875f4255c3ee9bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga0bb90f15fd609a4ad875f4255c3ee9bb">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga0bb90f15fd609a4ad875f4255c3ee9bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga0bb90f15fd609a4ad875f4255c3ee9bb">More...</a><br /></td></tr>
<tr class="separator:ga0bb90f15fd609a4ad875f4255c3ee9bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae70db7a307a503d0d3419ad3d6aedbe6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gae70db7a307a503d0d3419ad3d6aedbe6">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:gae70db7a307a503d0d3419ad3d6aedbe6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gae70db7a307a503d0d3419ad3d6aedbe6">More...</a><br /></td></tr>
<tr class="separator:gae70db7a307a503d0d3419ad3d6aedbe6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf4a6126ec8a3a788a29e06fba43c1649"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gaf4a6126ec8a3a788a29e06fba43c1649">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:gaf4a6126ec8a3a788a29e06fba43c1649"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#gaf4a6126ec8a3a788a29e06fba43c1649">More...</a><br /></td></tr>
<tr class="separator:gaf4a6126ec8a3a788a29e06fba43c1649"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga978a5b73f3409e57161ffc4835fc9096"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga978a5b73f3409e57161ffc4835fc9096">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga978a5b73f3409e57161ffc4835fc9096"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga978a5b73f3409e57161ffc4835fc9096">More...</a><br /></td></tr>
<tr class="separator:ga978a5b73f3409e57161ffc4835fc9096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga117a3599644133025879092ede8133d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga117a3599644133025879092ede8133d5">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga117a3599644133025879092ede8133d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84c9fec763dab117f008109351e0ca1e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga84c9fec763dab117f008109351e0ca1e">operator!=</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga84c9fec763dab117f008109351e0ca1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga84c9fec763dab117f008109351e0ca1e">More...</a><br /></td></tr>
<tr class="separator:ga84c9fec763dab117f008109351e0ca1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga09fb5c97e6ca9af9b5abd623b278be3e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga09fb5c97e6ca9af9b5abd623b278be3e">operator!=</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga09fb5c97e6ca9af9b5abd623b278be3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga09fb5c97e6ca9af9b5abd623b278be3e">More...</a><br /></td></tr>
<tr class="separator:ga09fb5c97e6ca9af9b5abd623b278be3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90c5e9488ec50c0caa22f2690e2a7c0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga90c5e9488ec50c0caa22f2690e2a7c0f">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga90c5e9488ec50c0caa22f2690e2a7c0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an inequality operation on two arrays or an array and a value.   <a href="group__arith__func__neq.htm#ga90c5e9488ec50c0caa22f2690e2a7c0f">More...</a><br /></td></tr>
<tr class="separator:ga90c5e9488ec50c0caa22f2690e2a7c0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2c5c02bb4f3cdd16ab61417ef048b01d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#ga2c5c02bb4f3cdd16ab61417ef048b01d">operator!=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga2c5c02bb4f3cdd16ab61417ef048b01d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga4138eee00096c120e17e4aa8c1f01404"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga4138eee00096c120e17e4aa8c1f01404">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4138eee00096c120e17e4aa8c1f01404"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.  <a href="group__arith__func__lt.htm#ga4138eee00096c120e17e4aa8c1f01404">More...</a><br /></td></tr>
<tr class="separator:ga4138eee00096c120e17e4aa8c1f01404"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9cd7bedc62d32e2971cfdaf7d03665be"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga9cd7bedc62d32e2971cfdaf7d03665be">operator&lt;</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9cd7bedc62d32e2971cfdaf7d03665be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga9cd7bedc62d32e2971cfdaf7d03665be">More...</a><br /></td></tr>
<tr class="separator:ga9cd7bedc62d32e2971cfdaf7d03665be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga458a24c3a3e2d6c3078c1ce6676dc711"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga458a24c3a3e2d6c3078c1ce6676dc711">operator&lt;</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga458a24c3a3e2d6c3078c1ce6676dc711"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga458a24c3a3e2d6c3078c1ce6676dc711">More...</a><br /></td></tr>
<tr class="separator:ga458a24c3a3e2d6c3078c1ce6676dc711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac905d52014880458d7aea322ec8ba361"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gac905d52014880458d7aea322ec8ba361">operator&lt;</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac905d52014880458d7aea322ec8ba361"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gac905d52014880458d7aea322ec8ba361">More...</a><br /></td></tr>
<tr class="separator:gac905d52014880458d7aea322ec8ba361"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab0e97fa05139cfe357f728c92f4946b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gab0e97fa05139cfe357f728c92f4946b8">operator&lt;</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab0e97fa05139cfe357f728c92f4946b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gab0e97fa05139cfe357f728c92f4946b8">More...</a><br /></td></tr>
<tr class="separator:gab0e97fa05139cfe357f728c92f4946b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga021d9de22461f9af8addd1c66d6c2f2e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga021d9de22461f9af8addd1c66d6c2f2e">operator&lt;</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga021d9de22461f9af8addd1c66d6c2f2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga021d9de22461f9af8addd1c66d6c2f2e">More...</a><br /></td></tr>
<tr class="separator:ga021d9de22461f9af8addd1c66d6c2f2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5618e69e001c55a1f9c8f90426787508"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga5618e69e001c55a1f9c8f90426787508">operator&lt;</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5618e69e001c55a1f9c8f90426787508"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga5618e69e001c55a1f9c8f90426787508">More...</a><br /></td></tr>
<tr class="separator:ga5618e69e001c55a1f9c8f90426787508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4c1fb1f9757c63602b170e2946e9343"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gab4c1fb1f9757c63602b170e2946e9343">operator&lt;</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab4c1fb1f9757c63602b170e2946e9343"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gab4c1fb1f9757c63602b170e2946e9343">More...</a><br /></td></tr>
<tr class="separator:gab4c1fb1f9757c63602b170e2946e9343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa786113f71cf98be1f3a62b7d0563b87"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gaa786113f71cf98be1f3a62b7d0563b87">operator&lt;</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa786113f71cf98be1f3a62b7d0563b87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gaa786113f71cf98be1f3a62b7d0563b87">More...</a><br /></td></tr>
<tr class="separator:gaa786113f71cf98be1f3a62b7d0563b87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae84f551a2389e8cd62b4201d660df1b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gae84f551a2389e8cd62b4201d660df1b9">operator&lt;</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae84f551a2389e8cd62b4201d660df1b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gae84f551a2389e8cd62b4201d660df1b9">More...</a><br /></td></tr>
<tr class="separator:gae84f551a2389e8cd62b4201d660df1b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ea3f3ac717f1e63a2e7d34db59aed9a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga4ea3f3ac717f1e63a2e7d34db59aed9a">operator&lt;</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4ea3f3ac717f1e63a2e7d34db59aed9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga4ea3f3ac717f1e63a2e7d34db59aed9a">More...</a><br /></td></tr>
<tr class="separator:ga4ea3f3ac717f1e63a2e7d34db59aed9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7bb3741d4c78797853098bca3cd271f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga7bb3741d4c78797853098bca3cd271f3">operator&lt;</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7bb3741d4c78797853098bca3cd271f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga7bb3741d4c78797853098bca3cd271f3">More...</a><br /></td></tr>
<tr class="separator:ga7bb3741d4c78797853098bca3cd271f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga330a25b5269510ba479c624fecc8ae44"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga330a25b5269510ba479c624fecc8ae44">operator&lt;</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga330a25b5269510ba479c624fecc8ae44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga330a25b5269510ba479c624fecc8ae44">More...</a><br /></td></tr>
<tr class="separator:ga330a25b5269510ba479c624fecc8ae44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83930be47f60ee943f3fae8c5245a118"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga83930be47f60ee943f3fae8c5245a118">operator&lt;</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga83930be47f60ee943f3fae8c5245a118"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga83930be47f60ee943f3fae8c5245a118">More...</a><br /></td></tr>
<tr class="separator:ga83930be47f60ee943f3fae8c5245a118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad2b6bf9f6a557116c6139fb9320d5f0a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gad2b6bf9f6a557116c6139fb9320d5f0a">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gad2b6bf9f6a557116c6139fb9320d5f0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gad2b6bf9f6a557116c6139fb9320d5f0a">More...</a><br /></td></tr>
<tr class="separator:gad2b6bf9f6a557116c6139fb9320d5f0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga079132c99ee5d0dabe730c3b9293b9e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga079132c99ee5d0dabe730c3b9293b9e9">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga079132c99ee5d0dabe730c3b9293b9e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga079132c99ee5d0dabe730c3b9293b9e9">More...</a><br /></td></tr>
<tr class="separator:ga079132c99ee5d0dabe730c3b9293b9e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga18f16603d37068ccba725f160179e9a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga18f16603d37068ccba725f160179e9a2">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga18f16603d37068ccba725f160179e9a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga18f16603d37068ccba725f160179e9a2">More...</a><br /></td></tr>
<tr class="separator:ga18f16603d37068ccba725f160179e9a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga97e977c6313d195468f6cadd68e92cb1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga97e977c6313d195468f6cadd68e92cb1">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga97e977c6313d195468f6cadd68e92cb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga97e977c6313d195468f6cadd68e92cb1">More...</a><br /></td></tr>
<tr class="separator:ga97e977c6313d195468f6cadd68e92cb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga33d4a071930a00722dc682e459600b49"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga33d4a071930a00722dc682e459600b49">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga33d4a071930a00722dc682e459600b49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga33d4a071930a00722dc682e459600b49">More...</a><br /></td></tr>
<tr class="separator:ga33d4a071930a00722dc682e459600b49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac76add45106dcb20e9d129ff78f7da23"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gac76add45106dcb20e9d129ff78f7da23">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:gac76add45106dcb20e9d129ff78f7da23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gac76add45106dcb20e9d129ff78f7da23">More...</a><br /></td></tr>
<tr class="separator:gac76add45106dcb20e9d129ff78f7da23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e6897058045eb8fb5f2397b5d7ce36c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga0e6897058045eb8fb5f2397b5d7ce36c">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga0e6897058045eb8fb5f2397b5d7ce36c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga0e6897058045eb8fb5f2397b5d7ce36c">More...</a><br /></td></tr>
<tr class="separator:ga0e6897058045eb8fb5f2397b5d7ce36c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab7a2d6131053b07fd94b4baa3896f4f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gab7a2d6131053b07fd94b4baa3896f4f9">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gab7a2d6131053b07fd94b4baa3896f4f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gab7a2d6131053b07fd94b4baa3896f4f9">More...</a><br /></td></tr>
<tr class="separator:gab7a2d6131053b07fd94b4baa3896f4f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15510fd212e4032ed10683d58a86414d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga15510fd212e4032ed10683d58a86414d">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga15510fd212e4032ed10683d58a86414d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga15510fd212e4032ed10683d58a86414d">More...</a><br /></td></tr>
<tr class="separator:ga15510fd212e4032ed10683d58a86414d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34f745203cab1ff96f9c9ea5066b249b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga34f745203cab1ff96f9c9ea5066b249b">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga34f745203cab1ff96f9c9ea5066b249b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga34f745203cab1ff96f9c9ea5066b249b">More...</a><br /></td></tr>
<tr class="separator:ga34f745203cab1ff96f9c9ea5066b249b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f0e238c546bfc95fd19e8a78c0fbba8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga6f0e238c546bfc95fd19e8a78c0fbba8">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga6f0e238c546bfc95fd19e8a78c0fbba8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga6f0e238c546bfc95fd19e8a78c0fbba8">More...</a><br /></td></tr>
<tr class="separator:ga6f0e238c546bfc95fd19e8a78c0fbba8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacc866a0eceeef9d130bdaeca1e180dfb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gacc866a0eceeef9d130bdaeca1e180dfb">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gacc866a0eceeef9d130bdaeca1e180dfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#gacc866a0eceeef9d130bdaeca1e180dfb">More...</a><br /></td></tr>
<tr class="separator:gacc866a0eceeef9d130bdaeca1e180dfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b5893fe7cf01ff7f4621939befc9922"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga4b5893fe7cf01ff7f4621939befc9922">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga4b5893fe7cf01ff7f4621939befc9922"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a7e8a4fd759fe00417dd599bf3d41ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga6a7e8a4fd759fe00417dd599bf3d41ee">operator&lt;</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6a7e8a4fd759fe00417dd599bf3d41ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga6a7e8a4fd759fe00417dd599bf3d41ee">More...</a><br /></td></tr>
<tr class="separator:ga6a7e8a4fd759fe00417dd599bf3d41ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga89a4c0b8c261e282b7c6b9e282769ecb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga89a4c0b8c261e282b7c6b9e282769ecb">operator&lt;</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga89a4c0b8c261e282b7c6b9e282769ecb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga89a4c0b8c261e282b7c6b9e282769ecb">More...</a><br /></td></tr>
<tr class="separator:ga89a4c0b8c261e282b7c6b9e282769ecb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9ce3a4722ee38d04d1b4e3ac5307f652"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#ga9ce3a4722ee38d04d1b4e3ac5307f652">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga9ce3a4722ee38d04d1b4e3ac5307f652"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a lower than operation on two arrays or an array and a value.   <a href="group__arith__func__lt.htm#ga9ce3a4722ee38d04d1b4e3ac5307f652">More...</a><br /></td></tr>
<tr class="separator:ga9ce3a4722ee38d04d1b4e3ac5307f652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5d178905a6baff6c9a69786f58570d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm#gad5d178905a6baff6c9a69786f58570d1">operator&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gad5d178905a6baff6c9a69786f58570d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga63ba21d149d3978f11d95a6c31ed727c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga63ba21d149d3978f11d95a6c31ed727c">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga63ba21d149d3978f11d95a6c31ed727c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.  <a href="group__arith__func__le.htm#ga63ba21d149d3978f11d95a6c31ed727c">More...</a><br /></td></tr>
<tr class="separator:ga63ba21d149d3978f11d95a6c31ed727c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d9c70991d468b40a8378c7f41139b16"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga5d9c70991d468b40a8378c7f41139b16">operator&lt;=</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5d9c70991d468b40a8378c7f41139b16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga5d9c70991d468b40a8378c7f41139b16">More...</a><br /></td></tr>
<tr class="separator:ga5d9c70991d468b40a8378c7f41139b16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01cecc3469325f615318e1299870acd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga01cecc3469325f615318e1299870acd2">operator&lt;=</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga01cecc3469325f615318e1299870acd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga01cecc3469325f615318e1299870acd2">More...</a><br /></td></tr>
<tr class="separator:ga01cecc3469325f615318e1299870acd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11dbf083254c2059615a2044fa0ce706"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga11dbf083254c2059615a2044fa0ce706">operator&lt;=</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga11dbf083254c2059615a2044fa0ce706"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga11dbf083254c2059615a2044fa0ce706">More...</a><br /></td></tr>
<tr class="separator:ga11dbf083254c2059615a2044fa0ce706"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga16026d885c53b5d400d3179117e92a38"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga16026d885c53b5d400d3179117e92a38">operator&lt;=</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga16026d885c53b5d400d3179117e92a38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga16026d885c53b5d400d3179117e92a38">More...</a><br /></td></tr>
<tr class="separator:ga16026d885c53b5d400d3179117e92a38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7a78edce0757c28f63332140e1269f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#gaf7a78edce0757c28f63332140e1269f7">operator&lt;=</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf7a78edce0757c28f63332140e1269f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#gaf7a78edce0757c28f63332140e1269f7">More...</a><br /></td></tr>
<tr class="separator:gaf7a78edce0757c28f63332140e1269f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7c705798e98fc10fb10ecc42fcdda81"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#gad7c705798e98fc10fb10ecc42fcdda81">operator&lt;=</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad7c705798e98fc10fb10ecc42fcdda81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#gad7c705798e98fc10fb10ecc42fcdda81">More...</a><br /></td></tr>
<tr class="separator:gad7c705798e98fc10fb10ecc42fcdda81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6e72c52ee5ff9476ba1618f2ec01027d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga6e72c52ee5ff9476ba1618f2ec01027d">operator&lt;=</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6e72c52ee5ff9476ba1618f2ec01027d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga6e72c52ee5ff9476ba1618f2ec01027d">More...</a><br /></td></tr>
<tr class="separator:ga6e72c52ee5ff9476ba1618f2ec01027d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e267da65d60bbd710ee7853d2877302"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga5e267da65d60bbd710ee7853d2877302">operator&lt;=</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5e267da65d60bbd710ee7853d2877302"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga5e267da65d60bbd710ee7853d2877302">More...</a><br /></td></tr>
<tr class="separator:ga5e267da65d60bbd710ee7853d2877302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae791686139c895ab725e39d19866ec47"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#gae791686139c895ab725e39d19866ec47">operator&lt;=</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae791686139c895ab725e39d19866ec47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#gae791686139c895ab725e39d19866ec47">More...</a><br /></td></tr>
<tr class="separator:gae791686139c895ab725e39d19866ec47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c654b369a3122fc8a25ec41f2a9dc89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga5c654b369a3122fc8a25ec41f2a9dc89">operator&lt;=</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5c654b369a3122fc8a25ec41f2a9dc89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga5c654b369a3122fc8a25ec41f2a9dc89">More...</a><br /></td></tr>
<tr class="separator:ga5c654b369a3122fc8a25ec41f2a9dc89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab72cf6eaaae723619c480c4b1cab5a3d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#gab72cf6eaaae723619c480c4b1cab5a3d">operator&lt;=</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab72cf6eaaae723619c480c4b1cab5a3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#gab72cf6eaaae723619c480c4b1cab5a3d">More...</a><br /></td></tr>
<tr class="separator:gab72cf6eaaae723619c480c4b1cab5a3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4412b316eff10a690cae00f194d2b64b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga4412b316eff10a690cae00f194d2b64b">operator&lt;=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4412b316eff10a690cae00f194d2b64b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga4412b316eff10a690cae00f194d2b64b">More...</a><br /></td></tr>
<tr class="separator:ga4412b316eff10a690cae00f194d2b64b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fa57ea4474c3fe5d84ad8075d5963ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga9fa57ea4474c3fe5d84ad8075d5963ed">operator&lt;=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9fa57ea4474c3fe5d84ad8075d5963ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga9fa57ea4474c3fe5d84ad8075d5963ed">More...</a><br /></td></tr>
<tr class="separator:ga9fa57ea4474c3fe5d84ad8075d5963ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8131193b7b8e43d8c79967ae179c4c1c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga8131193b7b8e43d8c79967ae179c4c1c">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga8131193b7b8e43d8c79967ae179c4c1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga8131193b7b8e43d8c79967ae179c4c1c">More...</a><br /></td></tr>
<tr class="separator:ga8131193b7b8e43d8c79967ae179c4c1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54d2b06c2ee202e59443f5083ea63a69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga54d2b06c2ee202e59443f5083ea63a69">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga54d2b06c2ee202e59443f5083ea63a69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga54d2b06c2ee202e59443f5083ea63a69">More...</a><br /></td></tr>
<tr class="separator:ga54d2b06c2ee202e59443f5083ea63a69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3d84d5c4bf71d040e86c6c4164775c4d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga3d84d5c4bf71d040e86c6c4164775c4d">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga3d84d5c4bf71d040e86c6c4164775c4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga3d84d5c4bf71d040e86c6c4164775c4d">More...</a><br /></td></tr>
<tr class="separator:ga3d84d5c4bf71d040e86c6c4164775c4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga366678df011a2d02349b16cf109b5125"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga366678df011a2d02349b16cf109b5125">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga366678df011a2d02349b16cf109b5125"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga366678df011a2d02349b16cf109b5125">More...</a><br /></td></tr>
<tr class="separator:ga366678df011a2d02349b16cf109b5125"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60134cf5915f9f6f685e4eac9ef8f002"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga60134cf5915f9f6f685e4eac9ef8f002">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga60134cf5915f9f6f685e4eac9ef8f002"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga60134cf5915f9f6f685e4eac9ef8f002">More...</a><br /></td></tr>
<tr class="separator:ga60134cf5915f9f6f685e4eac9ef8f002"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga65ee6929c569504ca3b525d0aa0dd40a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga65ee6929c569504ca3b525d0aa0dd40a">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga65ee6929c569504ca3b525d0aa0dd40a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga65ee6929c569504ca3b525d0aa0dd40a">More...</a><br /></td></tr>
<tr class="separator:ga65ee6929c569504ca3b525d0aa0dd40a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga26c0148b326d3437e96d24bb982053de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga26c0148b326d3437e96d24bb982053de">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga26c0148b326d3437e96d24bb982053de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga26c0148b326d3437e96d24bb982053de">More...</a><br /></td></tr>
<tr class="separator:ga26c0148b326d3437e96d24bb982053de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga18434f653ec6f2a0995a1505472f851c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga18434f653ec6f2a0995a1505472f851c">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga18434f653ec6f2a0995a1505472f851c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga18434f653ec6f2a0995a1505472f851c">More...</a><br /></td></tr>
<tr class="separator:ga18434f653ec6f2a0995a1505472f851c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga282fe76d8a162246c4190564be1dbec4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga282fe76d8a162246c4190564be1dbec4">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga282fe76d8a162246c4190564be1dbec4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga282fe76d8a162246c4190564be1dbec4">More...</a><br /></td></tr>
<tr class="separator:ga282fe76d8a162246c4190564be1dbec4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9ad2828896355dce54f394cbecb975d2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga9ad2828896355dce54f394cbecb975d2">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga9ad2828896355dce54f394cbecb975d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga9ad2828896355dce54f394cbecb975d2">More...</a><br /></td></tr>
<tr class="separator:ga9ad2828896355dce54f394cbecb975d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga315f98c5b13cc9621bc3d8310f4aa35b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga315f98c5b13cc9621bc3d8310f4aa35b">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga315f98c5b13cc9621bc3d8310f4aa35b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga315f98c5b13cc9621bc3d8310f4aa35b">More...</a><br /></td></tr>
<tr class="separator:ga315f98c5b13cc9621bc3d8310f4aa35b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac19668bd9c248270f14a217d9524d741"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#gac19668bd9c248270f14a217d9524d741">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac19668bd9c248270f14a217d9524d741"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#gac19668bd9c248270f14a217d9524d741">More...</a><br /></td></tr>
<tr class="separator:gac19668bd9c248270f14a217d9524d741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00e4d48d2fadb11d983d6a8e0000378f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga00e4d48d2fadb11d983d6a8e0000378f">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga00e4d48d2fadb11d983d6a8e0000378f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2274d84d94661acdc2193a92e1f05a66"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga2274d84d94661acdc2193a92e1f05a66">operator&lt;=</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2274d84d94661acdc2193a92e1f05a66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga2274d84d94661acdc2193a92e1f05a66">More...</a><br /></td></tr>
<tr class="separator:ga2274d84d94661acdc2193a92e1f05a66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f6a2c06c7e96abc55a00e250702fb51"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#ga5f6a2c06c7e96abc55a00e250702fb51">operator&lt;=</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5f6a2c06c7e96abc55a00e250702fb51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#ga5f6a2c06c7e96abc55a00e250702fb51">More...</a><br /></td></tr>
<tr class="separator:ga5f6a2c06c7e96abc55a00e250702fb51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae03c6d9dcaa91051947708890ece8fa1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#gae03c6d9dcaa91051947708890ece8fa1">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:gae03c6d9dcaa91051947708890ece8fa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an lower or equal operation on two arrays or an array and a value.   <a href="group__arith__func__le.htm#gae03c6d9dcaa91051947708890ece8fa1">More...</a><br /></td></tr>
<tr class="separator:gae03c6d9dcaa91051947708890ece8fa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4d7064cd2160d431502269483900c75"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#gab4d7064cd2160d431502269483900c75">operator&lt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gab4d7064cd2160d431502269483900c75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga7635b61eff910853fb18e51a74a74411"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga7635b61eff910853fb18e51a74a74411">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7635b61eff910853fb18e51a74a74411"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.  <a href="group__arith__func__gt.htm#ga7635b61eff910853fb18e51a74a74411">More...</a><br /></td></tr>
<tr class="separator:ga7635b61eff910853fb18e51a74a74411"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7605910524e893a11546294d74df615"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gad7605910524e893a11546294d74df615">operator&gt;</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad7605910524e893a11546294d74df615"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gad7605910524e893a11546294d74df615">More...</a><br /></td></tr>
<tr class="separator:gad7605910524e893a11546294d74df615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga70f3b27e97c79985408d30deb57152d2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga70f3b27e97c79985408d30deb57152d2">operator&gt;</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga70f3b27e97c79985408d30deb57152d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga70f3b27e97c79985408d30deb57152d2">More...</a><br /></td></tr>
<tr class="separator:ga70f3b27e97c79985408d30deb57152d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34b635046cd08e2f22e58e450af452bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga34b635046cd08e2f22e58e450af452bc">operator&gt;</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga34b635046cd08e2f22e58e450af452bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga34b635046cd08e2f22e58e450af452bc">More...</a><br /></td></tr>
<tr class="separator:ga34b635046cd08e2f22e58e450af452bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4819b2a41d1b8c06a539ab0debdc48cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga4819b2a41d1b8c06a539ab0debdc48cb">operator&gt;</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4819b2a41d1b8c06a539ab0debdc48cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga4819b2a41d1b8c06a539ab0debdc48cb">More...</a><br /></td></tr>
<tr class="separator:ga4819b2a41d1b8c06a539ab0debdc48cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga51869fdbd571ca553b2ceb84959f0f25"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga51869fdbd571ca553b2ceb84959f0f25">operator&gt;</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga51869fdbd571ca553b2ceb84959f0f25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga51869fdbd571ca553b2ceb84959f0f25">More...</a><br /></td></tr>
<tr class="separator:ga51869fdbd571ca553b2ceb84959f0f25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e50647eb740c7217b10fd6e718e8896"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga1e50647eb740c7217b10fd6e718e8896">operator&gt;</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga1e50647eb740c7217b10fd6e718e8896"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga1e50647eb740c7217b10fd6e718e8896">More...</a><br /></td></tr>
<tr class="separator:ga1e50647eb740c7217b10fd6e718e8896"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b842df58ed8a8f525e0a3d6b8336a8c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga2b842df58ed8a8f525e0a3d6b8336a8c">operator&gt;</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2b842df58ed8a8f525e0a3d6b8336a8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga2b842df58ed8a8f525e0a3d6b8336a8c">More...</a><br /></td></tr>
<tr class="separator:ga2b842df58ed8a8f525e0a3d6b8336a8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga20677ba2fe710c9ca725613269e23e3d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga20677ba2fe710c9ca725613269e23e3d">operator&gt;</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga20677ba2fe710c9ca725613269e23e3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga20677ba2fe710c9ca725613269e23e3d">More...</a><br /></td></tr>
<tr class="separator:ga20677ba2fe710c9ca725613269e23e3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f50fb99a4afee3920b531184fd6401b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga6f50fb99a4afee3920b531184fd6401b">operator&gt;</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6f50fb99a4afee3920b531184fd6401b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga6f50fb99a4afee3920b531184fd6401b">More...</a><br /></td></tr>
<tr class="separator:ga6f50fb99a4afee3920b531184fd6401b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad09c785a46aad8732a3fe4aa9bc831c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gad09c785a46aad8732a3fe4aa9bc831c2">operator&gt;</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad09c785a46aad8732a3fe4aa9bc831c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gad09c785a46aad8732a3fe4aa9bc831c2">More...</a><br /></td></tr>
<tr class="separator:gad09c785a46aad8732a3fe4aa9bc831c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0102cd1db9cc791f6b8f2c3c18f13bd6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga0102cd1db9cc791f6b8f2c3c18f13bd6">operator&gt;</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga0102cd1db9cc791f6b8f2c3c18f13bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga0102cd1db9cc791f6b8f2c3c18f13bd6">More...</a><br /></td></tr>
<tr class="separator:ga0102cd1db9cc791f6b8f2c3c18f13bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa39a2d65a59306bc4c92d444b750173a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gaa39a2d65a59306bc4c92d444b750173a">operator&gt;</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa39a2d65a59306bc4c92d444b750173a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gaa39a2d65a59306bc4c92d444b750173a">More...</a><br /></td></tr>
<tr class="separator:gaa39a2d65a59306bc4c92d444b750173a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2c6e69d79ae930f31dc658b65026054e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga2c6e69d79ae930f31dc658b65026054e">operator&gt;</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2c6e69d79ae930f31dc658b65026054e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga2c6e69d79ae930f31dc658b65026054e">More...</a><br /></td></tr>
<tr class="separator:ga2c6e69d79ae930f31dc658b65026054e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeac03f2dfc7462295724c365f8b59404"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gaeac03f2dfc7462295724c365f8b59404">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gaeac03f2dfc7462295724c365f8b59404"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gaeac03f2dfc7462295724c365f8b59404">More...</a><br /></td></tr>
<tr class="separator:gaeac03f2dfc7462295724c365f8b59404"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9555749c2d079d547e01e20d3694ffaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga9555749c2d079d547e01e20d3694ffaa">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga9555749c2d079d547e01e20d3694ffaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga9555749c2d079d547e01e20d3694ffaa">More...</a><br /></td></tr>
<tr class="separator:ga9555749c2d079d547e01e20d3694ffaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga16086c7ca60ced479d5b4ee1b1071143"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga16086c7ca60ced479d5b4ee1b1071143">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga16086c7ca60ced479d5b4ee1b1071143"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga16086c7ca60ced479d5b4ee1b1071143">More...</a><br /></td></tr>
<tr class="separator:ga16086c7ca60ced479d5b4ee1b1071143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0f3cae3b9676bd5d4f470f91f573d6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gae0f3cae3b9676bd5d4f470f91f573d6c">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:gae0f3cae3b9676bd5d4f470f91f573d6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gae0f3cae3b9676bd5d4f470f91f573d6c">More...</a><br /></td></tr>
<tr class="separator:gae0f3cae3b9676bd5d4f470f91f573d6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0dc17ed9c2106d932e497c236f0427ce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga0dc17ed9c2106d932e497c236f0427ce">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga0dc17ed9c2106d932e497c236f0427ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga0dc17ed9c2106d932e497c236f0427ce">More...</a><br /></td></tr>
<tr class="separator:ga0dc17ed9c2106d932e497c236f0427ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa03601239b1c6870da2d33783d0c8cc4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gaa03601239b1c6870da2d33783d0c8cc4">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:gaa03601239b1c6870da2d33783d0c8cc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gaa03601239b1c6870da2d33783d0c8cc4">More...</a><br /></td></tr>
<tr class="separator:gaa03601239b1c6870da2d33783d0c8cc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaff2fd7196d0cce3f06050a84ec6a0e8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gaff2fd7196d0cce3f06050a84ec6a0e8e">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:gaff2fd7196d0cce3f06050a84ec6a0e8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gaff2fd7196d0cce3f06050a84ec6a0e8e">More...</a><br /></td></tr>
<tr class="separator:gaff2fd7196d0cce3f06050a84ec6a0e8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c373cbdebdad2e04f63066ba52d6702"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga8c373cbdebdad2e04f63066ba52d6702">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga8c373cbdebdad2e04f63066ba52d6702"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga8c373cbdebdad2e04f63066ba52d6702">More...</a><br /></td></tr>
<tr class="separator:ga8c373cbdebdad2e04f63066ba52d6702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga237289482c2e3a66c5d7f03c6fd724f4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga237289482c2e3a66c5d7f03c6fd724f4">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga237289482c2e3a66c5d7f03c6fd724f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga237289482c2e3a66c5d7f03c6fd724f4">More...</a><br /></td></tr>
<tr class="separator:ga237289482c2e3a66c5d7f03c6fd724f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3f5e56c3791da8e2811a5160bc5c1a75"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga3f5e56c3791da8e2811a5160bc5c1a75">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga3f5e56c3791da8e2811a5160bc5c1a75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga3f5e56c3791da8e2811a5160bc5c1a75">More...</a><br /></td></tr>
<tr class="separator:ga3f5e56c3791da8e2811a5160bc5c1a75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0e90cb941435f856b37b9e34448d969"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gaa0e90cb941435f856b37b9e34448d969">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:gaa0e90cb941435f856b37b9e34448d969"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gaa0e90cb941435f856b37b9e34448d969">More...</a><br /></td></tr>
<tr class="separator:gaa0e90cb941435f856b37b9e34448d969"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5a8534ed15ee827117391ef6dbc1143e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga5a8534ed15ee827117391ef6dbc1143e">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5a8534ed15ee827117391ef6dbc1143e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga5a8534ed15ee827117391ef6dbc1143e">More...</a><br /></td></tr>
<tr class="separator:ga5a8534ed15ee827117391ef6dbc1143e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaedd3a20094d3786a6417b017c119bdf4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gaedd3a20094d3786a6417b017c119bdf4">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:gaedd3a20094d3786a6417b017c119bdf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24773a0031478b917eed609f13ee7a80"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga24773a0031478b917eed609f13ee7a80">operator&gt;</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga24773a0031478b917eed609f13ee7a80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga24773a0031478b917eed609f13ee7a80">More...</a><br /></td></tr>
<tr class="separator:ga24773a0031478b917eed609f13ee7a80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf9deb5aa3ba33a24ff21f390577b00ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#gaf9deb5aa3ba33a24ff21f390577b00ae">operator&gt;</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf9deb5aa3ba33a24ff21f390577b00ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#gaf9deb5aa3ba33a24ff21f390577b00ae">More...</a><br /></td></tr>
<tr class="separator:gaf9deb5aa3ba33a24ff21f390577b00ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11c940bb5dc1ae385bb0e4a15a88b008"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga11c940bb5dc1ae385bb0e4a15a88b008">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga11c940bb5dc1ae385bb0e4a15a88b008"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater than operation on two arrays or an array and a value.   <a href="group__arith__func__gt.htm#ga11c940bb5dc1ae385bb0e4a15a88b008">More...</a><br /></td></tr>
<tr class="separator:ga11c940bb5dc1ae385bb0e4a15a88b008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga918da93335a59938845d9cc3970f3961"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga918da93335a59938845d9cc3970f3961">operator&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga918da93335a59938845d9cc3970f3961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga5a63c6d33f332dec1d770e4ed191fc48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga5a63c6d33f332dec1d770e4ed191fc48">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5a63c6d33f332dec1d770e4ed191fc48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.  <a href="group__arith__func__ge.htm#ga5a63c6d33f332dec1d770e4ed191fc48">More...</a><br /></td></tr>
<tr class="separator:ga5a63c6d33f332dec1d770e4ed191fc48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5eeb6f7088104411828b33893ee23c6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gaf5eeb6f7088104411828b33893ee23c6">operator&gt;=</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf5eeb6f7088104411828b33893ee23c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gaf5eeb6f7088104411828b33893ee23c6">More...</a><br /></td></tr>
<tr class="separator:gaf5eeb6f7088104411828b33893ee23c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae69f77441c63c391122fdd261d38e4fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gae69f77441c63c391122fdd261d38e4fb">operator&gt;=</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae69f77441c63c391122fdd261d38e4fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gae69f77441c63c391122fdd261d38e4fb">More...</a><br /></td></tr>
<tr class="separator:gae69f77441c63c391122fdd261d38e4fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2c3678de47c8a1e9baf77bef0bb3b4a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga2c3678de47c8a1e9baf77bef0bb3b4a8">operator&gt;=</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2c3678de47c8a1e9baf77bef0bb3b4a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga2c3678de47c8a1e9baf77bef0bb3b4a8">More...</a><br /></td></tr>
<tr class="separator:ga2c3678de47c8a1e9baf77bef0bb3b4a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadaef1f84593c7d74d11eca025ebe3daa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gadaef1f84593c7d74d11eca025ebe3daa">operator&gt;=</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gadaef1f84593c7d74d11eca025ebe3daa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gadaef1f84593c7d74d11eca025ebe3daa">More...</a><br /></td></tr>
<tr class="separator:gadaef1f84593c7d74d11eca025ebe3daa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2bbb49c163b3dee0682c216c278d930e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga2bbb49c163b3dee0682c216c278d930e">operator&gt;=</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2bbb49c163b3dee0682c216c278d930e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga2bbb49c163b3dee0682c216c278d930e">More...</a><br /></td></tr>
<tr class="separator:ga2bbb49c163b3dee0682c216c278d930e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2d381f0a881ce604b1ccb1ac251625f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga2d381f0a881ce604b1ccb1ac251625f9">operator&gt;=</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2d381f0a881ce604b1ccb1ac251625f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga2d381f0a881ce604b1ccb1ac251625f9">More...</a><br /></td></tr>
<tr class="separator:ga2d381f0a881ce604b1ccb1ac251625f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga27cd2055eae331bc4d8f2b0e9cd57e95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga27cd2055eae331bc4d8f2b0e9cd57e95">operator&gt;=</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga27cd2055eae331bc4d8f2b0e9cd57e95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga27cd2055eae331bc4d8f2b0e9cd57e95">More...</a><br /></td></tr>
<tr class="separator:ga27cd2055eae331bc4d8f2b0e9cd57e95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7ac52c782cfc9698e7d108d37e11623"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gaf7ac52c782cfc9698e7d108d37e11623">operator&gt;=</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf7ac52c782cfc9698e7d108d37e11623"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gaf7ac52c782cfc9698e7d108d37e11623">More...</a><br /></td></tr>
<tr class="separator:gaf7ac52c782cfc9698e7d108d37e11623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2795646f1d9be2d6a0234209e966cfe0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga2795646f1d9be2d6a0234209e966cfe0">operator&gt;=</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2795646f1d9be2d6a0234209e966cfe0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga2795646f1d9be2d6a0234209e966cfe0">More...</a><br /></td></tr>
<tr class="separator:ga2795646f1d9be2d6a0234209e966cfe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae1301a069696fdab46b51483e7393e52"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gae1301a069696fdab46b51483e7393e52">operator&gt;=</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae1301a069696fdab46b51483e7393e52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gae1301a069696fdab46b51483e7393e52">More...</a><br /></td></tr>
<tr class="separator:gae1301a069696fdab46b51483e7393e52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1aa31172e23a51ec4ba6d5681aeacde0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga1aa31172e23a51ec4ba6d5681aeacde0">operator&gt;=</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga1aa31172e23a51ec4ba6d5681aeacde0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga1aa31172e23a51ec4ba6d5681aeacde0">More...</a><br /></td></tr>
<tr class="separator:ga1aa31172e23a51ec4ba6d5681aeacde0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa6e76960c5811a45bb56ba16ad5364f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gaa6e76960c5811a45bb56ba16ad5364f1">operator&gt;=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa6e76960c5811a45bb56ba16ad5364f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gaa6e76960c5811a45bb56ba16ad5364f1">More...</a><br /></td></tr>
<tr class="separator:gaa6e76960c5811a45bb56ba16ad5364f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab3f8cf1f2c3030be36089db46f945c47"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gab3f8cf1f2c3030be36089db46f945c47">operator&gt;=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab3f8cf1f2c3030be36089db46f945c47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gab3f8cf1f2c3030be36089db46f945c47">More...</a><br /></td></tr>
<tr class="separator:gab3f8cf1f2c3030be36089db46f945c47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c1e6563a6f1aa84a5a87ee6f9998a9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga3c1e6563a6f1aa84a5a87ee6f9998a9f">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga3c1e6563a6f1aa84a5a87ee6f9998a9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga3c1e6563a6f1aa84a5a87ee6f9998a9f">More...</a><br /></td></tr>
<tr class="separator:ga3c1e6563a6f1aa84a5a87ee6f9998a9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab99154dad58dab2c507e20b2c8cad9ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gab99154dad58dab2c507e20b2c8cad9ff">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:gab99154dad58dab2c507e20b2c8cad9ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gab99154dad58dab2c507e20b2c8cad9ff">More...</a><br /></td></tr>
<tr class="separator:gab99154dad58dab2c507e20b2c8cad9ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7f8c423ca38614f5eff3357eac96f4fd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga7f8c423ca38614f5eff3357eac96f4fd">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga7f8c423ca38614f5eff3357eac96f4fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga7f8c423ca38614f5eff3357eac96f4fd">More...</a><br /></td></tr>
<tr class="separator:ga7f8c423ca38614f5eff3357eac96f4fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7feaae4310a64c790b0fa1afb278fba9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga7feaae4310a64c790b0fa1afb278fba9">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga7feaae4310a64c790b0fa1afb278fba9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga7feaae4310a64c790b0fa1afb278fba9">More...</a><br /></td></tr>
<tr class="separator:ga7feaae4310a64c790b0fa1afb278fba9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga53b917b73fef4e88f6549a40ac1c3ea8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga53b917b73fef4e88f6549a40ac1c3ea8">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga53b917b73fef4e88f6549a40ac1c3ea8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga53b917b73fef4e88f6549a40ac1c3ea8">More...</a><br /></td></tr>
<tr class="separator:ga53b917b73fef4e88f6549a40ac1c3ea8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga228c27bb6a3b775f3f098b80900f2aa6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga228c27bb6a3b775f3f098b80900f2aa6">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga228c27bb6a3b775f3f098b80900f2aa6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga228c27bb6a3b775f3f098b80900f2aa6">More...</a><br /></td></tr>
<tr class="separator:ga228c27bb6a3b775f3f098b80900f2aa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga713ff00f4dafee7d17217823f6a928bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga713ff00f4dafee7d17217823f6a928bb">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga713ff00f4dafee7d17217823f6a928bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga713ff00f4dafee7d17217823f6a928bb">More...</a><br /></td></tr>
<tr class="separator:ga713ff00f4dafee7d17217823f6a928bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1dfe2fded1de71dda7bd8864eeda3a02"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga1dfe2fded1de71dda7bd8864eeda3a02">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga1dfe2fded1de71dda7bd8864eeda3a02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga1dfe2fded1de71dda7bd8864eeda3a02">More...</a><br /></td></tr>
<tr class="separator:ga1dfe2fded1de71dda7bd8864eeda3a02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae1d3261a82beea4bfee5571323be3c30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gae1d3261a82beea4bfee5571323be3c30">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gae1d3261a82beea4bfee5571323be3c30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gae1d3261a82beea4bfee5571323be3c30">More...</a><br /></td></tr>
<tr class="separator:gae1d3261a82beea4bfee5571323be3c30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga279b89894396b768029702afb2ea877b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga279b89894396b768029702afb2ea877b">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga279b89894396b768029702afb2ea877b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga279b89894396b768029702afb2ea877b">More...</a><br /></td></tr>
<tr class="separator:ga279b89894396b768029702afb2ea877b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04c6e2bb1cea1edf2fdc73a812e104fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga04c6e2bb1cea1edf2fdc73a812e104fa">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga04c6e2bb1cea1edf2fdc73a812e104fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga04c6e2bb1cea1edf2fdc73a812e104fa">More...</a><br /></td></tr>
<tr class="separator:ga04c6e2bb1cea1edf2fdc73a812e104fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac533f2c45c3e9498c8be6152a277d228"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gac533f2c45c3e9498c8be6152a277d228">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac533f2c45c3e9498c8be6152a277d228"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gac533f2c45c3e9498c8be6152a277d228">More...</a><br /></td></tr>
<tr class="separator:gac533f2c45c3e9498c8be6152a277d228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5720d91075b612414b8f2ad94c77313f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga5720d91075b612414b8f2ad94c77313f">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga5720d91075b612414b8f2ad94c77313f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaff5138eafedb3baf468433026553d1ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gaff5138eafedb3baf468433026553d1ae">operator&gt;=</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaff5138eafedb3baf468433026553d1ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#gaff5138eafedb3baf468433026553d1ae">More...</a><br /></td></tr>
<tr class="separator:gaff5138eafedb3baf468433026553d1ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91386759552537dc17acb74a4c3582da"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga91386759552537dc17acb74a4c3582da">operator&gt;=</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga91386759552537dc17acb74a4c3582da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga91386759552537dc17acb74a4c3582da">More...</a><br /></td></tr>
<tr class="separator:ga91386759552537dc17acb74a4c3582da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1fd5aef41af102c096b81de0065df214"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga1fd5aef41af102c096b81de0065df214">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga1fd5aef41af102c096b81de0065df214"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an greater or equal operation on two arrays or an array and a value.   <a href="group__arith__func__ge.htm#ga1fd5aef41af102c096b81de0065df214">More...</a><br /></td></tr>
<tr class="separator:ga1fd5aef41af102c096b81de0065df214"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdcb3d3098ee9e1eb1d43bb2933bdd95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#gabdcb3d3098ee9e1eb1d43bb2933bdd95">operator&gt;=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gabdcb3d3098ee9e1eb1d43bb2933bdd95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga506b0d3c2fddaf44d7dc30f79e6212d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga506b0d3c2fddaf44d7dc30f79e6212d7">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga506b0d3c2fddaf44d7dc30f79e6212d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.  <a href="group__arith__func__or.htm#ga506b0d3c2fddaf44d7dc30f79e6212d7">More...</a><br /></td></tr>
<tr class="separator:ga506b0d3c2fddaf44d7dc30f79e6212d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab2c7e633c5d60eb37a6f7d87fa20a35f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gab2c7e633c5d60eb37a6f7d87fa20a35f">operator||</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab2c7e633c5d60eb37a6f7d87fa20a35f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gab2c7e633c5d60eb37a6f7d87fa20a35f">More...</a><br /></td></tr>
<tr class="separator:gab2c7e633c5d60eb37a6f7d87fa20a35f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad2c387498166d75a8d30bdc3563f38ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gad2c387498166d75a8d30bdc3563f38ef">operator||</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad2c387498166d75a8d30bdc3563f38ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gad2c387498166d75a8d30bdc3563f38ef">More...</a><br /></td></tr>
<tr class="separator:gad2c387498166d75a8d30bdc3563f38ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad63f051077d2fe2934a7636a159a4ce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gaad63f051077d2fe2934a7636a159a4ce">operator||</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaad63f051077d2fe2934a7636a159a4ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gaad63f051077d2fe2934a7636a159a4ce">More...</a><br /></td></tr>
<tr class="separator:gaad63f051077d2fe2934a7636a159a4ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9702188ffa8056ae38b395fc6285eb21"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga9702188ffa8056ae38b395fc6285eb21">operator||</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9702188ffa8056ae38b395fc6285eb21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga9702188ffa8056ae38b395fc6285eb21">More...</a><br /></td></tr>
<tr class="separator:ga9702188ffa8056ae38b395fc6285eb21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga51d20fdf51c994ba8892e87a525c1904"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga51d20fdf51c994ba8892e87a525c1904">operator||</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga51d20fdf51c994ba8892e87a525c1904"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga51d20fdf51c994ba8892e87a525c1904">More...</a><br /></td></tr>
<tr class="separator:ga51d20fdf51c994ba8892e87a525c1904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54d58551b24cb5a6b4b58e3ae5ac5e48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga54d58551b24cb5a6b4b58e3ae5ac5e48">operator||</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga54d58551b24cb5a6b4b58e3ae5ac5e48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga54d58551b24cb5a6b4b58e3ae5ac5e48">More...</a><br /></td></tr>
<tr class="separator:ga54d58551b24cb5a6b4b58e3ae5ac5e48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga324c2d4cb10fa5f8285c139ea8367367"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga324c2d4cb10fa5f8285c139ea8367367">operator||</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga324c2d4cb10fa5f8285c139ea8367367"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga324c2d4cb10fa5f8285c139ea8367367">More...</a><br /></td></tr>
<tr class="separator:ga324c2d4cb10fa5f8285c139ea8367367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga87cc3cdd5213e99b6dffcb15db67e8bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga87cc3cdd5213e99b6dffcb15db67e8bc">operator||</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga87cc3cdd5213e99b6dffcb15db67e8bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga87cc3cdd5213e99b6dffcb15db67e8bc">More...</a><br /></td></tr>
<tr class="separator:ga87cc3cdd5213e99b6dffcb15db67e8bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7817648b665c1878fbd949d78cd9c50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gae7817648b665c1878fbd949d78cd9c50">operator||</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae7817648b665c1878fbd949d78cd9c50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gae7817648b665c1878fbd949d78cd9c50">More...</a><br /></td></tr>
<tr class="separator:gae7817648b665c1878fbd949d78cd9c50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeea5737ae96642e3eccd602951748fc5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gaeea5737ae96642e3eccd602951748fc5">operator||</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaeea5737ae96642e3eccd602951748fc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gaeea5737ae96642e3eccd602951748fc5">More...</a><br /></td></tr>
<tr class="separator:gaeea5737ae96642e3eccd602951748fc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0ae9902b35f4ed966066e569a56c0a34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga0ae9902b35f4ed966066e569a56c0a34">operator||</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga0ae9902b35f4ed966066e569a56c0a34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga0ae9902b35f4ed966066e569a56c0a34">More...</a><br /></td></tr>
<tr class="separator:ga0ae9902b35f4ed966066e569a56c0a34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeba749ff9a231dfdc9fe917e70943cdb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gaeba749ff9a231dfdc9fe917e70943cdb">operator||</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaeba749ff9a231dfdc9fe917e70943cdb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gaeba749ff9a231dfdc9fe917e70943cdb">More...</a><br /></td></tr>
<tr class="separator:gaeba749ff9a231dfdc9fe917e70943cdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19ff0161c031c21ed3b10fde55fb4232"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga19ff0161c031c21ed3b10fde55fb4232">operator||</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga19ff0161c031c21ed3b10fde55fb4232"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga19ff0161c031c21ed3b10fde55fb4232">More...</a><br /></td></tr>
<tr class="separator:ga19ff0161c031c21ed3b10fde55fb4232"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6316a55175e07ce755fafbc4fa7f58b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga6316a55175e07ce755fafbc4fa7f58b9">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga6316a55175e07ce755fafbc4fa7f58b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga6316a55175e07ce755fafbc4fa7f58b9">More...</a><br /></td></tr>
<tr class="separator:ga6316a55175e07ce755fafbc4fa7f58b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac17c0bee51e7205ee716dd03696cc0bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gac17c0bee51e7205ee716dd03696cc0bb">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:gac17c0bee51e7205ee716dd03696cc0bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gac17c0bee51e7205ee716dd03696cc0bb">More...</a><br /></td></tr>
<tr class="separator:gac17c0bee51e7205ee716dd03696cc0bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac8beddc9fdd8cf7b04ef7bc15b4d3ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gaac8beddc9fdd8cf7b04ef7bc15b4d3ef">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:gaac8beddc9fdd8cf7b04ef7bc15b4d3ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gaac8beddc9fdd8cf7b04ef7bc15b4d3ef">More...</a><br /></td></tr>
<tr class="separator:gaac8beddc9fdd8cf7b04ef7bc15b4d3ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae956d550008632074f4c1fdcb5ec1d6b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gae956d550008632074f4c1fdcb5ec1d6b">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:gae956d550008632074f4c1fdcb5ec1d6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gae956d550008632074f4c1fdcb5ec1d6b">More...</a><br /></td></tr>
<tr class="separator:gae956d550008632074f4c1fdcb5ec1d6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4880f2647999de771a65ffa2bd5fefec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga4880f2647999de771a65ffa2bd5fefec">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga4880f2647999de771a65ffa2bd5fefec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga4880f2647999de771a65ffa2bd5fefec">More...</a><br /></td></tr>
<tr class="separator:ga4880f2647999de771a65ffa2bd5fefec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga46aa4de9661e670c44dc767c6a5c09c7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga46aa4de9661e670c44dc767c6a5c09c7">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga46aa4de9661e670c44dc767c6a5c09c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga46aa4de9661e670c44dc767c6a5c09c7">More...</a><br /></td></tr>
<tr class="separator:ga46aa4de9661e670c44dc767c6a5c09c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad9f61dd446f01e2207a231c286f9ca1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gaad9f61dd446f01e2207a231c286f9ca1">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:gaad9f61dd446f01e2207a231c286f9ca1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gaad9f61dd446f01e2207a231c286f9ca1">More...</a><br /></td></tr>
<tr class="separator:gaad9f61dd446f01e2207a231c286f9ca1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga66be9e9e09727a32f1d17929508aa9ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga66be9e9e09727a32f1d17929508aa9ee">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga66be9e9e09727a32f1d17929508aa9ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga66be9e9e09727a32f1d17929508aa9ee">More...</a><br /></td></tr>
<tr class="separator:ga66be9e9e09727a32f1d17929508aa9ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4945389ddf6cb5cb7e99e6d9a0bfa3e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga4945389ddf6cb5cb7e99e6d9a0bfa3e9">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga4945389ddf6cb5cb7e99e6d9a0bfa3e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga4945389ddf6cb5cb7e99e6d9a0bfa3e9">More...</a><br /></td></tr>
<tr class="separator:ga4945389ddf6cb5cb7e99e6d9a0bfa3e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e9861acfeb83e2a46637c323a06c65a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga8e9861acfeb83e2a46637c323a06c65a">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga8e9861acfeb83e2a46637c323a06c65a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga8e9861acfeb83e2a46637c323a06c65a">More...</a><br /></td></tr>
<tr class="separator:ga8e9861acfeb83e2a46637c323a06c65a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac8c62fc649e13cfb5d43e7afab8b5862"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gac8c62fc649e13cfb5d43e7afab8b5862">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:gac8c62fc649e13cfb5d43e7afab8b5862"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gac8c62fc649e13cfb5d43e7afab8b5862">More...</a><br /></td></tr>
<tr class="separator:gac8c62fc649e13cfb5d43e7afab8b5862"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b5bb9ce47157bab4544e8be2fba2ab2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga4b5bb9ce47157bab4544e8be2fba2ab2">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4b5bb9ce47157bab4544e8be2fba2ab2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga4b5bb9ce47157bab4544e8be2fba2ab2">More...</a><br /></td></tr>
<tr class="separator:ga4b5bb9ce47157bab4544e8be2fba2ab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeee5d22ec5bca690da9677814b564af0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gaeee5d22ec5bca690da9677814b564af0">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:gaeee5d22ec5bca690da9677814b564af0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6cd30ecf4a08b189cb25facdd6e147f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga6cd30ecf4a08b189cb25facdd6e147f2">operator||</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6cd30ecf4a08b189cb25facdd6e147f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga6cd30ecf4a08b189cb25facdd6e147f2">More...</a><br /></td></tr>
<tr class="separator:ga6cd30ecf4a08b189cb25facdd6e147f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga078f69ef9fbf7e764c6ecc7e4cc08c6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga078f69ef9fbf7e764c6ecc7e4cc08c6d">operator||</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga078f69ef9fbf7e764c6ecc7e4cc08c6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#ga078f69ef9fbf7e764c6ecc7e4cc08c6d">More...</a><br /></td></tr>
<tr class="separator:ga078f69ef9fbf7e764c6ecc7e4cc08c6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf129dc3ff3f9040274efd047a0ab8947"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#gaf129dc3ff3f9040274efd047a0ab8947">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:gaf129dc3ff3f9040274efd047a0ab8947"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an logical OR operation on two arrays or an array and a value.   <a href="group__arith__func__or.htm#gaf129dc3ff3f9040274efd047a0ab8947">More...</a><br /></td></tr>
<tr class="separator:gaf129dc3ff3f9040274efd047a0ab8947"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6dad0926c4425201d90622598776755c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga6dad0926c4425201d90622598776755c">operator||</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga6dad0926c4425201d90622598776755c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gafcbb4f28a4d0d1493417fd1ae21f1ec4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gafcbb4f28a4d0d1493417fd1ae21f1ec4">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gafcbb4f28a4d0d1493417fd1ae21f1ec4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gafcbb4f28a4d0d1493417fd1ae21f1ec4">More...</a><br /></td></tr>
<tr class="separator:gafcbb4f28a4d0d1493417fd1ae21f1ec4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga52ecb67f1f3ae3b2f2015fd61d6ebdd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga52ecb67f1f3ae3b2f2015fd61d6ebdd3">operator%</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga52ecb67f1f3ae3b2f2015fd61d6ebdd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga52ecb67f1f3ae3b2f2015fd61d6ebdd3">More...</a><br /></td></tr>
<tr class="separator:ga52ecb67f1f3ae3b2f2015fd61d6ebdd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e66462807a04fd1f2c67fc3fda4a4e1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga9e66462807a04fd1f2c67fc3fda4a4e1">operator%</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9e66462807a04fd1f2c67fc3fda4a4e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga9e66462807a04fd1f2c67fc3fda4a4e1">More...</a><br /></td></tr>
<tr class="separator:ga9e66462807a04fd1f2c67fc3fda4a4e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a075a6a44e6f4acc76a89b1a6cd7cda"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga7a075a6a44e6f4acc76a89b1a6cd7cda">operator%</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7a075a6a44e6f4acc76a89b1a6cd7cda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga7a075a6a44e6f4acc76a89b1a6cd7cda">More...</a><br /></td></tr>
<tr class="separator:ga7a075a6a44e6f4acc76a89b1a6cd7cda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaccdc73995e38747d6cd7ca2ff11adb4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gaaccdc73995e38747d6cd7ca2ff11adb4">operator%</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaaccdc73995e38747d6cd7ca2ff11adb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#gaaccdc73995e38747d6cd7ca2ff11adb4">More...</a><br /></td></tr>
<tr class="separator:gaaccdc73995e38747d6cd7ca2ff11adb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe92f24f3e8b728996868b322ad3dc39"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gabe92f24f3e8b728996868b322ad3dc39">operator%</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gabe92f24f3e8b728996868b322ad3dc39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#gabe92f24f3e8b728996868b322ad3dc39">More...</a><br /></td></tr>
<tr class="separator:gabe92f24f3e8b728996868b322ad3dc39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad6059f7363511efba9c9212ad21bdd9d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gad6059f7363511efba9c9212ad21bdd9d">operator%</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad6059f7363511efba9c9212ad21bdd9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#gad6059f7363511efba9c9212ad21bdd9d">More...</a><br /></td></tr>
<tr class="separator:gad6059f7363511efba9c9212ad21bdd9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1fdf9241fdcce3370a14cb167d1d5206"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga1fdf9241fdcce3370a14cb167d1d5206">operator%</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga1fdf9241fdcce3370a14cb167d1d5206"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga1fdf9241fdcce3370a14cb167d1d5206">More...</a><br /></td></tr>
<tr class="separator:ga1fdf9241fdcce3370a14cb167d1d5206"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c62dd59b51d7ae0cbecf3702471b295"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga4c62dd59b51d7ae0cbecf3702471b295">operator%</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4c62dd59b51d7ae0cbecf3702471b295"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga4c62dd59b51d7ae0cbecf3702471b295">More...</a><br /></td></tr>
<tr class="separator:ga4c62dd59b51d7ae0cbecf3702471b295"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a895b189cd96cfe9dc33576c056ccda"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga2a895b189cd96cfe9dc33576c056ccda">operator%</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga2a895b189cd96cfe9dc33576c056ccda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga2a895b189cd96cfe9dc33576c056ccda">More...</a><br /></td></tr>
<tr class="separator:ga2a895b189cd96cfe9dc33576c056ccda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1fec64d003ddbbc56593fe4b5368167f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga1fec64d003ddbbc56593fe4b5368167f">operator%</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga1fec64d003ddbbc56593fe4b5368167f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga1fec64d003ddbbc56593fe4b5368167f">More...</a><br /></td></tr>
<tr class="separator:ga1fec64d003ddbbc56593fe4b5368167f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21e36c02b8c7438cf26a08d1694bfcde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga21e36c02b8c7438cf26a08d1694bfcde">operator%</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga21e36c02b8c7438cf26a08d1694bfcde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga21e36c02b8c7438cf26a08d1694bfcde">More...</a><br /></td></tr>
<tr class="separator:ga21e36c02b8c7438cf26a08d1694bfcde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga49bb6b08980123714cc39835a0c850a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga49bb6b08980123714cc39835a0c850a3">operator%</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga49bb6b08980123714cc39835a0c850a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga49bb6b08980123714cc39835a0c850a3">More...</a><br /></td></tr>
<tr class="separator:ga49bb6b08980123714cc39835a0c850a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga05d908fa0d286e6b39bf25526448188c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga05d908fa0d286e6b39bf25526448188c">operator%</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga05d908fa0d286e6b39bf25526448188c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga05d908fa0d286e6b39bf25526448188c">More...</a><br /></td></tr>
<tr class="separator:ga05d908fa0d286e6b39bf25526448188c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c2623ea2af292d16a4d9f5e540500ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga3c2623ea2af292d16a4d9f5e540500ca">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga3c2623ea2af292d16a4d9f5e540500ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga3c2623ea2af292d16a4d9f5e540500ca">More...</a><br /></td></tr>
<tr class="separator:ga3c2623ea2af292d16a4d9f5e540500ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga505b1b3012b126ce5ed27be72e179c8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga505b1b3012b126ce5ed27be72e179c8e">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga505b1b3012b126ce5ed27be72e179c8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga505b1b3012b126ce5ed27be72e179c8e">More...</a><br /></td></tr>
<tr class="separator:ga505b1b3012b126ce5ed27be72e179c8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e5e10750b4d37f3bca6c0e543a922b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga1e5e10750b4d37f3bca6c0e543a922b8">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga1e5e10750b4d37f3bca6c0e543a922b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga1e5e10750b4d37f3bca6c0e543a922b8">More...</a><br /></td></tr>
<tr class="separator:ga1e5e10750b4d37f3bca6c0e543a922b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab2cdce4f608524309acbb07e4729769d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gab2cdce4f608524309acbb07e4729769d">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:gab2cdce4f608524309acbb07e4729769d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#gab2cdce4f608524309acbb07e4729769d">More...</a><br /></td></tr>
<tr class="separator:gab2cdce4f608524309acbb07e4729769d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5beea889dcf19f9b3e770b27e882f1d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga5beea889dcf19f9b3e770b27e882f1d5">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga5beea889dcf19f9b3e770b27e882f1d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga5beea889dcf19f9b3e770b27e882f1d5">More...</a><br /></td></tr>
<tr class="separator:ga5beea889dcf19f9b3e770b27e882f1d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3e9ba2dcf69a61aece2131e3d7bea8f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gac3e9ba2dcf69a61aece2131e3d7bea8f">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:gac3e9ba2dcf69a61aece2131e3d7bea8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#gac3e9ba2dcf69a61aece2131e3d7bea8f">More...</a><br /></td></tr>
<tr class="separator:gac3e9ba2dcf69a61aece2131e3d7bea8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga53324ad85c4084f4af068f8dc7607056"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga53324ad85c4084f4af068f8dc7607056">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga53324ad85c4084f4af068f8dc7607056"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga53324ad85c4084f4af068f8dc7607056">More...</a><br /></td></tr>
<tr class="separator:ga53324ad85c4084f4af068f8dc7607056"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf4b63a5a009077d60816964505c02ce3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gaf4b63a5a009077d60816964505c02ce3">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gaf4b63a5a009077d60816964505c02ce3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#gaf4b63a5a009077d60816964505c02ce3">More...</a><br /></td></tr>
<tr class="separator:gaf4b63a5a009077d60816964505c02ce3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga287c860be8dd582d6ba6d67870ce8d4b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga287c860be8dd582d6ba6d67870ce8d4b">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga287c860be8dd582d6ba6d67870ce8d4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga287c860be8dd582d6ba6d67870ce8d4b">More...</a><br /></td></tr>
<tr class="separator:ga287c860be8dd582d6ba6d67870ce8d4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8f72c4ffb12bc3a7c81d8fe4924b31df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga8f72c4ffb12bc3a7c81d8fe4924b31df">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga8f72c4ffb12bc3a7c81d8fe4924b31df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga8f72c4ffb12bc3a7c81d8fe4924b31df">More...</a><br /></td></tr>
<tr class="separator:ga8f72c4ffb12bc3a7c81d8fe4924b31df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9407698d9dce599f17739561c7a17edb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga9407698d9dce599f17739561c7a17edb">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga9407698d9dce599f17739561c7a17edb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga9407698d9dce599f17739561c7a17edb">More...</a><br /></td></tr>
<tr class="separator:ga9407698d9dce599f17739561c7a17edb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga69e3108d6d317e4c908dfc4444b90314"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga69e3108d6d317e4c908dfc4444b90314">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga69e3108d6d317e4c908dfc4444b90314"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga69e3108d6d317e4c908dfc4444b90314">More...</a><br /></td></tr>
<tr class="separator:ga69e3108d6d317e4c908dfc4444b90314"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab261d88a11b27c577c875b7b2430c8d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gab261d88a11b27c577c875b7b2430c8d9">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:gab261d88a11b27c577c875b7b2430c8d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga075e0d2f21ee521ec4d1c19f9dd40462"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga075e0d2f21ee521ec4d1c19f9dd40462">operator%</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga075e0d2f21ee521ec4d1c19f9dd40462"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga075e0d2f21ee521ec4d1c19f9dd40462">More...</a><br /></td></tr>
<tr class="separator:ga075e0d2f21ee521ec4d1c19f9dd40462"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga42b66f0b7fa2439d7cfa0a5396a8a5aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga42b66f0b7fa2439d7cfa0a5396a8a5aa">operator%</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga42b66f0b7fa2439d7cfa0a5396a8a5aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga42b66f0b7fa2439d7cfa0a5396a8a5aa">More...</a><br /></td></tr>
<tr class="separator:ga42b66f0b7fa2439d7cfa0a5396a8a5aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e71bb8f3c2d7e111e1c79e469178114"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga3e71bb8f3c2d7e111e1c79e469178114">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga3e71bb8f3c2d7e111e1c79e469178114"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.   <a href="group__arith__func__mod.htm#ga3e71bb8f3c2d7e111e1c79e469178114">More...</a><br /></td></tr>
<tr class="separator:ga3e71bb8f3c2d7e111e1c79e469178114"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga301c399cb42dfe86f849f1faf5324937"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga301c399cb42dfe86f849f1faf5324937">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga301c399cb42dfe86f849f1faf5324937"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gaf3d865ca59384d011351a52f106a75d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaf3d865ca59384d011351a52f106a75d0">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf3d865ca59384d011351a52f106a75d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.  <a href="group__arith__func__bitor.htm#gaf3d865ca59384d011351a52f106a75d0">More...</a><br /></td></tr>
<tr class="separator:gaf3d865ca59384d011351a52f106a75d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24729ad331ada89aee8494382239c981"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga24729ad331ada89aee8494382239c981">operator|</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga24729ad331ada89aee8494382239c981"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga24729ad331ada89aee8494382239c981">More...</a><br /></td></tr>
<tr class="separator:ga24729ad331ada89aee8494382239c981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90e116011fc446880a23dbebc5ccd20a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga90e116011fc446880a23dbebc5ccd20a">operator|</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga90e116011fc446880a23dbebc5ccd20a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga90e116011fc446880a23dbebc5ccd20a">More...</a><br /></td></tr>
<tr class="separator:ga90e116011fc446880a23dbebc5ccd20a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7cbdf79aafec8570eeefcee438854961"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga7cbdf79aafec8570eeefcee438854961">operator|</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7cbdf79aafec8570eeefcee438854961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga7cbdf79aafec8570eeefcee438854961">More...</a><br /></td></tr>
<tr class="separator:ga7cbdf79aafec8570eeefcee438854961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9ca5e44c942701ad94745b4bfb7064fc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga9ca5e44c942701ad94745b4bfb7064fc">operator|</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9ca5e44c942701ad94745b4bfb7064fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga9ca5e44c942701ad94745b4bfb7064fc">More...</a><br /></td></tr>
<tr class="separator:ga9ca5e44c942701ad94745b4bfb7064fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa854e79e92bd0773b216bc460892edd5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaa854e79e92bd0773b216bc460892edd5">operator|</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa854e79e92bd0773b216bc460892edd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gaa854e79e92bd0773b216bc460892edd5">More...</a><br /></td></tr>
<tr class="separator:gaa854e79e92bd0773b216bc460892edd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga77fa2402d5de7b4e63967aa8e47d970d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga77fa2402d5de7b4e63967aa8e47d970d">operator|</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga77fa2402d5de7b4e63967aa8e47d970d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga77fa2402d5de7b4e63967aa8e47d970d">More...</a><br /></td></tr>
<tr class="separator:ga77fa2402d5de7b4e63967aa8e47d970d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad009a7d9b99282a94bf9dcd4ec859ca6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gad009a7d9b99282a94bf9dcd4ec859ca6">operator|</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad009a7d9b99282a94bf9dcd4ec859ca6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gad009a7d9b99282a94bf9dcd4ec859ca6">More...</a><br /></td></tr>
<tr class="separator:gad009a7d9b99282a94bf9dcd4ec859ca6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6380411ac80c69e813306a6ac76737fc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga6380411ac80c69e813306a6ac76737fc">operator|</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6380411ac80c69e813306a6ac76737fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga6380411ac80c69e813306a6ac76737fc">More...</a><br /></td></tr>
<tr class="separator:ga6380411ac80c69e813306a6ac76737fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdf333a042a9d0b7415d7eeafd06db93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gabdf333a042a9d0b7415d7eeafd06db93">operator|</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gabdf333a042a9d0b7415d7eeafd06db93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gabdf333a042a9d0b7415d7eeafd06db93">More...</a><br /></td></tr>
<tr class="separator:gabdf333a042a9d0b7415d7eeafd06db93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebaca9ddb7825564d9f9228e0c19ab88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaebaca9ddb7825564d9f9228e0c19ab88">operator|</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaebaca9ddb7825564d9f9228e0c19ab88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gaebaca9ddb7825564d9f9228e0c19ab88">More...</a><br /></td></tr>
<tr class="separator:gaebaca9ddb7825564d9f9228e0c19ab88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa6affdda1ffed1e8bc0a3a49d654e55a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaa6affdda1ffed1e8bc0a3a49d654e55a">operator|</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa6affdda1ffed1e8bc0a3a49d654e55a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gaa6affdda1ffed1e8bc0a3a49d654e55a">More...</a><br /></td></tr>
<tr class="separator:gaa6affdda1ffed1e8bc0a3a49d654e55a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga13187ab991e85d31eccfe1f5b142fc4a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga13187ab991e85d31eccfe1f5b142fc4a">operator|</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga13187ab991e85d31eccfe1f5b142fc4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga13187ab991e85d31eccfe1f5b142fc4a">More...</a><br /></td></tr>
<tr class="separator:ga13187ab991e85d31eccfe1f5b142fc4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4838cccad507856fb20e575e386bfbae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga4838cccad507856fb20e575e386bfbae">operator|</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4838cccad507856fb20e575e386bfbae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga4838cccad507856fb20e575e386bfbae">More...</a><br /></td></tr>
<tr class="separator:ga4838cccad507856fb20e575e386bfbae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b51554529e639f028b3a610817ef5e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga7b51554529e639f028b3a610817ef5e6">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga7b51554529e639f028b3a610817ef5e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga7b51554529e639f028b3a610817ef5e6">More...</a><br /></td></tr>
<tr class="separator:ga7b51554529e639f028b3a610817ef5e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa4fe57d304e0531b250a65e9a1b69019"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gaa4fe57d304e0531b250a65e9a1b69019">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:gaa4fe57d304e0531b250a65e9a1b69019"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gaa4fe57d304e0531b250a65e9a1b69019">More...</a><br /></td></tr>
<tr class="separator:gaa4fe57d304e0531b250a65e9a1b69019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e6945c8bb9903debbfd24ef3051f428"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga9e6945c8bb9903debbfd24ef3051f428">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga9e6945c8bb9903debbfd24ef3051f428"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga9e6945c8bb9903debbfd24ef3051f428">More...</a><br /></td></tr>
<tr class="separator:ga9e6945c8bb9903debbfd24ef3051f428"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga626748e2c3f88aef6dab3ad49e20d701"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga626748e2c3f88aef6dab3ad49e20d701">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga626748e2c3f88aef6dab3ad49e20d701"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga626748e2c3f88aef6dab3ad49e20d701">More...</a><br /></td></tr>
<tr class="separator:ga626748e2c3f88aef6dab3ad49e20d701"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5775175ce5bd2baf185d7daf031ea0bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga5775175ce5bd2baf185d7daf031ea0bf">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga5775175ce5bd2baf185d7daf031ea0bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga5775175ce5bd2baf185d7daf031ea0bf">More...</a><br /></td></tr>
<tr class="separator:ga5775175ce5bd2baf185d7daf031ea0bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8682445cef72d65077329908564fd950"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga8682445cef72d65077329908564fd950">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga8682445cef72d65077329908564fd950"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga8682445cef72d65077329908564fd950">More...</a><br /></td></tr>
<tr class="separator:ga8682445cef72d65077329908564fd950"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga716a7c1f885de291c9f60379a6f3e2f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga716a7c1f885de291c9f60379a6f3e2f5">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga716a7c1f885de291c9f60379a6f3e2f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga716a7c1f885de291c9f60379a6f3e2f5">More...</a><br /></td></tr>
<tr class="separator:ga716a7c1f885de291c9f60379a6f3e2f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b6d24507099fa3485d54d2054bffd92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga6b6d24507099fa3485d54d2054bffd92">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga6b6d24507099fa3485d54d2054bffd92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga6b6d24507099fa3485d54d2054bffd92">More...</a><br /></td></tr>
<tr class="separator:ga6b6d24507099fa3485d54d2054bffd92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7ad00a7cf95e039ec9d740a7adab0f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gac7ad00a7cf95e039ec9d740a7adab0f0">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gac7ad00a7cf95e039ec9d740a7adab0f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gac7ad00a7cf95e039ec9d740a7adab0f0">More...</a><br /></td></tr>
<tr class="separator:gac7ad00a7cf95e039ec9d740a7adab0f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafad53f51c56aab22383f6a0524106081"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gafad53f51c56aab22383f6a0524106081">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:gafad53f51c56aab22383f6a0524106081"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gafad53f51c56aab22383f6a0524106081">More...</a><br /></td></tr>
<tr class="separator:gafad53f51c56aab22383f6a0524106081"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga70b356e71133718b89c3844e4f48cb3b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga70b356e71133718b89c3844e4f48cb3b">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga70b356e71133718b89c3844e4f48cb3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga70b356e71133718b89c3844e4f48cb3b">More...</a><br /></td></tr>
<tr class="separator:ga70b356e71133718b89c3844e4f48cb3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabfdfd0a8bf8c5c0dfaeea2a2f292127a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gabfdfd0a8bf8c5c0dfaeea2a2f292127a">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gabfdfd0a8bf8c5c0dfaeea2a2f292127a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gabfdfd0a8bf8c5c0dfaeea2a2f292127a">More...</a><br /></td></tr>
<tr class="separator:gabfdfd0a8bf8c5c0dfaeea2a2f292127a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga20f1e7e7e61ea64e1ed7dc267bea91b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga20f1e7e7e61ea64e1ed7dc267bea91b6">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga20f1e7e7e61ea64e1ed7dc267bea91b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga770e72ca34cf2c3b91446faccbf811ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga770e72ca34cf2c3b91446faccbf811ca">operator|</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga770e72ca34cf2c3b91446faccbf811ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga770e72ca34cf2c3b91446faccbf811ca">More...</a><br /></td></tr>
<tr class="separator:ga770e72ca34cf2c3b91446faccbf811ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e951d618ebdf3d9ab3b14e7481b45ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga0e951d618ebdf3d9ab3b14e7481b45ef">operator|</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga0e951d618ebdf3d9ab3b14e7481b45ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#ga0e951d618ebdf3d9ab3b14e7481b45ef">More...</a><br /></td></tr>
<tr class="separator:ga0e951d618ebdf3d9ab3b14e7481b45ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gada745690de11033defc03fe14f6a5f50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#gada745690de11033defc03fe14f6a5f50">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:gada745690de11033defc03fe14f6a5f50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise OR operation on two arrays or an array and a value.   <a href="group__arith__func__bitor.htm#gada745690de11033defc03fe14f6a5f50">More...</a><br /></td></tr>
<tr class="separator:gada745690de11033defc03fe14f6a5f50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga85c77120b83c9895c098e4c0190e7e79"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga85c77120b83c9895c098e4c0190e7e79">operator|</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga85c77120b83c9895c098e4c0190e7e79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga97b6fcf0e5dbe6603668f7f72c2a7977"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga97b6fcf0e5dbe6603668f7f72c2a7977">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga97b6fcf0e5dbe6603668f7f72c2a7977"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.  <a href="group__arith__func__bitxor.htm#ga97b6fcf0e5dbe6603668f7f72c2a7977">More...</a><br /></td></tr>
<tr class="separator:ga97b6fcf0e5dbe6603668f7f72c2a7977"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab3eb61d3ed55b46f3b596a11127540c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gab3eb61d3ed55b46f3b596a11127540c4">operator^</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab3eb61d3ed55b46f3b596a11127540c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gab3eb61d3ed55b46f3b596a11127540c4">More...</a><br /></td></tr>
<tr class="separator:gab3eb61d3ed55b46f3b596a11127540c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32310fc2ac0665526e064aaaf55409f4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga32310fc2ac0665526e064aaaf55409f4">operator^</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga32310fc2ac0665526e064aaaf55409f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga32310fc2ac0665526e064aaaf55409f4">More...</a><br /></td></tr>
<tr class="separator:ga32310fc2ac0665526e064aaaf55409f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d36603b7fb5b9e44cd0e52ed6259393"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga1d36603b7fb5b9e44cd0e52ed6259393">operator^</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga1d36603b7fb5b9e44cd0e52ed6259393"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga1d36603b7fb5b9e44cd0e52ed6259393">More...</a><br /></td></tr>
<tr class="separator:ga1d36603b7fb5b9e44cd0e52ed6259393"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb354e15049cd21c9df3a5e20c113e5a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gadb354e15049cd21c9df3a5e20c113e5a">operator^</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gadb354e15049cd21c9df3a5e20c113e5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gadb354e15049cd21c9df3a5e20c113e5a">More...</a><br /></td></tr>
<tr class="separator:gadb354e15049cd21c9df3a5e20c113e5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1d843fa897e572a59db765ad99ec639"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gab1d843fa897e572a59db765ad99ec639">operator^</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab1d843fa897e572a59db765ad99ec639"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gab1d843fa897e572a59db765ad99ec639">More...</a><br /></td></tr>
<tr class="separator:gab1d843fa897e572a59db765ad99ec639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8dd512e7a0979d84b071a790360d7cde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga8dd512e7a0979d84b071a790360d7cde">operator^</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8dd512e7a0979d84b071a790360d7cde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga8dd512e7a0979d84b071a790360d7cde">More...</a><br /></td></tr>
<tr class="separator:ga8dd512e7a0979d84b071a790360d7cde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga753726d24eb4f0fe05b0d1eb949bf8d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga753726d24eb4f0fe05b0d1eb949bf8d0">operator^</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga753726d24eb4f0fe05b0d1eb949bf8d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga753726d24eb4f0fe05b0d1eb949bf8d0">More...</a><br /></td></tr>
<tr class="separator:ga753726d24eb4f0fe05b0d1eb949bf8d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga23d31a536551a9a37a0ed7d0bbbd540f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga23d31a536551a9a37a0ed7d0bbbd540f">operator^</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga23d31a536551a9a37a0ed7d0bbbd540f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga23d31a536551a9a37a0ed7d0bbbd540f">More...</a><br /></td></tr>
<tr class="separator:ga23d31a536551a9a37a0ed7d0bbbd540f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf473e164788f9ae19bffaab0457d0d71"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gaf473e164788f9ae19bffaab0457d0d71">operator^</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf473e164788f9ae19bffaab0457d0d71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gaf473e164788f9ae19bffaab0457d0d71">More...</a><br /></td></tr>
<tr class="separator:gaf473e164788f9ae19bffaab0457d0d71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11d14ef9c7d610edcc4839c0ced1dcaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga11d14ef9c7d610edcc4839c0ced1dcaa">operator^</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga11d14ef9c7d610edcc4839c0ced1dcaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga11d14ef9c7d610edcc4839c0ced1dcaa">More...</a><br /></td></tr>
<tr class="separator:ga11d14ef9c7d610edcc4839c0ced1dcaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga35080f1160a3d75e83cac0e9652a09b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga35080f1160a3d75e83cac0e9652a09b4">operator^</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga35080f1160a3d75e83cac0e9652a09b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga35080f1160a3d75e83cac0e9652a09b4">More...</a><br /></td></tr>
<tr class="separator:ga35080f1160a3d75e83cac0e9652a09b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74323e9a1ae51b266361fb2f54c3216c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga74323e9a1ae51b266361fb2f54c3216c">operator^</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga74323e9a1ae51b266361fb2f54c3216c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga74323e9a1ae51b266361fb2f54c3216c">More...</a><br /></td></tr>
<tr class="separator:ga74323e9a1ae51b266361fb2f54c3216c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4172e6620b0423ade58236ce875843cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga4172e6620b0423ade58236ce875843cf">operator^</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4172e6620b0423ade58236ce875843cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga4172e6620b0423ade58236ce875843cf">More...</a><br /></td></tr>
<tr class="separator:ga4172e6620b0423ade58236ce875843cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7283a665873e3aedb3d44562a5778ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gac7283a665873e3aedb3d44562a5778ca">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gac7283a665873e3aedb3d44562a5778ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gac7283a665873e3aedb3d44562a5778ca">More...</a><br /></td></tr>
<tr class="separator:gac7283a665873e3aedb3d44562a5778ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe63020dc8738121481faa5857b16cb3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gafe63020dc8738121481faa5857b16cb3">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:gafe63020dc8738121481faa5857b16cb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gafe63020dc8738121481faa5857b16cb3">More...</a><br /></td></tr>
<tr class="separator:gafe63020dc8738121481faa5857b16cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga259f2585b4b580ccb1d8dda60e27416b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga259f2585b4b580ccb1d8dda60e27416b">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga259f2585b4b580ccb1d8dda60e27416b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga259f2585b4b580ccb1d8dda60e27416b">More...</a><br /></td></tr>
<tr class="separator:ga259f2585b4b580ccb1d8dda60e27416b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab98eef689e30bf92274f9518c1c8ac02"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gab98eef689e30bf92274f9518c1c8ac02">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:gab98eef689e30bf92274f9518c1c8ac02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gab98eef689e30bf92274f9518c1c8ac02">More...</a><br /></td></tr>
<tr class="separator:gab98eef689e30bf92274f9518c1c8ac02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8df0717e770c281de891f4c9a6321e87"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga8df0717e770c281de891f4c9a6321e87">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga8df0717e770c281de891f4c9a6321e87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga8df0717e770c281de891f4c9a6321e87">More...</a><br /></td></tr>
<tr class="separator:ga8df0717e770c281de891f4c9a6321e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga371a9461c874715c7b8c43d5b17fdb13"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga371a9461c874715c7b8c43d5b17fdb13">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga371a9461c874715c7b8c43d5b17fdb13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga371a9461c874715c7b8c43d5b17fdb13">More...</a><br /></td></tr>
<tr class="separator:ga371a9461c874715c7b8c43d5b17fdb13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11d2a1b594d12cc618cff4a2564d814f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga11d2a1b594d12cc618cff4a2564d814f">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga11d2a1b594d12cc618cff4a2564d814f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga11d2a1b594d12cc618cff4a2564d814f">More...</a><br /></td></tr>
<tr class="separator:ga11d2a1b594d12cc618cff4a2564d814f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a775332255d2f22b3d99267fb344c09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga6a775332255d2f22b3d99267fb344c09">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga6a775332255d2f22b3d99267fb344c09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga6a775332255d2f22b3d99267fb344c09">More...</a><br /></td></tr>
<tr class="separator:ga6a775332255d2f22b3d99267fb344c09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4617ae1a7c5f1d451565df087313d44f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga4617ae1a7c5f1d451565df087313d44f">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga4617ae1a7c5f1d451565df087313d44f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga4617ae1a7c5f1d451565df087313d44f">More...</a><br /></td></tr>
<tr class="separator:ga4617ae1a7c5f1d451565df087313d44f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00ece1d2d6d20e5217b4222e495fa5bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga00ece1d2d6d20e5217b4222e495fa5bf">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga00ece1d2d6d20e5217b4222e495fa5bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga00ece1d2d6d20e5217b4222e495fa5bf">More...</a><br /></td></tr>
<tr class="separator:ga00ece1d2d6d20e5217b4222e495fa5bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga41fabec890eed78bcb477114c61a76ec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga41fabec890eed78bcb477114c61a76ec">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga41fabec890eed78bcb477114c61a76ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga41fabec890eed78bcb477114c61a76ec">More...</a><br /></td></tr>
<tr class="separator:ga41fabec890eed78bcb477114c61a76ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf397c833f75be66190ff681f271f47d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gaf397c833f75be66190ff681f271f47d0">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaf397c833f75be66190ff681f271f47d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gaf397c833f75be66190ff681f271f47d0">More...</a><br /></td></tr>
<tr class="separator:gaf397c833f75be66190ff681f271f47d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac22e69aa8bbeb28aae6322f1ee391b83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gac22e69aa8bbeb28aae6322f1ee391b83">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:gac22e69aa8bbeb28aae6322f1ee391b83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf142b17019e2deb14b7066733cf0cd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#gadf142b17019e2deb14b7066733cf0cd3">operator^</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gadf142b17019e2deb14b7066733cf0cd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#gadf142b17019e2deb14b7066733cf0cd3">More...</a><br /></td></tr>
<tr class="separator:gadf142b17019e2deb14b7066733cf0cd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga35256817252b5b367af30b66a0cdd22d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga35256817252b5b367af30b66a0cdd22d">operator^</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga35256817252b5b367af30b66a0cdd22d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga35256817252b5b367af30b66a0cdd22d">More...</a><br /></td></tr>
<tr class="separator:ga35256817252b5b367af30b66a0cdd22d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga171b2d0c155f8bc5af9bab3c6c7111e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga171b2d0c155f8bc5af9bab3c6c7111e5">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga171b2d0c155f8bc5af9bab3c6c7111e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise XOR operation on two arrays or an array and a value.   <a href="group__arith__func__bitxor.htm#ga171b2d0c155f8bc5af9bab3c6c7111e5">More...</a><br /></td></tr>
<tr class="separator:ga171b2d0c155f8bc5af9bab3c6c7111e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c073f9808484513001a9a0a4b6ce9cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga9c073f9808484513001a9a0a4b6ce9cc">operator^</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga9c073f9808484513001a9a0a4b6ce9cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga19841f8e962cdccd8dd857d7f9242862"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga19841f8e962cdccd8dd857d7f9242862">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga19841f8e962cdccd8dd857d7f9242862"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.  <a href="group__arith__func__shiftl.htm#ga19841f8e962cdccd8dd857d7f9242862">More...</a><br /></td></tr>
<tr class="separator:ga19841f8e962cdccd8dd857d7f9242862"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab28ddb565b0d9b84408351792376e617"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gab28ddb565b0d9b84408351792376e617">operator&lt;&lt;</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab28ddb565b0d9b84408351792376e617"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gab28ddb565b0d9b84408351792376e617">More...</a><br /></td></tr>
<tr class="separator:gab28ddb565b0d9b84408351792376e617"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98095dcd3001c8a6eda51bb362fd61b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga98095dcd3001c8a6eda51bb362fd61b5">operator&lt;&lt;</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga98095dcd3001c8a6eda51bb362fd61b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga98095dcd3001c8a6eda51bb362fd61b5">More...</a><br /></td></tr>
<tr class="separator:ga98095dcd3001c8a6eda51bb362fd61b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5179f957455374014a2c111570ceecfa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga5179f957455374014a2c111570ceecfa">operator&lt;&lt;</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5179f957455374014a2c111570ceecfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga5179f957455374014a2c111570ceecfa">More...</a><br /></td></tr>
<tr class="separator:ga5179f957455374014a2c111570ceecfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga451cdbb97591f0b92ab7a8468c945fa3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga451cdbb97591f0b92ab7a8468c945fa3">operator&lt;&lt;</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga451cdbb97591f0b92ab7a8468c945fa3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga451cdbb97591f0b92ab7a8468c945fa3">More...</a><br /></td></tr>
<tr class="separator:ga451cdbb97591f0b92ab7a8468c945fa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa92a134baa9c9df8fdd6ec15995bcdc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gaa92a134baa9c9df8fdd6ec15995bcdc9">operator&lt;&lt;</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa92a134baa9c9df8fdd6ec15995bcdc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gaa92a134baa9c9df8fdd6ec15995bcdc9">More...</a><br /></td></tr>
<tr class="separator:gaa92a134baa9c9df8fdd6ec15995bcdc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3551b214c269e4160bec54f4591073c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga3551b214c269e4160bec54f4591073c8">operator&lt;&lt;</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga3551b214c269e4160bec54f4591073c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga3551b214c269e4160bec54f4591073c8">More...</a><br /></td></tr>
<tr class="separator:ga3551b214c269e4160bec54f4591073c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11d90c3a55018b2a1486c49e9ec1c252"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga11d90c3a55018b2a1486c49e9ec1c252">operator&lt;&lt;</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga11d90c3a55018b2a1486c49e9ec1c252"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga11d90c3a55018b2a1486c49e9ec1c252">More...</a><br /></td></tr>
<tr class="separator:ga11d90c3a55018b2a1486c49e9ec1c252"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6b74cfb08bc333a196c8b0e8c9c07b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gac6b74cfb08bc333a196c8b0e8c9c07b9">operator&lt;&lt;</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac6b74cfb08bc333a196c8b0e8c9c07b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gac6b74cfb08bc333a196c8b0e8c9c07b9">More...</a><br /></td></tr>
<tr class="separator:gac6b74cfb08bc333a196c8b0e8c9c07b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72ecdb97cbe9c63e668b475197998b2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga72ecdb97cbe9c63e668b475197998b2c">operator&lt;&lt;</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga72ecdb97cbe9c63e668b475197998b2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga72ecdb97cbe9c63e668b475197998b2c">More...</a><br /></td></tr>
<tr class="separator:ga72ecdb97cbe9c63e668b475197998b2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadd0f7c17f6b881005c3b697e0a77304a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gadd0f7c17f6b881005c3b697e0a77304a">operator&lt;&lt;</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gadd0f7c17f6b881005c3b697e0a77304a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gadd0f7c17f6b881005c3b697e0a77304a">More...</a><br /></td></tr>
<tr class="separator:gadd0f7c17f6b881005c3b697e0a77304a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4db7fa0c38758e1b42a141c0bfc2ebbd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga4db7fa0c38758e1b42a141c0bfc2ebbd">operator&lt;&lt;</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4db7fa0c38758e1b42a141c0bfc2ebbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga4db7fa0c38758e1b42a141c0bfc2ebbd">More...</a><br /></td></tr>
<tr class="separator:ga4db7fa0c38758e1b42a141c0bfc2ebbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0a028ac3b58618ffb8392cf2fd6a7815"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga0a028ac3b58618ffb8392cf2fd6a7815">operator&lt;&lt;</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga0a028ac3b58618ffb8392cf2fd6a7815"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga0a028ac3b58618ffb8392cf2fd6a7815">More...</a><br /></td></tr>
<tr class="separator:ga0a028ac3b58618ffb8392cf2fd6a7815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab2eea765d2a9766fa274eaeddfe54931"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gab2eea765d2a9766fa274eaeddfe54931">operator&lt;&lt;</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab2eea765d2a9766fa274eaeddfe54931"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gab2eea765d2a9766fa274eaeddfe54931">More...</a><br /></td></tr>
<tr class="separator:gab2eea765d2a9766fa274eaeddfe54931"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga420fe0bef2c6b111bdb5a6dc4163ce9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga420fe0bef2c6b111bdb5a6dc4163ce9c">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga420fe0bef2c6b111bdb5a6dc4163ce9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga420fe0bef2c6b111bdb5a6dc4163ce9c">More...</a><br /></td></tr>
<tr class="separator:ga420fe0bef2c6b111bdb5a6dc4163ce9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24553c567b48b525026e3d5e2ab5b2bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga24553c567b48b525026e3d5e2ab5b2bd">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga24553c567b48b525026e3d5e2ab5b2bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga24553c567b48b525026e3d5e2ab5b2bd">More...</a><br /></td></tr>
<tr class="separator:ga24553c567b48b525026e3d5e2ab5b2bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad149377a81c0e9ca4e391c212f3fa7d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gad149377a81c0e9ca4e391c212f3fa7d3">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:gad149377a81c0e9ca4e391c212f3fa7d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gad149377a81c0e9ca4e391c212f3fa7d3">More...</a><br /></td></tr>
<tr class="separator:gad149377a81c0e9ca4e391c212f3fa7d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5983f92965fabb8b469dd8f138a0ae43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga5983f92965fabb8b469dd8f138a0ae43">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga5983f92965fabb8b469dd8f138a0ae43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga5983f92965fabb8b469dd8f138a0ae43">More...</a><br /></td></tr>
<tr class="separator:ga5983f92965fabb8b469dd8f138a0ae43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae26405cbe9e1af87fb3cc9a74b4faaf6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gae26405cbe9e1af87fb3cc9a74b4faaf6">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:gae26405cbe9e1af87fb3cc9a74b4faaf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gae26405cbe9e1af87fb3cc9a74b4faaf6">More...</a><br /></td></tr>
<tr class="separator:gae26405cbe9e1af87fb3cc9a74b4faaf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc17af826ed6ffff2d7a226f4954377a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gabc17af826ed6ffff2d7a226f4954377a">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:gabc17af826ed6ffff2d7a226f4954377a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gabc17af826ed6ffff2d7a226f4954377a">More...</a><br /></td></tr>
<tr class="separator:gabc17af826ed6ffff2d7a226f4954377a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga07235c610f033948799bdafb3de3ce67"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga07235c610f033948799bdafb3de3ce67">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga07235c610f033948799bdafb3de3ce67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga07235c610f033948799bdafb3de3ce67">More...</a><br /></td></tr>
<tr class="separator:ga07235c610f033948799bdafb3de3ce67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6222c8bb04a25a627878fa05658716ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga6222c8bb04a25a627878fa05658716ac">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga6222c8bb04a25a627878fa05658716ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga6222c8bb04a25a627878fa05658716ac">More...</a><br /></td></tr>
<tr class="separator:ga6222c8bb04a25a627878fa05658716ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae8c432d31c4a464b7503709e686c248c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gae8c432d31c4a464b7503709e686c248c">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gae8c432d31c4a464b7503709e686c248c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gae8c432d31c4a464b7503709e686c248c">More...</a><br /></td></tr>
<tr class="separator:gae8c432d31c4a464b7503709e686c248c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5a39782556898cde8ee7d6e7c3d3d7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gaa5a39782556898cde8ee7d6e7c3d3d7e">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:gaa5a39782556898cde8ee7d6e7c3d3d7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gaa5a39782556898cde8ee7d6e7c3d3d7e">More...</a><br /></td></tr>
<tr class="separator:gaa5a39782556898cde8ee7d6e7c3d3d7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3d56684549e28b69db783e30d7bebc78"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga3d56684549e28b69db783e30d7bebc78">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga3d56684549e28b69db783e30d7bebc78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga3d56684549e28b69db783e30d7bebc78">More...</a><br /></td></tr>
<tr class="separator:ga3d56684549e28b69db783e30d7bebc78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa520abe910f2381b41c54e75634206a9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gaa520abe910f2381b41c54e75634206a9">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaa520abe910f2381b41c54e75634206a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gaa520abe910f2381b41c54e75634206a9">More...</a><br /></td></tr>
<tr class="separator:gaa520abe910f2381b41c54e75634206a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad438e226e28690176d50c205eac1d367"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gad438e226e28690176d50c205eac1d367">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:gad438e226e28690176d50c205eac1d367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d9e0e2697b230b3fbd4131a549393cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga1d9e0e2697b230b3fbd4131a549393cb">operator&lt;&lt;</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga1d9e0e2697b230b3fbd4131a549393cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#ga1d9e0e2697b230b3fbd4131a549393cb">More...</a><br /></td></tr>
<tr class="separator:ga1d9e0e2697b230b3fbd4131a549393cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabf17d86d713369f191e1431bb3f629e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gaabf17d86d713369f191e1431bb3f629e">operator&lt;&lt;</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaabf17d86d713369f191e1431bb3f629e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gaabf17d86d713369f191e1431bb3f629e">More...</a><br /></td></tr>
<tr class="separator:gaabf17d86d713369f191e1431bb3f629e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb5d61e7eb457cc94837476d9147799d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gabb5d61e7eb457cc94837476d9147799d">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:gabb5d61e7eb457cc94837476d9147799d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an left shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftl.htm#gabb5d61e7eb457cc94837476d9147799d">More...</a><br /></td></tr>
<tr class="separator:gabb5d61e7eb457cc94837476d9147799d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae06c0b60e59b4581bd3fdab6db0c976"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#gaae06c0b60e59b4581bd3fdab6db0c976">operator&lt;&lt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gaae06c0b60e59b4581bd3fdab6db0c976"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gad130d9b296937446da493f7f7f659178"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gad130d9b296937446da493f7f7f659178">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gad130d9b296937446da493f7f7f659178"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.  <a href="group__arith__func__shiftr.htm#gad130d9b296937446da493f7f7f659178">More...</a><br /></td></tr>
<tr class="separator:gad130d9b296937446da493f7f7f659178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68f103536d4b74debf634d94caebd903"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga68f103536d4b74debf634d94caebd903">operator&gt;&gt;</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga68f103536d4b74debf634d94caebd903"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga68f103536d4b74debf634d94caebd903">More...</a><br /></td></tr>
<tr class="separator:ga68f103536d4b74debf634d94caebd903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafcc5fcaa33f4cd9afe30fa9bce081227"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gafcc5fcaa33f4cd9afe30fa9bce081227">operator&gt;&gt;</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gafcc5fcaa33f4cd9afe30fa9bce081227"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gafcc5fcaa33f4cd9afe30fa9bce081227">More...</a><br /></td></tr>
<tr class="separator:gafcc5fcaa33f4cd9afe30fa9bce081227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6279b94b795c9865aba061c27284fa5d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga6279b94b795c9865aba061c27284fa5d">operator&gt;&gt;</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6279b94b795c9865aba061c27284fa5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga6279b94b795c9865aba061c27284fa5d">More...</a><br /></td></tr>
<tr class="separator:ga6279b94b795c9865aba061c27284fa5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab558843d5e02e957c190af461bd8285f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gab558843d5e02e957c190af461bd8285f">operator&gt;&gt;</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab558843d5e02e957c190af461bd8285f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gab558843d5e02e957c190af461bd8285f">More...</a><br /></td></tr>
<tr class="separator:gab558843d5e02e957c190af461bd8285f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadd6871254a67a8a9d6134ca9cc5d26ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gadd6871254a67a8a9d6134ca9cc5d26ca">operator&gt;&gt;</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gadd6871254a67a8a9d6134ca9cc5d26ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gadd6871254a67a8a9d6134ca9cc5d26ca">More...</a><br /></td></tr>
<tr class="separator:gadd6871254a67a8a9d6134ca9cc5d26ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga872d3eec13f4e33b7e9ac83043fcba80"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga872d3eec13f4e33b7e9ac83043fcba80">operator&gt;&gt;</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga872d3eec13f4e33b7e9ac83043fcba80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga872d3eec13f4e33b7e9ac83043fcba80">More...</a><br /></td></tr>
<tr class="separator:ga872d3eec13f4e33b7e9ac83043fcba80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5342ebb77f96853012e7ce62f158524a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga5342ebb77f96853012e7ce62f158524a">operator&gt;&gt;</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5342ebb77f96853012e7ce62f158524a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga5342ebb77f96853012e7ce62f158524a">More...</a><br /></td></tr>
<tr class="separator:ga5342ebb77f96853012e7ce62f158524a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7747e83389d79236bcae6a9aa085b816"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga7747e83389d79236bcae6a9aa085b816">operator&gt;&gt;</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7747e83389d79236bcae6a9aa085b816"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga7747e83389d79236bcae6a9aa085b816">More...</a><br /></td></tr>
<tr class="separator:ga7747e83389d79236bcae6a9aa085b816"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac33519bf30ca44e4428d41e8770bacf6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gac33519bf30ca44e4428d41e8770bacf6">operator&gt;&gt;</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac33519bf30ca44e4428d41e8770bacf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gac33519bf30ca44e4428d41e8770bacf6">More...</a><br /></td></tr>
<tr class="separator:gac33519bf30ca44e4428d41e8770bacf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd3eb5502888fa9da503df7d8ad85f93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gafd3eb5502888fa9da503df7d8ad85f93">operator&gt;&gt;</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gafd3eb5502888fa9da503df7d8ad85f93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gafd3eb5502888fa9da503df7d8ad85f93">More...</a><br /></td></tr>
<tr class="separator:gafd3eb5502888fa9da503df7d8ad85f93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91840e37c2d5a71ec7d7612ac29bfb4b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga91840e37c2d5a71ec7d7612ac29bfb4b">operator&gt;&gt;</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga91840e37c2d5a71ec7d7612ac29bfb4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga91840e37c2d5a71ec7d7612ac29bfb4b">More...</a><br /></td></tr>
<tr class="separator:ga91840e37c2d5a71ec7d7612ac29bfb4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga891695eec916a0f240d2e5f6823279a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga891695eec916a0f240d2e5f6823279a2">operator&gt;&gt;</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga891695eec916a0f240d2e5f6823279a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga891695eec916a0f240d2e5f6823279a2">More...</a><br /></td></tr>
<tr class="separator:ga891695eec916a0f240d2e5f6823279a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab83151425032d20dd5b1cd71368a3700"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gab83151425032d20dd5b1cd71368a3700">operator&gt;&gt;</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab83151425032d20dd5b1cd71368a3700"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gab83151425032d20dd5b1cd71368a3700">More...</a><br /></td></tr>
<tr class="separator:gab83151425032d20dd5b1cd71368a3700"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab78e73b2b769b5f2df86861e8aa49d1a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gab78e73b2b769b5f2df86861e8aa49d1a">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gab78e73b2b769b5f2df86861e8aa49d1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gab78e73b2b769b5f2df86861e8aa49d1a">More...</a><br /></td></tr>
<tr class="separator:gab78e73b2b769b5f2df86861e8aa49d1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga395bea130ffa5ecffd78c2ef966afa18"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga395bea130ffa5ecffd78c2ef966afa18">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga395bea130ffa5ecffd78c2ef966afa18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga395bea130ffa5ecffd78c2ef966afa18">More...</a><br /></td></tr>
<tr class="separator:ga395bea130ffa5ecffd78c2ef966afa18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa7a3e0403c8ede7420cf386bdff72e84"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gaa7a3e0403c8ede7420cf386bdff72e84">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:gaa7a3e0403c8ede7420cf386bdff72e84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gaa7a3e0403c8ede7420cf386bdff72e84">More...</a><br /></td></tr>
<tr class="separator:gaa7a3e0403c8ede7420cf386bdff72e84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ab483e40abdd8cc2d2534fd93cd1e67"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga7ab483e40abdd8cc2d2534fd93cd1e67">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga7ab483e40abdd8cc2d2534fd93cd1e67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga7ab483e40abdd8cc2d2534fd93cd1e67">More...</a><br /></td></tr>
<tr class="separator:ga7ab483e40abdd8cc2d2534fd93cd1e67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0cc34e39d43d0dd6e6d471343767e774"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga0cc34e39d43d0dd6e6d471343767e774">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga0cc34e39d43d0dd6e6d471343767e774"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga0cc34e39d43d0dd6e6d471343767e774">More...</a><br /></td></tr>
<tr class="separator:ga0cc34e39d43d0dd6e6d471343767e774"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2c8507f4f920ea778bbb01cdc74ea165"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga2c8507f4f920ea778bbb01cdc74ea165">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga2c8507f4f920ea778bbb01cdc74ea165"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga2c8507f4f920ea778bbb01cdc74ea165">More...</a><br /></td></tr>
<tr class="separator:ga2c8507f4f920ea778bbb01cdc74ea165"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f0df8a3f17c801777f67e5413e84b20"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga9f0df8a3f17c801777f67e5413e84b20">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga9f0df8a3f17c801777f67e5413e84b20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga9f0df8a3f17c801777f67e5413e84b20">More...</a><br /></td></tr>
<tr class="separator:ga9f0df8a3f17c801777f67e5413e84b20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga56cbf6c8943fbe065a0c1a493259176c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga56cbf6c8943fbe065a0c1a493259176c">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga56cbf6c8943fbe065a0c1a493259176c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga56cbf6c8943fbe065a0c1a493259176c">More...</a><br /></td></tr>
<tr class="separator:ga56cbf6c8943fbe065a0c1a493259176c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2eb72297b66d4ad0a16dbe196d5f8f4a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga2eb72297b66d4ad0a16dbe196d5f8f4a">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga2eb72297b66d4ad0a16dbe196d5f8f4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga2eb72297b66d4ad0a16dbe196d5f8f4a">More...</a><br /></td></tr>
<tr class="separator:ga2eb72297b66d4ad0a16dbe196d5f8f4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf6bc74243092c1c03eba8820e4e4919e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gaf6bc74243092c1c03eba8820e4e4919e">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:gaf6bc74243092c1c03eba8820e4e4919e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gaf6bc74243092c1c03eba8820e4e4919e">More...</a><br /></td></tr>
<tr class="separator:gaf6bc74243092c1c03eba8820e4e4919e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb8d3de265286ba5ba75834ba5a4e9a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gadb8d3de265286ba5ba75834ba5a4e9a5">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:gadb8d3de265286ba5ba75834ba5a4e9a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gadb8d3de265286ba5ba75834ba5a4e9a5">More...</a><br /></td></tr>
<tr class="separator:gadb8d3de265286ba5ba75834ba5a4e9a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58f0fa022d6bf3c621f2982c480dbfca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga58f0fa022d6bf3c621f2982c480dbfca">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga58f0fa022d6bf3c621f2982c480dbfca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga58f0fa022d6bf3c621f2982c480dbfca">More...</a><br /></td></tr>
<tr class="separator:ga58f0fa022d6bf3c621f2982c480dbfca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa90474e2828f9906f37dc7d91c9ed228"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gaa90474e2828f9906f37dc7d91c9ed228">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:gaa90474e2828f9906f37dc7d91c9ed228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83405fd3664217f64ac944f12e14a11b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga83405fd3664217f64ac944f12e14a11b">operator&gt;&gt;</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga83405fd3664217f64ac944f12e14a11b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga83405fd3664217f64ac944f12e14a11b">More...</a><br /></td></tr>
<tr class="separator:ga83405fd3664217f64ac944f12e14a11b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4814f3258b9462be476e0e60893d2048"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga4814f3258b9462be476e0e60893d2048">operator&gt;&gt;</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4814f3258b9462be476e0e60893d2048"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#ga4814f3258b9462be476e0e60893d2048">More...</a><br /></td></tr>
<tr class="separator:ga4814f3258b9462be476e0e60893d2048"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac8ca4033985aad13a10775d271c334f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gac8ca4033985aad13a10775d271c334f8">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:gac8ca4033985aad13a10775d271c334f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an right shift operation on two arrays or an array and a value.   <a href="group__arith__func__shiftr.htm#gac8ca4033985aad13a10775d271c334f8">More...</a><br /></td></tr>
<tr class="separator:gac8ca4033985aad13a10775d271c334f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf75c6f71b1e07ab034e52009c49e4c52"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#gaf75c6f71b1e07ab034e52009c49e4c52">operator&gt;&gt;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gaf75c6f71b1e07ab034e52009c49e4c52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga7d5d2215a50b2e24affc23db8fcab5b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga7d5d2215a50b2e24affc23db8fcab5b2">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7d5d2215a50b2e24affc23db8fcab5b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value.  <a href="group__arith__func__bitand.htm#ga7d5d2215a50b2e24affc23db8fcab5b2">More...</a><br /></td></tr>
<tr class="separator:ga7d5d2215a50b2e24affc23db8fcab5b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83d2c1412c453df4d09d35f5a7b9d137"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga83d2c1412c453df4d09d35f5a7b9d137">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="separator:ga83d2c1412c453df4d09d35f5a7b9d137"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b810904b8b811742b4fa404a5a24ed2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga2b810904b8b811742b4fa404a5a24ed2">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga2b810904b8b811742b4fa404a5a24ed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a49fa5e7fcc2edc3bfdae367f1fde3b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga1a49fa5e7fcc2edc3bfdae367f1fde3b">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:ga1a49fa5e7fcc2edc3bfdae367f1fde3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga467b5423ad01b73d543b381f510a619d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga467b5423ad01b73d543b381f510a619d">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="separator:ga467b5423ad01b73d543b381f510a619d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga116e84f2be4a8402248c55a6b06286ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga116e84f2be4a8402248c55a6b06286ef">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:ga116e84f2be4a8402248c55a6b06286ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc7e0fe374ea7a702ca3f62a36a12517"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gabc7e0fe374ea7a702ca3f62a36a12517">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="separator:gabc7e0fe374ea7a702ca3f62a36a12517"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ad74949daef5a3f00f0186e72a7a9aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga3ad74949daef5a3f00f0186e72a7a9aa">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="separator:ga3ad74949daef5a3f00f0186e72a7a9aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6479e1f127d7b40ca24353875dd43d04"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga6479e1f127d7b40ca24353875dd43d04">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="separator:ga6479e1f127d7b40ca24353875dd43d04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e011d5fa9123670acce020f885c82b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga3e011d5fa9123670acce020f885c82b3">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="separator:ga3e011d5fa9123670acce020f885c82b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga702f435cae2aa6b397d79aa5596efd88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga702f435cae2aa6b397d79aa5596efd88">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="separator:ga702f435cae2aa6b397d79aa5596efd88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5fb366bc2450d78cdacb3d83402420b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga5fb366bc2450d78cdacb3d83402420b9">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="separator:ga5fb366bc2450d78cdacb3d83402420b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3d318c984fdbbc5b1ab18e2f3a23e6db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga3d318c984fdbbc5b1ab18e2f3a23e6db">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="separator:ga3d318c984fdbbc5b1ab18e2f3a23e6db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae711bd18b75e48225d2702d805effbc1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gae711bd18b75e48225d2702d805effbc1">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="separator:gae711bd18b75e48225d2702d805effbc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac29c2c00d85bb8df0a7a8e446d9ea5ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gac29c2c00d85bb8df0a7a8e446d9ea5ed">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:gac29c2c00d85bb8df0a7a8e446d9ea5ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7a7c0d7301b37d6f3b1d7a2cc2928e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gae7a7c0d7301b37d6f3b1d7a2cc2928e8">operator&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="separator:gae7a7c0d7301b37d6f3b1d7a2cc2928e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga92e9d951d69f258c3958ee0161c4e7b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga92e9d951d69f258c3958ee0161c4e7b1">operator&amp;</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga92e9d951d69f258c3958ee0161c4e7b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fc7a012f27f8544c916eb823f73bbe5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga9fc7a012f27f8544c916eb823f73bbe5">operator&amp;</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga9fc7a012f27f8544c916eb823f73bbe5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga070ec00632321ac37b076775b3f7ce6e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga070ec00632321ac37b076775b3f7ce6e">operator&amp;</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga070ec00632321ac37b076775b3f7ce6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaadf88dfed308dbca64bba817fec1f43c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gaadf88dfed308dbca64bba817fec1f43c">operator&amp;</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gaadf88dfed308dbca64bba817fec1f43c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a28d926bff32649216c1ea9e6e460fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga6a28d926bff32649216c1ea9e6e460fe">operator&amp;</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga6a28d926bff32649216c1ea9e6e460fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga27367d8e9cfad4e2f52ddc8ad332fd9d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga27367d8e9cfad4e2f52ddc8ad332fd9d">operator&amp;</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga27367d8e9cfad4e2f52ddc8ad332fd9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62c2584ff5fa84b22332b2e1458f6ca5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga62c2584ff5fa84b22332b2e1458f6ca5">operator&amp;</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga62c2584ff5fa84b22332b2e1458f6ca5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae53c6276224eed1b391dd2385a628445"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gae53c6276224eed1b391dd2385a628445">operator&amp;</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gae53c6276224eed1b391dd2385a628445"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b88cbaa18425bd284a2bcc7a768fbdb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga9b88cbaa18425bd284a2bcc7a768fbdb">operator&amp;</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga9b88cbaa18425bd284a2bcc7a768fbdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gababc1a871247abbbf54ca888dc8a19a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gababc1a871247abbbf54ca888dc8a19a0">operator&amp;</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gababc1a871247abbbf54ca888dc8a19a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1168167147a0af136fcd48d949de9ccc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga1168167147a0af136fcd48d949de9ccc">operator&amp;</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga1168167147a0af136fcd48d949de9ccc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga151e565c804538a03363c445f52acb79"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga151e565c804538a03363c445f52acb79">operator&amp;</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga151e565c804538a03363c445f52acb79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga333a5007cdbdcc647e7181c94e2dfd09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga333a5007cdbdcc647e7181c94e2dfd09">operator&amp;</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga333a5007cdbdcc647e7181c94e2dfd09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad54d88fc2c8aa46e810ee2b1ca57eacd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gad54d88fc2c8aa46e810ee2b1ca57eacd">operator&amp;</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gad54d88fc2c8aa46e810ee2b1ca57eacd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1cc44d5d38af9fe15a3265182aa09ee7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga1cc44d5d38af9fe15a3265182aa09ee7">operator&amp;</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga1cc44d5d38af9fe15a3265182aa09ee7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gace7ea04c1d6a160e3d85b02712d7f36d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gace7ea04c1d6a160e3d85b02712d7f36d">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gace7ea04c1d6a160e3d85b02712d7f36d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a logical AND operation on two arrays or an array and a value.  <a href="group__arith__func__and.htm#gace7ea04c1d6a160e3d85b02712d7f36d">More...</a><br /></td></tr>
<tr class="separator:gace7ea04c1d6a160e3d85b02712d7f36d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b0c0662795d8d81a8a2e4652802cda9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga9b0c0662795d8d81a8a2e4652802cda9">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="separator:ga9b0c0662795d8d81a8a2e4652802cda9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga35f23c55ea2cdf833687ea71dd1a856d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga35f23c55ea2cdf833687ea71dd1a856d">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga35f23c55ea2cdf833687ea71dd1a856d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae098ee7de79d80ee55a294ff10c8a719"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gae098ee7de79d80ee55a294ff10c8a719">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="separator:gae098ee7de79d80ee55a294ff10c8a719"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8ba25c701f1daa23fe14d7ba8cb150cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga8ba25c701f1daa23fe14d7ba8cb150cd">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="separator:ga8ba25c701f1daa23fe14d7ba8cb150cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8054a8b660adda26e79a4a844a99f739"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga8054a8b660adda26e79a4a844a99f739">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:ga8054a8b660adda26e79a4a844a99f739"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8cfdfdf6800fb0a123d5212053271d32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga8cfdfdf6800fb0a123d5212053271d32">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="separator:ga8cfdfdf6800fb0a123d5212053271d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72863ac0ad2b0a2ec9ea972a3120bd27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga72863ac0ad2b0a2ec9ea972a3120bd27">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="separator:ga72863ac0ad2b0a2ec9ea972a3120bd27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3eced739cf00d6ebde8b66dd931154dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga3eced739cf00d6ebde8b66dd931154dd">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="separator:ga3eced739cf00d6ebde8b66dd931154dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0158e081790bd3b444ea5d524fccf36b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga0158e081790bd3b444ea5d524fccf36b">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="separator:ga0158e081790bd3b444ea5d524fccf36b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb2351a743a773d30cddf4c9a63f9c4e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gabb2351a743a773d30cddf4c9a63f9c4e">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="separator:gabb2351a743a773d30cddf4c9a63f9c4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga469aa5f2ec5fc0beebf714450211f592"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga469aa5f2ec5fc0beebf714450211f592">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="separator:ga469aa5f2ec5fc0beebf714450211f592"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaef6274296de0293ce70ce43a080673aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gaef6274296de0293ce70ce43a080673aa">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="separator:gaef6274296de0293ce70ce43a080673aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga370a6ce571a88de09e626018e6fb5ae3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga370a6ce571a88de09e626018e6fb5ae3">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="separator:ga370a6ce571a88de09e626018e6fb5ae3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga71034234033c8ceb71e11e009c55f7a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga71034234033c8ceb71e11e009c55f7a6">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga71034234033c8ceb71e11e009c55f7a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabd52a68d8da9c2c23f1784d339f3e32e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gabd52a68d8da9c2c23f1784d339f3e32e">operator&amp;&amp;</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="separator:gabd52a68d8da9c2c23f1784d339f3e32e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafccbf1c32976893d83ac8b7baa8efab4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gafccbf1c32976893d83ac8b7baa8efab4">operator&amp;&amp;</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gafccbf1c32976893d83ac8b7baa8efab4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c4e02d0ae1663bafa447c91570dd734"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga8c4e02d0ae1663bafa447c91570dd734">operator&amp;&amp;</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga8c4e02d0ae1663bafa447c91570dd734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c3933d36879027445bb06c6fc4bf492"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga1c3933d36879027445bb06c6fc4bf492">operator&amp;&amp;</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga1c3933d36879027445bb06c6fc4bf492"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga259b93fd537fa61e43dc704b1d53e2aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga259b93fd537fa61e43dc704b1d53e2aa">operator&amp;&amp;</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga259b93fd537fa61e43dc704b1d53e2aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4dd3f428acce6bc11a0797947c181d62"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga4dd3f428acce6bc11a0797947c181d62">operator&amp;&amp;</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga4dd3f428acce6bc11a0797947c181d62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ea249723769e8839ba3ecc167c0179d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga5ea249723769e8839ba3ecc167c0179d">operator&amp;&amp;</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga5ea249723769e8839ba3ecc167c0179d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a1a6a1e77c5bfbdd79ec827fb1eeead"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga4a1a6a1e77c5bfbdd79ec827fb1eeead">operator&amp;&amp;</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga4a1a6a1e77c5bfbdd79ec827fb1eeead"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe3f441ae2ca5696efa1948c06b04649"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gabe3f441ae2ca5696efa1948c06b04649">operator&amp;&amp;</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gabe3f441ae2ca5696efa1948c06b04649"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae6d01f79e94ce1aeb789af3c2f87d9e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gae6d01f79e94ce1aeb789af3c2f87d9e5">operator&amp;&amp;</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gae6d01f79e94ce1aeb789af3c2f87d9e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5ef22764a351e81b91cb34b5bc3b0b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gae5ef22764a351e81b91cb34b5bc3b0b5">operator&amp;&amp;</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gae5ef22764a351e81b91cb34b5bc3b0b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0a6dc6545084983e94379f7a3737131"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gae0a6dc6545084983e94379f7a3737131">operator&amp;&amp;</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gae0a6dc6545084983e94379f7a3737131"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga82aad0fdd47f17c3d9c4985d16b1233b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#ga82aad0fdd47f17c3d9c4985d16b1233b">operator&amp;&amp;</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:ga82aad0fdd47f17c3d9c4985d16b1233b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad907c9a108634ba4aec95aae9f195382"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gad907c9a108634ba4aec95aae9f195382">operator&amp;&amp;</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gad907c9a108634ba4aec95aae9f195382"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaecf5ea222997a07c57085b7d9290688b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gaecf5ea222997a07c57085b7d9290688b">operator&amp;&amp;</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gaecf5ea222997a07c57085b7d9290688b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa18942f8cc6078aa541e68722f17b71e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gaa18942f8cc6078aa541e68722f17b71e">operator&amp;&amp;</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="separator:gaa18942f8cc6078aa541e68722f17b71e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gaabf89285b7036427efe452491025567d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#gaabf89285b7036427efe452491025567d">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a)</td></tr>
<tr class="memdesc:gaabf89285b7036427efe452491025567d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate an expression (nonblocking).  <a href="group__data__mat.htm#gaabf89285b7036427efe452491025567d">More...</a><br /></td></tr>
<tr class="separator:gaabf89285b7036427efe452491025567d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeb23ddc71eab09a347a16d95ef50bb8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#gaeb23ddc71eab09a347a16d95ef50bb8e">eval</a> (int num, <a class="el" href="classaf_1_1array.htm">array</a> **arrays)</td></tr>
<tr class="memdesc:gaeb23ddc71eab09a347a16d95ef50bb8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate multiple arrays simultaneously.  <a href="group__data__mat.htm#gaeb23ddc71eab09a347a16d95ef50bb8e">More...</a><br /></td></tr>
<tr class="separator:gaeb23ddc71eab09a347a16d95ef50bb8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c2e8a69bc1358ed6ccebd7389592f41"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga1c2e8a69bc1358ed6ccebd7389592f41">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="separator:ga1c2e8a69bc1358ed6ccebd7389592f41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad38e2b8e4cf47b3fc368cac216e2cc0c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#gad38e2b8e4cf47b3fc368cac216e2cc0c">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, <a class="el" href="classaf_1_1array.htm">array</a> &amp;c)</td></tr>
<tr class="separator:gad38e2b8e4cf47b3fc368cac216e2cc0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad33a414f09315ad6c29dfbbf27667056"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#gad33a414f09315ad6c29dfbbf27667056">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, <a class="el" href="classaf_1_1array.htm">array</a> &amp;d)</td></tr>
<tr class="separator:gad33a414f09315ad6c29dfbbf27667056"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0161c96c96679621c5a84d3f5624365a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga0161c96c96679621c5a84d3f5624365a">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, <a class="el" href="classaf_1_1array.htm">array</a> &amp;d, <a class="el" href="classaf_1_1array.htm">array</a> &amp;e)</td></tr>
<tr class="separator:ga0161c96c96679621c5a84d3f5624365a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa6c941656e8249523a4571dbce1ea238"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#gaa6c941656e8249523a4571dbce1ea238">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, <a class="el" href="classaf_1_1array.htm">array</a> &amp;d, <a class="el" href="classaf_1_1array.htm">array</a> &amp;e, <a class="el" href="classaf_1_1array.htm">array</a> &amp;f)</td></tr>
<tr class="separator:gaa6c941656e8249523a4571dbce1ea238"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf4111f1b5bba7b23172bd1edb612cf4d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#gaf4111f1b5bba7b23172bd1edb612cf4d">eval</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a)</td></tr>
<tr class="memdesc:gaf4111f1b5bba7b23172bd1edb612cf4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate an expression (nonblocking).  <a href="group__data__mat.htm#gaf4111f1b5bba7b23172bd1edb612cf4d">More...</a><br /></td></tr>
<tr class="separator:gaf4111f1b5bba7b23172bd1edb612cf4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga20b29d9e7a43ca8b78e71425d77e2c3e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga20b29d9e7a43ca8b78e71425d77e2c3e">eval</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="separator:ga20b29d9e7a43ca8b78e71425d77e2c3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6768d050c6f6b5dfaa81e58bef8e6c7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga6768d050c6f6b5dfaa81e58bef8e6c7e">eval</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;c)</td></tr>
<tr class="separator:ga6768d050c6f6b5dfaa81e58bef8e6c7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a4e51d8235be39feb95ed7f3705d45a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga6a4e51d8235be39feb95ed7f3705d45a">eval</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;d)</td></tr>
<tr class="separator:ga6a4e51d8235be39feb95ed7f3705d45a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f0887f5ce7949238c183c4935cb4c43"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga2f0887f5ce7949238c183c4935cb4c43">eval</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;d, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;e)</td></tr>
<tr class="separator:ga2f0887f5ce7949238c183c4935cb4c43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f6a1f0711ec8f6274fb659657769829"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga0f6a1f0711ec8f6274fb659657769829">eval</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;a, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;d, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;e, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;f)</td></tr>
<tr class="separator:ga0f6a1f0711ec8f6274fb659657769829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga53102a8868e3897da60a9fe6c07a3579"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga53102a8868e3897da60a9fe6c07a3579">setManualEvalFlag</a> (bool flag)</td></tr>
<tr class="memdesc:ga53102a8868e3897da60a9fe6c07a3579"><td class="mdescLeft">&#160;</td><td class="mdescRight">Turn the manual eval flag on or off.  <a href="group__data__mat.htm#ga53102a8868e3897da60a9fe6c07a3579">More...</a><br /></td></tr>
<tr class="separator:ga53102a8868e3897da60a9fe6c07a3579"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24a43914c6cdc2f7340093f2c2fb3fae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__mat.htm#ga24a43914c6cdc2f7340093f2c2fb3fae">getManualEvalFlag</a> ()</td></tr>
<tr class="memdesc:ga24a43914c6cdc2f7340093f2c2fb3fae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the manual eval flag.  <a href="group__data__mat.htm#ga24a43914c6cdc2f7340093f2c2fb3fae">More...</a><br /></td></tr>
<tr class="separator:ga24a43914c6cdc2f7340093f2c2fb3fae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga714a6da5680ea41fbcb0769c24fe514b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm#ga714a6da5680ea41fbcb0769c24fe514b">alloc</a> (const size_t elements, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type)</td></tr>
<tr class="memdesc:ga714a6da5680ea41fbcb0769c24fe514b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory using ArrayFire's memory manager.  <a href="group__device__func__alloc.htm#ga714a6da5680ea41fbcb0769c24fe514b">More...</a><br /></td></tr>
<tr class="separator:ga714a6da5680ea41fbcb0769c24fe514b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0cb0857d16623f2cd1fdace44a6595ba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm#ga0cb0857d16623f2cd1fdace44a6595ba">allocV2</a> (const size_t bytes)</td></tr>
<tr class="memdesc:ga0cb0857d16623f2cd1fdace44a6595ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory using ArrayFire's memory manager.  <a href="group__device__func__alloc.htm#ga0cb0857d16623f2cd1fdace44a6595ba">More...</a><br /></td></tr>
<tr class="separator:ga0cb0857d16623f2cd1fdace44a6595ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a234b3dbe6cf6f9c6603a0f0c132b79"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga4a234b3dbe6cf6f9c6603a0f0c132b79"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm#ga4a234b3dbe6cf6f9c6603a0f0c132b79">alloc</a> (const size_t elements)</td></tr>
<tr class="memdesc:ga4a234b3dbe6cf6f9c6603a0f0c132b79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory using ArrayFire's memory manager.  <a href="group__device__func__alloc.htm#ga4a234b3dbe6cf6f9c6603a0f0c132b79">More...</a><br /></td></tr>
<tr class="separator:ga4a234b3dbe6cf6f9c6603a0f0c132b79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga4f91c8be1d824505603ace1ad21632bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__pinned.htm#ga4f91c8be1d824505603ace1ad21632bb">pinned</a> (const size_t elements, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type)</td></tr>
<tr class="separator:ga4f91c8be1d824505603ace1ad21632bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c08b181e719bb20f679593551157e62"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga8c08b181e719bb20f679593551157e62"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__device__func__pinned.htm#ga8c08b181e719bb20f679593551157e62">pinned</a> (const size_t elements)</td></tr>
<tr class="memdesc:ga8c08b181e719bb20f679593551157e62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate pinned memory using ArrayFire's memory manager.   <a href="group__device__func__pinned.htm#ga8c08b181e719bb20f679593551157e62">More...</a><br /></td></tr>
<tr class="separator:ga8c08b181e719bb20f679593551157e62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gab67ced8207d177d239ffbf41d333cb0a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#gab67ced8207d177d239ffbf41d333cb0a">deviceMemInfo</a> (size_t *alloc_bytes, size_t *alloc_buffers, size_t *lock_bytes, size_t *lock_buffers)</td></tr>
<tr class="memdesc:gab67ced8207d177d239ffbf41d333cb0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets information about the memory manager.  <a href="group__device__func__mem.htm#gab67ced8207d177d239ffbf41d333cb0a">More...</a><br /></td></tr>
<tr class="separator:gab67ced8207d177d239ffbf41d333cb0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga634fae04c76013ff79dac7b71c7ca6ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga634fae04c76013ff79dac7b71c7ca6ef">printMemInfo</a> (const char *msg=NULL, const int device_id=-1)</td></tr>
<tr class="memdesc:ga634fae04c76013ff79dac7b71c7ca6ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints buffer details from the ArrayFire Device Manager.  <a href="group__device__func__mem.htm#ga634fae04c76013ff79dac7b71c7ca6ef">More...</a><br /></td></tr>
<tr class="separator:ga634fae04c76013ff79dac7b71c7ca6ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacb3dd5a4e98ef2e2ae5b0f382845ed5d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#gacb3dd5a4e98ef2e2ae5b0f382845ed5d">deviceGC</a> ()</td></tr>
<tr class="memdesc:gacb3dd5a4e98ef2e2ae5b0f382845ed5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call the garbage collection function in the memory manager.  <a href="group__device__func__mem.htm#gacb3dd5a4e98ef2e2ae5b0f382845ed5d">More...</a><br /></td></tr>
<tr class="separator:gacb3dd5a4e98ef2e2ae5b0f382845ed5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a6376adaa49cd123a12eda6819a7e4f1e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a6376adaa49cd123a12eda6819a7e4f1e">NaN</a></td></tr>
<tr class="separator:a6376adaa49cd123a12eda6819a7e4f1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a873d028925215930b231204b50712cdb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a873d028925215930b231204b50712cdb">Inf</a></td></tr>
<tr class="separator:a873d028925215930b231204b50712cdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a460631fd3c4d686ad85e199f2a08fe6a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">Pi</a></td></tr>
<tr class="separator:a460631fd3c4d686ad85e199f2a08fe6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a923f02ce0a21b98935aaffd645f717e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#a923f02ce0a21b98935aaffd645f717e0">end</a></td></tr>
<tr class="memdesc:a923f02ce0a21b98935aaffd645f717e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">A special value representing the last value of an axis.  <a href="namespaceaf.htm#a923f02ce0a21b98935aaffd645f717e0">More...</a><br /></td></tr>
<tr class="separator:a923f02ce0a21b98935aaffd645f717e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5c1188f38105afaf8b3f383492a1c9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1seq.htm">seq</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a></td></tr>
<tr class="memdesc:af5c1188f38105afaf8b3f383492a1c9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">A special value representing the entire axis of an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>.  <a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">More...</a><br /></td></tr>
<tr class="separator:af5c1188f38105afaf8b3f383492a1c9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="abb644ea63cfe438ea51235af80ac8469" name="abb644ea63cfe438ea51235af80ac8469"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb644ea63cfe438ea51235af80ac8469">&#9670;&#160;</a></span>af_cdouble</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structaf_1_1af__cdouble.htm">af::af_cdouble</a> <a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a686f38b2bf903b7168423db31b8ed17e" name="a686f38b2bf903b7168423db31b8ed17e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a686f38b2bf903b7168423db31b8ed17e">&#9670;&#160;</a></span>af_cfloat</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structaf_1_1af__cfloat.htm">af::af_cfloat</a> <a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4a413d6206892a435db389f022afc6d8" name="a4a413d6206892a435db389f022afc6d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a413d6206892a435db389f022afc6d8">&#9670;&#160;</a></span>Backend</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af_backend</a> <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">Backend</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00574">574</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ad529987e6641d166b1d9e2448fd9212d" name="ad529987e6641d166b1d9e2448fd9212d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad529987e6641d166b1d9e2448fd9212d">&#9670;&#160;</a></span>batchFunc_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classaf_1_1array.htm">array</a>(* batchFunc_t) (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gfor_8h_source.htm#l00028">28</a> of file <a class="el" href="gfor_8h_source.htm">gfor.h</a>.</p>

</div>
</div>
<a id="ad864b62ff8f81bf33a1df5647453d1dc" name="ad864b62ff8f81bf33a1df5647453d1dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad864b62ff8f81bf33a1df5647453d1dc">&#9670;&#160;</a></span>binaryOp</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">af_binary_op</a> <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">binaryOp</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00586">586</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a5fb048919b30c86d5e55a7275c48d0a6" name="a5fb048919b30c86d5e55a7275c48d0a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fb048919b30c86d5e55a7275c48d0a6">&#9670;&#160;</a></span>borderType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">af_border_type</a> <a class="el" href="defines_8h.htm#a3af15a2f5512e0de849d7bc95de3c113">borderType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00556">556</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ac36806c887ebaedac3bae28831366652" name="ac36806c887ebaedac3bae28831366652"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac36806c887ebaedac3bae28831366652">&#9670;&#160;</a></span>cannyThreshold</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a179019caba59979e58ec07d81cd25ef2">af_canny_threshold</a> <a class="el" href="defines_8h.htm#a179019caba59979e58ec07d81cd25ef2">cannyThreshold</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00592">592</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="acd654c72624253fcd7fd88fe5298aa9a" name="acd654c72624253fcd7fd88fe5298aa9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd654c72624253fcd7fd88fe5298aa9a">&#9670;&#160;</a></span>cdouble</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structaf_1_1af__cdouble.htm">af::af_cdouble</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="complex_8h_source.htm#l00045">45</a> of file <a class="el" href="complex_8h_source.htm">complex.h</a>.</p>

</div>
</div>
<a id="a63e29e484b92e217fe817fe78abc4f5f" name="a63e29e484b92e217fe817fe78abc4f5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63e29e484b92e217fe817fe78abc4f5f">&#9670;&#160;</a></span>cfloat</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structaf_1_1af__cfloat.htm">af::af_cfloat</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="complex_8h_source.htm#l00044">44</a> of file <a class="el" href="complex_8h_source.htm">complex.h</a>.</p>

</div>
</div>
<a id="ac9622c24ded435e51b610ba590f91ff2" name="ac9622c24ded435e51b610ba590f91ff2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9622c24ded435e51b610ba590f91ff2">&#9670;&#160;</a></span>ColorMap</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574ae">af_colormap</a> <a class="el" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574ae">ColorMap</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00565">565</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ad5f01af1e3eb56329923af1f8c64b087" name="ad5f01af1e3eb56329923af1f8c64b087"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5f01af1e3eb56329923af1f8c64b087">&#9670;&#160;</a></span>connectivity</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">af_connectivity</a> <a class="el" href="defines_8h.htm#ae7d8d22b4425c878e1e43ace36ae28be">connectivity</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00557">557</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="af20188b1d2c2b3bcf9c4322baacbd3a7" name="af20188b1d2c2b3bcf9c4322baacbd3a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af20188b1d2c2b3bcf9c4322baacbd3a7">&#9670;&#160;</a></span>convDomain</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">af_conv_domain</a> <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00563">563</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a89130764412e6c5aebf759a9ec97254c" name="a89130764412e6c5aebf759a9ec97254c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89130764412e6c5aebf759a9ec97254c">&#9670;&#160;</a></span>convGradientType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">af_conv_gradient_type</a> <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">convGradientType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00603">603</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ae2a83fe427da320c754bed689d003878" name="ae2a83fe427da320c754bed689d003878"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2a83fe427da320c754bed689d003878">&#9670;&#160;</a></span>convMode</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a> <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00562">562</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a9c172c922ec17f2c9857bac0790479eb" name="a9c172c922ec17f2c9857bac0790479eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c172c922ec17f2c9857bac0790479eb">&#9670;&#160;</a></span>CSpace</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">af_cspace_t</a> <a class="el" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0d">CSpace</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00559">559</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a206f19b6579d41e92bf86927433c0c85" name="a206f19b6579d41e92bf86927433c0c85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a206f19b6579d41e92bf86927433c0c85">&#9670;&#160;</a></span>diffusionEq</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5">af_diffusion_eq</a> <a class="el" href="defines_8h.htm#ac6ea6eab91acb3d99fa711fe514498a5">diffusionEq</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00596">596</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a448f59f3b863561e0fbe00f04dbeca1e" name="a448f59f3b863561e0fbe00f04dbeca1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a448f59f3b863561e0fbe00f04dbeca1e">&#9670;&#160;</a></span>dtype</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00553">553</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a25da2a597c6a277565e1c11a78506444" name="a25da2a597c6a277565e1c11a78506444"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25da2a597c6a277565e1c11a78506444">&#9670;&#160;</a></span>fluxFunction</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbb">af_flux_function</a> <a class="el" href="defines_8h.htm#ae6df6eb017ab7030bfc10b6d98817bbb">fluxFunction</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00595">595</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a052cd0c70f2d9aff3c5d74d8ca56c559" name="a052cd0c70f2d9aff3c5d74d8ca56c559"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a052cd0c70f2d9aff3c5d74d8ca56c559">&#9670;&#160;</a></span>half</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structaf__half.htm">af_half</a> <a class="el" href="namespaceaf.htm#a052cd0c70f2d9aff3c5d74d8ca56c559">half</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="half_8h_source.htm#l00026">26</a> of file <a class="el" href="half_8h_source.htm">half.h</a>.</p>

</div>
</div>
<a id="afe269565ff45bd97459bb3cf2150401e" name="afe269565ff45bd97459bb3cf2150401e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe269565ff45bd97459bb3cf2150401e">&#9670;&#160;</a></span>imageFormat</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6f">af_image_format</a> <a class="el" href="defines_8h.htm#a46734de80dcc107a0732d8ec7c977d6f">imageFormat</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00571">571</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a8ab719402a029bd12093bb06ed44d648" name="a8ab719402a029bd12093bb06ed44d648"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ab719402a029bd12093bb06ed44d648">&#9670;&#160;</a></span>interpType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">af_interp_type</a> <a class="el" href="defines_8h.htm#ac0b7c1cfd1fb146314d96f17bbfffa68">interpType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00555">555</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ae57101eac95e0d49b21404f33694e54b" name="ae57101eac95e0d49b21404f33694e54b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae57101eac95e0d49b21404f33694e54b">&#9670;&#160;</a></span>inverseDeconvAlgo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a2bdf5ea652ab094b2e3dcbeebd0b35c6">af_inverse_deconv_algo</a> <a class="el" href="defines_8h.htm#a2bdf5ea652ab094b2e3dcbeebd0b35c6">inverseDeconvAlgo</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00602">602</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a811caf1c5dbbd2e1c8daa91f4240a74d" name="a811caf1c5dbbd2e1c8daa91f4240a74d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a811caf1c5dbbd2e1c8daa91f4240a74d">&#9670;&#160;</a></span>iterativeDeconvAlgo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a201e6b1dd1068c9795168fc25759a17c">af_iterative_deconv_algo</a> <a class="el" href="defines_8h.htm#a201e6b1dd1068c9795168fc25759a17c">iterativeDeconvAlgo</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00601">601</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="af32df3e457a9ab8750a8d7600c1edda9" name="af32df3e457a9ab8750a8d7600c1edda9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af32df3e457a9ab8750a8d7600c1edda9">&#9670;&#160;</a></span>markerType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ada5c8e0c0cea5e50765377715ff2c02b">af_marker_type</a> <a class="el" href="defines_8h.htm#ada5c8e0c0cea5e50765377715ff2c02b">markerType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00577">577</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a2fbc54212b086e2da368d2926022b4a1" name="a2fbc54212b086e2da368d2926022b4a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fbc54212b086e2da368d2926022b4a1">&#9670;&#160;</a></span>matchType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a> <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">matchType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00558">558</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ab282c0f20fde4f1be35126023734a7cd" name="ab282c0f20fde4f1be35126023734a7cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab282c0f20fde4f1be35126023734a7cd">&#9670;&#160;</a></span>matProp</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">af_mat_prop</a> <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">matProp</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00564">564</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a74cf90148af957ec96ee6942c6f8ae93" name="a74cf90148af957ec96ee6942c6f8ae93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74cf90148af957ec96ee6942c6f8ae93">&#9670;&#160;</a></span>momentType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">af_moment_type</a> <a class="el" href="defines_8h.htm#ad3ee8e32709131cf4126dfa26210aec0">momentType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00580">580</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a9353f25407feae7798860da3be5d7490" name="a9353f25407feae7798860da3be5d7490"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9353f25407feae7798860da3be5d7490">&#9670;&#160;</a></span>normType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdd">af_norm_type</a> <a class="el" href="defines_8h.htm#a30fc084ed706995fdda4f9c7122e1fdd">normType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00566">566</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="aaa341d395616c73f5a587c8586e25115" name="aaa341d395616c73f5a587c8586e25115"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa341d395616c73f5a587c8586e25115">&#9670;&#160;</a></span>randomEngineType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a82a3bf91d6dd04661c63632d0fbf4934">af_random_engine_type</a> <a class="el" href="defines_8h.htm#a82a3bf91d6dd04661c63632d0fbf4934">randomEngineType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00589">589</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a4e673f8420522770732e9ce08d21701e" name="a4e673f8420522770732e9ce08d21701e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e673f8420522770732e9ce08d21701e">&#9670;&#160;</a></span>SomeEnum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">af_someenum_t</a> <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">SomeEnum</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00560">560</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="aaa328f52bf7d2de8150575946f73b13b" name="aaa328f52bf7d2de8150575946f73b13b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa328f52bf7d2de8150575946f73b13b">&#9670;&#160;</a></span>source</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a> <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">source</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00554">554</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a5ea5edbb7e84bd66f25c132ca6f438c8" name="a5ea5edbb7e84bd66f25c132ca6f438c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ea5edbb7e84bd66f25c132ca6f438c8">&#9670;&#160;</a></span>storage</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a> <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">storage</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00583">583</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a33671cc35a44160908e69af74f02b1d1" name="a33671cc35a44160908e69af74f02b1d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33671cc35a44160908e69af74f02b1d1">&#9670;&#160;</a></span>timer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structaf_1_1timer.htm">af::timer</a> <a class="el" href="structaf_1_1timer.htm">timer</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Internal timer object. </p>

</div>
</div>
<a id="a6970270e3088f5dc1ea08555bc0d9eed" name="a6970270e3088f5dc1ea08555bc0d9eed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6970270e3088f5dc1ea08555bc0d9eed">&#9670;&#160;</a></span>topkFunction</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487b">af_topk_function</a> <a class="el" href="defines_8h.htm#a9da1ffc26eb1d77eda51f209f943487b">topkFunction</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00597">597</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ae820124eb78f8139748517b82f67c63d" name="ae820124eb78f8139748517b82f67c63d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae820124eb78f8139748517b82f67c63d">&#9670;&#160;</a></span>trans</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">af_mat_prop</a> <a class="el" href="defines_8h.htm#a67fd2718ccb6233ec081fc7b4757421d">trans</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00561">561</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="a5306a15fe3e16a8b44076ee2b2a8ed80" name="a5306a15fe3e16a8b44076ee2b2a8ed80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5306a15fe3e16a8b44076ee2b2a8ed80">&#9670;&#160;</a></span>varBias</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a> <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">varBias</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00600">600</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<a id="ad570a46373396ff1291de2e74e3bccda" name="ad570a46373396ff1291de2e74e3bccda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad570a46373396ff1291de2e74e3bccda">&#9670;&#160;</a></span>YCCStd</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">af_ycc_std</a> <a class="el" href="defines_8h.htm#aa5679a392b943e17b0a79b803f8737a4">YCCStd</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="defines_8h_source.htm#l00568">568</a> of file <a class="el" href="defines_8h_source.htm">defines.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ace7a551738a61478b291d73517e5afb0" name="ace7a551738a61478b291d73517e5afb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace7a551738a61478b291d73517e5afb0">&#9670;&#160;</a></span>abs() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double abs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5ad14e331503163f2d243acdb1279889" name="a5ad14e331503163f2d243acdb1279889"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ad14e331503163f2d243acdb1279889">&#9670;&#160;</a></span>abs() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float abs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adf56b0c3cd607d1678b8356a49952d89" name="adf56b0c3cd607d1678b8356a49952d89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf56b0c3cd607d1678b8356a49952d89">&#9670;&#160;</a></span>allTrueByKey()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void allTrueByKey </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>keys_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>vals_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface to check if all values along a given dimension are true, according to an array of keys. </p>
<p >NaN values are ignored.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">keys_out</td><td>reduced keys </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vals_out</td><td>array containing 1's if all true; 0's otherwise </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">keys</td><td>keys array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vals</td><td>input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>dimension along which the check occurs </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adff4ec9e49610e9b8b20666e13e7e647" name="adff4ec9e49610e9b8b20666e13e7e647"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adff4ec9e49610e9b8b20666e13e7e647">&#9670;&#160;</a></span>batchFunc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> batchFunc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceaf.htm#ad529987e6641d166b1d9e2448fd9212d">batchFunc_t</a>&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aade28a393541c633079883197de15d09" name="aade28a393541c633079883197de15d09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aade28a393541c633079883197de15d09">&#9670;&#160;</a></span>calcDim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> calcDim </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;&#160;</td>
          <td class="paramname"><em>seq</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> &amp;&#160;</td>
          <td class="paramname"><em>parentDim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of elements that will be represented by seq if applied on an array. </p>

</div>
</div>
<a id="aa7ed0bb4bafb11f669133ff8d1da571a" name="aa7ed0bb4bafb11f669133ff8d1da571a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7ed0bb4bafb11f669133ff8d1da571a">&#9670;&#160;</a></span>conj() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> conj </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af79f2d4bb81e1d4b64fef1a603a19586" name="af79f2d4bb81e1d4b64fef1a603a19586"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af79f2d4bb81e1d4b64fef1a603a19586">&#9670;&#160;</a></span>conj() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> conj </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a38f30b1e01d093bdb2fba364eab04c20" name="a38f30b1e01d093bdb2fba364eab04c20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38f30b1e01d093bdb2fba364eab04c20">&#9670;&#160;</a></span>exampleFunction()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> exampleFunction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#abcc1459f43f27934145c81ff13345798">af_someenum_t</a>&#160;</td>
          <td class="paramname"><em>param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad52a2c5f1ab995d9aa53ef47a2bb5a24" name="ad52a2c5f1ab995d9aa53ef47a2bb5a24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad52a2c5f1ab995d9aa53ef47a2bb5a24">&#9670;&#160;</a></span>filter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> filter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Image Filtering. </p>
<div class="fragment"><div class="line"><span class="comment">// filter (convolve) an image with a 3x3 sobel kernel</span></div>
<div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> h_kernel[] = { -2.0, -1.0,  0.0,</div>
<div class="line">                           -1.0,  0.0,  1.0,</div>
<div class="line">                            0.0,  1.0,  2.0 };</div>
<div class="line">array kernel = array(3,3,h_kernel);</div>
<div class="line">array img_out = <a class="code hl_function" href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">filter</a>(img_in, kernel);</div>
<div class="ttc" id="anamespaceaf_htm_ad52a2c5f1ab995d9aa53ef47a2bb5a24"><div class="ttname"><a href="namespaceaf.htm#ad52a2c5f1ab995d9aa53ef47a2bb5a24">af::filter</a></div><div class="ttdeci">AFAPI array filter(const array &amp;image, const array &amp;kernel)</div><div class="ttdoc">Image Filtering.</div></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">image</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td>coefficient matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>filtered image (same size as input)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Filtering done using correlation. Array values outside bounds are assumed to have zero value (0).</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000016">Deprecated:</a></b></dt><dd>Use <a class="el" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">af::convolve</a> instead </dd></dl>

</div>
</div>
<a id="a7c4cd12a67eb27fc57129e4e7ff06a03" name="a7c4cd12a67eb27fc57129e4e7ff06a03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c4cd12a67eb27fc57129e4e7ff06a03">&#9670;&#160;</a></span>getActiveBackend()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af::Backend</a> getActiveBackend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#ae7db039065fb80471a750bde2f652aca">af_backend</a> which is the backend is currently active </dd></dl>

</div>
</div>
<a id="a0f08b894e170a2ee882e6072af2f52c8" name="a0f08b894e170a2ee882e6072af2f52c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f08b894e170a2ee882e6072af2f52c8">&#9670;&#160;</a></span>getRawPtr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void * getRawPtr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>An multi dimensional array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns the raw pointer location to the array.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This pointer may be shared with other arrays. Use this function with caution. </dd></dl>

</div>
</div>
<a id="a9f61942066de7a396124871e8fd09b0c" name="a9f61942066de7a396124871e8fd09b0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f61942066de7a396124871e8fd09b0c">&#9670;&#160;</a></span>getSizeOf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t getSizeOf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the type represented by an af_dtype enum. </p>

</div>
</div>
<a id="a7debbbc4c5b507ba54881b062628273a" name="a7debbbc4c5b507ba54881b062628273a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7debbbc4c5b507ba54881b062628273a">&#9670;&#160;</a></span>gforGet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool gforGet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9439687e23de25efb55901e4e0fd5900" name="a9439687e23de25efb55901e4e0fd5900"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9439687e23de25efb55901e4e0fd5900">&#9670;&#160;</a></span>gforSet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void gforSet </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a76a503c77a806b1dca90a81105059366" name="a76a503c77a806b1dca90a81105059366"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76a503c77a806b1dca90a81105059366">&#9670;&#160;</a></span>gforToggle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool gforToggle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9d2cdad117867128624600ac14894725" name="a9d2cdad117867128624600ac14894725"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d2cdad117867128624600ac14894725">&#9670;&#160;</a></span>imag() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double imag </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a641f057361e77a9ec71d9f4c003ee0af" name="a641f057361e77a9ec71d9f4c003ee0af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a641f057361e77a9ec71d9f4c003ee0af">&#9670;&#160;</a></span>imag() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float imag </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adc400c0d694369b9eaab95dbe2c428d5" name="adc400c0d694369b9eaab95dbe2c428d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc400c0d694369b9eaab95dbe2c428d5">&#9670;&#160;</a></span>isSpan()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool isSpan </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;&#160;</td>
          <td class="paramname"><em>seq</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the <a class="el" href="structaf__seq.htm" title="C-style struct to creating sequences for indexing.">af_seq</a> object represents the entire range of an axis. </p>

</div>
</div>
<a id="ae1e7c6eb6b42ed166c1e85e242304eb8" name="ae1e7c6eb6b42ed166c1e85e242304eb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1e7c6eb6b42ed166c1e85e242304eb8">&#9670;&#160;</a></span>log2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> log2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface to evaluate the base 2 logarithm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>input </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>base 2 logarithm </dd></dl>

</div>
</div>
<a id="a2149bdb2e5ac3c3593441332edda163c" name="a2149bdb2e5ac3c3593441332edda163c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2149bdb2e5ac3c3593441332edda163c">&#9670;&#160;</a></span>meanvar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void meanvar </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6">af_var_bias</a>&#160;</td>
          <td class="paramname"><em>bias</em> = <code><a class="el" href="defines_8h.htm#aab89eedd894e64d37f6d57a743306ca6ae4f72a0687f083f8988f481f68c58a05">AF_VARIANCE_POPULATION</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for mean and variance. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">mean</td><td>The mean of the input array along <code>dim</code> dimension </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">var</td><td>The variance of the input array along the <code>dim</code> dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>The weights to scale the input array before calculating the mean and varience. If empty, the input is not scaled </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias</td><td>The type of bias used for variance calculation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The dimension along which the variance and mean are calculated. Default is -1 meaning the first non-zero dim </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a526131ac979bb4f1734f6191e485e227" name="a526131ac979bb4f1734f6191e485e227"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a526131ac979bb4f1734f6191e485e227">&#9670;&#160;</a></span>operator!=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a73cfc38311108e33f486afc399fba8cc" name="a73cfc38311108e33f486afc399fba8cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73cfc38311108e33f486afc399fba8cc">&#9670;&#160;</a></span>operator!=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a65b75dfec258ab175132df4a6a9cb3e0" name="a65b75dfec258ab175132df4a6a9cb3e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65b75dfec258ab175132df4a6a9cb3e0">&#9670;&#160;</a></span>operator*() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac00f01162b34aa2861b21bf993c3d41f" name="ac00f01162b34aa2861b21bf993c3d41f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac00f01162b34aa2861b21bf993c3d41f">&#9670;&#160;</a></span>operator*() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6b794a755ec6e1b1037e3e1a90cad264" name="a6b794a755ec6e1b1037e3e1a90cad264"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b794a755ec6e1b1037e3e1a90cad264">&#9670;&#160;</a></span>operator*() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae60d06d007b863082d7bdc0bf45af5e0" name="ae60d06d007b863082d7bdc0bf45af5e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae60d06d007b863082d7bdc0bf45af5e0">&#9670;&#160;</a></span>operator*() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afbe9ee001efd62c1d35c8ad33ba99f91" name="afbe9ee001efd62c1d35c8ad33ba99f91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbe9ee001efd62c1d35c8ad33ba99f91">&#9670;&#160;</a></span>operator*() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afb49e7fa15ff651f7e69b8c7e56fd660" name="afb49e7fa15ff651f7e69b8c7e56fd660"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb49e7fa15ff651f7e69b8c7e56fd660">&#9670;&#160;</a></span>operator*() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9136a6ff4820c764c790613826e0ea99" name="a9136a6ff4820c764c790613826e0ea99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9136a6ff4820c764c790613826e0ea99">&#9670;&#160;</a></span>operator*() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>second</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an element-wise multiplication of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects. </p>

</div>
</div>
<a id="a8c9e72c7d2af604f1868e19500c1b0a9" name="a8c9e72c7d2af604f1868e19500c1b0a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c9e72c7d2af604f1868e19500c1b0a9">&#9670;&#160;</a></span>operator*() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af919ae4a18d716fa25b6c1f6f834f0bd" name="af919ae4a18d716fa25b6c1f6f834f0bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af919ae4a18d716fa25b6c1f6f834f0bd">&#9670;&#160;</a></span>operator*() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adc28042789bcdea972b91bc2f86e680d" name="adc28042789bcdea972b91bc2f86e680d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc28042789bcdea972b91bc2f86e680d">&#9670;&#160;</a></span>operator+() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2eff9e14b645853d9ecaeb28bdd672eb" name="a2eff9e14b645853d9ecaeb28bdd672eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2eff9e14b645853d9ecaeb28bdd672eb">&#9670;&#160;</a></span>operator+() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8dd1c63d0d1fed6545ae8ba8f1689bd3" name="a8dd1c63d0d1fed6545ae8ba8f1689bd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dd1c63d0d1fed6545ae8ba8f1689bd3">&#9670;&#160;</a></span>operator+() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a345f9096703542da4f9f33f61266a347" name="a345f9096703542da4f9f33f61266a347"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a345f9096703542da4f9f33f61266a347">&#9670;&#160;</a></span>operator+() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4f0b23e6c6a8020d83258b0200421d0f" name="a4f0b23e6c6a8020d83258b0200421d0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f0b23e6c6a8020d83258b0200421d0f">&#9670;&#160;</a></span>operator+() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a28918ac5c8ea8c7902881bb42f5fa607" name="a28918ac5c8ea8c7902881bb42f5fa607"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28918ac5c8ea8c7902881bb42f5fa607">&#9670;&#160;</a></span>operator+() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a745e99be6a39c1603a9d92dcbf45470c" name="a745e99be6a39c1603a9d92dcbf45470c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a745e99be6a39c1603a9d92dcbf45470c">&#9670;&#160;</a></span>operator+() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>second</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an element-wise addition of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects. </p>

</div>
</div>
<a id="a8e66835528f7b2515d8dd590a8484602" name="a8e66835528f7b2515d8dd590a8484602"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e66835528f7b2515d8dd590a8484602">&#9670;&#160;</a></span>operator+() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a548e085243ca6b70550448772662cbf2" name="a548e085243ca6b70550448772662cbf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a548e085243ca6b70550448772662cbf2">&#9670;&#160;</a></span>operator+() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaaac3a4c0a6f898bc2c16f99d6b47a41" name="aaaac3a4c0a6f898bc2c16f99d6b47a41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaac3a4c0a6f898bc2c16f99d6b47a41">&#9670;&#160;</a></span>operator-() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8d9ce41934b4dd860dbc1b172ae900ed" name="a8d9ce41934b4dd860dbc1b172ae900ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d9ce41934b4dd860dbc1b172ae900ed">&#9670;&#160;</a></span>operator-() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8462cd1c46b3f51904538a6bbf78698b" name="a8462cd1c46b3f51904538a6bbf78698b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8462cd1c46b3f51904538a6bbf78698b">&#9670;&#160;</a></span>operator-() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2311456bef761fefe27fd18633302fc9" name="a2311456bef761fefe27fd18633302fc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2311456bef761fefe27fd18633302fc9">&#9670;&#160;</a></span>operator-() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a31b78a28d3b1a0ad6d74c1304e7ef5d6" name="a31b78a28d3b1a0ad6d74c1304e7ef5d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31b78a28d3b1a0ad6d74c1304e7ef5d6">&#9670;&#160;</a></span>operator-() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6012983167e758d7b92b8e85d2e2a0f1" name="a6012983167e758d7b92b8e85d2e2a0f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6012983167e758d7b92b8e85d2e2a0f1">&#9670;&#160;</a></span>operator-() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a67ec82371793632c89d548d00863a0a2" name="a67ec82371793632c89d548d00863a0a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67ec82371793632c89d548d00863a0a2">&#9670;&#160;</a></span>operator-() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1dim4.htm">dim4</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>second</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an element-wise subtraction of two <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> objects. </p>

</div>
</div>
<a id="a9886c8d2ddb8188703f0a6da7bcc7224" name="a9886c8d2ddb8188703f0a6da7bcc7224"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9886c8d2ddb8188703f0a6da7bcc7224">&#9670;&#160;</a></span>operator-() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acb7ae075dae54a4f1b961958430f6a37" name="acb7ae075dae54a4f1b961958430f6a37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb7ae075dae54a4f1b961958430f6a37">&#9670;&#160;</a></span>operator-() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a43a63b7dc75e092d399c2b27de175541" name="a43a63b7dc75e092d399c2b27de175541"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43a63b7dc75e092d399c2b27de175541">&#9670;&#160;</a></span>operator/() <span class="overload">[1/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d6c28486784a703ea3afb2416e8823f" name="a3d6c28486784a703ea3afb2416e8823f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d6c28486784a703ea3afb2416e8823f">&#9670;&#160;</a></span>operator/() <span class="overload">[2/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9b2581c863bb406916fa42ba0eb508f8" name="a9b2581c863bb406916fa42ba0eb508f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b2581c863bb406916fa42ba0eb508f8">&#9670;&#160;</a></span>operator/() <span class="overload">[3/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a251b063d3d3bb5fcc9b1df7506d8a8e6" name="a251b063d3d3bb5fcc9b1df7506d8a8e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a251b063d3d3bb5fcc9b1df7506d8a8e6">&#9670;&#160;</a></span>operator/() <span class="overload">[4/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a201022fdc4b8eb871b8237001795ed77" name="a201022fdc4b8eb871b8237001795ed77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a201022fdc4b8eb871b8237001795ed77">&#9670;&#160;</a></span>operator/() <span class="overload">[5/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a81d24e8e1a63bbf1e1f7d4c56f579688" name="a81d24e8e1a63bbf1e1f7d4c56f579688"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81d24e8e1a63bbf1e1f7d4c56f579688">&#9670;&#160;</a></span>operator/() <span class="overload">[6/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a15f031c2fbc772ee7fdf7736b92b7fe0" name="a15f031c2fbc772ee7fdf7736b92b7fe0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15f031c2fbc772ee7fdf7736b92b7fe0">&#9670;&#160;</a></span>operator/() <span class="overload">[7/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a195b6115d405bd1d20efffb91dac22f0" name="a195b6115d405bd1d20efffb91dac22f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a195b6115d405bd1d20efffb91dac22f0">&#9670;&#160;</a></span>operator/() <span class="overload">[8/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5641c25525e5216b872b536310ed0cc9" name="a5641c25525e5216b872b536310ed0cc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5641c25525e5216b872b536310ed0cc9">&#9670;&#160;</a></span>operator&lt;&lt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::ostream &amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3f6208e9c3ceea9d12967e414b54d034" name="a3f6208e9c3ceea9d12967e414b54d034"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f6208e9c3ceea9d12967e414b54d034">&#9670;&#160;</a></span>operator&lt;&lt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::ostream &amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a442db806245b9bf44dc7fa8aa490edad" name="a442db806245b9bf44dc7fa8aa490edad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a442db806245b9bf44dc7fa8aa490edad">&#9670;&#160;</a></span>operator&lt;&lt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::ostream &amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ostr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prints the elements of the <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> array separated by spaces. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">ostr</td><td>An ostream object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>The <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> object to be printed </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to the <code>ostr</code> after the <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> string as been streamed in </dd></dl>

<p class="definition">Definition at line <a class="el" href="dim4_8hpp_source.htm#l00124">124</a> of file <a class="el" href="dim4_8hpp_source.htm">dim4.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  126</span>{</div>
<div class="line"><span class="lineno">  127</span>    ostr &lt;&lt; dims[0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><span class="lineno">  128</span>         &lt;&lt; dims[1] &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><span class="lineno">  129</span>         &lt;&lt; dims[2] &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><span class="lineno">  130</span>         &lt;&lt; dims[3];</div>
<div class="line"><span class="lineno">  131</span>    <span class="keywordflow">return</span> ostr;</div>
<div class="line"><span class="lineno">  132</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a058ce8d362278d7b88b262ba95ae09af" name="a058ce8d362278d7b88b262ba95ae09af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a058ce8d362278d7b88b262ba95ae09af">&#9670;&#160;</a></span>operator==() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a975e403a051085dd0f647dde28877b5b" name="a975e403a051085dd0f647dde28877b5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a975e403a051085dd0f647dde28877b5b">&#9670;&#160;</a></span>operator==() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4109ee2fb51a564c9075c13a2405f332" name="a4109ee2fb51a564c9075c13a2405f332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4109ee2fb51a564c9075c13a2405f332">&#9670;&#160;</a></span>operator&gt;&gt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::istream &amp; operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0f91014cbceb630065a42b34b7f93cf6" name="a0f91014cbceb630065a42b34b7f93cf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f91014cbceb630065a42b34b7f93cf6">&#9670;&#160;</a></span>operator&gt;&gt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> std::istream &amp; operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7e9a80145cb2a84fd67fe8b833272d2f" name="a7e9a80145cb2a84fd67fe8b833272d2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e9a80145cb2a84fd67fe8b833272d2f">&#9670;&#160;</a></span>operator&gt;&gt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::istream &amp; operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>istr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads 4 dim_t values from an input stream and stores the results in a <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">istr</td><td>An istream object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>The <a class="el" href="classaf_1_1dim4.htm" title="Generic object that represents size and shape.">dim4</a> object that will store the values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The <code>istr</code> object after 4 dim_t values have been read from the input </dd></dl>

<p class="definition">Definition at line <a class="el" href="dim4_8hpp_source.htm#l00141">141</a> of file <a class="el" href="dim4_8hpp_source.htm">dim4.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  142</span>{</div>
<div class="line"><span class="lineno">  143</span>    istr &gt;&gt; dims[0]</div>
<div class="line"><span class="lineno">  144</span>         &gt;&gt; dims[1]</div>
<div class="line"><span class="lineno">  145</span>         &gt;&gt; dims[2]</div>
<div class="line"><span class="lineno">  146</span>         &gt;&gt; dims[3];</div>
<div class="line"><span class="lineno">  147</span>    <span class="keywordflow">return</span> istr;</div>
<div class="line"><span class="lineno">  148</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2e62f696a0f75d54d55c205f94286a33" name="a2e62f696a0f75d54d55c205f94286a33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e62f696a0f75d54d55c205f94286a33">&#9670;&#160;</a></span>real() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double real </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structaf_1_1af__cdouble.htm">af_cdouble</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a06aee90a32f9cdf9a4fa8232d3ca6b58" name="a06aee90a32f9cdf9a4fa8232d3ca6b58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06aee90a32f9cdf9a4fa8232d3ca6b58">&#9670;&#160;</a></span>real() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> float real </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structaf_1_1af__cfloat.htm">af_cfloat</a>&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab34319c95aba4f44b9ab7dd932f86d7d" name="ab34319c95aba4f44b9ab7dd932f86d7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab34319c95aba4f44b9ab7dd932f86d7d">&#9670;&#160;</a></span>seqElements()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t seqElements </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structaf__seq.htm">af_seq</a> &amp;&#160;</td>
          <td class="paramname"><em>seq</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of elements that the <a class="el" href="structaf__seq.htm" title="C-style struct to creating sequences for indexing.">af_seq</a> object represents. </p>

</div>
</div>
<a id="adae4ba27bc8beed887774815c469f74e" name="adae4ba27bc8beed887774815c469f74e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adae4ba27bc8beed887774815c469f74e">&#9670;&#160;</a></span>setFFTPlanCacheSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void setFFTPlanCacheSize </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>cacheSize</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for setting plan cache size. </p>
<p >This function doesn't do anything if called when CPU backend is active. The plans associated with the most recently used array sizes are cached.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cacheSize</td><td>is the number of plans that shall be cached </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a08955393264b77be242246c0b1148687" name="a08955393264b77be242246c0b1148687"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08955393264b77be242246c0b1148687">&#9670;&#160;</a></span>timeit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> double timeit </td>
          <td>(</td>
          <td class="paramtype">void(*)()&#160;</td>
          <td class="paramname"><em>fn</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a923f02ce0a21b98935aaffd645f717e0" name="a923f02ce0a21b98935aaffd645f717e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a923f02ce0a21b98935aaffd645f717e0">&#9670;&#160;</a></span>end</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int end</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A special value representing the last value of an axis. </p>

</div>
</div>
<a id="a873d028925215930b231204b50712cdb" name="a873d028925215930b231204b50712cdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a873d028925215930b231204b50712cdb">&#9670;&#160;</a></span>Inf</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double Inf</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6376adaa49cd123a12eda6819a7e4f1e" name="a6376adaa49cd123a12eda6819a7e4f1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6376adaa49cd123a12eda6819a7e4f1e">&#9670;&#160;</a></span>NaN</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double NaN</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a460631fd3c4d686ad85e199f2a08fe6a" name="a460631fd3c4d686ad85e199f2a08fe6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a460631fd3c4d686ad85e199f2a08fe6a">&#9670;&#160;</a></span>Pi</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const double Pi</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="graphics_2plot2d_8cpp-example.htm#a4">graphics/plot2d.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a2">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a10">image_processing/filters.cpp</a>, and <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a5">machine_learning/naive_bayes.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="af5c1188f38105afaf8b3f383492a1c9f" name="af5c1188f38105afaf8b3f383492a1c9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5c1188f38105afaf8b3f383492a1c9f">&#9670;&#160;</a></span>span</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1seq.htm">seq</a> span</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A special value representing the entire axis of an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="navelem"><a class="el" href="namespaceaf.htm">af</a></li>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:58 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
