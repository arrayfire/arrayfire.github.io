<!-- HTML header for doxygen 1.9.3-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: graphics/fractal.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
  <!--<td id="projectalign">
   <div id="projectname">ArrayFire<span id="projectnumber">&#160;3.8.1</span>
   </div>
   <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>-->
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('graphics_2fractal_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">graphics/fractal.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define WIDTH 400   </span><span class="comment">// Width of image</span></div>
<div class="line"><span class="preprocessor">#define HEIGHT 400  </span><span class="comment">// Width of image</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">using</span> <a id="a0" name="a0"></a><a class="code hl_function" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">std::abs</a>;</div>
<div class="line"> </div>
<div class="line"><a id="a1" name="a1"></a><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> complex_grid(<span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, <span class="keywordtype">float</span> zoom, <span class="keywordtype">float</span> center[2]) {</div>
<div class="line">    <span class="comment">// Generate sequences of length width, height</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> X =</div>
<div class="line">        (<a id="a2" name="a2"></a><a class="code hl_function" href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">iota</a>(dim4(1, height), dim4(width, 1)) - (float)height / 2.0) / zoom +</div>
<div class="line">        center[0];</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Y =</div>
<div class="line">        (<a class="code hl_function" href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">iota</a>(dim4(width, 1), dim4(1, height)) - (float)width / 2.0) / zoom +</div>
<div class="line">        center[1];</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Return the locations as a complex grid</span></div>
<div class="line">    <span class="keywordflow">return</span> <a id="a3" name="a3"></a><a class="code hl_function" href="group__arith__func__cplx.htm#gacd05fd9c3318ac14b9d6e3262a01a214">complex</a>(X, Y);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> mandelbrot(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;in, <span class="keywordtype">int</span> iter, <span class="keywordtype">float</span> maxval) {</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> C   = in;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Z   = C;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> mag = <a id="a4" name="a4"></a><a class="code hl_function" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, C.dims());</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 1; ii &lt; iter; ii++) {</div>
<div class="line">        <span class="comment">// Do the calculation</span></div>
<div class="line">        Z = Z * Z + C;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Get indices where abs(Z) crosses maxval</span></div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> cond = (<a class="code hl_function" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(Z) &gt; maxval).as(<a id="a5" name="a5"></a><a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">        mag        = <a id="a6" name="a6"></a><a class="code hl_function" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a>(mag, cond * ii);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// If abs(Z) cross maxval, turn off those locations</span></div>
<div class="line">        C = C * (1 - cond);</div>
<div class="line">        Z = Z * (1 - cond);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Ensuring the JIT does not become too large</span></div>
<div class="line">        <a id="a7" name="a7"></a><a class="code hl_function" href="group__data__mat.htm#ga91a8cd2ded48a18d73afabfa040641f2">af::eval</a>(C, Z);</div>
<div class="line">        mag.eval();</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Normalize</span></div>
<div class="line">    <span class="keywordflow">return</span> mag / maxval;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> normalize(<a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> a) {</div>
<div class="line">    <span class="keywordtype">float</span> mx = af::max&lt;float&gt;(a);</div>
<div class="line">    <span class="keywordtype">float</span> mn = af::min&lt;float&gt;(a);</div>
<div class="line">    <span class="keywordflow">return</span> (a - mn) / (mx - mn);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">int</span> iter     = argc &gt; 2 ? atoi(argv[2]) : 100;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a8" name="a8"></a><a class="code hl_function" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a id="a9" name="a9"></a><a class="code hl_function" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">info</a>();</div>
<div class="line">        printf(<span class="stringliteral">&quot;** ArrayFire Fractals Demo **\n&quot;</span>);</div>
<div class="line">        <a id="_a10" name="_a10"></a><a class="code hl_class" href="classaf_1_1Window.htm">af::Window</a> wnd(WIDTH, HEIGHT, <span class="stringliteral">&quot;Fractal Demo&quot;</span>);</div>
<div class="line">        wnd.setColorMap(<a id="a11" name="a11"></a><a class="code hl_enumvalue" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea478ac6651299659aacfca92565ae0014">AF_COLORMAP_SPECTRUM</a>);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordtype">float</span> center[] = {-0.75f, 0.1f};</div>
<div class="line">        <span class="comment">// Keep zomming out for each frame</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 10; i &lt; 400; i++) {</div>
<div class="line">            <span class="keywordtype">int</span> zoom = i * i;</div>
<div class="line">            <span class="keywordflow">if</span> (!(i % 10)) {</div>
<div class="line">                printf(<span class="stringliteral">&quot;iteration: %d zoom: %d\n&quot;</span>, i, zoom);</div>
<div class="line">                fflush(stdout);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Generate the grid at the current zoom factor</span></div>
<div class="line">            <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> c = complex_grid(WIDTH, HEIGHT, zoom, center);</div>
<div class="line"> </div>
<div class="line">            iter = <a id="a12" name="a12"></a><a class="code hl_function" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(<a class="code hl_function" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(2 * <a class="code hl_function" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(<a class="code hl_function" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(1 - <a class="code hl_function" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(5 * zoom))))) * 100;</div>
<div class="line">            <span class="comment">// Generate the mandelbrot image</span></div>
<div class="line">            <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> mag = mandelbrot(c, iter, 1000);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (!console) {</div>
<div class="line">                <span class="keywordflow">if</span> (wnd.close()) <span class="keywordflow">break</span>;</div>
<div class="line">                <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> mag_norm = normalize(mag);</div>
<div class="line">                wnd.image(mag_norm);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a id="_a13" name="_a13"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a> &amp;e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a id="a14" name="a14"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
<div class="ttc" id="adefines_8h_htm_a553ceda8a1d8946efac3b08e642574aea478ac6651299659aacfca92565ae0014"><div class="ttname"><a href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea478ac6651299659aacfca92565ae0014">AF_COLORMAP_SPECTRUM</a></div><div class="ttdeci">@ AF_COLORMAP_SPECTRUM</div><div class="ttdoc">Spectrum map (390nm-830nm, in sRGB colorspace)</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00455">defines.h:455</a></div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga23aa8c28a5ffa9368cc92abb143f5eaa"><div class="ttname"><a href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface for absolute value.</div></div>
<div class="ttc" id="agroup__arith__func__cplx_htm_gacd05fd9c3318ac14b9d6e3262a01a214"><div class="ttname"><a href="group__arith__func__cplx.htm#gacd05fd9c3318ac14b9d6e3262a01a214">af::complex</a></div><div class="ttdeci">AFAPI array complex(const array &amp;real, const array &amp;imaginary)</div><div class="ttdoc">C++ Interface for creating complex array from two inputs.</div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_ga25c678d4cd9e0702bbc93e11d7d516a8"><div class="ttname"><a href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface for square root of input.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__data__func__iota_htm_ga8f7c55a54d1f93e55340f59b61662f29"><div class="ttname"><a href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">af::iota</a></div><div class="ttdeci">AFAPI array iota(const dim4 &amp;dims, const dim4 &amp;tile_dims=dim4(1), const dtype ty=f32)</div></div>
<div class="ttc" id="agroup__data__mat_htm_ga91a8cd2ded48a18d73afabfa040641f2"><div class="ttname"><a href="group__data__mat.htm#ga91a8cd2ded48a18d73afabfa040641f2">af::eval</a></div><div class="ttdeci">array &amp; eval(array &amp;a)</div><div class="ttdoc">Evaluate an expression (nonblocking).</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01431">array.h:1431</a></div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Thu Feb 24 2022 14:12:32 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
    </ul>
</div>
</body>
</html>
