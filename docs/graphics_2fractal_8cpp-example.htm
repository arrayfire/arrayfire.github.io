<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: graphics/fractal.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('graphics_2fractal_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">graphics/fractal.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define WIDTH 400   // Width of image</span></div>
<div class="line"><span class="preprocessor">#define HEIGHT 400  // Width of image</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">using</span> <a name="a0"></a><a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">std::abs</a>;</div>
<div class="line"> </div>
<div class="line"><a name="_a1"></a><a class="code" href="classaf_1_1array.htm">array</a> complex_grid(<span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, <span class="keywordtype">float</span> zoom, <span class="keywordtype">float</span> center[2]) {</div>
<div class="line">    <span class="comment">// Generate sequences of length width, height</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> X =</div>
<div class="line">        (<a name="a2"></a><a class="code" href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">iota</a>(<a name="_a3"></a><a class="code" href="classaf_1_1dim4.htm">dim4</a>(1, height), <a class="code" href="classaf_1_1dim4.htm">dim4</a>(width, 1)) - (float)height / 2.0) / zoom +</div>
<div class="line">        center[0];</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> Y =</div>
<div class="line">        (<a class="code" href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">iota</a>(<a class="code" href="classaf_1_1dim4.htm">dim4</a>(width, 1), <a class="code" href="classaf_1_1dim4.htm">dim4</a>(1, height)) - (float)width / 2.0) / zoom +</div>
<div class="line">        center[1];</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Return the locations as a complex grid</span></div>
<div class="line">    <span class="keywordflow">return</span> <a name="a4"></a><a class="code" href="group__arith__func__cplx.htm#gacd05fd9c3318ac14b9d6e3262a01a214">complex</a>(X, Y);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> mandelbrot(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">int</span> iter, <span class="keywordtype">float</span> maxval) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> C   = in;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> Z   = C;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> mag = <a name="a5"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, C.<a name="a6"></a><a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 1; ii &lt; iter; ii++) {</div>
<div class="line">        <span class="comment">// Do the calculation</span></div>
<div class="line">        Z = Z * Z + C;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Get indices where abs(Z) crosses maxval</span></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> cond = (<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(Z) &gt; maxval).as(<a name="a7"></a><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">        mag        = <a name="a8"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a>(mag, cond * ii);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// If abs(Z) cross maxval, turn off those locations</span></div>
<div class="line">        C = C * (1 - cond);</div>
<div class="line">        Z = Z * (1 - cond);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Ensuring the JIT does not become too large</span></div>
<div class="line">        <a name="a9"></a><a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">af::eval</a>(C, Z);</div>
<div class="line">        mag.<a name="a10"></a><a class="code" href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a>();</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Normalize</span></div>
<div class="line">    <span class="keywordflow">return</span> mag / maxval;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> normalize(<a class="code" href="classaf_1_1array.htm">array</a> a) {</div>
<div class="line">    <span class="keywordtype">float</span> mx = af::max&lt;float&gt;(a);</div>
<div class="line">    <span class="keywordtype">float</span> mn = af::min&lt;float&gt;(a);</div>
<div class="line">    <span class="keywordflow">return</span> (a - mn) / (mx - mn);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">int</span> iter     = argc &gt; 2 ? atoi(argv[2]) : 100;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a name="a11"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a12"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">info</a>();</div>
<div class="line">        printf(<span class="stringliteral">&quot;** ArrayFire Fractals Demo **\n&quot;</span>);</div>
<div class="line">        <a name="_a13"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd(WIDTH, HEIGHT, <span class="stringliteral">&quot;Fractal Demo&quot;</span>);</div>
<div class="line">        wnd.setColorMap(<a name="a14"></a><a class="code" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea478ac6651299659aacfca92565ae0014">AF_COLORMAP_SPECTRUM</a>);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordtype">float</span> center[] = {-0.75f, 0.1f};</div>
<div class="line">        <span class="comment">// Keep zomming out for each frame</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 10; i &lt; 400; i++) {</div>
<div class="line">            <span class="keywordtype">int</span> zoom = i * i;</div>
<div class="line">            <span class="keywordflow">if</span> (!(i % 10)) {</div>
<div class="line">                printf(<span class="stringliteral">&quot;iteration: %d zoom: %d\n&quot;</span>, i, zoom);</div>
<div class="line">                fflush(stdout);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Generate the grid at the current zoom factor</span></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> c = complex_grid(WIDTH, HEIGHT, zoom, center);</div>
<div class="line"> </div>
<div class="line">            iter = <a name="a15"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(2 * <a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(1 - <a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(5 * zoom))))) * 100;</div>
<div class="line">            <span class="comment">// Generate the mandelbrot image</span></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> mag = mandelbrot(c, iter, 1000);</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (!console) {</div>
<div class="line">                <span class="keywordflow">if</span> (wnd.close()) <span class="keywordflow">break</span>;</div>
<div class="line">                <a class="code" href="classaf_1_1array.htm">array</a> mag_norm = normalize(mag);</div>
<div class="line">                wnd.image(mag_norm);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a16"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a17"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00032">dim4.hpp:33</a></div></div>
<div class="ttc" id="agroup__arith__func__cplx_htm_gacd05fd9c3318ac14b9d6e3262a01a214"><div class="ttname"><a href="group__arith__func__cplx.htm#gacd05fd9c3318ac14b9d6e3262a01a214">af::complex</a></div><div class="ttdeci">AFAPI array complex(const array &amp;real, const array &amp;imaginary)</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="adefines_8h_htm_a553ceda8a1d8946efac3b08e642574aea478ac6651299659aacfca92565ae0014"><div class="ttname"><a href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea478ac6651299659aacfca92565ae0014">AF_COLORMAP_SPECTRUM</a></div><div class="ttdeci">@ AF_COLORMAP_SPECTRUM</div><div class="ttdoc">Spectrum map (390nm-830nm, in sRGB colorspace)</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00455">defines.h:455</a></div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga23aa8c28a5ffa9368cc92abb143f5eaa"><div class="ttname"><a href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface for absolute value.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a6a8d7156cd3c66a9ca9f0f2688ee9f72"><div class="ttname"><a href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">af::array::eval</a></div><div class="ttdeci">void eval() const</div><div class="ttdoc">Evaluate any JIT expressions to generate data for the array.</div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_ga25c678d4cd9e0702bbc93e11d7d516a8"><div class="ttname"><a href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface for square root of input.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:29</a></div></div>
<div class="ttc" id="agroup__data__func__iota_htm_ga8f7c55a54d1f93e55340f59b61662f29"><div class="ttname"><a href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">af::iota</a></div><div class="ttdeci">AFAPI array iota(const dim4 &amp;dims, const dim4 &amp;tile_dims=dim4(1), const dtype ty=f32)</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="agroup__data__mat_htm_ga121545fb637db409a523862cdb8ffe39"><div class="ttname"><a href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">af::eval</a></div><div class="ttdeci">array &amp; eval(array &amp;a)</div><div class="ttdoc">Evaluate an expression (nonblocking).</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01354">array.h:1354</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
