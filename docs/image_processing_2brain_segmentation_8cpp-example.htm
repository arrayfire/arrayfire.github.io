<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: image_processing/brain_segmentation.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('image_processing_2brain_segmentation_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">image_processing/brain_segmentation.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;../common/progress.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> h_sx_kernel[] = {1, 2, 1, 0, 0, 0, -1, -2, -1};</div>
<div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> h_sy_kernel[] = {-1, 0, 1, -2, 0, 2, -1, 0, 1};</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Unused</span></div>
<div class="line"><span class="comment">// const float h_lp_kernel[] = { -0.5f, -1.0f, -0.5f,</span></div>
<div class="line"><span class="comment">//    -1.0f,  6.0f, -1.0f,</span></div>
<div class="line"><span class="comment">//    -0.5f, -1.0f, -0.5f</span></div>
<div class="line"><span class="comment">//};</span></div>
<div class="line"> </div>
<div class="line"><a id="_a0" name="_a0"></a><a class="code hl_class" href="classaf_1_1array.htm">array</a> edges_slice(<a class="code hl_class" href="classaf_1_1array.htm">array</a> x) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> ret;</div>
<div class="line">    <span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> kernelx = <a class="code hl_class" href="classaf_1_1array.htm">array</a>(<a id="_a1" name="_a1"></a><a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a>(3, 3), h_sx_kernel);</div>
<div class="line">    <span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> kernely = <a class="code hl_class" href="classaf_1_1array.htm">array</a>(<a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a>(3, 3), h_sy_kernel);</div>
<div class="line">    ret                  = <a class="code hl_function" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">convolve</a>(x, kernelx) + <a class="code hl_function" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">convolve</a>(x, kernely);</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(ret);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> gauss(<a class="code hl_class" href="classaf_1_1array.htm">array</a> x, <span class="keywordtype">float</span> u, <span class="keywordtype">float</span> s) {</div>
<div class="line">    <span class="keywordtype">double</span> f = 1 / <a class="code hl_function" href="group__arith__func__sqrt.htm#gabdfe0e5a01f91a1079451b1e094a6893">sqrt</a>(2 * <a id="a2" name="a2"></a><a class="code hl_variable" href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a> * s * s);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> e  = <a class="code hl_function" href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">exp</a>(-<a class="code hl_function" href="group__arith__func__pow.htm#ga3bfbc7fe4ed35c215dc26c5c377dd761">pow</a>((x - u), 2) / (2 * s * s));</div>
<div class="line">    <span class="keywordflow">return</span> f * e;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> segment_volume(<a class="code hl_class" href="classaf_1_1array.htm">array</a> A, <span class="keywordtype">int</span> k) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> I1 = A(span, span, k);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> mx = max&lt;float&gt;(I1);</div>
<div class="line">    <span class="keywordtype">float</span> mn = min&lt;float&gt;(I1);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> u0 = 0.9 * mx;</div>
<div class="line">    <span class="keywordtype">float</span> s0 = (mx - mn) / 2;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> u1 = 1.1 * mn;</div>
<div class="line">    <span class="keywordtype">float</span> s1 = (mx - mn) / 2;</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> L0  = gauss(I1, u0, s0);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> L11 = gauss(I1, u1, s1);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> L10;</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> L12;</div>
<div class="line">    <span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> kernel = <a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(1, 3, 3) / 9;</div>
<div class="line">    <span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> L11_old;</div>
<div class="line">    <span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> L12_old;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (k == 0) {</div>
<div class="line">        L11 = <a class="code hl_function" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">convolve</a>(L11, kernel);</div>
<div class="line">        L10 = L11;</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        L10 = L11_old;</div>
<div class="line">        L11 = L12_old;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (k &lt; A.<a id="a3" name="a3"></a><a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(2) - 1) {</div>
<div class="line">        L12 = gauss(A(span, span, k + 1), u1, s1);</div>
<div class="line">        L12 = <a class="code hl_function" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">convolve</a>(L12, kernel);</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        L12 = L11;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    L11_old = L11;</div>
<div class="line">    L12_old = L12;</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> L1 = (L10 + L11 + L12) / 3;</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> S  = (L0 &gt; L1);</div>
<div class="line">    <span class="keywordflow">return</span> S.<a id="a4" name="a4"></a><a class="code hl_function" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(A.<a id="a5" name="a5"></a><a class="code hl_function" href="classaf_1_1array.htm#a122667ba97054fbee7b1ff885bb3bfe4">type</a>());</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> brain_seg(<span class="keywordtype">bool</span> console) {</div>
<div class="line">    <a id="_a6" name="_a6"></a><a class="code hl_class" href="classaf_1_1Window.htm">af::Window</a> wnd(<span class="stringliteral">&quot;Brain Segmentation Demo&quot;</span>);</div>
<div class="line">    wnd.setColorMap(<a id="a7" name="a7"></a><a class="code hl_enumvalue" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea7ba7bc2d6f5ed939f4dda88a7baa0399">AF_COLORMAP_HEAT</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">double</span> time_total = 30;  <span class="comment">// run for N seconds</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> B    = <a class="code hl_function" href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/brain.png&quot;</span>);</div>
<div class="line">    <span class="keywordtype">int</span> slices = 256;</div>
<div class="line"> </div>
<div class="line">    B = <a class="code hl_function" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">moddims</a>(B, <a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a>(B.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), B.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1) / slices, slices));</div>
<div class="line">    <a id="a8" name="a8"></a><a class="code hl_function" href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">af::sync</a>();</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> N = 2 * slices - 1;</div>
<div class="line"> </div>
<div class="line">    <a id="_a9" name="_a9"></a><a class="code hl_struct" href="structaf_1_1timer.htm">timer</a> t  = timer::start();</div>
<div class="line">    <span class="keywordtype">int</span> iter = 0;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">/* loop forward and backward for 100 frames</span></div>
<div class="line"><span class="comment">     * exit if the user presses escape or the animation</span></div>
<div class="line"><span class="comment">     * ends</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; !wnd.close(); i++) {</div>
<div class="line">        iter++;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordtype">int</span> j    = i % N;</div>
<div class="line">        <span class="keywordtype">int</span> k    = std::min(j, N - j);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> Bi = B(span, span, k);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">/* process */</span></div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> Si = segment_volume(B, k);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> Ei = edges_slice(Si);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> Mi = <a class="code hl_function" href="group__image__func__mean__shift.htm#gac19e2d4cf301ef9f0293bf62aed584e6">meanShift</a>(Bi, 10, 10, 5);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">/* visualization */</span></div>
<div class="line">        <span class="keywordflow">if</span> (!console) {</div>
<div class="line">            wnd.grid(2, 2);</div>
<div class="line"> </div>
<div class="line">            wnd(0, 0).image(Bi / 255.f, <span class="stringliteral">&quot;Input&quot;</span>);</div>
<div class="line">            wnd(1, 0).image(Ei, <span class="stringliteral">&quot;Edges&quot;</span>);</div>
<div class="line">            wnd(0, 1).image(Mi / 255.f, <span class="stringliteral">&quot;Meanshift&quot;</span>);</div>
<div class="line">            wnd(1, 1).image(Si, <span class="stringliteral">&quot;Segmented&quot;</span>);</div>
<div class="line"> </div>
<div class="line">            wnd.show();</div>
<div class="line">        } <span class="keywordflow">else</span> {</div>
<div class="line">            <span class="comment">/* sync the operations so that current</span></div>
<div class="line"><span class="comment">             * iteration comptation finishes</span></div>
<div class="line"><span class="comment">             * */</span></div>
<div class="line">            <a class="code hl_function" href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">af::sync</a>();</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">/* we have had ran throuh simlation results</span></div>
<div class="line"><span class="comment">         * exit the rendering loop */</span></div>
<div class="line">        <span class="keywordflow">if</span> (!progress(iter, t, time_total)) <span class="keywordflow">break</span>;</div>
<div class="line">        <span class="keywordflow">if</span> (!(i &lt; 100 * N)) <span class="keywordflow">break</span>;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[]) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a10" name="a10"></a><a class="code hl_function" href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">af::setDevice</a>(device);</div>
<div class="line">        <a id="a11" name="a11"></a><a class="code hl_function" href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a>();</div>
<div class="line"> </div>
<div class="line">        printf(<span class="stringliteral">&quot;Brain segmentation example\n&quot;</span>);</div>
<div class="line">        brain_seg(console);</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a id="_a12" name="_a12"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a>&amp; e) { fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a id="a13" name="a13"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>()); }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a122667ba97054fbee7b1ff885bb3bfe4"><div class="ttname"><a href="classaf_1_1array.htm#a122667ba97054fbee7b1ff885bb3bfe4">af::array::type</a></div><div class="ttdeci">dtype type() const</div><div class="ttdoc">Get array data type.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a5822c6bdfbf4ff01f23c4417934b924c"><div class="ttname"><a href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">af::array::as</a></div><div class="ttdeci">const array as(dtype type) const</div><div class="ttdoc">Casts the array into another data type.</div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00025">dim4.hpp:26</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="adefines_8h_htm_a553ceda8a1d8946efac3b08e642574aea7ba7bc2d6f5ed939f4dda88a7baa0399"><div class="ttname"><a href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea7ba7bc2d6f5ed939f4dda88a7baa0399">AF_COLORMAP_HEAT</a></div><div class="ttdeci">@ AF_COLORMAP_HEAT</div><div class="ttdoc">Heat map.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00459">defines.h:459</a></div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga04a72240299a891b0d950e2c517e4a9e"><div class="ttname"><a href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface to calculate the absolute value.</div></div>
<div class="ttc" id="agroup__arith__func__exp_htm_ga583acbad8eb6db6ee6b8b363e2c38710"><div class="ttname"><a href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">af::exp</a></div><div class="ttdeci">AFAPI array exp(const array &amp;in)</div><div class="ttdoc">C++ Interface to evaluate the exponential.</div></div>
<div class="ttc" id="agroup__arith__func__pow_htm_ga3bfbc7fe4ed35c215dc26c5c377dd761"><div class="ttname"><a href="group__arith__func__pow.htm#ga3bfbc7fe4ed35c215dc26c5c377dd761">af::pow</a></div><div class="ttdeci">AFAPI array pow(const array &amp;base, const array &amp;exponent)</div><div class="ttdoc">C++ Interface to raise a base to a power (or exponent).</div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_gabdfe0e5a01f91a1079451b1e094a6893"><div class="ttname"><a href="group__arith__func__sqrt.htm#gabdfe0e5a01f91a1079451b1e094a6893">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface to evaluate the square root.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga0db7363474e85542f16e4bbcf57fe842"><div class="ttname"><a href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga3e22b6ff6e0940bb31577bea2863ca27"><div class="ttname"><a href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gad7c36828c21e7efc06a067bbc47d8d3b"><div class="ttname"><a href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__device__func__sync_htm_ga4e9c28bad482dc590cac930515f14bfb"><div class="ttname"><a href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">af::sync</a></div><div class="ttdeci">AFAPI void sync(const int device=-1)</div><div class="ttdoc">Blocks until the device is finished processing.</div></div>
<div class="ttc" id="agroup__image__func__mean__shift_htm_gac19e2d4cf301ef9f0293bf62aed584e6"><div class="ttname"><a href="group__image__func__mean__shift.htm#gac19e2d4cf301ef9f0293bf62aed584e6">af::meanShift</a></div><div class="ttdeci">AFAPI array meanShift(const array &amp;in, const float spatial_sigma, const float chromatic_sigma, const unsigned iter, const bool is_color=false)</div><div class="ttdoc">C++ Interface for mean shift.</div></div>
<div class="ttc" id="agroup__imageio__func__load_htm_ga5a57870c43a81ec21fcdb7a11bef20d4"><div class="ttname"><a href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">af::loadImage</a></div><div class="ttdeci">AFAPI array loadImage(const char *filename, const bool is_color=false)</div><div class="ttdoc">C++ Interface for loading an image.</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga13488a6c9e298fd44dd343347d7b156d"><div class="ttname"><a href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const dim4 &amp;dims)</div><div class="ttdoc">C++ Interface for modifying the dimensions of an input array to the shape specified by a dim4 object.</div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_ga801b0f4a09a017ccb196fac3c0dc417b"><div class="ttname"><a href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a460631fd3c4d686ad85e199f2a08fe6a"><div class="ttname"><a href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a></div><div class="ttdeci">AFAPI const double Pi</div></div>
<div class="ttc" id="astructaf_1_1timer_htm"><div class="ttname"><a href="structaf_1_1timer.htm">af::timer</a></div><div class="ttdoc">Internal timer object.</div><div class="ttdef"><b>Definition:</b> <a href="timing_8h_source.htm#l00029">timing.h:29</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Tue Feb 14 2023 10:39:41 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
    </ul>
</div>
</body>
</html>
