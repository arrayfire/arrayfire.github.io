<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>image_processing/brain_segmentation.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('image_processing_2brain_segmentation_8cpp-example.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">image_processing/brain_segmentation.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;string.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &quot;../common/progress.h&quot;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> h_sx_kernel[] = {  1,  2,  1,</div><div class="line">    0,  0,  0,</div><div class="line">    -1, -2, -1</div><div class="line">};</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> h_sy_kernel[] = { -1, 0, 1,</div><div class="line">    -2, 0, 2,</div><div class="line">    -1, 0, 1</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// Unused</span></div><div class="line"><span class="comment">//const float h_lp_kernel[] = { -0.5f, -1.0f, -0.5f,</span></div><div class="line"><span class="comment">//    -1.0f,  6.0f, -1.0f,</span></div><div class="line"><span class="comment">//    -0.5f, -1.0f, -0.5f</span></div><div class="line"><span class="comment">//};</span></div><div class="line"></div><div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> edges_slice(<a class="code" href="classaf_1_1array.htm">array</a> x)</div><div class="line">{</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> ret;</div><div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> kernelx = <a name="a1"></a><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a name="_a2"></a><a class="code" href="classaf_1_1dim4.htm">dim4</a>(3, 3), h_sx_kernel);</div><div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> kernely = <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="classaf_1_1dim4.htm">dim4</a>(3, 3), h_sy_kernel);</div><div class="line">    ret = <a name="a3"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(x, kernelx) + <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(x, kernely);</div><div class="line">    <span class="keywordflow">return</span> <a name="a4"></a><a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(ret);</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> gauss(<a class="code" href="classaf_1_1array.htm">array</a> x, <span class="keywordtype">float</span> u, <span class="keywordtype">float</span> s)</div><div class="line">{</div><div class="line">    <span class="keywordtype">double</span> f = 1 / <a name="a5"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(2 * <a name="a6"></a><a class="code" href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a> * s * s);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> e = <a name="a7"></a><a class="code" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>(-<a name="a8"></a><a class="code" href="group__arith__func__pow.htm#ga299da8cda1458a6cb7adba9718ec613d">pow</a>((x - u), 2) / (2 * s * s));</div><div class="line">    <span class="keywordflow">return</span> f * e;</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> segment_volume(<a class="code" href="classaf_1_1array.htm">array</a> A, <span class="keywordtype">int</span> k)</div><div class="line">{</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> I1 = A(<a name="a9"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, k);</div><div class="line"></div><div class="line">    <span class="keywordtype">float</span> mx = max&lt;float&gt;(I1);</div><div class="line">    <span class="keywordtype">float</span> mn = min&lt;float&gt;(I1);</div><div class="line"></div><div class="line">    <span class="keywordtype">float</span> u0 = 0.9 * mx;</div><div class="line">    <span class="keywordtype">float</span> s0 = (mx - mn) / 2;</div><div class="line"></div><div class="line">    <span class="keywordtype">float</span> u1 = 1.1 * mn;</div><div class="line">    <span class="keywordtype">float</span> s1 = (mx - mn) / 2;</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> L0  = gauss(I1, u0, s0);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> L11 = gauss(I1, u1, s1);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> L10;</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> L12;</div><div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> kernel = <a name="a10"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, 3, 3) / 9;</div><div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> L11_old;</div><div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> L12_old;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (k == 0) {</div><div class="line">        L11 = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(L11, kernel);</div><div class="line">        L10 = L11;</div><div class="line">    } <span class="keywordflow">else</span> {</div><div class="line">        L10 = L11_old;</div><div class="line">        L11 = L12_old;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (k &lt; A.<a name="a11"></a><a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2) - 1) {</div><div class="line">        L12 = gauss(A(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, k + 1), u1, s1);</div><div class="line">        L12 = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(L12, kernel);</div><div class="line">    } <span class="keywordflow">else</span> {</div><div class="line">        L12 = L11;</div><div class="line">    }</div><div class="line"></div><div class="line">    L11_old = L11;</div><div class="line">    L12_old = L12;</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> L1 = (L10 + L11 + L12) / 3;</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> S = (L0 &gt; L1);</div><div class="line">    <span class="keywordflow">return</span> S.<a name="a12"></a><a class="code" href="group__method__mat.htm#ga5822c6bdfbf4ff01f23c4417934b924c">as</a>(A.<a name="a13"></a><a class="code" href="group__method__mat.htm#ga122667ba97054fbee7b1ff885bb3bfe4">type</a>());</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> brain_seg(<span class="keywordtype">bool</span> console)</div><div class="line">{</div><div class="line">    <a name="_a14"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd(<span class="stringliteral">&quot;Brain Segmentation Demo&quot;</span>);</div><div class="line">    wnd.setColorMap(<a name="a15"></a><a class="code" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea7ba7bc2d6f5ed939f4dda88a7baa0399">AF_COLORMAP_HEAT</a>);</div><div class="line"></div><div class="line">    <span class="keywordtype">double</span> time_total = 30; <span class="comment">// run for N seconds</span></div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> B = <a name="a16"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/brain.png&quot;</span>);</div><div class="line">    <span class="keywordtype">int</span> slices = 256;</div><div class="line"></div><div class="line">    B = <a name="a17"></a><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(B, <a class="code" href="classaf_1_1dim4.htm">dim4</a>(B.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), B.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)/slices, slices));</div><div class="line">    <a name="a18"></a><a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div><div class="line"></div><div class="line">    <span class="keywordtype">int</span> N = 2 * slices - 1;</div><div class="line"></div><div class="line">    <a name="_a19"></a><a class="code" href="structaf_1_1timer.htm">timer</a> t = <a name="a20"></a><a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">timer::start</a>();</div><div class="line">    <span class="keywordtype">int</span> iter = 0;</div><div class="line"></div><div class="line">    <span class="comment">/* loop forward and backward for 100 frames</span></div><div class="line"><span class="comment">     * exit if the user presses escape or the animation</span></div><div class="line"><span class="comment">     * ends</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; !wnd.close(); i++) {</div><div class="line">        iter++;</div><div class="line"></div><div class="line">        <span class="keywordtype">int</span> j = i % N;</div><div class="line">        <span class="keywordtype">int</span> k = <a name="a21"></a><a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">std::min</a>(j, N - j);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Bi = B(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, k);</div><div class="line"></div><div class="line">        <span class="comment">/* process */</span></div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Si = segment_volume(B, k);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Ei = edges_slice(Si);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Mi = <a name="a22"></a><a class="code" href="group__image__func__mean__shift.htm#gaa903c45b57c62e3b0023092b5b3e0bd9">meanShift</a>(Bi, 10, 10, 5);</div><div class="line"></div><div class="line">        <span class="comment">/* visualization */</span></div><div class="line">        <span class="keywordflow">if</span> (!console) {</div><div class="line">            wnd.grid(2, 2);</div><div class="line"></div><div class="line">            wnd(0, 0).image(Bi/255.f, <span class="stringliteral">&quot;Input&quot;</span>);</div><div class="line">            wnd(1, 0).image(Ei, <span class="stringliteral">&quot;Edges&quot;</span>);</div><div class="line">            wnd(0, 1).image(Mi/255.f, <span class="stringliteral">&quot;Meanshift&quot;</span>);</div><div class="line">            wnd(1, 1).image(Si, <span class="stringliteral">&quot;Segmented&quot;</span>);</div><div class="line"></div><div class="line">            wnd.show();</div><div class="line">        } <span class="keywordflow">else</span> {</div><div class="line">            <span class="comment">/* sync the operations so that current</span></div><div class="line"><span class="comment">             * iteration comptation finishes</span></div><div class="line"><span class="comment">             * */</span></div><div class="line">            <a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">/* we have had ran throuh simlation results</span></div><div class="line"><span class="comment">         * exit the rendering loop */</span></div><div class="line">        <span class="keywordflow">if</span> (!progress(iter, t, time_total))</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        <span class="keywordflow">if</span> (!(i&lt;100*N))</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div><div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line">        <a name="a23"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div><div class="line">        <a name="a24"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div><div class="line"></div><div class="line">        printf(<span class="stringliteral">&quot;Brain segmentation example\n&quot;</span>);</div><div class="line">        brain_seg(console);</div><div class="line"></div><div class="line">    } <span class="keywordflow">catch</span> (<a name="_a25"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div><div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a26"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
