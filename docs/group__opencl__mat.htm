<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: OpenCL specific functions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__opencl__mat.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">OpenCL specific functions<div class="ingroups"><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__external.htm">Interface Functions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Accessing ArrayFire's context, queue, and share data with other OpenCL code.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:gae992d938aa02af60b1c57ae9b0431ec7"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">afcl_device_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gae992d938aa02af60b1c57ae9b0431ec7">deviceType</a></td></tr>
<tr class="separator:gae992d938aa02af60b1c57ae9b0431ec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga008db4bfef536fa729bab8df95439b6a"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">afcl_platform</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga008db4bfef536fa729bab8df95439b6a">platform</a></td></tr>
<tr class="separator:ga008db4bfef536fa729bab8df95439b6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga1984398db67a52977435e653bb842da7"><td class="memItemLeft" align="right" valign="top">static cl_context&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga1984398db67a52977435e653bb842da7">getContext</a> (bool retain=false)</td></tr>
<tr class="memdesc:ga1984398db67a52977435e653bb842da7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL context.  <a href="group__opencl__mat.htm#ga1984398db67a52977435e653bb842da7">More...</a><br /></td></tr>
<tr class="separator:ga1984398db67a52977435e653bb842da7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4bdd87f7ee76ba2ac18a7e1719508d5d"><td class="memItemLeft" align="right" valign="top">static cl_command_queue&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga4bdd87f7ee76ba2ac18a7e1719508d5d">getQueue</a> (bool retain=false)</td></tr>
<tr class="memdesc:ga4bdd87f7ee76ba2ac18a7e1719508d5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL command queue.  <a href="group__opencl__mat.htm#ga4bdd87f7ee76ba2ac18a7e1719508d5d">More...</a><br /></td></tr>
<tr class="separator:ga4bdd87f7ee76ba2ac18a7e1719508d5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae40668cc7d19273f449a1628ac438182"><td class="memItemLeft" align="right" valign="top">static cl_device_id&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gae40668cc7d19273f449a1628ac438182">getDeviceId</a> ()</td></tr>
<tr class="memdesc:gae40668cc7d19273f449a1628ac438182"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the device ID for ArrayFire's current active device.  <a href="group__opencl__mat.htm#gae40668cc7d19273f449a1628ac438182">More...</a><br /></td></tr>
<tr class="separator:gae40668cc7d19273f449a1628ac438182"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga242cc7dc5dcebc9e695e4fc3faebb91e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga242cc7dc5dcebc9e695e4fc3faebb91e">setDeviceId</a> (cl_device_id id)</td></tr>
<tr class="memdesc:ga242cc7dc5dcebc9e695e4fc3faebb91e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set ArrayFire's active device based on <code>id</code> of type cl_device_id.  <a href="group__opencl__mat.htm#ga242cc7dc5dcebc9e695e4fc3faebb91e">More...</a><br /></td></tr>
<tr class="separator:ga242cc7dc5dcebc9e695e4fc3faebb91e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga52c81b7227b95ce05c3e8b8efed3a9dc"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga52c81b7227b95ce05c3e8b8efed3a9dc">addDevice</a> (cl_device_id dev, cl_context ctx, cl_command_queue que)</td></tr>
<tr class="memdesc:ga52c81b7227b95ce05c3e8b8efed3a9dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push user provided device control constructs into the ArrayFire device manager pool.  <a href="group__opencl__mat.htm#ga52c81b7227b95ce05c3e8b8efed3a9dc">More...</a><br /></td></tr>
<tr class="separator:ga52c81b7227b95ce05c3e8b8efed3a9dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37969cfa49416bbdb25910d15c454d01"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga37969cfa49416bbdb25910d15c454d01">setDevice</a> (cl_device_id dev, cl_context ctx)</td></tr>
<tr class="memdesc:ga37969cfa49416bbdb25910d15c454d01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set active device using cl_context and cl_device_id.  <a href="group__opencl__mat.htm#ga37969cfa49416bbdb25910d15c454d01">More...</a><br /></td></tr>
<tr class="separator:ga37969cfa49416bbdb25910d15c454d01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga410026dc3d7b5e8b779c3505578cb097"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga410026dc3d7b5e8b779c3505578cb097">deleteDevice</a> (cl_device_id dev, cl_context ctx)</td></tr>
<tr class="memdesc:ga410026dc3d7b5e8b779c3505578cb097"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the user provided device control constructs from the ArrayFire device manager pool.  <a href="group__opencl__mat.htm#ga410026dc3d7b5e8b779c3505578cb097">More...</a><br /></td></tr>
<tr class="separator:ga410026dc3d7b5e8b779c3505578cb097"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f00565eb14e9cc9bf9568bac2072d70"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">deviceType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga9f00565eb14e9cc9bf9568bac2072d70">getDeviceType</a> ()</td></tr>
<tr class="memdesc:ga9f00565eb14e9cc9bf9568bac2072d70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the type of the current device.  <a href="group__opencl__mat.htm#ga9f00565eb14e9cc9bf9568bac2072d70">More...</a><br /></td></tr>
<tr class="separator:ga9f00565eb14e9cc9bf9568bac2072d70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c5a70a03d0d0bb31b4e7e5a0598752a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">platform</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga9c5a70a03d0d0bb31b4e7e5a0598752a">getPlatform</a> ()</td></tr>
<tr class="memdesc:ga9c5a70a03d0d0bb31b4e7e5a0598752a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a vendor enumeration for the current platform.  <a href="group__opencl__mat.htm#ga9c5a70a03d0d0bb31b4e7e5a0598752a">More...</a><br /></td></tr>
<tr class="separator:ga9c5a70a03d0d0bb31b4e7e5a0598752a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5434aaf76be37fae92ac5086315516f0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> (<a class="el" href="classaf_1_1dim4.htm">af::dim4</a> idims, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:ga5434aaf76be37fae92ac5086315516f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">More...</a><br /></td></tr>
<tr class="separator:ga5434aaf76be37fae92ac5086315516f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga032919598890f2ccc6b1835c213416c7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga032919598890f2ccc6b1835c213416c7">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:ga032919598890f2ccc6b1835c213416c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#ga032919598890f2ccc6b1835c213416c7">More...</a><br /></td></tr>
<tr class="separator:ga032919598890f2ccc6b1835c213416c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga752a709190f80c8342e2da6fc405af27"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga752a709190f80c8342e2da6fc405af27">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:ga752a709190f80c8342e2da6fc405af27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#ga752a709190f80c8342e2da6fc405af27">More...</a><br /></td></tr>
<tr class="separator:ga752a709190f80c8342e2da6fc405af27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafad240e885df716a656bd6634db22626"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gafad240e885df716a656bd6634db22626">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:gafad240e885df716a656bd6634db22626"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#gafad240e885df716a656bd6634db22626">More...</a><br /></td></tr>
<tr class="separator:gafad240e885df716a656bd6634db22626"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga89507e0349f5d7ee068325b9b24c891b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga89507e0349f5d7ee068325b9b24c891b">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:ga89507e0349f5d7ee068325b9b24c891b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#ga89507e0349f5d7ee068325b9b24c891b">More...</a><br /></td></tr>
<tr class="separator:ga89507e0349f5d7ee068325b9b24c891b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gad42de383f405b3e38d6eb669c0cbe2e3">afcl_get_context</a> (cl_context *ctx, const bool retain)</td></tr>
<tr class="memdesc:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL context.  <a href="group__opencl__mat.htm#gad42de383f405b3e38d6eb669c0cbe2e3">More...</a><br /></td></tr>
<tr class="separator:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gab1701ef4f2b68429eb31c1e21c88d0bc">afcl_get_queue</a> (cl_command_queue *queue, const bool retain)</td></tr>
<tr class="memdesc:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL command queue.  <a href="group__opencl__mat.htm#gab1701ef4f2b68429eb31c1e21c88d0bc">More...</a><br /></td></tr>
<tr class="separator:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7258055284e65a8647a49c3f3b9feee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gaf7258055284e65a8647a49c3f3b9feee">afcl_get_device_id</a> (cl_device_id *id)</td></tr>
<tr class="memdesc:gaf7258055284e65a8647a49c3f3b9feee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the device ID for ArrayFire's current active device.  <a href="group__opencl__mat.htm#gaf7258055284e65a8647a49c3f3b9feee">More...</a><br /></td></tr>
<tr class="separator:gaf7258055284e65a8647a49c3f3b9feee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga600361a20ceac2a65590b67fc0366314"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga600361a20ceac2a65590b67fc0366314">afcl_set_device_id</a> (cl_device_id id)</td></tr>
<tr class="memdesc:ga600361a20ceac2a65590b67fc0366314"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set ArrayFire's active device based on <code>id</code> of type cl_device_id.  <a href="group__opencl__mat.htm#ga600361a20ceac2a65590b67fc0366314">More...</a><br /></td></tr>
<tr class="separator:ga600361a20ceac2a65590b67fc0366314"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga49f596a4041fb757f1f5a75999cf8858"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga49f596a4041fb757f1f5a75999cf8858">afcl_add_device_context</a> (cl_device_id dev, cl_context ctx, cl_command_queue que)</td></tr>
<tr class="memdesc:ga49f596a4041fb757f1f5a75999cf8858"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push user provided device control constructs into the ArrayFire device manager pool.  <a href="group__opencl__mat.htm#ga49f596a4041fb757f1f5a75999cf8858">More...</a><br /></td></tr>
<tr class="separator:ga49f596a4041fb757f1f5a75999cf8858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga975661f2b06dddb125c5d1757160b02c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga975661f2b06dddb125c5d1757160b02c">afcl_set_device_context</a> (cl_device_id dev, cl_context ctx)</td></tr>
<tr class="memdesc:ga975661f2b06dddb125c5d1757160b02c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set active device using cl_context and cl_device_id.  <a href="group__opencl__mat.htm#ga975661f2b06dddb125c5d1757160b02c">More...</a><br /></td></tr>
<tr class="separator:ga975661f2b06dddb125c5d1757160b02c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a56dcf05099d6ac0a3b7701f7cb23f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga1a56dcf05099d6ac0a3b7701f7cb23f8">afcl_delete_device_context</a> (cl_device_id dev, cl_context ctx)</td></tr>
<tr class="memdesc:ga1a56dcf05099d6ac0a3b7701f7cb23f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the user provided device control constructs from the ArrayFire device manager pool.  <a href="group__opencl__mat.htm#ga1a56dcf05099d6ac0a3b7701f7cb23f8">More...</a><br /></td></tr>
<tr class="separator:ga1a56dcf05099d6ac0a3b7701f7cb23f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e360e0fe0eb55d0046191bc3fd6f81d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga5e360e0fe0eb55d0046191bc3fd6f81d">afcl_get_device_type</a> (<a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">afcl_device_type</a> *res)</td></tr>
<tr class="memdesc:ga5e360e0fe0eb55d0046191bc3fd6f81d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the type of the current device.  <a href="group__opencl__mat.htm#ga5e360e0fe0eb55d0046191bc3fd6f81d">More...</a><br /></td></tr>
<tr class="separator:ga5e360e0fe0eb55d0046191bc3fd6f81d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga553abe2f413c48f5378d920a262be8eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga553abe2f413c48f5378d920a262be8eb">afcl_get_platform</a> (<a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">afcl_platform</a> *res)</td></tr>
<tr class="memdesc:ga553abe2f413c48f5378d920a262be8eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the platform of the current device.  <a href="group__opencl__mat.htm#ga553abe2f413c48f5378d920a262be8eb">More...</a><br /></td></tr>
<tr class="separator:ga553abe2f413c48f5378d920a262be8eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Accessing ArrayFire's context, queue, and share data with other OpenCL code. </p>
<p>If your software is using ArrayFire's OpenCL backend, you can also write custom kernels and do custom memory operations using native OpenCL commands. The functions contained in the <code>afcl</code> namespace provide methods to get the context, queue, and device(s) that ArrayFire is using as well as convert <code>cl_mem</code> handles to <a class="el" href="classaf_1_1array.htm">af::array</a> objects.</p>
<p>Please note: the <a class="el" href="classaf_1_1array.htm">af::array</a> constructors are not thread safe. You may create and upload data to <code>cl_mem</code> objects from separate threads, but the thread which instantiated ArrayFire must do the <code>cl_mem</code> to <a class="el" href="classaf_1_1array.htm">af::array</a> conversion. </p>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="gae992d938aa02af60b1c57ae9b0431ec7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae992d938aa02af60b1c57ae9b0431ec7">&#9670;&nbsp;</a></span>deviceType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">afcl_device_type</a> <a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">deviceType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00286">286</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>

</div>
</div>
<a id="ga008db4bfef536fa729bab8df95439b6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga008db4bfef536fa729bab8df95439b6a">&#9670;&nbsp;</a></span>platform</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">afcl_platform</a> <a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">platform</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00287">287</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga52c81b7227b95ce05c3e8b8efed3a9dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga52c81b7227b95ce05c3e8b8efed3a9dc">&#9670;&nbsp;</a></span>addDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void afcl::addDevice </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>que</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Push user provided device control constructs into the ArrayFire device manager pool. </p>
<p>This function should be used only when the user would like ArrayFire to use an user generated OpenCL context and related objects for ArrayFire operations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device for which user provided context will be used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the user provided OpenCL cl_context to be used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">que</td><td>is the user provided OpenCL cl_command_queue to be used by ArrayFire. If this parameter is NULL, then we create a command queue for the user using the OpenCL context they provided us.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>ArrayFire does not take control of releasing the objects passed to it. The user needs to release them appropriately. </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00244">244</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;{</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#ga49f596a4041fb757f1f5a75999cf8858">afcl_add_device_context</a>(dev, ctx, que);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">if</span> (err!=<a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to push user provided device/context to ArrayFire pool&quot;</span>);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga49f596a4041fb757f1f5a75999cf8858"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga49f596a4041fb757f1f5a75999cf8858">&#9670;&nbsp;</a></span>afcl_add_device_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_add_device_context </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>que</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Push user provided device control constructs into the ArrayFire device manager pool. </p>
<p>This function should be used only when the user would like ArrayFire to use an user generated OpenCL context and related objects for ArrayFire operations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device for which user provided context will be used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the user provided OpenCL cl_context to be used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">que</td><td>is the user provided OpenCL cl_command_queue to be used by ArrayFire. If this parameter is NULL, then we create a command queue for the user using the OpenCL context they provided us.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>ArrayFire does not take control of releasing the objects passed to it. The user needs to release them appropriately. </dd></dl>

</div>
</div>
<a id="ga1a56dcf05099d6ac0a3b7701f7cb23f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1a56dcf05099d6ac0a3b7701f7cb23f8">&#9670;&nbsp;</a></span>afcl_delete_device_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_delete_device_context </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove the user provided device control constructs from the ArrayFire device manager pool. </p>
<p>This function should be used only when the user would like ArrayFire to remove an already pushed user generated OpenCL context and related objects.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device id that has to be popped </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the cl_context object to be removed from ArrayFire pool</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>ArrayFire does not take control of releasing the objects passed to it. The user needs to release them appropriately. </dd></dl>

</div>
</div>
<a id="gad42de383f405b3e38d6eb669c0cbe2e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad42de383f405b3e38d6eb669c0cbe2e3">&#9670;&nbsp;</a></span>afcl_get_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_context </td>
          <td>(</td>
          <td class="paramtype">cl_context *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>retain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ctx</td><td>the current context being used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainContext prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::Context constructor </dd></dl>

</div>
</div>
<a id="gaf7258055284e65a8647a49c3f3b9feee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf7258055284e65a8647a49c3f3b9feee">&#9670;&nbsp;</a></span>afcl_get_device_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_device_id </td>
          <td>(</td>
          <td class="paramtype">cl_device_id *&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the device ID for ArrayFire's current active device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>the cl_device_id of the current device </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code </dd></dl>

</div>
</div>
<a id="ga5e360e0fe0eb55d0046191bc3fd6f81d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5e360e0fe0eb55d0046191bc3fd6f81d">&#9670;&nbsp;</a></span>afcl_get_device_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_device_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">afcl_device_type</a> *&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the type of the current device. </p>

</div>
</div>
<a id="ga553abe2f413c48f5378d920a262be8eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga553abe2f413c48f5378d920a262be8eb">&#9670;&nbsp;</a></span>afcl_get_platform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_platform </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">afcl_platform</a> *&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the platform of the current device. </p>

</div>
</div>
<a id="gab1701ef4f2b68429eb31c1e21c88d0bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab1701ef4f2b68429eb31c1e21c88d0bc">&#9670;&nbsp;</a></span>afcl_get_queue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_queue </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue *&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>retain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL command queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">queue</td><td>the current command queue being used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainCommandQueue prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::CommandQueue constructor </dd></dl>

</div>
</div>
<a id="ga975661f2b06dddb125c5d1757160b02c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga975661f2b06dddb125c5d1757160b02c">&#9670;&nbsp;</a></span>afcl_set_device_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_set_device_context </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set active device using cl_context and cl_device_id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device id that is to be set as Active device inside ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the OpenCL cl_context being used by ArrayFire </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga600361a20ceac2a65590b67fc0366314"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga600361a20ceac2a65590b67fc0366314">&#9670;&nbsp;</a></span>afcl_set_device_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_set_device_id </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set ArrayFire's active device based on <code>id</code> of type cl_device_id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>the cl_device_id of the device to be set as active device </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code </dd></dl>

</div>
</div>
<a id="ga5434aaf76be37fae92ac5086315516f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5434aaf76be37fae92ac5086315516f0">&#9670;&nbsp;</a></span>array() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1dim4.htm">af::dim4</a>&#160;</td>
          <td class="paramname"><em>idims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idims</td><td>the dimensions of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="getting_started_2convolve_8cpp-example.htm#a7">getting_started/convolve.cpp</a>, <a class="el" href="getting_started_2integer_8cpp-example.htm#a3">getting_started/integer.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a1">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2image_demo_8cpp-example.htm#a3">image_processing/image_demo.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a9">image_processing/morphing.cpp</a>, and <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#a1">image_processing/optical_flow.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00327">327</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> ndims = (unsigned)idims.<a class="code" href="classaf_1_1dim4.htm#a4fd9beb19aa35a30f19811786e99d426">ndims</a>();</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;     <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *dims = idims.<a class="code" href="classaf_1_1dim4.htm#acfe9236f37131e50c17bfb81654c9efc">get</a>();</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;     cl_context context;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;     cl_int clerr = clGetMemObjectInfo(buf, CL_MEM_CONTEXT, <span class="keyword">sizeof</span>(cl_context), &amp;context, NULL);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;     <span class="keywordflow">if</span> (clerr != CL_SUCCESS) {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;         <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to get context from cl_mem object \&quot;buf\&quot; &quot;</span>);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;     }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;     <span class="keywordflow">if</span> (context != <a class="code" href="group__opencl__mat.htm#ga1984398db67a52977435e653bb842da7">getContext</a>()) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;         <span class="keywordflow">throw</span>(<a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Context mismatch between input \&quot;buf\&quot; and arrayfire&quot;</span>));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;     }</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;     <span class="keywordflow">if</span> (retain) clerr = clRetainMemObject(buf);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;     <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> out;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;     <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__c__api__mat.htm#gaad4fc77f872217e7337cb53bfb623cf5">af_device_array</a>(&amp;out, buf, ndims, dims, type);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;     <span class="keywordflow">if</span> (err != <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> || clerr != CL_SUCCESS) {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;         <span class="keywordflow">if</span> (retain &amp;&amp; clerr == CL_SUCCESS) clReleaseMemObject(buf);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;         <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to create device array&quot;</span>);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;     }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;     <span class="keywordflow">return</span> <a class="code" href="group__opencl__mat.htm#ga89507e0349f5d7ee068325b9b24c891b">af::array</a>(out);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga032919598890f2ccc6b1835c213416c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga032919598890f2ccc6b1835c213416c7">&#9670;&nbsp;</a></span>array() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>the length of the first dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00367">367</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;     <span class="keywordflow">return</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a>(<a class="code" href="classaf_1_1dim4.htm">af::dim4</a>(dim0), buf, type, retain);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga752a709190f80c8342e2da6fc405af27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga752a709190f80c8342e2da6fc405af27">&#9670;&nbsp;</a></span>array() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>the length of the first dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>the length of the second dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00385">385</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;     <span class="keywordflow">return</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a>(<a class="code" href="classaf_1_1dim4.htm">af::dim4</a>(dim0, dim1), buf, type, retain);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="gafad240e885df716a656bd6634db22626"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafad240e885df716a656bd6634db22626">&#9670;&nbsp;</a></span>array() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>the length of the first dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>the length of the second dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>the length of the third dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00404">404</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;     <span class="keywordflow">return</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a>(<a class="code" href="classaf_1_1dim4.htm">af::dim4</a>(dim0, dim1, dim2), buf, type, retain);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga89507e0349f5d7ee068325b9b24c891b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga89507e0349f5d7ee068325b9b24c891b">&#9670;&nbsp;</a></span>array() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>the length of the first dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>the length of the second dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>the length of the third dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim3</td><td>the length of the fourth dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00425">425</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;     <span class="keywordflow">return</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a>(<a class="code" href="classaf_1_1dim4.htm">af::dim4</a>(dim0, dim1, dim2, dim3), buf, type, retain);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga410026dc3d7b5e8b779c3505578cb097"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga410026dc3d7b5e8b779c3505578cb097">&#9670;&nbsp;</a></span>deleteDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void afcl::deleteDevice </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Remove the user provided device control constructs from the ArrayFire device manager pool. </p>
<p>This function should be used only when the user would like ArrayFire to remove an already pushed user generated OpenCL context and related objects.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device id that has to be popped </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the cl_context object to be removed from ArrayFire pool</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>ArrayFire does not take control of releasing the objects passed to it. The user needs to release them appropriately. </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00277">277</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;{</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#ga1a56dcf05099d6ac0a3b7701f7cb23f8">afcl_delete_device_context</a>(dev, ctx);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">if</span> (err!=<a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to remove the requested device from ArrayFire device pool&quot;</span>);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga1984398db67a52977435e653bb842da7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1984398db67a52977435e653bb842da7">&#9670;&nbsp;</a></span>getContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cl_context afcl::getContext </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainContext prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the current context being used by ArrayFire</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::Context constructor </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00179">179</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;     cl_context ctx;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;     <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#gad42de383f405b3e38d6eb669c0cbe2e3">afcl_get_context</a>(&amp;ctx, retain);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;     <span class="keywordflow">if</span> (err != <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to get OpenCL context from arrayfire&quot;</span>);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;     <span class="keywordflow">return</span> ctx;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="gae40668cc7d19273f449a1628ac438182"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae40668cc7d19273f449a1628ac438182">&#9670;&nbsp;</a></span>getDeviceId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cl_device_id afcl::getDeviceId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the device ID for ArrayFire's current active device. </p>
<dl class="section return"><dt>Returns</dt><dd>the cl_device_id of the current device </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00207">207</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;     cl_device_id id;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;     <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#gaf7258055284e65a8647a49c3f3b9feee">afcl_get_device_id</a>(&amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;     <span class="keywordflow">if</span> (err != <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to get OpenCL device ID&quot;</span>);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;     <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga9f00565eb14e9cc9bf9568bac2072d70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9f00565eb14e9cc9bf9568bac2072d70">&#9670;&nbsp;</a></span>getDeviceType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">deviceType</a> afcl::getDeviceType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the type of the current device. </p>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00294">294</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">afcl_device_type</a> res = <a class="code" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0a914470648281dfa6c851a55119a344f2">AFCL_DEVICE_TYPE_UNKNOWN</a>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#ga5e360e0fe0eb55d0046191bc3fd6f81d">afcl_get_device_type</a>(&amp;res);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">if</span> (err!=<a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to get OpenCL device type&quot;</span>);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga9c5a70a03d0d0bb31b4e7e5a0598752a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9c5a70a03d0d0bb31b4e7e5a0598752a">&#9670;&nbsp;</a></span>getPlatform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">platform</a> afcl::getPlatform </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a vendor enumeration for the current platform. </p>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00307">307</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;{</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">afcl_platform</a> res = <a class="code" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28aabf82101932e047cd27702c0f21b0cd5">AFCL_PLATFORM_UNKNOWN</a>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#ga553abe2f413c48f5378d920a262be8eb">afcl_get_platform</a>(&amp;res);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordflow">if</span> (err!=<a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to get OpenCL platform&quot;</span>);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga4bdd87f7ee76ba2ac18a7e1719508d5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4bdd87f7ee76ba2ac18a7e1719508d5d">&#9670;&nbsp;</a></span>getQueue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cl_command_queue afcl::getQueue </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL command queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainCommandQueue prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the current command queue being used by ArrayFire</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::CommandQueue constructor </dd></dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00195">195</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;     cl_command_queue queue;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;     <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#gab1701ef4f2b68429eb31c1e21c88d0bc">afcl_get_queue</a>(&amp;queue, retain);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;     <span class="keywordflow">if</span> (err != <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to get OpenCL command queue from arrayfire&quot;</span>);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;     <span class="keywordflow">return</span> queue;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga37969cfa49416bbdb25910d15c454d01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga37969cfa49416bbdb25910d15c454d01">&#9670;&nbsp;</a></span>setDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void afcl::setDevice </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set active device using cl_context and cl_device_id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device id that is to be set as Active device inside ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the OpenCL cl_context being used by ArrayFire </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00258">258</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#ga975661f2b06dddb125c5d1757160b02c">afcl_set_device_context</a>(dev, ctx);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">if</span> (err!=<a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to set device based on cl_device_id &amp; cl_context&quot;</span>);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ga242cc7dc5dcebc9e695e4fc3faebb91e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga242cc7dc5dcebc9e695e4fc3faebb91e">&#9670;&nbsp;</a></span>setDeviceId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void afcl::setDeviceId </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set ArrayFire's active device based on <code>id</code> of type cl_device_id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>the cl_device_id of the device to be set as active device </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="opencl_8h_source.htm#l00222">222</a> of file <a class="el" href="opencl_8h_source.htm">opencl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;     <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> err = <a class="code" href="group__opencl__mat.htm#ga600361a20ceac2a65590b67fc0366314">afcl_set_device_id</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;     <span class="keywordflow">if</span> (err != <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>) <span class="keywordflow">throw</span> <a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;Failed to set OpenCL device as active device&quot;</span>);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; }</div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__opencl__mat_htm_ga1a56dcf05099d6ac0a3b7701f7cb23f8"><div class="ttname"><a href="group__opencl__mat.htm#ga1a56dcf05099d6ac0a3b7701f7cb23f8">afcl_delete_device_context</a></div><div class="ttdeci">AFAPI af_err afcl_delete_device_context(cl_device_id dev, cl_context ctx)</div><div class="ttdoc">Remove the user provided device control constructs from the ArrayFire device manager pool.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_gaf7258055284e65a8647a49c3f3b9feee"><div class="ttname"><a href="group__opencl__mat.htm#gaf7258055284e65a8647a49c3f3b9feee">afcl_get_device_id</a></div><div class="ttdeci">AFAPI af_err afcl_get_device_id(cl_device_id *id)</div><div class="ttdoc">Get the device ID for ArrayFire's current active device.</div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00032">dim4.hpp:33</a></div></div>
<div class="ttc" id="adefines_8h_htm_a7f026aa801b1fa6b85b0d992b414cccb"><div class="ttname"><a href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a></div><div class="ttdeci">long long dim_t</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00056">defines.h:56</a></div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga1984398db67a52977435e653bb842da7"><div class="ttname"><a href="group__opencl__mat.htm#ga1984398db67a52977435e653bb842da7">afcl::getContext</a></div><div class="ttdeci">static cl_context getContext(bool retain=false)</div><div class="ttdoc">Get a handle to ArrayFire's OpenCL context.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00179">opencl.h:179</a></div></div>
<div class="ttc" id="adefines_8h_htm_a8e45f4aa3dbea6a7aa021dbc50a4a089"><div class="ttname"><a href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a></div><div class="ttdeci">void * af_array</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00240">defines.h:240</a></div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga600361a20ceac2a65590b67fc0366314"><div class="ttname"><a href="group__opencl__mat.htm#ga600361a20ceac2a65590b67fc0366314">afcl_set_device_id</a></div><div class="ttdeci">AFAPI af_err afcl_set_device_id(cl_device_id id)</div><div class="ttdoc">Set ArrayFire's active device based on id of type cl_device_id.</div></div>
<div class="ttc" id="aopencl_8h_htm_af95851e7072b7d55bccd5d2ade7b8b28"><div class="ttname"><a href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">afcl_platform</a></div><div class="ttdeci">afcl_platform</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00034">opencl.h:35</a></div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:29</a></div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5e360e0fe0eb55d0046191bc3fd6f81d"><div class="ttname"><a href="group__opencl__mat.htm#ga5e360e0fe0eb55d0046191bc3fd6f81d">afcl_get_device_type</a></div><div class="ttdeci">AFAPI af_err afcl_get_device_type(afcl_device_type *res)</div><div class="ttdoc">Get the type of the current device.</div></div>
<div class="ttc" id="aopencl_8h_htm_a2ccbc2c23e27f2a378e4a1b2335994c0a914470648281dfa6c851a55119a344f2"><div class="ttname"><a href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0a914470648281dfa6c851a55119a344f2">AFCL_DEVICE_TYPE_UNKNOWN</a></div><div class="ttdeci">@ AFCL_DEVICE_TYPE_UNKNOWN</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00037">opencl.h:36</a></div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga49f596a4041fb757f1f5a75999cf8858"><div class="ttname"><a href="group__opencl__mat.htm#ga49f596a4041fb757f1f5a75999cf8858">afcl_add_device_context</a></div><div class="ttdeci">AFAPI af_err afcl_add_device_context(cl_device_id dev, cl_context ctx, cl_command_queue que)</div><div class="ttdoc">Push user provided device control constructs into the ArrayFire device manager pool.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga975661f2b06dddb125c5d1757160b02c"><div class="ttname"><a href="group__opencl__mat.htm#ga975661f2b06dddb125c5d1757160b02c">afcl_set_device_context</a></div><div class="ttdeci">AFAPI af_err afcl_set_device_context(cl_device_id dev, cl_context ctx)</div><div class="ttdoc">Set active device using cl_context and cl_device_id.</div></div>
<div class="ttc" id="adefines_8h_htm_a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76"><div class="ttname"><a href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a></div><div class="ttdeci">@ AF_SUCCESS</div><div class="ttdoc">The function returned successfully.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00082">defines.h:75</a></div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga553abe2f413c48f5378d920a262be8eb"><div class="ttname"><a href="group__opencl__mat.htm#ga553abe2f413c48f5378d920a262be8eb">afcl_get_platform</a></div><div class="ttdeci">AFAPI af_err afcl_get_platform(afcl_platform *res)</div><div class="ttdoc">Get the platform of the current device.</div></div>
<div class="ttc" id="aopencl_8h_htm_af95851e7072b7d55bccd5d2ade7b8b28aabf82101932e047cd27702c0f21b0cd5"><div class="ttname"><a href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28aabf82101932e047cd27702c0f21b0cd5">AFCL_PLATFORM_UNKNOWN</a></div><div class="ttdeci">@ AFCL_PLATFORM_UNKNOWN</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00043">opencl.h:42</a></div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm_acfe9236f37131e50c17bfb81654c9efc"><div class="ttname"><a href="classaf_1_1dim4.htm#acfe9236f37131e50c17bfb81654c9efc">af::dim4::get</a></div><div class="ttdeci">dim_t * get()</div><div class="ttdoc">Returns the underlying pointer to the dim4 object.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00101">dim4.hpp:101</a></div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm_a4fd9beb19aa35a30f19811786e99d426"><div class="ttname"><a href="classaf_1_1dim4.htm#a4fd9beb19aa35a30f19811786e99d426">af::dim4::ndims</a></div><div class="ttdeci">dim_t ndims()</div><div class="ttdoc">Returns the number of axis whose values are greater than one.</div></div>
<div class="ttc" id="aopencl_8h_htm_a2ccbc2c23e27f2a378e4a1b2335994c0"><div class="ttname"><a href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">afcl_device_type</a></div><div class="ttdeci">afcl_device_type</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00024">opencl.h:25</a></div></div>
<div class="ttc" id="agroup__opencl__mat_htm_gad42de383f405b3e38d6eb669c0cbe2e3"><div class="ttname"><a href="group__opencl__mat.htm#gad42de383f405b3e38d6eb669c0cbe2e3">afcl_get_context</a></div><div class="ttdeci">AFAPI af_err afcl_get_context(cl_context *ctx, const bool retain)</div><div class="ttdoc">Get a handle to ArrayFire's OpenCL context.</div></div>
<div class="ttc" id="agroup__c__api__mat_htm_gaad4fc77f872217e7337cb53bfb623cf5"><div class="ttname"><a href="group__c__api__mat.htm#gaad4fc77f872217e7337cb53bfb623cf5">af_device_array</a></div><div class="ttdeci">AFAPI af_err af_device_array(af_array *arr, void *data, const unsigned ndims, const dim_t *const dims, const af_dtype type)</div><div class="ttdoc">Create array from device memory.</div></div>
<div class="ttc" id="adefines_8h_htm_a82b94dc53bbd100a0e8ca9dd356aaf4f"><div class="ttname"><a href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a></div><div class="ttdeci">af_err</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00071">defines.h:71</a></div></div>
<div class="ttc" id="agroup__opencl__mat_htm_gab1701ef4f2b68429eb31c1e21c88d0bc"><div class="ttname"><a href="group__opencl__mat.htm#gab1701ef4f2b68429eb31c1e21c88d0bc">afcl_get_queue</a></div><div class="ttdeci">AFAPI af_err afcl_get_queue(cl_command_queue *queue, const bool retain)</div><div class="ttdoc">Get a handle to ArrayFire's OpenCL command queue.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga89507e0349f5d7ee068325b9b24c891b"><div class="ttname"><a href="group__opencl__mat.htm#ga89507e0349f5d7ee068325b9b24c891b">afcl::array</a></div><div class="ttdeci">static af::array array(dim_t dim0, dim_t dim1, dim_t dim2, dim_t dim3, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00425">opencl.h:425</a></div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
