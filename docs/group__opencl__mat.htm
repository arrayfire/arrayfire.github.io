<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>OpenCL specific functions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__opencl__mat.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">OpenCL specific functions<div class="ingroups"><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__external.htm">Interface Functions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Accessing ArrayFire's context, queue, and share data with other OpenCL code.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="memitem:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gad42de383f405b3e38d6eb669c0cbe2e3">afcl_get_context</a> (cl_context *ctx, const bool retain)</td></tr>
<tr class="memdesc:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL context.  <a href="#gad42de383f405b3e38d6eb669c0cbe2e3">More...</a><br /></td></tr>
<tr class="separator:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gab1701ef4f2b68429eb31c1e21c88d0bc">afcl_get_queue</a> (cl_command_queue *queue, const bool retain)</td></tr>
<tr class="memdesc:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL command queue.  <a href="#gab1701ef4f2b68429eb31c1e21c88d0bc">More...</a><br /></td></tr>
<tr class="separator:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7258055284e65a8647a49c3f3b9feee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gaf7258055284e65a8647a49c3f3b9feee">afcl_get_device_id</a> (cl_device_id *id)</td></tr>
<tr class="memdesc:gaf7258055284e65a8647a49c3f3b9feee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the device ID for ArrayFire's current active device.  <a href="#gaf7258055284e65a8647a49c3f3b9feee">More...</a><br /></td></tr>
<tr class="separator:gaf7258055284e65a8647a49c3f3b9feee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga600361a20ceac2a65590b67fc0366314"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga600361a20ceac2a65590b67fc0366314">afcl_set_device_id</a> (cl_device_id id)</td></tr>
<tr class="memdesc:ga600361a20ceac2a65590b67fc0366314"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set ArrayFire's active device based on <code>id</code> of type cl_device_id.  <a href="#ga600361a20ceac2a65590b67fc0366314">More...</a><br /></td></tr>
<tr class="separator:ga600361a20ceac2a65590b67fc0366314"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1984398db67a52977435e653bb842da7"><td class="memItemLeft" align="right" valign="top">static cl_context&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga1984398db67a52977435e653bb842da7">getContext</a> (bool retain=false)</td></tr>
<tr class="memdesc:ga1984398db67a52977435e653bb842da7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL context.  <a href="group__opencl__mat.htm#ga1984398db67a52977435e653bb842da7">More...</a><br /></td></tr>
<tr class="separator:ga1984398db67a52977435e653bb842da7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4bdd87f7ee76ba2ac18a7e1719508d5d"><td class="memItemLeft" align="right" valign="top">static cl_command_queue&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga4bdd87f7ee76ba2ac18a7e1719508d5d">getQueue</a> (bool retain=false)</td></tr>
<tr class="memdesc:ga4bdd87f7ee76ba2ac18a7e1719508d5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL command queue.  <a href="group__opencl__mat.htm#ga4bdd87f7ee76ba2ac18a7e1719508d5d">More...</a><br /></td></tr>
<tr class="separator:ga4bdd87f7ee76ba2ac18a7e1719508d5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae40668cc7d19273f449a1628ac438182"><td class="memItemLeft" align="right" valign="top">static cl_device_id&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gae40668cc7d19273f449a1628ac438182">getDeviceId</a> ()</td></tr>
<tr class="memdesc:gae40668cc7d19273f449a1628ac438182"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the device ID for ArrayFire's current active device.  <a href="group__opencl__mat.htm#gae40668cc7d19273f449a1628ac438182">More...</a><br /></td></tr>
<tr class="separator:gae40668cc7d19273f449a1628ac438182"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga242cc7dc5dcebc9e695e4fc3faebb91e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga242cc7dc5dcebc9e695e4fc3faebb91e">setDeviceId</a> (cl_device_id id)</td></tr>
<tr class="memdesc:ga242cc7dc5dcebc9e695e4fc3faebb91e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set ArrayFire's active device based on <code>id</code> of type cl_device_id.  <a href="group__opencl__mat.htm#ga242cc7dc5dcebc9e695e4fc3faebb91e">More...</a><br /></td></tr>
<tr class="separator:ga242cc7dc5dcebc9e695e4fc3faebb91e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5434aaf76be37fae92ac5086315516f0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> (<a class="el" href="classaf_1_1dim4.htm">af::dim4</a> idims, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:ga5434aaf76be37fae92ac5086315516f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">More...</a><br /></td></tr>
<tr class="separator:ga5434aaf76be37fae92ac5086315516f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga032919598890f2ccc6b1835c213416c7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga032919598890f2ccc6b1835c213416c7">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:ga032919598890f2ccc6b1835c213416c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#ga032919598890f2ccc6b1835c213416c7">More...</a><br /></td></tr>
<tr class="separator:ga032919598890f2ccc6b1835c213416c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga752a709190f80c8342e2da6fc405af27"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga752a709190f80c8342e2da6fc405af27">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:ga752a709190f80c8342e2da6fc405af27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#ga752a709190f80c8342e2da6fc405af27">More...</a><br /></td></tr>
<tr class="separator:ga752a709190f80c8342e2da6fc405af27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafad240e885df716a656bd6634db22626"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gafad240e885df716a656bd6634db22626">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:gafad240e885df716a656bd6634db22626"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#gafad240e885df716a656bd6634db22626">More...</a><br /></td></tr>
<tr class="separator:gafad240e885df716a656bd6634db22626"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga89507e0349f5d7ee068325b9b24c891b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classaf_1_1array.htm">af::array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga89507e0349f5d7ee068325b9b24c891b">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3, cl_mem buf, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a> type, bool retain=false)</td></tr>
<tr class="memdesc:ga89507e0349f5d7ee068325b9b24c891b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer.  <a href="group__opencl__mat.htm#ga89507e0349f5d7ee068325b9b24c891b">More...</a><br /></td></tr>
<tr class="separator:ga89507e0349f5d7ee068325b9b24c891b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Accessing ArrayFire's context, queue, and share data with other OpenCL code. </p>
<p>If your software is using ArrayFire's OpenCL backend, you can also write custom kernels and do custom memory operations using native OpenCL commands. The functions contained in the <code>afcl</code> namespace provide methods to get the context, queue, and device(s) that ArrayFire is using as well as convert <code>cl_mem</code> handles to <a class="el" href="classaf_1_1array.htm">af::array</a> objects.</p>
<p>Please note: the <a class="el" href="classaf_1_1array.htm">af::array</a> constructors are not thread safe. You may create and upload data to <code>cl_mem</code> objects from separate threads, but the thread which instantiated ArrayFire must do the <code>cl_mem</code> to <a class="el" href="classaf_1_1array.htm">af::array</a> conversion. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gad42de383f405b3e38d6eb669c0cbe2e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_context </td>
          <td>(</td>
          <td class="paramtype">cl_context *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>retain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ctx</td><td>the current context being used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainContext prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::Context constructor </dd></dl>

</div>
</div>
<a class="anchor" id="gaf7258055284e65a8647a49c3f3b9feee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_device_id </td>
          <td>(</td>
          <td class="paramtype">cl_device_id *&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the device ID for ArrayFire's current active device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>the cl_device_id of the current device </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code </dd></dl>

</div>
</div>
<a class="anchor" id="gab1701ef4f2b68429eb31c1e21c88d0bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_queue </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue *&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>retain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL command queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">queue</td><td>the current command queue being used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainCommandQueue prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::CommandQueue constructor </dd></dl>

</div>
</div>
<a class="anchor" id="ga600361a20ceac2a65590b67fc0366314"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_set_device_id </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set ArrayFire's active device based on <code>id</code> of type cl_device_id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>the cl_device_id of the device to be set as active device </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code </dd></dl>

</div>
</div>
<a class="anchor" id="ga5434aaf76be37fae92ac5086315516f0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1dim4.htm">af::dim4</a>&#160;</td>
          <td class="paramname"><em>idims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idims</td><td>the dimensions of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="getting_started_2convolve_8cpp-example.htm#a7">getting_started/convolve.cpp</a>, <a class="el" href="getting_started_2integer_8cpp-example.htm#a3">getting_started/integer.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a1">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2image_demo_8cpp-example.htm#a3">image_processing/image_demo.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a9">image_processing/morphing.cpp</a>, and <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#a1">image_processing/optical_flow.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="ga032919598890f2ccc6b1835c213416c7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>the length of the first dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>

</div>
</div>
<a class="anchor" id="ga752a709190f80c8342e2da6fc405af27"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>the length of the first dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>the length of the second dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>

</div>
</div>
<a class="anchor" id="gafad240e885df716a656bd6634db22626"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>the length of the first dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>the length of the second dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>the length of the third dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>

</div>
</div>
<a class="anchor" id="ga89507e0349f5d7ee068325b9b24c891b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classaf_1_1array.htm">af::array</a> afcl::array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af::dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> object from an OpenCL cl_mem buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>the length of the first dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>the length of the second dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>the length of the third dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim3</td><td>the length of the fourth dimension of the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buf</td><td>the OpenCL memory object </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>the data type contained in the buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true, instructs ArrayFire to retain the memory object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array object created from the OpenCL buffer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if the memory originates from a cl::Buffer object </dd></dl>

</div>
</div>
<a class="anchor" id="ga1984398db67a52977435e653bb842da7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cl_context afcl::getContext </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainContext prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the current context being used by ArrayFire</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::Context constructor </dd></dl>

</div>
</div>
<a class="anchor" id="gae40668cc7d19273f449a1628ac438182"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cl_device_id afcl::getDeviceId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the device ID for ArrayFire's current active device. </p>
<dl class="section return"><dt>Returns</dt><dd>the cl_device_id of the current device </dd></dl>

</div>
</div>
<a class="anchor" id="ga4bdd87f7ee76ba2ac18a7e1719508d5d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cl_command_queue afcl::getQueue </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL command queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainCommandQueue prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the current command queue being used by ArrayFire</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::CommandQueue constructor </dd></dl>

</div>
</div>
<a class="anchor" id="ga242cc7dc5dcebc9e695e4fc3faebb91e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void afcl::setDeviceId </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set ArrayFire's active device based on <code>id</code> of type cl_device_id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>the cl_device_id of the device to be set as active device </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
