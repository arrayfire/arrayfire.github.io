<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>OpenCL specific functions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__opencl__mat.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">OpenCL specific functions<div class="ingroups"><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__external.htm">Interface Functions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Accessing ArrayFire's context, queue, and share data with other OpenCL code.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="memitem:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gad42de383f405b3e38d6eb669c0cbe2e3">afcl_get_context</a> (cl_context *ctx, const bool retain)</td></tr>
<tr class="memdesc:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL context.  <a href="#gad42de383f405b3e38d6eb669c0cbe2e3">More...</a><br /></td></tr>
<tr class="separator:gad42de383f405b3e38d6eb669c0cbe2e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gab1701ef4f2b68429eb31c1e21c88d0bc">afcl_get_queue</a> (cl_command_queue *queue, const bool retain)</td></tr>
<tr class="memdesc:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL command queue.  <a href="#gab1701ef4f2b68429eb31c1e21c88d0bc">More...</a><br /></td></tr>
<tr class="separator:gab1701ef4f2b68429eb31c1e21c88d0bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7258055284e65a8647a49c3f3b9feee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#gaf7258055284e65a8647a49c3f3b9feee">afcl_get_device_id</a> (cl_device_id *id)</td></tr>
<tr class="memdesc:gaf7258055284e65a8647a49c3f3b9feee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the device ID for ArrayFire's current active device.  <a href="#gaf7258055284e65a8647a49c3f3b9feee">More...</a><br /></td></tr>
<tr class="separator:gaf7258055284e65a8647a49c3f3b9feee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga600361a20ceac2a65590b67fc0366314"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga600361a20ceac2a65590b67fc0366314">afcl_set_device_id</a> (cl_device_id id)</td></tr>
<tr class="memdesc:ga600361a20ceac2a65590b67fc0366314"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set ArrayFire's active device based on <code>id</code> of type cl_device_id.  <a href="#ga600361a20ceac2a65590b67fc0366314">More...</a><br /></td></tr>
<tr class="separator:ga600361a20ceac2a65590b67fc0366314"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga49f596a4041fb757f1f5a75999cf8858"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga49f596a4041fb757f1f5a75999cf8858">afcl_add_device_context</a> (cl_device_id dev, cl_context ctx, cl_command_queue que)</td></tr>
<tr class="memdesc:ga49f596a4041fb757f1f5a75999cf8858"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push user provided device control constructs into the ArrayFire device manager pool.  <a href="#ga49f596a4041fb757f1f5a75999cf8858">More...</a><br /></td></tr>
<tr class="separator:ga49f596a4041fb757f1f5a75999cf8858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga975661f2b06dddb125c5d1757160b02c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga975661f2b06dddb125c5d1757160b02c">afcl_set_device_context</a> (cl_device_id dev, cl_context ctx)</td></tr>
<tr class="memdesc:ga975661f2b06dddb125c5d1757160b02c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set active device using cl_context and cl_device_id.  <a href="#ga975661f2b06dddb125c5d1757160b02c">More...</a><br /></td></tr>
<tr class="separator:ga975661f2b06dddb125c5d1757160b02c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a56dcf05099d6ac0a3b7701f7cb23f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga1a56dcf05099d6ac0a3b7701f7cb23f8">afcl_delete_device_context</a> (cl_device_id dev, cl_context ctx)</td></tr>
<tr class="memdesc:ga1a56dcf05099d6ac0a3b7701f7cb23f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the user provided device control constructs from the ArrayFire device manager pool.  <a href="#ga1a56dcf05099d6ac0a3b7701f7cb23f8">More...</a><br /></td></tr>
<tr class="separator:ga1a56dcf05099d6ac0a3b7701f7cb23f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e360e0fe0eb55d0046191bc3fd6f81d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga5e360e0fe0eb55d0046191bc3fd6f81d">afcl_get_device_type</a> (<a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">afcl_device_type</a> *res)</td></tr>
<tr class="memdesc:ga5e360e0fe0eb55d0046191bc3fd6f81d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the type of the current device.  <a href="#ga5e360e0fe0eb55d0046191bc3fd6f81d">More...</a><br /></td></tr>
<tr class="separator:ga5e360e0fe0eb55d0046191bc3fd6f81d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga553abe2f413c48f5378d920a262be8eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga553abe2f413c48f5378d920a262be8eb">afcl_get_platform</a> (<a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">afcl_platform</a> *res)</td></tr>
<tr class="memdesc:ga553abe2f413c48f5378d920a262be8eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the platform of the current device.  <a href="#ga553abe2f413c48f5378d920a262be8eb">More...</a><br /></td></tr>
<tr class="separator:ga553abe2f413c48f5378d920a262be8eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1984398db67a52977435e653bb842da7"><td class="memItemLeft" align="right" valign="top">static cl_context&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__opencl__mat.htm#ga1984398db67a52977435e653bb842da7">getContext</a> (bool retain=false)</td></tr>
<tr class="memdesc:ga1984398db67a52977435e653bb842da7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a handle to ArrayFire's OpenCL context.  <a href="#ga1984398db67a52977435e653bb842da7">More...</a><br /></td></tr>
<tr class="separator:ga1984398db67a52977435e653bb842da7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Accessing ArrayFire's context, queue, and share data with other OpenCL code. </p>
<p>If your software is using ArrayFire's OpenCL backend, you can also write custom kernels and do custom memory operations using native OpenCL commands. The functions contained in the <code>afcl</code> namespace provide methods to get the context, queue, and device(s) that ArrayFire is using as well as convert <code>cl_mem</code> handles to <a class="el" href="classaf_1_1array.htm">af::array</a> objects.</p>
<p>Please note: the <a class="el" href="classaf_1_1array.htm">af::array</a> constructors are not thread safe. You may create and upload data to <code>cl_mem</code> objects from separate threads, but the thread which instantiated ArrayFire must do the <code>cl_mem</code> to <a class="el" href="classaf_1_1array.htm">af::array</a> conversion. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga49f596a4041fb757f1f5a75999cf8858"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_add_device_context </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>que</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Push user provided device control constructs into the ArrayFire device manager pool. </p>
<p>This function should be used only when the user would like ArrayFire to use an user generated OpenCL context and related objects for ArrayFire operations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device for which user provided context will be used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the user provided OpenCL cl_context to be used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">que</td><td>is the user provided OpenCL cl_command_queue to be used by ArrayFire. If this parameter is NULL, then we create a command queue for the user using the OpenCL context they provided us.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>ArrayFire does not take control of releasing the objects passed to it. The user needs to release them appropriately. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1a56dcf05099d6ac0a3b7701f7cb23f8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_delete_device_context </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove the user provided device control constructs from the ArrayFire device manager pool. </p>
<p>This function should be used only when the user would like ArrayFire to remove an already pushed user generated OpenCL context and related objects.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device id that has to be popped </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the cl_context object to be removed from ArrayFire pool</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>ArrayFire does not take control of releasing the objects passed to it. The user needs to release them appropriately. </dd></dl>

</div>
</div>
<a class="anchor" id="gad42de383f405b3e38d6eb669c0cbe2e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_context </td>
          <td>(</td>
          <td class="paramtype">cl_context *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>retain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ctx</td><td>the current context being used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainContext prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::Context constructor </dd></dl>

</div>
</div>
<a class="anchor" id="gaf7258055284e65a8647a49c3f3b9feee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_device_id </td>
          <td>(</td>
          <td class="paramtype">cl_device_id *&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the device ID for ArrayFire's current active device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">id</td><td>the cl_device_id of the current device </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code </dd></dl>

</div>
</div>
<a class="anchor" id="ga5e360e0fe0eb55d0046191bc3fd6f81d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_device_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="opencl_8h.htm#a2ccbc2c23e27f2a378e4a1b2335994c0">afcl_device_type</a> *&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the type of the current device. </p>

</div>
</div>
<a class="anchor" id="ga553abe2f413c48f5378d920a262be8eb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_platform </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="opencl_8h.htm#af95851e7072b7d55bccd5d2ade7b8b28">afcl_platform</a> *&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the platform of the current device. </p>

</div>
</div>
<a class="anchor" id="gab1701ef4f2b68429eb31c1e21c88d0bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_get_queue </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue *&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>retain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL command queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">queue</td><td>the current command queue being used by ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainCommandQueue prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::CommandQueue constructor </dd></dl>

</div>
</div>
<a class="anchor" id="ga975661f2b06dddb125c5d1757160b02c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_set_device_context </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>dev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set active device using cl_context and cl_device_id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dev</td><td>is the OpenCL device id that is to be set as Active device inside ArrayFire </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>is the OpenCL cl_context being used by ArrayFire </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga600361a20ceac2a65590b67fc0366314"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> afcl_set_device_id </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set ArrayFire's active device based on <code>id</code> of type cl_device_id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>the cl_device_id of the device to be set as active device </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> error code </dd></dl>

</div>
</div>
<a class="anchor" id="ga1984398db67a52977435e653bb842da7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cl_context afcl::getContext </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>retain</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a handle to ArrayFire's OpenCL context. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">retain</td><td>if true calls clRetainContext prior to returning the context </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the current context being used by ArrayFire</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>retain</code> to true if this value will be passed to a cl::Context constructor </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
