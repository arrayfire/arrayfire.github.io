<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>Constructors of array class</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__construct__mat.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Constructors of array class<div class="ingroups"><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Construct an array object.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga751d919b6bc62e4f78dba3b088d75d18"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga751d919b6bc62e4f78dba3b088d75d18">af_device_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, const void *data, const unsigned ndims, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *const dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type)</td></tr>
<tr class="memdesc:ga751d919b6bc62e4f78dba3b088d75d18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create array from device memory.  <a href="#ga751d919b6bc62e4f78dba3b088d75d18">More...</a><br /></td></tr>
<tr class="separator:ga751d919b6bc62e4f78dba3b088d75d18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga834be32357616d8ab735087c6f681858"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga834be32357616d8ab735087c6f681858">af_create_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, const void *const data, const unsigned ndims, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *const dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type)</td></tr>
<tr class="memdesc:ga834be32357616d8ab735087c6f681858"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle initialized with user defined data.  <a href="#ga834be32357616d8ab735087c6f681858">More...</a><br /></td></tr>
<tr class="separator:ga834be32357616d8ab735087c6f681858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3b8f5cf6fce69aa1574544bc2d44d7d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga3b8f5cf6fce69aa1574544bc2d44d7d0">af_create_handle</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, const unsigned ndims, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *const dims, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type)</td></tr>
<tr class="memdesc:ga3b8f5cf6fce69aa1574544bc2d44d7d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create af_array handle.  <a href="#ga3b8f5cf6fce69aa1574544bc2d44d7d0">More...</a><br /></td></tr>
<tr class="separator:ga3b8f5cf6fce69aa1574544bc2d44d7d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9cbcfcbf0173e1edaf4094bb36b34b31"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> ()</td></tr>
<tr class="memdesc:ga9cbcfcbf0173e1edaf4094bb36b34b31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create undimensioned array (no data, undefined size)  <a href="#ga9cbcfcbf0173e1edaf4094bb36b34b31">More...</a><br /></td></tr>
<tr class="separator:ga9cbcfcbf0173e1edaf4094bb36b34b31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad34fcf3e619cabf1cd107f72c571f091"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#gad34fcf3e619cabf1cd107f72c571f091">array</a> (const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle)</td></tr>
<tr class="memdesc:gad34fcf3e619cabf1cd107f72c571f091"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an array from an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle.  <a href="#gad34fcf3e619cabf1cd107f72c571f091">More...</a><br /></td></tr>
<tr class="separator:gad34fcf3e619cabf1cd107f72c571f091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacfba46b754d8e3e5371d9bc78e7ba766"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#gacfba46b754d8e3e5371d9bc78e7ba766">array</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gacfba46b754d8e3e5371d9bc78e7ba766"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a copy to the <code>in</code> array.  <a href="#gacfba46b754d8e3e5371d9bc78e7ba766">More...</a><br /></td></tr>
<tr class="separator:gacfba46b754d8e3e5371d9bc78e7ba766"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga73cb9e2360cecbc511b87abf76b6d631"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga73cb9e2360cecbc511b87abf76b6d631">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, dtype ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga73cb9e2360cecbc511b87abf76b6d631"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a one-dimensional array of a specified size with undefined contents.  <a href="#ga73cb9e2360cecbc511b87abf76b6d631">More...</a><br /></td></tr>
<tr class="separator:ga73cb9e2360cecbc511b87abf76b6d631"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f0b51e20111680c7fe3c74d54c982dd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga1f0b51e20111680c7fe3c74d54c982dd">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, dtype ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga1f0b51e20111680c7fe3c74d54c982dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a two-dimensional array of a specified size with undefined contents.  <a href="#ga1f0b51e20111680c7fe3c74d54c982dd">More...</a><br /></td></tr>
<tr class="separator:ga1f0b51e20111680c7fe3c74d54c982dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga69c9fa684e0b0beaf657ac1dc03afa56"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga69c9fa684e0b0beaf657ac1dc03afa56">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, dtype ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga69c9fa684e0b0beaf657ac1dc03afa56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a three-dimensional (3D) array of a specified size with undefined contents.  <a href="#ga69c9fa684e0b0beaf657ac1dc03afa56">More...</a><br /></td></tr>
<tr class="separator:ga69c9fa684e0b0beaf657ac1dc03afa56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6bc7bac9bb52349c198fa0861b5004b7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga6bc7bac9bb52349c198fa0861b5004b7">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3, dtype ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga6bc7bac9bb52349c198fa0861b5004b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a four-dimensional (4D) array of a specified size with undefined contents.  <a href="#ga6bc7bac9bb52349c198fa0861b5004b7">More...</a><br /></td></tr>
<tr class="separator:ga6bc7bac9bb52349c198fa0861b5004b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5686344bf8a49be5286892998d309619"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga5686344bf8a49be5286892998d309619">array</a> (const dim4 &amp;dims, dtype ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:ga5686344bf8a49be5286892998d309619"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate an array of a specified size with undefined contents.  <a href="#ga5686344bf8a49be5286892998d309619">More...</a><br /></td></tr>
<tr class="separator:ga5686344bf8a49be5286892998d309619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c330c41d6e06b0dea9377ef02762c6f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga8c330c41d6e06b0dea9377ef02762c6f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga8c330c41d6e06b0dea9377ef02762c6f">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, const T *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:ga8c330c41d6e06b0dea9377ef02762c6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a column vector on the device using a host/device pointer.  <a href="#ga8c330c41d6e06b0dea9377ef02762c6f">More...</a><br /></td></tr>
<tr class="separator:ga8c330c41d6e06b0dea9377ef02762c6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa2ebe6a7b991fbe6231321138e79121c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaa2ebe6a7b991fbe6231321138e79121c"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#gaa2ebe6a7b991fbe6231321138e79121c">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, const T *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:gaa2ebe6a7b991fbe6231321138e79121c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a 2D array on the device using a host/device pointer.  <a href="#gaa2ebe6a7b991fbe6231321138e79121c">More...</a><br /></td></tr>
<tr class="separator:gaa2ebe6a7b991fbe6231321138e79121c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabd3d95b130bdb2d7e713414687e6b15a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gabd3d95b130bdb2d7e713414687e6b15a"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#gabd3d95b130bdb2d7e713414687e6b15a">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, const T *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:gabd3d95b130bdb2d7e713414687e6b15a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a 3D array on the device using a host/device pointer.  <a href="#gabd3d95b130bdb2d7e713414687e6b15a">More...</a><br /></td></tr>
<tr class="separator:gabd3d95b130bdb2d7e713414687e6b15a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaa8fab98447367bc4eaf3d7bc61d8ff5"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaaa8fab98447367bc4eaf3d7bc61d8ff5"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#gaaa8fab98447367bc4eaf3d7bc61d8ff5">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3, const T *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:gaaa8fab98447367bc4eaf3d7bc61d8ff5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a 4D array on the device using a host/device pointer.  <a href="#gaaa8fab98447367bc4eaf3d7bc61d8ff5">More...</a><br /></td></tr>
<tr class="separator:gaaa8fab98447367bc4eaf3d7bc61d8ff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1144078b1596e7d29f57b1a0a1c9b1a8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga1144078b1596e7d29f57b1a0a1c9b1a8"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga1144078b1596e7d29f57b1a0a1c9b1a8">array</a> (const dim4 &amp;dims, const T *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:ga1144078b1596e7d29f57b1a0a1c9b1a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an array of specified size on the device using a host/device pointer.  <a href="#ga1144078b1596e7d29f57b1a0a1c9b1a8">More...</a><br /></td></tr>
<tr class="separator:ga1144078b1596e7d29f57b1a0a1c9b1a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab65f7a320bb53cb1f25de25c685ec0a0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#gab65f7a320bb53cb1f25de25c685ec0a0">array</a> (const array &amp;input, const dim4 &amp;dims)</td></tr>
<tr class="memdesc:gab65f7a320bb53cb1f25de25c685ec0a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust the dimensions of an N-D array (fast).  <a href="#gab65f7a320bb53cb1f25de25c685ec0a0">More...</a><br /></td></tr>
<tr class="separator:gab65f7a320bb53cb1f25de25c685ec0a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4866e95e473b71b99ad842608744ac4f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__construct__mat.htm#ga4866e95e473b71b99ad842608744ac4f">array</a> (const array &amp;input, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3=1)</td></tr>
<tr class="memdesc:ga4866e95e473b71b99ad842608744ac4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust the dimensions of an N-D array (fast).  <a href="#ga4866e95e473b71b99ad842608744ac4f">More...</a><br /></td></tr>
<tr class="separator:ga4866e95e473b71b99ad842608744ac4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Construct an array object. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga834be32357616d8ab735087c6f681858"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>ndims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *const&#160;</td>
          <td class="paramname"><em>dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle initialized with user defined data. </p>
<p>This function will create an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle from the memory provided in <code>data</code> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">arr</td><td>The pointer to the returned object. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>The data which will be loaded into the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ndims</td><td>The number of dimensions read from the <code>dims</code> parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>A C pointer with <code>ndims</code> elements. Each value represents the size of that dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>The type of the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> object</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the operation was a success </dd></dl>

</div>
</div>
<a class="anchor" id="ga3b8f5cf6fce69aa1574544bc2d44d7d0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_handle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>ndims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *const&#160;</td>
          <td class="paramname"><em>dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create af_array handle. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">arr</td><td>The pointer to the retured object. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ndims</td><td>The number of dimensions read from the <code>dims</code> parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>A C pointer with <code>ndims</code> elements. Each value represents the size of that dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>The type of the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> object</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the operation was a success </dd></dl>

</div>
</div>
<a class="anchor" id="ga751d919b6bc62e4f78dba3b088d75d18"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_device_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>ndims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *const&#160;</td>
          <td class="paramname"><em>dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create array from device memory. </p>

</div>
</div>
<a class="anchor" id="ga9cbcfcbf0173e1edaf4094bb36b34b31"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create undimensioned array (no data, undefined size) </p>
<div class="fragment"><div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A, B, C;   <span class="comment">// creates three arrays called A, B and C</span></div>
</div><!-- fragment --> 
</div>
</div>
<a class="anchor" id="gad34fcf3e619cabf1cd107f72c571f091"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>handle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an array from an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">handle</td><td>the af_array object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gacfba46b754d8e3e5371d9bc78e7ba766"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a copy to the <code>in</code> array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">in</td><td>The input <a class="el" href="classaf_1_1array.htm">array</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga73cb9e2360cecbc511b87abf76b6d631"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate a one-dimensional array of a specified size with undefined contents. </p>
<p>Declare a two-dimensional array by passing the number of rows and the number of columns as the first two parameters. The (optional) second parameter is the type of the array. The default type is f32 or 4-byte single-precision floating-point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// allocate space for an array with 10 rows</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(10);          <span class="comment">// type is the default f32</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// allocate space for a column vector with 100 rows</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(100, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);    <span class="comment">// f64 = double precision</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>number of columns in the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1f0b51e20111680c7fe3c74d54c982dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate a two-dimensional array of a specified size with undefined contents. </p>
<p>Declare a two-dimensional array by passing the number of rows and the number of columns as the first two parameters. The (optional) third parameter is the type of the array. The default type is f32 or 4-byte single-precision floating-point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// allocate space for an array with 10 rows and 8 columns</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(10, 8);          <span class="comment">// type is the default f32</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// allocate space for a column vector with 100 rows (and 1 column)</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(100, 1, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);    <span class="comment">// f64 = double precision</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>number of columns in the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>number of rows in the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga69c9fa684e0b0beaf657ac1dc03afa56"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate a three-dimensional (3D) array of a specified size with undefined contents. </p>
<p>This is useful to quickly declare a three-dimensional array by passing the size as the first three parameters. The (optional) fourth parameter is the type of the array. The default type is f32 or 4-byte single-precision floating point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// allocate space for a 10 x 10 x 10 array</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(10, 10, 10);          <span class="comment">// type is the default f32</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// allocate space for a 3D, double precision array</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(10, 10, 10, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);     <span class="comment">// f64 = double precision</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga6bc7bac9bb52349c198fa0861b5004b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate a four-dimensional (4D) array of a specified size with undefined contents. </p>
<p>This is useful to quickly declare a four-dimensional array by passing the size as the first four parameters. The (optional) fifth parameter is the type of the array. The default type is f32 or 4-byte floating point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// allocate space for a 10 x 10 x 10 x 20 array</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(10, 10, 10, 20);          <span class="comment">// type is the default f32</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// allocate space for a 4D, double precision array</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(10, 10, 10, 20, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);     <span class="comment">// f64 = double precision</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim3</td><td>fourth dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga5686344bf8a49be5286892998d309619"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate an array of a specified size with undefined contents. </p>
<p>This can be useful when the dimensions of the array are calculated somewhere else within the code. The first parameter specifies the size of the array via dim4(). The second parameter is the type of the array. The default type is f32 or 4-byte single-precision floating point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// create a two-dimensional 10 x 10 array</span></div>
<div class="line">dim4 <a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(10, 10);       <span class="comment">// converted to (10, 10, 1, 1)</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> a1(dims);          <span class="comment">// create the array (type is f32, the default)</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// create a three-dimensional 10 x 10 x 20 array</span></div>
<div class="line">dim4 <a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(10, 10, 20);   <span class="comment">// converted to (10, 10, 20, 1)</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> a2(dims,<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);      <span class="comment">// f64 = double precision</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>size of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8c330c41d6e06b0dea9377ef02762c6f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a column vector on the device using a host/device pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>number of elements in the column vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is afHost, can also be afDevice)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="comment">// allocate data on the host</span></div>
<div class="line"><span class="keywordtype">int</span> h_buffer[] = {23, 34, 18, 99, 34};</div>
<div class="line"></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(4, h_buffer);   <span class="comment">// copy host data to device</span></div>
<div class="line">                        <span class="comment">//</span></div>
<div class="line">                        <span class="comment">// A = 23</span></div>
<div class="line">                        <span class="comment">//   = 34</span></div>
<div class="line">                        <span class="comment">//   = 18</span></div>
<div class="line">                        <span class="comment">//   = 99</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first <code>dim0</code> elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object just wraps the device pointer. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa2ebe6a7b991fbe6231321138e79121c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a 2D array on the device using a host/device pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>number of rows </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>number of columns </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is afHost, can also be <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> h_buffer[] = {0, 1, 2, 3, 4, 5};  <span class="comment">// host array</span></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(2, 3, h_buffer);              <span class="comment">// copy host data to device</span></div>
</div><!-- fragment --><div class="image">
<img src="2dArray.png" alt="2dArray.png"/>
</div>
<dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first <code>dim0</code> * <code>dim1</code> elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object just wraps the device pointer. The data is treated as column major format when performing linear algebra operations. </dd></dl>

</div>
</div>
<a class="anchor" id="gabd3d95b130bdb2d7e713414687e6b15a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a 3D array on the device using a host/device pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, can also be <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> h_buffer[] = {0, 1, 2, 3, 4, 5, 6, 7, 8</div>
<div class="line">                  9, 0, 1, 2, 3, 4, 5, 6, 7};   <span class="comment">// host array</span></div>
<div class="line"></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(3, 3, 2,  h_buffer);   <span class="comment">// copy host data to 3D device array</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first <code>dim0</code> * <code>dim1</code> * <code>dim2</code> elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object just wraps the device pointer. The data is treated as column major format when performing linear algebra operations.</dd></dl>
<div class="image">
<img src="3dArray.png" alt="3dArray.png"/>
</div>
 
</div>
</div>
<a class="anchor" id="gaaa8fab98447367bc4eaf3d7bc61d8ff5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a 4D array on the device using a host/device pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim3</td><td>fourth dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is afHost, can also be <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> h_buffer[] = {0, 1, 2, 3,</div>
<div class="line">                  4, 5, 6, 7,</div>
<div class="line">                  8, 9, 0, 1,</div>
<div class="line">                  2, 3, 4, 5};   <span class="comment">// host array with 16 elements</span></div>
<div class="line"></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(2, 2, 2, 2, h_buffer);   <span class="comment">// copy host data to 4D device array</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first <code>dim0</code> * <code>dim1</code> * <code>dim2</code> * <code>dim3</code> elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object just wraps the device pointer. The data is treated as column major format when performing linear algebra operations. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1144078b1596e7d29f57b1a0a1c9b1a8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an array of specified size on the device using a host/device pointer. </p>
<p>This function copies data from the location specified by the pointer to a 1D/2D/3D/4D array on the device. The data is arranged in "column-major" format (similar to that used by FORTRAN).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>vector data type containing the dimension of the <a class="el" href="classaf_1_1array.htm">array</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is afHost, can also be <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> h_buffer[] = {0, 1, 2, 3,    <span class="comment">// host array with 16 elements</span></div>
<div class="line">                  4, 5, 6, 7,    <span class="comment">// written in &quot;row-major&quot; format</span></div>
<div class="line">                  8, 9, 0, 1,</div>
<div class="line">                  2, 3, 4, 5};</div>
<div class="line"></div>
<div class="line">dim4 <a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(4, 4);</div>
<div class="line"></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> A(dims, h_buffer);         <span class="comment">// A  =  0  4  8  2</span></div>
<div class="line">                                 <span class="comment">//       1  5  9  3</span></div>
<div class="line">                                 <span class="comment">//       2  6  0  4</span></div>
<div class="line">                                 <span class="comment">//       3  7  1  5</span></div>
<div class="line"></div>
<div class="line">                                 <span class="comment">// Note the &quot;column-major&quot; ordering</span></div>
<div class="line">                                 <span class="comment">// used in ArrayFire</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first dims.elements() elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object just wraps the device pointer. The data is treated as column major format when performing linear algebra operations. </dd></dl>

</div>
</div>
<a class="anchor" id="gab65f7a320bb53cb1f25de25c685ec0a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjust the dimensions of an N-D array (fast). </p>
<p>This operation simply rearranges the description of the array. No memory transfers or transformations are performed. The total number of elements must not change.</p>
<div class="fragment"><div class="line"><span class="keywordtype">float</span> f[] = {1,2,3,4};</div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> a(2,2,f);</div>
<div class="line"><span class="comment">//a=[1 3]</span></div>
<div class="line"><span class="comment">//  [2 4]</span></div>
<div class="line"></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> b = <a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a>(a, dim4(4));</div>
<div class="line"><span class="comment">//b=[1]</span></div>
<div class="line"><span class="comment">//  [2]</span></div>
<div class="line"><span class="comment">//  [3]</span></div>
<div class="line"><span class="comment">//  [4]</span></div>
<div class="line"></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> c = <a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a>(a, b.<a class="code" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a>().<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>() );</div>
<div class="line"><span class="comment">//c=[1 2 3 4]</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>total number of elements must not change. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>same underlying array data with different dimensions </dd></dl>

</div>
</div>
<a class="anchor" id="ga4866e95e473b71b99ad842608744ac4f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim3</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjust the dimensions of an N-D array (fast). </p>
<p>This operation simply rearranges the description of the array. No memory transfers or transformations are performed. The total number of elements must not change.</p>
<div class="fragment"><div class="line"><span class="keywordtype">float</span> f[] = {1,2,3,4};</div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> a(2,2,f);</div>
<div class="line"><span class="comment">//a=[1 3]</span></div>
<div class="line"><span class="comment">//  [2 4]</span></div>
<div class="line"></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> b = <a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a>(a, 4);</div>
<div class="line"><span class="comment">//b=[1]</span></div>
<div class="line"><span class="comment">//  [2]</span></div>
<div class="line"><span class="comment">//  [3]</span></div>
<div class="line"><span class="comment">//  [4]</span></div>
<div class="line"></div>
<div class="line"><a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a> c = <a class="code" href="group__construct__mat.htm#ga9cbcfcbf0173e1edaf4094bb36b34b31">array</a>(a, 1, 4);</div>
<div class="line"><span class="comment">//c=[1 2 3 4]</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim3</td><td>fourth dimension </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>same underlying array data with different dimensions </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
