<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>computer_vision/matching.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('computer_vision_2matching_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">computer_vision/matching.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2015, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"></div>
<div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> normalize(<a class="code" href="classaf_1_1array.htm">array</a> a)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">float</span> mx = af::max&lt;float&gt;(a);</div>
<div class="line">    <span class="keywordtype">float</span> mn = af::min&lt;float&gt;(a);</div>
<div class="line">    <span class="keywordflow">return</span> (a-mn)/(mx-mn);</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> drawRectangle(<a class="code" href="classaf_1_1array.htm">array</a> &amp;out, <span class="keywordtype">unsigned</span> x, <span class="keywordtype">unsigned</span> y, <span class="keywordtype">unsigned</span> dim0, <span class="keywordtype">unsigned</span> dim1)</div>
<div class="line">{</div>
<div class="line">    printf(<span class="stringliteral">&quot;\nMatching patch origin = (%u, %u)\n\n&quot;</span>, x, y);</div>
<div class="line">    <a name="_a1"></a><a class="code" href="classaf_1_1seq.htm">seq</a> col_span(x, x+dim0, 1);</div>
<div class="line">    <a class="code" href="classaf_1_1seq.htm">seq</a> row_span(y, y+dim1, 1);</div>
<div class="line">    <span class="comment">//edge on left</span></div>
<div class="line">    out(col_span, y       , 0) = 0.f;</div>
<div class="line">    out(col_span, y       , 1) = 0.f;</div>
<div class="line">    out(col_span, y       , 2) = 1.f;</div>
<div class="line">    <span class="comment">//edge on right</span></div>
<div class="line">    out(col_span, y+dim1  , 0) = 0.f;</div>
<div class="line">    out(col_span, y+dim1  , 1) = 0.f;</div>
<div class="line">    out(col_span, y+dim1  , 2) = 1.f;</div>
<div class="line">    <span class="comment">//edge on top</span></div>
<div class="line">    out(x       , row_span, 0) = 0.f;</div>
<div class="line">    out(x       , row_span, 1) = 0.f;</div>
<div class="line">    out(x       , row_span, 2) = 1.f;</div>
<div class="line">    <span class="comment">//edge on bottom</span></div>
<div class="line">    out(x+dim0  , row_span, 0) = 0.f;</div>
<div class="line">    out(x+dim0  , row_span, 1) = 0.f;</div>
<div class="line">    out(x+dim0  , row_span, 2) = 1.f;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> templateMatchingDemo(<span class="keywordtype">bool</span> console)</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// Load image</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> img_color;</div>
<div class="line">    <span class="keywordflow">if</span> (console)</div>
<div class="line">        img_color = <a name="a2"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/square.png&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line">    <span class="keywordflow">else</span></div>
<div class="line">        img_color = <a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/man.jpg&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Convert the image from RGB to gray-scale</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> img = <a name="a3"></a><a class="code" href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">colorSpace</a>(img_color, <a name="a4"></a><a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1">AF_GRAY</a>, <a name="a5"></a><a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6">AF_RGB</a>);</div>
<div class="line">    <a name="_a6"></a><a class="code" href="classaf_1_1dim4.htm">dim4</a> iDims = img.<a name="a7"></a><a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>();</div>
<div class="line">    std::cout&lt;&lt;<span class="stringliteral">&quot;Input image dimensions: &quot;</span> &lt;&lt; iDims &lt;&lt; std::endl &lt;&lt; std::endl;</div>
<div class="line">    <span class="comment">// For visualization in ArrayFire, color images must be in the [0.0f-1.0f] interval</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">// extract a patch from input image</span></div>
<div class="line">    <span class="keywordtype">unsigned</span> patch_size = 100;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> tmp_img = img(<a class="code" href="classaf_1_1seq.htm">seq</a>(100, 100+patch_size, 1.0), <a class="code" href="classaf_1_1seq.htm">seq</a>(100, 100+patch_size, 1.0));</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> result  = <a name="a8"></a><a class="code" href="group__cv__func__match__template.htm#ga1877e7a99d609e27a878c51d9a48ba8f">matchTemplate</a>(img, tmp_img); <span class="comment">// Default disparity metric is</span></div>
<div class="line">                                                 <span class="comment">// Sum of Absolute differences (SAD)</span></div>
<div class="line">                                                 <span class="comment">// Currently supported metrics are</span></div>
<div class="line">                                                 <span class="comment">// AF_SAD, AF_ZSAD, AF_LSAD, AF_SSD,</span></div>
<div class="line">                                                 <span class="comment">// AF_ZSSD, ASF_LSSD</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> disp_img = img/255.0f;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> disp_tmp = tmp_img/255.0f;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> disp_res = normalize(result);</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">unsigned</span> minLoc;</div>
<div class="line">    <span class="keywordtype">float</span>    minVal;</div>
<div class="line">    min&lt;float&gt;(&amp;minVal, &amp;minLoc, disp_res);</div>
<div class="line">    std::cout&lt;&lt; <span class="stringliteral">&quot;Location(linear index) of minimum disparity value = &quot;</span> &lt;&lt; minLoc &lt;&lt; std::endl;</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line">        <span class="comment">// Draw a rectangle on input image where the template matches</span></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> marked_res = <a name="a9"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(disp_img, 1, 1, 3);</div>
<div class="line">        drawRectangle(marked_res, minLoc%iDims[0], minLoc/iDims[0], patch_size, patch_size);</div>
<div class="line"></div>
<div class="line">        std::cout&lt;&lt;<span class="stringliteral">&quot;Note: Based on the disparity metric option provided to matchTemplate function\n&quot;</span></div>
<div class="line">            <span class="stringliteral">&quot;either minimum or maximum disparity location is the starting corner\n&quot;</span></div>
<div class="line">            <span class="stringliteral">&quot;of our best matching patch to template image in the search image&quot;</span>&lt;&lt; std::endl;</div>
<div class="line"></div>
<div class="line">        <a name="_a10"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd(<span class="stringliteral">&quot;Template Matching Demo&quot;</span>);</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Previews color image with green crosshairs</span></div>
<div class="line">        <span class="keywordflow">while</span>(!wnd.close()) {</div>
<div class="line">            wnd.setColorMap(<a name="a11"></a><a class="code" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea4b93603c9d16a8dbdfa31aa2afa76c74">AF_COLORMAP_DEFAULT</a>);</div>
<div class="line">            wnd.grid(2, 2);</div>
<div class="line">            wnd(0, 0).image(disp_img  , <span class="stringliteral">&quot;Search Image&quot;</span>    );</div>
<div class="line">            wnd(0, 1).image(disp_tmp  , <span class="stringliteral">&quot;Template Patch&quot;</span>  );</div>
<div class="line">            wnd(1, 0).image(marked_res, <span class="stringliteral">&quot;Best Match&quot;</span>      );</div>
<div class="line">            wnd.setColorMap(<a name="a12"></a><a class="code" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea7ba7bc2d6f5ed939f4dda88a7baa0399">AF_COLORMAP_HEAT</a>);</div>
<div class="line">            wnd(1, 1).image(disp_res  , <span class="stringliteral">&quot;Disparity values&quot;</span>);</div>
<div class="line">            wnd.show();</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a name="a13"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a14"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;** ArrayFire template matching Demo **&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;</div>
<div class="line">        templateMatchingDemo(console);</div>
<div class="line"></div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a15"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; ae) {</div>
<div class="line">        std::cerr &lt;&lt; ae.<a name="a16"></a><a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>() &lt;&lt; std::endl;</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
