<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>arrayfire-docs-3.6.2/docs/pages/interop_opencl.md (2018-11-19 17:22:56 +0530, (build dc38ef13)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('interop__opencl_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">arrayfire-docs-3.6.2/docs/pages/interop_opencl.md (2018-11-19 17:22:56 +0530, (build dc38ef13))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="interop__opencl_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Interoperability with OpenCL {#interop_opencl}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;========</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;Although ArrayFire is quite extensive, there remain many cases in which you</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;may want to write custom kernels in OpenCL or [CUDA](\ref interop_cuda).</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;For example, you may wish to add ArrayFire to an existing code base to increase</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;your productivity, or you may need to supplement ArrayFire&#39;s functionality</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;with your own custom implementation of specific algorithms.</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;ArrayFire manages its own context, queue, memory, and creates custom IDs</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;for devices. As such, most of the interoperability functions focus on reducing</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;potential synchronization conflicts between ArrayFire and OpenCL.</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;# Basics</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;It is fairly straightforward to interface ArrayFire with your own custom OpenCL</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;code. ArrayFire provides several functions to ease this process including:</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;| Function              | Purpose                                             |</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;|-----------------------|-----------------------------------------------------|</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;| af::array(...)        | Construct an ArrayFire array from cl_mem references or cl::Buffer objects |</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;| af::array.device()    | Obtain a pointer to the cl_mem reference (implies lock()) |</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;| af::array.lock()      | Removes ArrayFire&#39;s control of a cl_mem buffer            |</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;| af::array.unlock()    | Restore&#39;s ArrayFire&#39;s control over a cl_mem buffer        |</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;| afcl::getPlatform()   | Get ArrayFire&#39;s current cl_platform                       |</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;| af::getDevice()       | Get the current ArrayFire Device ID                       |</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;| afcl::getDeviceId()   | Get ArrayFire&#39;s current cl_device_id                      |</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;| af::setDevice()       | Set ArrayFire&#39;s device from an ArrayFire device ID        |</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;| afcl::setDeviceId()   | Set ArrayFire&#39;s device from a cl_device_id                |</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;| afcl::setDevice()     | Set ArrayFire&#39;s device from a cl_device_id and cl_context |</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;| afcl::getContext()    | Get ArrayFire&#39;s current cl_context                        |</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;| afcl::getQueue()      | Get ArrayFire&#39;s current cl_command_queue                  |</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;| afcl::getDeviceType() | Get the current afcl_device_type                          |</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;Additionally, the OpenCL backend permits the programmer to add and remove custom</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;devices from the ArrayFire device manager. These permit you to attach ArrayFire</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;directly to the OpenCL queue used by other portions of your application.</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;| Function              | Purpose                                           |</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;|-----------------------|---------------------------------------------------|</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;| afcl::addDevice()     | Add a new device to ArrayFire&#39;s device manager    |</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;| afcl::deleteDevice()  | Remove a device from ArrayFire&#39;s device manager   |</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;Below we provide two worked examples on how ArrayFire can be integrated</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;into new and existing projects.</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;# Adding custom OpenCL kernels to an existing ArrayFire application</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;By default, ArrayFire manages its own context, queue, memory, and creates custom</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;IDs for devices. Thus there is some bookkeeping that needs to be done to</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;integrate your custom OpenCL kernel.</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;If your kernels can share operate in the same queue as ArrayFire, you should:</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;1. Add an include for `af/opencl.h` to your project</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;2. Obtain the OpenCL context, device, and queue used by ArrayFire</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;3. Obtain cl_mem references to af::array objects</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;4. Load, build, and use your kernels</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;5. Return control of af::array memory to ArrayFire</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;Note, ArrayFire uses an in-order queue, thus when ArrayFire and your kernels</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;are operating in the same queue, there is no need to perform any</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;synchronization operations.</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;This process is best illustrated with a fully worked example:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;#include &lt;arrayfire.h&gt;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;// 1. Add the af/opencl.h include to your project</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;#include &lt;af/opencl.h&gt;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;int main() {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    size_t length = 10;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    // Create ArrayFire array objects:</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    af::array A = af::randu(length, f32);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    af::array B = af::constant(0, length, f32);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    // ... additional ArrayFire operations here</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    // 2. Obtain the device, context, and queue used by ArrayFire</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    static cl_context af_context = afcl::getContext();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    static cl_device_id af_device_id = afcl::getDeviceId();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    static cl_command_queue af_queue = afcl::getQueue();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    // 3. Obtain cl_mem references to af::array objects</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    cl_mem * d_A = A.device&lt;cl_mem&gt;();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    cl_mem * d_B = B.device&lt;cl_mem&gt;();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    // 4. Load, build, and use your kernels.</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    //    For the sake of readability, we have omitted error checking.</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    int status = CL_SUCCESS;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    // A simple copy kernel, uses C++11 syntax for multi-line strings.</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    const char * kernel_name = &quot;copy_kernel&quot;;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    const char * source = R&quot;(</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        void __kernel</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        copy_kernel(__global float * gA, __global float * gB)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            int id = get_global_id(0);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            gB[id] = gA[id];</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    )&quot;;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    // Create the program, build the executable, and extract the entry point</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    // for the kernel.</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    cl_program program = clCreateProgramWithSource(af_context, 1, &amp;source, NULL, &amp;status);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;   status = clBuildProgram(program, 1, &amp;af_device_id, NULL, NULL, NULL);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    cl_kernel kernel = clCreateKernel(program, kernel_name, &amp;status);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    // Set arguments and launch your kernels</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    clSetKernelArg(kernel, 0, sizeof(cl_mem), d_A);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    clSetKernelArg(kernel, 1, sizeof(cl_mem), d_B);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;   clEnqueueNDRangeKernel(af_queue, kernel, 1, NULL, &amp;length, NULL, 0, NULL, NULL);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    // 5. Return control of af::array memory to ArrayFire</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    A.unlock();</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    B.unlock();</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    // ... resume ArrayFire operations</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    // Because the device pointers, d_x and d_y, were returned to ArrayFire&#39;s</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    // control by the unlock function, there is no need to free them using</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    // clReleaseMemObject()</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    return 0;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;If your kernels needs to operate in their own OpenCL queue, the process is</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;essentially identical, except you need to instruct ArrayFire to complete</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;its computations using the af::sync() function prior to launching your</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;own kernel and ensure your kernels are complete using `clFinish`</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;(or similar) commands prior to returning control of the memory to ArrayFire:</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;1. Add an include for `af/opencl.h` to your project</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;2. Obtain the OpenCL context, device, and queue used by ArrayFire</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;3. Obtain cl_mem references to af::array objects</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;4. Instruct ArrayFire to finish operations using af::sync()</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;5. Load, build, and use your kernels</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;6. Instruct OpenCL to finish operations using clFinish() or similar commands.</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;5. Return control of af::array memory to ArrayFire</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;# Adding ArrayFire to an existing OpenCL application</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;Adding ArrayFire to an existing OpenCL application is slightly more involved</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;and can be somewhat tricky due to several optimizations we implement. The</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;most important are as follows:</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;* ArrayFire assumes control of all memory provided to it.</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;* ArrayFire does not (in general) support in-place memory transactions.</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;We will discuss the implications of these items below. To add ArrayFire</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;to existing code you need to:</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;1. Add includes</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;2. Instruct OpenCL to complete its operations using clFinish (or similar)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;3. Instruct ArrayFire to use the user-created OpenCL Context</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;4. Create ArrayFire arrays from OpenCL memory objects</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;5. Perform ArrayFire operations on the Arrays</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;6. Instruct ArrayFire to finish operations using af::sync()</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;7. Obtain cl_mem references for important memory</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;8. Continue your OpenCL application</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;To create the af::array objects, you should use one of the following</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;constructors:</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;// 1D - 3D af::array constructors</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;static af::array    array (dim_t dim0, cl_mem buf, af::dtype type, bool retain=false)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;static af::array    array (dim_t dim0, dim_t dim1, cl_mem buf, af::dtype type, bool retain=false)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;static af::array    array (dim_t dim0, dim_t dim1, dim_t dim2, cl_mem buf, af::dtype type, bool retain=false)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;static af::array    array (dim_t dim0, dim_t dim1, dim_t dim2, dim_t dim3, cl_mem buf, af::dtype type, bool retain=false)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;// af::array constructor using a dim4 object</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;static af::array    array (af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;*NOTE*: With all of these constructors, ArrayFire&#39;s memory manager automatically</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;assumes responsibility for any memory provided to it. If you are creating</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;an array from a `cl::Buffer`, you should specify `retain=true` to ensure your</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;memory is not deallocated if your `cl::Buffer` were to go out of scope.</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;We use this technique in the example below.</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;If you do not wish for ArrayFire to manage your memory, you may call the</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;`array::unlock()` function and manage the memory yourself; however, if you do</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;so, please be cautious not to call `clReleaseMemObj` on a `cl_mem`  when</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;ArrayFire might be using it!</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;The eight steps above are best illustrated using a fully-worked example. Below we</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;use the OpenCL 2.0 C++ API and omit error checking to keep the code readable. </div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;#include &lt;CL/cl2.hpp&gt;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;// 1. Add arrayfire.h and af/opencl.h to your application</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;#include &quot;arrayfire.h&quot;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;#include &quot;af/opencl.h&quot;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;#include &lt;cstdio&gt;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;#include &lt;vector&gt;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;int main() {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  // Set up the OpenCL context, device, and queues</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  cl::Context context(CL_DEVICE_TYPE_ALL);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  vector&lt;cl::Device&gt; devices = context.getInfo&lt;CL_CONTEXT_DEVICES&gt;();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  cl::Device device = devices[0];</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  cl::CommandQueue queue(context, device);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  // Create a buffer of size 10 filled with ones, copy it to the device</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  int length = 10;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  vector&lt;float&gt; h_A(length, 1);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  cl::Buffer cl_A(context, CL_MEM_READ_WRITE, length * sizeof(float), h_A.data());</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  // 2. Instruct OpenCL to complete its operations using clFinish (or similar)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  queue.finish();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  // 3. Instruct ArrayFire to use the user-created context</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  //    First, create a device from the current OpenCL device + context + queue</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  afcl::addDevice(device(), context(), queue());</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  //    Next switch ArrayFire to the device using the device and context as </div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  //    identifiers:</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  afcl::setDevice(device(), context());</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  // 4. Create ArrayFire arrays from OpenCL memory objects</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  af::array af_A = afcl::array(length, cl_A(), f32, true);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  // 5. Perform ArrayFire operations on the Arrays</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  af_A = af_A + af::randu(length);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    </div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  // NOTE: ArrayFire does not perform the above transaction using in-place memory, </div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  // thus the underlying OpenCL buffers containing the memory containing memory to </div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  // probably have changed</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  // 6. Instruct ArrayFire to finish operations using af::sync</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  af::sync();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  // 7. Obtain cl_mem references for important memory</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  cl_A = *af_A.device&lt;cl_mem&gt;();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  // 8. Continue your OpenCL application</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  // ... </div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  </div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  return 0;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;# Using multiple devices</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;If you are using ArrayFire and OpenCL with multiple devices be sure to use</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;`afcl::addDevice` to add your custom context + device + queue to ArrayFire&#39;s</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;device manager. This will let you switch ArrayFire devices using your current</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;`cl_device_id` and `cl_context`.</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.org']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
