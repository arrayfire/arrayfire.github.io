<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>financial/black_scholes_options.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('financial_2black_scholes_options_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">financial/black_scholes_options.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &quot;input.h&quot;</span></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div><div class="line"></div><div class="line"><span class="comment">// The following function is a modified version of http://www.johndcook.com/blog/cpp_phi/</span></div><div class="line"><span class="comment">// The example above references Handbook of Mathematical Functions by Abramowitz and Stegun</span></div><div class="line"></div><div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> cnd(<a class="code" href="classaf_1_1array.htm">array</a> x)</div><div class="line">{</div><div class="line">    <span class="comment">// constants</span></div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> a1 =  0.254829592;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> a2 = -0.284496736;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> a3 =  1.421413741;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> a4 = -1.453152027;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> a5 =  1.061405429;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> p  =  0.3275911;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> sqrt2 = <a name="a1"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(2.0);</div><div class="line"></div><div class="line">    <span class="comment">// Save the sign of x</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> xSign = <a name="a2"></a><a class="code" href="group__arith__func__sign.htm#ga5e40945580a507ade9909eb2c0c7918c">sign</a>(x);</div><div class="line"></div><div class="line">    x = <a name="a3"></a><a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(x) / sqrt2;</div><div class="line"></div><div class="line">    <span class="comment">// A&amp;S formula 7.1.26</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> t = 1.0f / (1.0f + p*x);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> y = 1.0f + 0.5f * (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*<a name="a4"></a><a class="code" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>(-x*x);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> xSign * y + !xSign * (1 - y); <span class="comment">// equivalent of (x &gt;= 0) ? y : (1 - y);</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> black_scholes(<a class="code" href="classaf_1_1array.htm">array</a>&amp; C, <a class="code" href="classaf_1_1array.htm">array</a>&amp; P,</div><div class="line">                          <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; S, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; X,</div><div class="line">                          <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; R, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; V,</div><div class="line">                          <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; T)</div><div class="line">{</div><div class="line">    <span class="comment">// This function computes the call and put option prices based on</span></div><div class="line">    <span class="comment">// Black-Scholes Model</span></div><div class="line"></div><div class="line">    <span class="comment">// S = Underlying stock price</span></div><div class="line">    <span class="comment">// X = Strike Price</span></div><div class="line">    <span class="comment">// R = Risk free rate of interest</span></div><div class="line">    <span class="comment">// V = Volatility</span></div><div class="line">    <span class="comment">// T = Time to maturity</span></div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> d1 = <a name="a5"></a><a class="code" href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">log</a>(S / X);</div><div class="line">    d1 = d1 + (R + (V*V)*0.5) * T;</div><div class="line">    d1 = d1 / (V*<a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(T));</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> d2 = d1 - (V*<a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(T));</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> cnd_d1 = cnd(d1);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> cnd_d2 = cnd(d2);</div><div class="line"></div><div class="line">    C = S * cnd_d1  - (X * <a class="code" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>((-R)*T) * cnd_d2);</div><div class="line">    P = X * <a class="code" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>((-R)*T) * (1 - cnd_d2) - (S * (1 - cnd_d1));</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div><div class="line">{</div><div class="line"></div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line">        <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div><div class="line">        <a name="a6"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">setDevice</a>(device);</div><div class="line">        <a name="a7"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">info</a>();</div><div class="line"></div><div class="line">        printf(<span class="stringliteral">&quot;** ArrayFire Black-Scholes Example **\n&quot;</span></div><div class="line">               <span class="stringliteral">&quot;**          by AccelerEyes         **\n\n&quot;</span>);</div><div class="line"></div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> GC1(4000, 1, C1);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> GC2(4000, 1, C2);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> GC3(4000, 1, C3);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> GC4(4000, 1, C4);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> GC5(4000, 1, C5);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// Compile kernels</span></div><div class="line">        <span class="comment">// Create GPU copies of the data</span></div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Sg = GC1;</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Xg = GC2;</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Rg = GC3;</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Vg = GC4;</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Tg = GC5;</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> Cg, Pg;</div><div class="line"></div><div class="line">        <span class="comment">// Warm up black scholes example</span></div><div class="line">        black_scholes(Cg, Pg, Sg,Xg,Rg,Vg,Tg);</div><div class="line">        <a name="a8"></a><a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(Cg, Pg);</div><div class="line">        printf(<span class="stringliteral">&quot;Warming up done\n&quot;</span>);</div><div class="line">        <a name="a9"></a><a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keywordtype">int</span> iter = 1000;</div><div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 50; n &lt;= 500; n += 50) {</div><div class="line"></div><div class="line">            <span class="comment">// Create GPU copies of the data</span></div><div class="line">            Sg = <a name="a10"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(GC1, n, 1);</div><div class="line">            Xg = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(GC2, n, 1);</div><div class="line">            Rg = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(GC3, n, 1);</div><div class="line">            Vg = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(GC4, n, 1);</div><div class="line">            Tg = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(GC5, n, 1);</div><div class="line">            <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">af::eval</a>(Sg, Xg, Rg, Vg, Tg);</div><div class="line"></div><div class="line">            <a name="_a11"></a><a class="code" href="classaf_1_1dim4.htm">dim4</a> dims = Xg.<a name="a12"></a><a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>();</div><div class="line">            <span class="comment">// Force compute on the GPU</span></div><div class="line">            <a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div><div class="line"></div><div class="line">            <a name="a13"></a><a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">timer::start</a>();</div><div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; iter; i++) {</div><div class="line">                black_scholes(Cg, Pg, Sg,Xg,Rg,Vg,Tg);</div><div class="line">                <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(Cg, Pg);</div><div class="line">            }</div><div class="line">            <a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div><div class="line"></div><div class="line">            <span class="keywordtype">double</span> t = <a name="a14"></a><a class="code" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">timer::stop</a>() / iter;</div><div class="line">            printf(<span class="stringliteral">&quot;Input Data Size = %8d. Mean GPU Time: %0.6f ms\n&quot;</span>, (<span class="keywordtype">int</span>)dims[0], 1000 * t);</div><div class="line">        }</div><div class="line">    } <span class="keywordflow">catch</span> (<a name="_a15"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e){</div><div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a16"></a><a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>());</div><div class="line">        <span class="keywordflow">throw</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
