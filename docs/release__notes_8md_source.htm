<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>arrayfire-docs-3.6.2/docs/pages/release_notes.md (2018-11-19 17:22:56 +0530, (build dc38ef13)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('release__notes_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">arrayfire-docs-3.6.2/docs/pages/release_notes.md (2018-11-19 17:22:56 +0530, (build dc38ef13))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="release__notes_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Release Notes {#releasenotes}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;==============</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;v3.6.2</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;======</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;Features</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;--------</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;- Added support for batching on the `cond` argument in select() \PR{2243}</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;- Added support for broadcasting batched matmul() \PR{2315}</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;- Added support for multiple nearest neighbors in nearestNeighbour() \PR{2280}</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;- Added support for clamp-to-edge padding as an `af_border_type` option \PR{2333}</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;Improvements</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;------------</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;- Improved performance of morphological operations \PR{2238}</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;- Fixed linking errors when compiling without Freeimage/Graphics \PR{2248}</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;- Improved the usage of ArrayFire as a CMake subproject \PR{2290}</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;- Enabled configuration of custom library path for loading dynamic backend</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  libraries \PR{2302}</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;Bug Fixes</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;---------</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;- Fixed LAPACK definitions and linking errors \PR{2239}</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;- Fixed overflow in dim4::ndims() \PR{2289}</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;- Fixed pow() precision for integral types \PR{2305}</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;- Fixed issues with tile() with a large repeat dimension \PR{2307}</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;- Fixed svd() sub-array output on OpenCL \PR{2279}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;- Fixed grid-based indexing calculation in histogram() \PR{2230}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;- Fixed bug in indexing when used after reorder \PR{2311}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;- Fixed errors when exiting on Windows when using</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  [CLBlast](https://github.com/CNugteren/CLBlast) \PR{2222}</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;- Fixed fallthrough error in medfilt1 \PR{2349}</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;Documentation</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;-------------</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;- Improved unwrap() documentation \PR{2301}</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;- Improved wrap() documentation \PR{2320}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;- Improved accum() documentation \PR{2298}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;- Improved tile() documentation \PR{2293}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;- Clarified approx1() and approx2() indexing in documentation \PR{2287}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;- Updated examples of [select()](@ref data_func_select) in detailed documentation</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  \PR{2277}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;- Updated lookup() examples \PR{2288}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;- Updated set operations&#39; documentation \PR{2299}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;Misc</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;----</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;- `af*` libraries and dependencies directory changed to `lib64` \PR{2186}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;- Added new arrayfire ASSERT utility functions \PR{2249} \PR{2256} \PR{2257} \PR{2263}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;- Improved error messages in JIT \PR{2309}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;Contributions</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;-------------</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;Special thanks to our contributors: [Jacob Kahn](https://github.com/jacobkahn),</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;[Vardan Akopian](https://github.com/vakopian)  </div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;v3.6.1</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;======</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;Improvements</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;------------</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;- FreeImage is now a run-time dependency [#2164]</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;- Reduced binary size by setting the symbol visibility to hidden [#2168]</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;- Add memory manager logging using the AF_TRACE=mem environment variable [#2169]</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;- Improved CPU Anisotropic Diffusion performance [#2174]</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;- Perform normalization after FFT for improved accuracy [#2185][#2192]</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;- Updated CLBlast to v1.4.0 [#2178]</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;- Added additional validation when using af::seq for indexing [#2153]</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;- Perform checks for unsupported cards by the CUDA implementation [#2182]</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;Bug Fixes</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;---------</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;- Fixed region when all pixels were the foreground or background [#2152]</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;- Fixed several memory leaks [#2202][#2201][#2180][#2179][#2177][#2175]</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;- Fixed bug in setDevice which didn&#39;t allow you to select the last device [#2189]</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;- Fixed bug in min/max where the first element of the array was a NaN value [#2155]</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;- Fixed window cell indexing for graphics [#2207]</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;v3.6.0</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;======</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;The source code with submodules can be downloaded directly from the following link:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;http://arrayfire.com/arrayfire_source/arrayfire-full-3.6.0.tar.bz2</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;Major Updates</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;-------------</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;- Added the `topk()` function</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  [Documentation](http://arrayfire.org/docs/group__stat__func__topk.htm).</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/2061)&lt;/sup&gt;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;- Added batched matrix multiply support.</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1898)&lt;/sup&gt;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  &lt;sup&gt;[3](https://github.com/arrayfire/arrayfire/pull/2059)&lt;/sup&gt;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;- Added anisotropic diffusion, `anisotropicDiffusion()`.</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  [Documentation](http://arrayfire.org/docs/group__image__func__anisotropic__diffusion.htm)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  &lt;sup&gt;[4](https://github.com/arrayfire/arrayfire/pull/1850)&lt;/sup&gt;.</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;Features</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;--------</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;- Added support for batched matrix multiply.</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1898)&lt;/sup&gt;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/2059)&lt;/sup&gt;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;- New anisotropic diffusion function, `anisotropicDiffusion()`.</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  [Documentation](http://arrayfire.org/docs/group__image__func__anisotropic__diffusion.htm)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  &lt;sup&gt;[3](https://github.com/arrayfire/arrayfire/pull/1850)&lt;/sup&gt;.</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;- New `topk()` function, which returns the top k elements along a given</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  dimension of the input.</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  [Documentation](http://arrayfire.org/docs/group__stat__func__topk.htm).</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  &lt;sup&gt;[4](https://github.com/arrayfire/arrayfire/pull/2061)&lt;/sup&gt;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;- New gradient diffusion</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  [example](https://github.com/arrayfire/arrayfire/blob/master/examples/image_processing/gradient_diffusion.cpp).</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;Improvements</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;------------</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;- JITted `select()` and `shift()` functions for CUDA and OpenCL backends.</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/2047)&lt;/sup&gt;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;- Significant CMake improvements.</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1861)&lt;/sup&gt;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  &lt;sup&gt;[3](https://github.com/arrayfire/arrayfire/pull/2070)&lt;/sup&gt;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  &lt;sup&gt;[4](https://github.com/arrayfire/arrayfire/pull/2018)&lt;/sup&gt;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;- Improved the quality of the random number generator, thanks to Ralf Stubner.</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  &lt;sup&gt;[5](https://github.com/arrayfire/arrayfire/pull/2122)&lt;/sup&gt;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;- Modified `af_colormap` struct to match forge&#39;s definition.</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  &lt;sup&gt;[6](https://github.com/arrayfire/arrayfire/pull/2082)&lt;/sup&gt;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;- Improved Black Scholes example.</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  &lt;sup&gt;[7](https://github.com/arrayfire/arrayfire/pull/2079)&lt;/sup&gt;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;- Using CPack to generate installers.</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  &lt;sup&gt;[8](https://github.com/arrayfire/arrayfire/pull/1861)&lt;/sup&gt;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;- Refactored</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  [black_scholes_options](https://github.com/arrayfire/arrayfire/blob/master/examples/financial/black_scholes_options.cpp)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  example to use built-in `af::erfc` function for cumulative normal</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  distribution.&lt;sup&gt;[9](https://github.com/arrayfire/arrayfire/pull/2079)&lt;/sup&gt;.</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;- Reduced the scope of mutexes in memory manager</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  &lt;sup&gt;[10](https://github.com/arrayfire/arrayfire/pull/2125)&lt;/sup&gt;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;- Official installers do not require the CUDA toolkit to be installed</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;- Significant CMake improvements have been made. Using CPack to generate</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  installers. &lt;sup&gt;[11](https://github.com/arrayfire/arrayfire/pull/1861)&lt;/sup&gt;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  &lt;sup&gt;[12](https://github.com/arrayfire/arrayfire/pull/2070)&lt;/sup&gt;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  &lt;sup&gt;[13](https://github.com/arrayfire/arrayfire/pull/2018)&lt;/sup&gt;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;- Corrected assert function calls in select() tests.</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  &lt;sup&gt;[14](https://github.com/arrayfire/arrayfire/pull/2058)&lt;/sup&gt;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;Bug fixes</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;-----------</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;- Fixed `shfl_down()` warnings with CUDA 9.</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/2040)&lt;/sup&gt;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;- Disabled CUDA JIT debug flags on ARM</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  architecture.&lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/2037)&lt;/sup&gt;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;- Fixed CLBLast install lib dir for linux platform where `lib` directory has</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  arch(64) suffix.&lt;sup&gt;[3](https://github.com/arrayfire/arrayfire/pull/2094)&lt;/sup&gt;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;- Fixed assert condition in 3d morph opencl</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  kernel.&lt;sup&gt;[4](https://github.com/arrayfire/arrayfire/pull/2033)&lt;/sup&gt;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;- Fix JIT errors with large non-linear</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  kernels&lt;sup&gt;[5](https://github.com/arrayfire/arrayfire/pull/2127)&lt;/sup&gt;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;- Fix bug in CPU jit after moddims was called</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  &lt;sup&gt;[5](https://github.com/arrayfire/arrayfire/pull/2127)&lt;/sup&gt;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;- Fixed deadlock caused by calls to from the worker thread</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  &lt;sup&gt;[6](https://github.com/arrayfire/arrayfire/pull/2124)&lt;/sup&gt;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;Documentation</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;-------------</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;- Fixed variable name typo in `vectorization.md`.</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/2032)&lt;/sup&gt;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;- Fixed `AF_API_VERSION` value in Doxygen config file.</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/2053)&lt;/sup&gt;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;Known issues</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;------------</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;- Several OpenCL tests failing on OSX:</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  - `canny_opencl, fft_opencl, gen_assign_opencl, homography_opencl,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    reduce_opencl, scan_by_key_opencl, solve_dense_opencl,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    sparse_arith_opencl, sparse_convert_opencl, where_opencl`</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;Community contributions</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;-----------------------</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;Special thanks to our contributors:</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;[Adrien F. Vincent](https://github.com/afvincent), [Cedric</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;Nugteren](https://github.com/CNugteren),</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;[Felix](https://github.com/fzimmermann89), [Filip</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;Matzner](https://github.com/FloopCZ),</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;[HoneyPatouceul](https://github.com/HoneyPatouceul), [Patrick</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;Lavin](https://github.com/plavin), [Ralf Stubner](https://github.com/rstub),</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;[William Tambellini](https://github.com/WilliamTambellini)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;v3.5.1</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;======</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;The source code with submodules can be downloaded directly from the following</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;link: http://arrayfire.com/arrayfire_source/arrayfire-full-3.5.1.tar.bz2</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;Installer CUDA Version: 8.0 (Required) Installer OpenCL Version: 1.2 (Minimum)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;Improvements</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;------------</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;- Relaxed `af::unwrap()` function&#39;s arguments.</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1853)&lt;/sup&gt;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;- Changed behavior of af::array::allocated() to specify memory allocated.</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1877)&lt;/sup&gt;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;- Removed restriction on the number of bins for `af::histogram()` on CUDA and</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  OpenCL kernels. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1895)&lt;/sup&gt;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;Performance</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;-----------</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;- Improved JIT performance.</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1864)&lt;/sup&gt;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;- Improved CPU element-wise operation performance.</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1890)&lt;/sup&gt;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;- Improved regions performance using texture objects. &lt;sup&gt;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  [1](https://github.com/arrayfire/arrayfire/pull/1903)&lt;/sup&gt;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;Bug fixes</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;---------</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;- Fixed overflow issues in mean.</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1849)&lt;/sup&gt;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;- Fixed memory leak when chaining indexing operations.</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1879)&lt;/sup&gt;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;- Fixed bug in array assignment when using an empty array to index.</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1897)&lt;/sup&gt;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;- Fixed bug with `af::matmul()` which occured when its RHS argument was an</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  indexed vector.</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1883)&lt;/sup&gt;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;- Fixed bug deadlock bug when sparse array was used with a JIT Array.</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1889)&lt;/sup&gt;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;- Fixed pixel tests for FAST kernels.</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1891)&lt;/sup&gt;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;- Fixed `af::replace` so that it is now copy-on-write.</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1892)&lt;/sup&gt;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;- Fixed launch configuration issues in CUDA JIT.</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1893)&lt;/sup&gt;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;- Fixed segfaults and &quot;Pure Virtual Call&quot; error warnings when exiting on</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  Windows. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1899)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  [2](https://github.com/arrayfire/arrayfire/pull/1924)&lt;/sup&gt;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;- Workaround for `clEnqueueReadBuffer` bug on OSX.</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1888)&lt;/sup&gt;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;Build</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;-----</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;- Fixed issues when compiling with GCC 7.1.</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1872)&lt;/sup&gt;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1876)&lt;/sup&gt;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;- Eliminated unnecessary Boost dependency from CPU and CUDA backends.</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1857)&lt;/sup&gt;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;Misc</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;----</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;- Updated support links to point to Slack instead of Gitter.</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1905)&lt;/sup&gt;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;v3.5.0</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;==============</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;Major Updates</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;-------------</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;* ArrayFire now supports threaded applications.</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1706)&lt;/sup&gt;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;* Added Canny edge detector.</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1743)&lt;/sup&gt;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;* Added Sparse-Dense arithmetic operations.</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1696)&lt;/sup&gt;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;Features</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;--------</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;* ArrayFire Threading</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  * \ref af::array can be read by multiple threads</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  * All ArrayFire functions can be executed concurrently by multiple threads</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  * Threads can operate on different devices to simplify Muli-device workloads</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;* New Canny edge detector function, \ref af::canny().</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1743)&lt;/sup&gt;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  * Can automatically calculate high threshold with `AF_CANNY_THRESHOLD_AUTO_OTSU`</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  * Supports both L1 and L2 Norms to calculate gradients</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;* New tuned OpenCL BLAS backend,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  [CLBlast](https://github.com/arrayfire/arrayfire/pull/1727).</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;Improvements</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;------------</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;* Converted CUDA JIT to use</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  [NVRTC](http://docs.nvidia.com/cuda/nvrtc/index.html) instead of</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  [NVVM](http://docs.nvidia.com/cuda/nvvm-ir-spec/index.html).</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;* Performance improvements in \ref af::reorder().</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1766)&lt;/sup&gt;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;* Performance improvements in \ref af::array::scalar&lt;T&gt;().</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1809)&lt;/sup&gt;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;* Improved unified backend performance.</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1770)&lt;/sup&gt;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;* ArrayFire now depends on Forge</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  v1.0. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1800)&lt;/sup&gt;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;* Can now specify the FFT plan cache size using the</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  \ref af::setFFTPlanCacheSize() function.</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;* Get the number of physical bytes allocated by the memory manager</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  \ref af_get_allocated_bytes(). &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1630)&lt;/sup&gt;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;* \ref af::dot() can now return a scalar value to the</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  host. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1628)&lt;/sup&gt;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;Bug Fixes</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;---------</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;* Fixed improper release of default Mersenne random</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  engine. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1716)&lt;/sup&gt;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;* Fixed \ref af::randu() and \ref af::randn() ranges for floating point</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  types. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1784)&lt;/sup&gt;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;* Fixed assignment bug in CPU</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  backend. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1765)&lt;/sup&gt;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;* Fixed complex (`c32`,`c64`) multiplication in OpenCL convolution</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  kernels. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1816)&lt;/sup&gt;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;* Fixed inconsistent behavior with \ref af::replace() and \ref</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  af_replace_scalar(). &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1773)&lt;/sup&gt;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;* Fixed memory leak in \ref</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  af_fir(). &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1765)&lt;/sup&gt;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;* Fixed memory leaks in \ref af_cast for sparse arrays.</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1826)&lt;/sup&gt;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;* Fixing correctness of \ref af_pow for complex numbers by using Cartesian</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  form. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1765)&lt;/sup&gt;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;* Corrected \ref af::select() with indexing in CUDA and OpenCL</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  backends. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1731)&lt;/sup&gt;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;* Workaround for VS2015 compiler ternary</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  bug. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1771)&lt;/sup&gt;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;* Fixed memory corruption in</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  `cuda::findPlan()`. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1793)&lt;/sup&gt;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;* Argument checks in \ref af_create_sparse_array avoids inputs of type</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  int64. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1747)&lt;/sup&gt;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;* Fixed issue with indexing an array with a step size != 1. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1846)&lt;/sup&gt;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;Build fixes</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;-----------</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;* On OSX, utilize new GLFW package from the brew package</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  manager. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1720)&lt;/sup&gt;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1775)&lt;/sup&gt;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;* Fixed CUDA PTX names generated by CMake</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  v3.7. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1689)&lt;/sup&gt;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;* Support `gcc` &gt; 5.x for</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  CUDA. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1708)&lt;/sup&gt;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;Examples</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;--------</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;* New genetic algorithm example.</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1695)&lt;/sup&gt;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;Documentation</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;-------------</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;* Updated `README.md` to improve readability and</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  formatting. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1726)&lt;/sup&gt;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;* Updated `README.md` to mention Julia and Nim</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  wrappers. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1714)&lt;/sup&gt;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;* Improved installation instructions -</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  `docs/pages/install.md`. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1740)&lt;/sup&gt;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;Miscellaneous</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;-------------</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;* A few improvements for ROCm</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  support. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1710)&lt;/sup&gt;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;* Removed CUDA 6.5 support.</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1687)&lt;/sup&gt;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;Known issues</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;------------</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;* Windows</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  * The Windows NVIDIA driver version `37x.xx` contains a bug which causes</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    `fftconvolve_opencl` to fail. Upgrade or downgrade to a different version of</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    the driver to avoid this failure.</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  * The following tests fail on Windows with NVIDIA hardware:</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    `threading_cuda`,`qr_dense_opencl`, `solve_dense_opencl`.</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;* macOS</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  * The Accelerate framework, used by the CPU backend on macOS, leverages Intel</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    graphics cards (Iris) when there are no discrete GPUs available. This OpenCL</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    implementation is known to give incorrect results on the following tests:</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    `lu_dense_{cpu,opencl}`, `solve_dense_{cpu,opencl}`,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    `inverse_dense_{cpu,opencl}`.</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  * Certain tests intermittently fail on macOS with NVIDIA GPUs apparently due</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    to inconsistent driver behavior: `fft_large_cuda` and `svd_dense_cuda`.</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  * The following tests are currently failing on macOS with AMD GPUs:</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    `cholesky_dense_opencl` and `scan_by_key_opencl`.</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;v3.4.2</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;==============</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;Deprecation Announcement</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;------------------------</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;This release supports CUDA 6.5 and higher. The next ArrayFire relase will</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;support CUDA 7.0 and higher, dropping support for CUDA 6.5. Reasons for no</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;longer supporting CUDA 6.5 include:</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;* CUDA 7.0 NVCC supports the C++11 standard (whereas CUDA 6.5 does not), which</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  is used by ArrayFire&#39;s CPU and OpenCL backends.</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;* Very few ArrayFire users still use CUDA 6.5.</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;As a result, the older Jetson TK1 / Tegra K1 will no longer be supported in</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;the next ArrayFire release. The newer Jetson TX1 / Tegra X1 will continue to</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;have full capability with ArrayFire.</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;Docker</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;------</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;* [ArrayFire has been Dockerized](https://github.com/arrayfire/arrayfire-docker).</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;Improvements</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;------------</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;* Implemented sparse storage format conversions between \ref AF_STORAGE_CSR</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;  and \ref AF_STORAGE_COO.</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1642)&lt;/sup&gt;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  * Directly convert between \ref AF_STORAGE_COO &lt;--&gt; \ref AF_STORAGE_CSR</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    using the af::sparseConvertTo() function.</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;  * af::sparseConvertTo() now also supports converting to dense.</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;* Added cast support for [sparse arrays](\ref sparse_func).</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1653)&lt;/sup&gt;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  * Casting only changes the values array and the type. The row and column</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    index arrays are not changed.</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;* Reintroduced automated computation of chart axes limits for graphics functions.</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1639)&lt;/sup&gt;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  * The axes limits will always be the minimum/maximum of the current and new</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    limit.</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  * The user can still set limits from API calls. If the user sets a limit</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    from the API call, then the automatic limit setting will be disabled.</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;* Using `boost::scoped_array` instead of `boost::scoped_ptr` when managing</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;  array resources.</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1637)&lt;/sup&gt;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;* Internal performance improvements to getInfo() by using `const` references</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  to avoid unnecessary copying of `ArrayInfo` objects.</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1665)&lt;/sup&gt;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;* Added support for scalar af::array inputs for af::convolve() and</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  [set functions](\ref set_mat).</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1660)&lt;/sup&gt;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/issues/1675)&lt;/sup&gt;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;  &lt;sup&gt;[3](https://github.com/arrayfire/arrayfire/pull/1668)&lt;/sup&gt;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;* Performance fixes in af::fftConvolve() kernels.</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1679)&lt;/sup&gt;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1680)&lt;/sup&gt;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;Build</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;-----</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;* Support for Visual Studio 2015 compilation.</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1632)&lt;/sup&gt;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1640)&lt;/sup&gt;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;* Fixed `FindCBLAS.cmake` when PkgConfig is used.</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1657)&lt;/sup&gt;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;Bug fixes</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;---------</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;* Fixes to JIT when tree is large.</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1646)&lt;/sup&gt;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1638)&lt;/sup&gt;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;* Fixed indexing bug when converting dense to sparse af::array as \ref</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  AF_STORAGE_COO.</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1642)&lt;/sup&gt;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;* Fixed af::bilateral() OpenCL kernel compilation on OS X.</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1638)&lt;/sup&gt;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;* Fixed memory leak in af::regions() (CPU) and af::rgb2ycbcr().</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1664)&lt;/sup&gt;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/issues/1664)&lt;/sup&gt;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  &lt;sup&gt;[3](https://github.com/arrayfire/arrayfire/pull/1666)&lt;/sup&gt;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;Installers</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;----------</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;* Major OS X installer fixes.</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1629)&lt;/sup&gt;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  * Fixed installation scripts.</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  * Fixed installation symlinks for libraries.</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;* Windows installer now ships with more pre-built examples.</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;Examples</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;--------</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;* Added af::choleskyInPlace() calls to `cholesky.cpp` example.</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1671)&lt;/sup&gt;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;Documentation</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;-------------</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;* Added `u8` as supported data type in `getting_started.md`.</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1661)&lt;/sup&gt;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;* Fixed typos.</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1652)&lt;/sup&gt;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;CUDA 8 on OSX</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;-------------</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;* [CUDA 8.0.55](https://developer.nvidia.com/cuda-toolkit) supports Xcode 8.</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1664)&lt;/sup&gt;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;Known Issues</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;------------</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;* Known failures with CUDA 6.5. These include all functions that use</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  sorting. As a result, sparse storage format conversion between \ref</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  AF_STORAGE_COO and \ref AF_STORAGE_CSR has been disabled for CUDA 6.5.</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;v3.4.1</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;==============</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;Installers</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;----------</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;* Installers for Linux, OS X and Windows</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;  * CUDA backend now uses [CUDA 8.0](https://developer.nvidia.com/cuda-toolkit).</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;  * Uses [Intel MKL 2017](https://software.intel.com/en-us/intel-mkl).</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  * CUDA Compute 2.x (Fermi) is no longer compiled into the library.</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;* Installer for OS X</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  * The libraries shipping in the OS X Installer are now compiled with Apple</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    Clang v7.3.1 (previously v6.1.0).</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;  * The OS X version used is 10.11.6 (previously 10.10.5).</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;* Installer for Jetson TX1 / Tegra X1</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;  * Requires [JetPack for L4T 2.3](https://developer.nvidia.com/embedded/jetpack)</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    (containing Linux for Tegra r24.2 for TX1).</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;  * CUDA backend now uses [CUDA 8.0](https://developer.nvidia.com/cuda-toolkit) 64-bit.</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;  * Using CUDA&#39;s cusolver instead of CPU fallback.</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  * Uses OpenBLAS for CPU BLAS.</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  * All ArrayFire libraries are now 64-bit.</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;Improvements</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;------------</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;* Add [sparse array](\ref sparse_func) support to \ref af::eval().</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1598)&lt;/sup&gt;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;* Add OpenCL-CPU fallback support for sparse \ref af::matmul() when running on</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;  a unified memory device. Uses MKL Sparse BLAS.</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;* When using CUDA libdevice, pick the correct compute version based on device.</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1612)&lt;/sup&gt;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;* OpenCL FFT now also supports prime factors 7, 11 and 13.</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1383)&lt;/sup&gt;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1619)&lt;/sup&gt;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;Bug Fixes</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;---------</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;* Allow CUDA libdevice to be detected from custom directory.</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;* Fix `aarch64` detection on Jetson TX1 64-bit OS.</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1593)&lt;/sup&gt;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;* Add missing definition of `af_set_fft_plan_cache_size` in unified backend.</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1591)&lt;/sup&gt;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;* Fix intial values for \ref af::min() and \ref af::max() operations.</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1594)&lt;/sup&gt;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1595)&lt;/sup&gt;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;* Fix distance calculation in \ref af::nearestNeighbour for CUDA and OpenCL backend.</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1596)&lt;/sup&gt;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;  &lt;sup&gt;[2](https://github.com/arrayfire/arrayfire/pull/1595)&lt;/sup&gt;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;* Fix OpenCL bug where scalars where are passed incorrectly to compile options.</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1595)&lt;/sup&gt;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;* Fix bug in \ref af::Window::surface() with respect to dimensions and ranges.</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1604)&lt;/sup&gt;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;* Fix possible double free corruption in \ref af_assign_seq().</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1605)&lt;/sup&gt;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;* Add missing eval for key in \ref af::scanByKey in CPU backend.</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1605)&lt;/sup&gt;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;* Fixed creation of sparse values array using \ref AF_STORAGE_COO.</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1620)&lt;/sup&gt;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1621)&lt;/sup&gt;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;Examples</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;--------</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;* Add a [Conjugate Gradient solver example](\ref benchmarks/cg.cpp)</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  to demonstrate sparse and dense matrix operations.</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1599)&lt;/sup&gt;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;CUDA Backend</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;------------</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;* When using [CUDA 8.0](https://developer.nvidia.com/cuda-toolkit),</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;  compute 2.x are no longer in default compute list.</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  * This follows [CUDA 8.0](https://developer.nvidia.com/cuda-toolkit)</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    deprecating computes 2.x.</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;  * Default computes for CUDA 8.0 will be 30, 50, 60.</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;* When using CUDA pre-8.0, the default selection remains 20, 30, 50.</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;* CUDA backend now uses `-arch=sm_30` for PTX compilation as default.</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  * Unless compute 2.0 is enabled.</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;Known Issues</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;------------</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;* \ref af::lu() on CPU is known to give incorrect results when built run on</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  OS X 10.11 or 10.12 and compiled with Accelerate Framework.</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1617)&lt;/sup&gt;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  * Since the OS X Installer libraries uses MKL rather than Accelerate</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    Framework, this issue does not affect those libraries.</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;v3.4.0</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;==============</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;Major Updates</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;-------------</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;* [Sparse Matrix and BLAS](\ref sparse_func). &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/821)</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;  [2](https://github.com/arrayfire/arrayfire/pull/1319)&lt;/sup&gt;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;* Faster JIT for CUDA and OpenCL. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1472)</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  [2](https://github.com/arrayfire/arrayfire/pull/1462)&lt;/sup&gt;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;* Support for [random number generator engines](\ref af::randomEngine).</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/868)</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;  [2](https://github.com/arrayfire/arrayfire/pull/1551)&lt;/sup&gt;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;* Improvements to graphics. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1555)</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  [2](https://github.com/arrayfire/arrayfire/pull/1566)&lt;/sup&gt;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;Features</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;----------</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;* **[Sparse Matrix and BLAS](\ref sparse_func)** &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/821)</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;[2](https://github.com/arrayfire/arrayfire/pull/1319)&lt;/sup&gt;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;  * Support for [CSR](\ref AF_STORAGE_CSR) and [COO](\ref AF_STORAGE_COO)</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    [storage types](\ref af_storage).</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;  * Sparse-Dense Matrix Multiplication and Matrix-Vector Multiplication as a</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    part of af::matmul() using \ref AF_STORAGE_CSR format for sparse.</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;  * Conversion to and from [dense](\ref AF_STORAGE_DENSE) matrix to [CSR](\ref AF_STORAGE_CSR)</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    and [COO](\ref AF_STORAGE_COO) [storage types](\ref af_storage).</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;* **Faster JIT** &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1472)</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;  [2](https://github.com/arrayfire/arrayfire/pull/1462)&lt;/sup&gt;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;  * Performance improvements for CUDA and OpenCL JIT functions.</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;  * Support for evaluating multiple outputs in a single kernel. See af::array::eval() for more.</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;* **[Random Number Generation](\ref af::randomEngine)**</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/868)</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;  [2](https://github.com/arrayfire/arrayfire/pull/1551)&lt;/sup&gt;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;  * af::randomEngine(): A random engine class to handle setting the [type](af_random_type) and seed</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    for random number generator engines.</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  * Supported engine types are (\ref af_random_engine_type):</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    * [Philox](http://www.thesalmons.org/john/random123/)</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    * [Threefry](http://www.thesalmons.org/john/random123/)</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    * [Mersenne Twister](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MTGP/)</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;* **Graphics** &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1555)</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;  [2](https://github.com/arrayfire/arrayfire/pull/1566)&lt;/sup&gt;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;  * Using [Forge v0.9.0](https://github.com/arrayfire/forge/releases/tag/v0.9.0)</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;  * [Vector Field](\ref af::Window::vectorField) plotting functionality.</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1566)&lt;/sup&gt;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  * Removed [GLEW](http://glew.sourceforge.net/) and replaced with [glbinding](https://github.com/cginternals/glbinding).</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    * Removed usage of GLEW after support for MX (multithreaded) was dropped in v2.0.</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;      &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1540)&lt;/sup&gt;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  * Multiple overlays on the same window are now possible.</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    * Overlays support for same type of object (2D/3D)</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    * Supported by af::Window::plot, af::Window::hist, af::Window::surface,</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;      af::Window::vectorField.</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  * New API to set axes limits for graphs.</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    * Draw calls do not automatically compute the limits. This is now under user control.</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    * af::Window::setAxesLimits can be used to set axes limits automatically or manually.</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    * af::Window::setAxesTitles can be used to set axes titles.</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;  * New API for plot and scatter:</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    * af::Window::plot() and af::Window::scatter() now can handle 2D and 3D and determine appropriate order.</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    * af_draw_plot_nd()</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    * af_draw_plot_2d()</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    * af_draw_plot_3d()</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    * af_draw_scatter_nd()</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    * af_draw_scatter_2d()</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    * af_draw_scatter_3d()</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;* **New [interpolation methods](\ref af_interp_type)**</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;&lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1562)&lt;/sup&gt;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;  * Applies to</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    * \ref af::resize()</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    * \ref af::transform()</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    * \ref af::approx1()</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    * \ref af::approx2()</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;* **Support for [complex mathematical functions](\ref mathfunc_mat)**</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1507)&lt;/sup&gt;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  * Add complex support for \ref trig_mat, \ref af::sqrt(), \ref af::log().</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;* **af::medfilt1(): Median filter for 1-d signals** &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1479)&lt;/sup&gt;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;* &lt;b&gt;Generalized scan functions: \ref scan_func_scan and \ref scan_func_scanbykey&lt;/b&gt;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  * Now supports inclusive or exclusive scans</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;  * Supports binary operations defined by \ref af_binary_op.</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/388)&lt;/sup&gt;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;* **[Image Moments](\ref moments_mat) functions**</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1453)&lt;/sup&gt;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;* &lt;b&gt;Add af::getSizeOf() function for \ref af_dtype&lt;/b&gt;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1404)&lt;/sup&gt;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;* &lt;b&gt;Explicitly extantiate \ref af::array::device() for `void *&lt;/b&gt;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1503)&lt;/sup&gt;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;Bug Fixes</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;--------------</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;* Fixes to edge-cases in \ref morph_mat. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1564)&lt;/sup&gt;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;* Makes JIT tree size consistent between devices. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1457)&lt;/sup&gt;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;* Delegate higher-dimension in \ref convolve_mat to correct dimensions. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1445)&lt;/sup&gt;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;* Indexing fixes with C++11. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1426) [2](https://github.com/arrayfire/arrayfire/pull/1426)&lt;/sup&gt;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;* Handle empty arrays as inputs in various functions. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/799)&lt;/sup&gt;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;* Fix bug when single element input to af::median. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1423)&lt;/sup&gt;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;* Fix bug in calculation of time from af::timeit(). &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1414)&lt;/sup&gt;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;* Fix bug in floating point numbers in af::seq. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1404)&lt;/sup&gt;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;* Fixes for OpenCL graphics interop on NVIDIA devices.</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1408/commits/e1f16e6)&lt;/sup&gt;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;* Fix bug when compiling large kernels for AMD devices.</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1465)&lt;/sup&gt;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;* Fix bug in af::bilateral when shared memory is over the limit.</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1478)&lt;/sup&gt;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;* Fix bug in kernel header compilation tool `bin2cpp`.</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1544)&lt;/sup&gt;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;* Fix inital values for \ref morph_mat functions.</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1547)&lt;/sup&gt;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;* Fix bugs in af::homography() CPU and OpenCL kernels.</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1584)&lt;/sup&gt;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;* Fix bug in CPU TNJ.</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1587)&lt;/sup&gt;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;Improvements</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;------------</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;* CUDA 8 and compute 6.x(Pascal) support, current installer ships with CUDA 7.5. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1432) [2](https://github.com/arrayfire/arrayfire/pull/1487) [3](https://github.com/arrayfire/arrayfire/pull/1539)&lt;/sup&gt;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;* User controlled FFT plan caching. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1448)&lt;/sup&gt;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;* CUDA performance improvements for \ref image_func_wrap, \ref image_func_unwrap and \ref approx_mat.</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1411)&lt;/sup&gt;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;* Fallback for CUDA-OpenGL interop when no devices does not support OpenGL.</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1415)&lt;/sup&gt;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;* Additional forms of batching with the \ref transform_func_transform functions.</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;  [New behavior defined here](https://github.com/arrayfire/arrayfire/pull/1412).</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1412)&lt;/sup&gt;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;* Update to OpenCL2 headers. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1344)&lt;/sup&gt;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;* Support for integration with external OpenCL contexts. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1140)&lt;/sup&gt;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;* Performance improvements to interal copy in CPU Backend.</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1440)&lt;/sup&gt;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;* Performance improvements to af::select and af::replace CUDA kernels.</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1587)&lt;/sup&gt;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;* Enable OpenCL-CPU offload by default for devices with Unified Host Memory.</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1521)&lt;/sup&gt;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  * To disable, use the environment variable `AF_OPENCL_CPU_OFFLOAD=0`.</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;Build</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;------</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;* Compilation speedups. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1526)&lt;/sup&gt;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;* Build fixes with MKL. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1526)&lt;/sup&gt;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;* Error message when CMake CUDA Compute Detection fails. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1535)&lt;/sup&gt;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;* Several CMake build issues with Xcode generator fixed.</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;  &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1493) [2](https://github.com/arrayfire/arrayfire/pull/1499)&lt;/sup&gt;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;* Fix multiple OpenCL definitions at link time. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/issues/1429)&lt;/sup&gt;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;* Fix lapacke detection in CMake. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1423)&lt;/sup&gt;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;* Update build tags of</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;  * [clBLAS](https://github.com/clMathLibraries/clBLAS)</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;  * [clFFT](https://github.com/clMathLibraries/clFFT)</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;  * [Boost.Compute](https://github.com/boostorg/compute)</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;  * [Forge](https://github.com/arrayfire/forge)</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;  * [glbinding](https://github.com/cginternals/glbinding)</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;* Fix builds with GCC 6.1.1 and GCC 5.3.0. &lt;sup&gt;[1](https://github.com/arrayfire/arrayfire/pull/1409)&lt;/sup&gt;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;Installers</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;----------</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;* All installers now ship with ArrayFire libraries build with MKL 2016.</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;* All installers now ship with Forge development files and examples included.</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;* CUDA Compute 2.0 has been removed from the installers. Please contact us</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;  directly if you have a special need.</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;Examples</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;-------------</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;* Added [example simulating gravity](\ref graphics/field.cpp) for</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;  demonstration of vector field.</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;* Improvements to \ref financial/black_scholes_options.cpp example.</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;* Improvements to \ref graphics/gravity_sim.cpp example.</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;* Fix graphics examples to use af::Window::setAxesLimits and</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;  af::Window::setAxesTitles functions.</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;Documentation &amp; Licensing</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;-------------------------</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;* [ArrayFire copyright and trademark policy](http://arrayfire.com/trademark-policy)</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;* Fixed grammar in license.</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;* Add license information for glbinding.</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;* Remove license infomation for GLEW.</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;* Random123 now applies to all backends.</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;* Random number functions are now under \ref random_mat.</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;Deprecations</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;------------</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;The following functions have been deprecated and may be modified or removed</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;permanently from future versions of ArrayFire.</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;* \ref af::Window::plot3(): Use \ref af::Window::plot instead.</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;* \ref af_draw_plot(): Use \ref af_draw_plot_nd or \ref af_draw_plot_2d instead.</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;* \ref af_draw_plot3(): Use \ref af_draw_plot_nd or \ref af_draw_plot_3d instead.</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;* \ref af::Window::scatter3(): Use \ref af::Window::scatter instead.</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;* \ref af_draw_scatter(): Use \ref af_draw_scatter_nd or \ref af_draw_scatter_2d instead.</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;* \ref af_draw_scatter3(): Use \ref af_draw_scatter_nd or \ref af_draw_scatter_3d instead.</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;Known Issues</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;-------------</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;Certain CUDA functions are known to be broken on Tegra K1. The following ArrayFire tests are currently failing:</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;* assign_cuda</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;* harris_cuda</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;* homography_cuda</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;* median_cuda</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;* orb_cudasort_cuda</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;* sort_by_key_cuda</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;* sort_index_cuda</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;v3.3.2</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;==============</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;Improvements</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;------------</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;* Family of [Sort](\ref sort_mat) functions now support</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;  [higher order dimensions](https://github.com/arrayfire/arrayfire/pull/1373).</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;* Improved performance of batched sort on dim 0 for all [Sort](\ref sort_mat) functions.</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;* [Median](\ref stat_func_median) now also supports higher order dimensions.</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;Bug Fixes</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;--------------</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;* Fixes to [error handling](https://github.com/arrayfire/arrayfire/issues/1352) in C++ API for binary functions.</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;* Fixes to [external OpenCL context management](https://github.com/arrayfire/arrayfire/issues/1350).</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;* Fixes to [JPEG_GREYSCALE](https://github.com/arrayfire/arrayfire/issues/1360) for FreeImage versions &lt;= 3.154.</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;* Fixed for [non-float inputs](https://github.com/arrayfire/arrayfire/issues/1386) to \ref af::rgb2gray().</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;Build</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;------</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;* [Disable CPU Async](https://github.com/arrayfire/arrayfire/issues/1378) when building with GCC &lt; 4.8.4.</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;* Add option to [disable CPUID](https://github.com/arrayfire/arrayfire/issues/1369) from CMake.</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;* More verbose message when [CUDA Compute Detection fails](https://github.com/arrayfire/arrayfire/issues/1362).</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;* Print message to use [CUDA library stub](https://github.com/arrayfire/arrayfire/issues/1363)</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;  from CUDA Toolkit if CUDA Library is not found from default paths.</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;* [Build Fixes](https://github.com/arrayfire/arrayfire/pull/1385) on Windows.</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;  * For compiling tests our of source.</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;  * For compiling ArrayFire with static MKL.</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;* [Exclude &lt;sys/sysctl.h&gt;](https://github.com/arrayfire/arrayfire/pull/1368) when building on GNU Hurd.</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;* Add [manual CMake options](https://github.com/arrayfire/arrayfire/pull/1389) to build DEB and RPM packages.</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;Documentation</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;-------------</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;* Fixed documentation for \ref af::replace().</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;* Fixed images in [Using on OSX](\ref using_on_osx) page.</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;Installer</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;---------</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;* Linux x64 installers will now be compiled with GCC 4.9.2.</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;* OSX installer gives better error messages on brew failures and</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;  now includes link to [Fixing OS X Installer Failures] (https://github.com/arrayfire/arrayfire/wiki/Fixing-Common-OS-X-Installer-Failures)</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  for brew installation failures.</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;v3.3.1</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;==============</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;Bug Fixes</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;--------------</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;* Fixes to \ref af::array::device()</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    * CPU Backend: [evaluate arrays](https://github.com/arrayfire/arrayfire/issues/1316)</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;      before returning pointer with asynchronous calls in CPU backend.</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    * OpenCL Backend: [fix segfaults](https://github.com/arrayfire/arrayfire/issues/1324)</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;      when requested for device pointers on empty arrays.</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;* Fixed \ref af::array::operator%() from using [rem to mod](https://github.com/arrayfire/arrayfire/issues/1318).</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;* Fixed [array destruction](https://github.com/arrayfire/arrayfire/issues/1321)</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;  when backends are switched in Unified API.</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;* Fixed [indexing](https://github.com/arrayfire/arrayfire/issues/1331) after</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;  \ref af::moddims() is called.</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;* Fixes FFT calls for CUDA and OpenCL backends when used on</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;  [multiple devices](https://github.com/arrayfire/arrayfire/issues/1332).</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;* Fixed [unresolved external](https://github.com/arrayfire/arrayfire/commit/32965ef)</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;  for some functions from \ref af::array::array_proxy class.</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;Build</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;------</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;* CMake compiles files in alphabetical order.</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;* CMake fixes for BLAS and LAPACK on some Linux distributions.</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;Improvements</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;------------</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;* Fixed [OpenCL FFT performance](https://github.com/arrayfire/arrayfire/issues/1323) regression.</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;* \ref af::array::device() on OpenCL backend [returns](https://github.com/arrayfire/arrayfire/issues/1311)</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;  `cl_mem` instead of `(void*)cl::Buffer*`.</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;* In Unified backend, [load versioned libraries](https://github.com/arrayfire/arrayfire/issues/1312)</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;  at runtime.</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;Documentation</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;------</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;* Reorganized, cleaner README file.</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;* Replaced non-free lena image in assets with free-to-distribute lena image.</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;v3.3.0</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;==============</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;Major Updates</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;-------------</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;* CPU backend supports aysnchronous execution.</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;* Performance improvements to OpenCL BLAS and FFT functions.</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;* Improved performance of memory manager.</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;* Improvements to visualization functions.</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;* Improved sorted order for OpenCL devices.</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;* Integration with external OpenCL projects.</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;Features</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;----------</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;* \ref af::getActiveBackend(): Returns the current backend being used.</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;* [Scatter plot](https://github.com/arrayfire/arrayfire/pull/1116) added to graphics.</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;* \ref af::transform() now supports perspective transformation matrices.</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;* \ref af::infoString(): Returns `af::info()` as a string.</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;* \ref af::printMemInfo(): Print a table showing information about buffer from the memory manager</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    * The \ref AF_MEM_INFO macro prints numbers and total sizes of all buffers (requires including af/macros.h)</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;* \ref af::allocHost(): Allocates memory on host.</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;* \ref af::freeHost(): Frees host side memory allocated by arrayfire.</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;* OpenCL functions can now use CPU implementation.</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    * Currently limited to Unified Memory devices (CPU and On-board Graphics).</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    * Functions: af::matmul() and all [LAPACK](\ref linalg_mat) functions.</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    * Takes advantage of optimized libraries such as MKL without doing memory copies.</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    * Use the environment variable `AF_OPENCL_CPU_OFFLOAD=1` to take advantage of this feature.</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;* Functions specific to OpenCL backend.</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    * \ref afcl::addDevice(): Adds an external device and context to ArrayFire&#39;s device manager.</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    * \ref afcl::deleteDevice(): Removes an external device and context from ArrayFire&#39;s device manager.</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    * \ref afcl::setDevice(): Sets an external device and context from ArrayFire&#39;s device manager.</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    * \ref afcl::getDeviceType(): Gets the device type of the current device.</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    * \ref afcl::getPlatform(): Gets the platform of the current device.</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;* \ref af::createStridedArray() allows [array creation user-defined strides](https://github.com/arrayfire/arrayfire/issues/1177) and device pointer.</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;* [Expose functions](https://github.com/arrayfire/arrayfire/issues/1131) that provide information</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;  about memory layout of Arrays.</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    * \ref af::getStrides(): Gets the strides for each dimension of the array.</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    * \ref af::getOffset(): Gets the offsets for each dimension of the array.</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    * \ref af::getRawPtr(): Gets raw pointer to the location of the array on device.</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    * \ref af::isLinear(): Returns true if all elements in the array are contiguous.</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    * \ref af::isOwner(): Returns true if the array owns the raw pointer, false if it is a sub-array.</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    * \ref af::getStrides(): Gets the strides of the array.</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    * \ref af::getStrides(): Gets the strides of the array.</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;* \ref af::getDeviceId(): Gets the device id on which the array resides.</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;* \ref af::isImageIOAvailable(): Returns true if ArrayFire was compiled with Freeimage enabled</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;* \ref af::isLAPACKAvailable(): Returns true if ArrayFire was compiled with LAPACK functions enabled</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;Bug Fixes</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;--------------</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;* Fixed [errors when using 3D / 4D arrays](https://github.com/arrayfire/arrayfire/pull/1251) in select and replace</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;* Fixed [JIT errors on AMD devices](https://github.com/arrayfire/arrayfire/pull/1238) for OpenCL backend.</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;* Fixed [imageio bugs](https://github.com/arrayfire/arrayfire/pull/1229) for 16 bit images.</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;* Fixed [bugs when loading and storing images](https://github.com/arrayfire/arrayfire/pull/1228) natively.</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;* Fixed [bug in FFT for NVIDIA GPUs](https://github.com/arrayfire/arrayfire/issues/615) when using OpenCL backend.</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;* Fixed [bug when using external context](https://github.com/arrayfire/arrayfire/pull/1241) with OpenCL backend.</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;* Fixed [memory leak](https://github.com/arrayfire/arrayfire/issues/1269) in \ref af_median_all().</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;* Fixed [memory leaks and performance](https://github.com/arrayfire/arrayfire/pull/1274) in graphics functions.</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;* Fixed [bugs when indexing followed by moddims](https://github.com/arrayfire/arrayfire/issues/1275).</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;* \ref af_get_revision() now returns actual commit rather than AF_REVISION.</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;* Fixed [releasing arrays](https://github.com/arrayfire/arrayfire/issues/1282) when using different backends.</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;* OS X OpenCL: [LAPACK functions](\ref linalg_mat) on CPU devices use OpenCL offload (previously threw errors).</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;* [Add support for 32-bit integer image types](https://github.com/arrayfire/arrayfire/pull/1287) in Image IO.</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;* Fixed [set operations for row vectors](https://github.com/arrayfire/arrayfire/issues/1300)</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;* Fixed [bugs](https://github.com/arrayfire/arrayfire/issues/1243) in \ref af::meanShift() and af::orb().</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;Improvements</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;--------------</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;* Optionally [offload BLAS and LAPACK](https://github.com/arrayfire/arrayfire/pull/1221) functions to CPU implementations to improve performance.</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;* Performance improvements to the memory manager.</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;* Error messages are now more detailed.</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;* Improved sorted order for OpenCL devices.</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;* JIT heuristics can now be tweaked using environment variables. See</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;  [Environment Variables](\ref configuring_environment) tutorial.</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;* Add `BUILD_&lt;BACKEND&gt;` [options to examples and tests](https://github.com/arrayfire/arrayfire/issues/1286)</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;  to toggle backends when compiling independently.</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;Examples</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;----------</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;* New visualization [example simulating gravity](\ref graphics/gravity_sim.cpp).</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;Build</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;----------</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;* Support for Intel `icc` compiler</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;* Support to compile with Intel MKL as a BLAS and LAPACK provider</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;* Tests are now available for building as standalone (like examples)</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;* Tests can now be built as a single file for each backend</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;* Better handling of NONFREE build options</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;* [Searching for GLEW in CMake default paths](https://github.com/arrayfire/arrayfire/pull/1292)</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;* Fixes for compiling with MKL on OSX.</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;Installers</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;----------</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;* Improvements to OSX Installer</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    * CMake config files are now installed with libraries</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    * Independent options for installing examples and documentation components</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;Deprecations</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;-----------</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;* `af_lock_device_arr` is now deprecated to be removed in v4.0.0. Use \ref af_lock_array() instead.</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;* `af_unlock_device_arr` is now deprecated to be removed in v4.0.0. use \ref af_unlock_array() instead.</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;Documentation</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;--------------</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;* Fixes to documentation for \ref matchTemplate().</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;* Improved documentation for deviceInfo.</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;* Fixes to documentation for \ref exp().</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;Known Issues</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;------------</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;* [Solve OpenCL fails on NVIDIA Maxwell devices](https://github.com/arrayfire/arrayfire/issues/1246)</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;  for f32 and c32 when M &gt; N and K % 4 is 1 or 2.</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;v3.2.2</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;==============</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;Bug Fixes</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;--------------</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;* Fixed [memory leak](https://github.com/arrayfire/arrayfire/pull/1145) in</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;  CUDA Random number generators</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1157) in</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;  af::select() and af::replace() tests</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;* Fixed [exception](https://github.com/arrayfire/arrayfire/issues/1164)</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;  thrown when printing empty arrays with af::print()</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1170) in CPU</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;  random number generation. Changed the generator to</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;  [mt19937](http://en.cppreference.com/w/cpp/numeric/random)</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;* Fixed exception handling (internal)</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    * [Exceptions](https://github.com/arrayfire/arrayfire/issues/1188)</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;      now show function, short file name and line number</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    * Added [AF_RETURN_ERROR](https://github.com/arrayfire/arrayfire/issues/1186)</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;      macro to handle returning errors.</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    * Removed THROW macro, and renamed AF_THROW_MSG to AF_THROW_ERR.</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/commit/9459c6)</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;  in \ref af::identity() that may have affected CUDA Compute 5.2 cards</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;Build</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;------</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;* Added a [MIN_BUILD_TIME](https://github.com/arrayfire/arrayfire/issues/1193)</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;  option to build with minimum optimization compiler flags resulting in faster</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;  compile times</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;* Fixed [issue](https://github.com/arrayfire/arrayfire/issues/1143) in CBLAS</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;  detection by CMake</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;* Fixed tests failing for builds without optional components</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;  [FreeImage](https://github.com/arrayfire/arrayfire/issues/1143) and</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;  [LAPACK](https://github.com/arrayfire/arrayfire/issues/1167)</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;* Added a [test](https://github.com/arrayfire/arrayfire/issues/1192)</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;  for unified backend</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;* Only [info and backend tests](https://github.com/arrayfire/arrayfire/issues/1192)</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;  are now built for unified backend</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;* [Sort tests](https://github.com/arrayfire/arrayfire/issues/1199)</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;  execution alphabetically</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;* Fixed compilation flags and errors in tests and examples</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;* [Moved AF_REVISION and AF_COMPILER_STR](https://github.com/arrayfire/arrayfire/commit/2287c5)</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;  into src/backend. This is because as revision is updated with every commit,</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;  entire ArrayFire would have to be rebuilt in the old code.</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    * v3.3 will add a af_get_revision() function to get the revision string.</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;* [Clean up examples](https://github.com/arrayfire/arrayfire/pull/1158)</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    * Remove getchar for Windows (this will be handled by the installer)</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    * Other miscellaneous code cleanup</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    * Fixed bug in [plot3.cpp](\ref graphics/plot3.cpp) example</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;* [Rename](https://github.com/arrayfire/arrayfire/commit/35f0fc2) clBLAS/clFFT</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;  external project suffix from external -&gt; ext</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;* [Add OpenBLAS](https://github.com/arrayfire/arrayfire/pull/1197) as a</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;  lapack/lapacke alternative</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;Improvements</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;------------</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;* Added \ref AF_MEM_INFO macro to print memory info from ArrayFire&#39;s memory</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;  manager ([cross issue](https://github.com/arrayfire/arrayfire/issues/1172))</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;* Added [additional paths](https://github.com/arrayfire/arrayfire/issues/1184)</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;  for searching for `libaf*` for Unified backend on unix-style OS.</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    * Note: This still requires dependencies such as forge, CUDA, NVVM etc to be</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;      in `LD_LIBRARY_PATH` as described in [Unified Backend](\ref unifiedbackend)</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;* [Create streams](https://github.com/arrayfire/arrayfire/commit/ed0373f)</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;  for devices only when required in CUDA Backend</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;Documentation</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;------</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;* [Hide scrollbars](https://github.com/arrayfire/arrayfire/commit/9d218a5)</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;  appearing for pre and code styles</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;* Fix [documentation](https://github.com/arrayfire/arrayfire/commit/ac09f91) for af::replace</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;* Add [code sample](https://github.com/arrayfire/arrayfire/commit/4e06483)</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;  for converting the output of af::getAvailableBackends() into bools</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;* Minor fixes in documentation</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;v3.2.1</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;==============</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;Bug Fixes</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;--------------</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/pull/1136) in homography()</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1135) in behavior</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;  of af::array::device()</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1129) when</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;  indexing with span along trailing dimension</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1127) when</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;  indexing in [GFor](\ref gfor)</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1122) in CPU</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;  information fetching</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;* Fixed compilation [bug](https://github.com/arrayfire/arrayfire/issues/1117)</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;  in unified backend caused by missing link library</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;* Add [missing symbol](https://github.com/arrayfire/arrayfire/pull/1114) for</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;  af_draw_surface()</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;Build</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;------</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;* Tests can now be used as a [standalone project](https://github.com/arrayfire/arrayfire/pull/1120)</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    * Tests can now be built using pre-compiled libraries</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    * Similar to how the examples are built</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;* The install target now installs the examples source irrespective of the</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;  BUILD_EXAMPLES value</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    * Examples are not built if BUILD_EXAMPLES is off</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;Documentation</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;------</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;* HTML documentation is now [built and installed](https://github.com/arrayfire/arrayfire/pull/1109)</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;  in docs/html</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;* Added documentation for \ref af::seq class</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;* Updated [Matrix Manipulation](\ref matrixmanipulation) tutorial</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;* Examples list is now generated by CMake</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    * &lt;a href=&quot;examples.htm&quot;&gt;Examples&lt;/a&gt; are now listed as dir/example.cpp</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;* Removed dummy groups used for indexing documentation (affcted doxygen &lt; 1.8.9)</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;v3.2.0</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;=================</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;Major Updates</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;-------------</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;* Added Unified backend</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    * Allows switching backends at runtime</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    * Read [Unified Backend](\ref unifiedbackend) for more.</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;* Support for 16-bit integers (\ref s16 and \ref u16)</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    * All functions that support 32-bit interger types (\ref s32, \ref u32),</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;      now also support 16-bit interger types</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;Function Additions</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;------------------</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;* Unified Backend</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    * \ref setBackend() - Sets a backend as active</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    * \ref getBackendCount() - Gets the number of backends available for use</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    * \ref getAvailableBackends() - Returns information about available backends</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    * \ref getBackendId() - Gets the backend enum for an array</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;* Vision</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    * \ref homography() - Homography estimation</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    * \ref gloh() - GLOH Descriptor for SIFT</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;* Image Processing</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    * \ref loadImageNative() - Load an image as native data without modification</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    * \ref saveImageNative() - Save an image without modifying data or type</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;* Graphics</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    * \ref af::Window::plot3() - 3-dimensional line plot</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    * \ref af::Window::surface() - 3-dimensional curve plot</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;* Indexing</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    * \ref af_create_indexers()</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    * \ref af_set_array_indexer()</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    * \ref af_set_seq_indexer()</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    * \ref af_set_seq_param_indexer()</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    * \ref af_release_indexers()</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;* CUDA Backend Specific</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    * \ref setNativeId() - Set the CUDA device with given native id as active</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;        * ArrayFire uses a modified order for devices. The native id for a</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;          device can be retreived using `nvidia-smi`</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;* OpenCL Backend Specific</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    * \ref setDeviceId() - Set the OpenCL device using the `clDeviceId`</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;Other Improvements</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;------------------------</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;* Added \ref c32 and \ref c64 support for \ref isNaN(), \ref isInf() and \ref iszero()</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;* Added CPU information for `x86` and `x86_64` architectures in CPU backend&#39;s \ref info()</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;* Batch support for \ref approx1() and \ref approx2()</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    * Now can be used with gfor as well</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;* Added \ref s64 and \ref u64 support to:</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    * \ref sort() (along with sort index and sort by key)</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    * \ref setUnique(), \ref setUnion(), \ref setIntersect()</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    * \ref convolve() and \ref fftConvolve()</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    * \ref histogram() and \ref histEqual()</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;    * \ref lookup()</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    * \ref mean()</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;* Added \ref AF_MSG macro</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;Build Improvements</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;------------------</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;* Submodules update is now automatically called if not cloned recursively</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;* [Fixes for compilation](https://github.com/arrayfire/arrayfire/issues/766) on Visual Studio 2015</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;* Option to use [fallback to CPU LAPACK](https://github.com/arrayfire/arrayfire/pull/1053)</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;  for linear algebra functions in case of CUDA 6.5 or older versions.</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;Bug Fixes</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;--------------</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;* Fixed [memory leak](https://github.com/arrayfire/arrayfire/pull/1096) in \ref susan()</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;* Fixed [failing test](https://github.com/arrayfire/arrayfire/commit/144a2db)</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;  in \ref lower() and \ref upper() for CUDA compute 53</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1092) in CUDA for indexing out of bounds</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;* Fixed [dims check](https://github.com/arrayfire/arrayfire/commit/6975da8) in \ref iota()</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;* Fixed [out-of-bounds access](https://github.com/arrayfire/arrayfire/commit/7fc3856) in \ref sift()</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;* Fixed [memory allocation](https://github.com/arrayfire/arrayfire/commit/5e88e4a) in \ref fast() OpenCL</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;* Fixed [memory leak](https://github.com/arrayfire/arrayfire/pull/994) in image I/O functions</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;* \ref dog() now returns float-point type arrays</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;Documentation Updates</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;---------------------</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;* Improved tutorials documentation</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    * More detailed Using on [Linux](\ref using_on_linux), [OSX](\ref using_on_osx),</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;      [Windows](\ref using_on_windows) pages.</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;* Added return type information for functions that return different type</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;  arrays</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;New Examples</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;------------</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;* Graphics</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    * [Plot3](\ref graphics/plot3.cpp)</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    * [Surface](\ref graphics/surface.cpp)</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;* [Shallow Water Equation](\ref pde/swe.cpp)</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;* [Basic](\ref unified/basic.cpp) as a Unified backend example</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;Installers</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;-----------</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;* All installers now include the Unified backend and corresponding CMake files</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;* Visual Studio projects include Unified in the Platform Configurations</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;* Added installer for Jetson TX1</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;* SIFT and GLOH do not ship with the installers as SIFT is protected by</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;  patents that do not allow commercial distribution without licensing.</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;v3.1.3</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;==============</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;Bug Fixes</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;---------</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;* Fixed [bugs](https://github.com/arrayfire/arrayfire/issues/1042) in various OpenCL kernels without offset additions</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;* Remove ARCH_32 and ARCH_64 flags</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;* Fix [missing symbols](https://github.com/arrayfire/arrayfire/issues/1040) when freeimage is not found</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;* Use CUDA driver version for Windows</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;* Improvements to SIFT</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;* Fixed [memory leak](https://github.com/arrayfire/arrayfire/issues/1045) in median</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;* Fixes for Windows compilation when not using MKL [#1047](https://github.com/arrayfire/arrayfire/issues/1047)</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;* Fixed for building without LAPACK</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;Other</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;-------</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;* Documentation: Fixed documentation for select and replace</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;* Documentation: Fixed documentation for af_isnan</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;v3.1.2</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;==============</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;Bug Fixes</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;---------</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/commit/4698f12) in assign that was causing test to fail</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;* Fixed bug in convolve. Frequency condition now depends on kernel size only</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1005) in indexed reductions for complex type in OpenCL backend</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1006) in kernel name generation in ireduce for OpenCL backend</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;* Fixed non-linear to linear indices in ireduce</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1011) in reductions for small arrays</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1010) in histogram for indexed arrays</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;* Fixed [compiler error](https://github.com/arrayfire/arrayfire/issues/1015) CPUID for non-compliant devices</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;* Fixed [failing tests](https://github.com/arrayfire/arrayfire/issues/1008) on i386 platforms</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;* Add missing AFAPI</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;Other</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;-------</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;* Documentation: Added missing examples and other corrections</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;* Documentation: Fixed warnings in documentation building</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;* Installers: Send error messages to log file in OSX Installer</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;v3.1.1</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;==============</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;Installers</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;-----------</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;* CUDA backend now depends on CUDA 7.5 toolkit</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;* OpenCL backend now require OpenCL 1.2 or greater</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;Bug Fixes</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;--------------</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/981) in reductions after indexing</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;* Fixed [bug](https://github.com/arrayfire/arrayfire/issues/976) in indexing when using reverse indices</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;Build</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;------</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;* `cmake` now includes `PKG_CONFIG` in the search path for CBLAS and LAPACKE libraries</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;* [heston_model.cpp](\ref financial/heston_model.cpp) example now builds with the default ArrayFire cmake files after installation</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;Other</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;------</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;* Fixed bug in [image_editing.cpp](\ref image_processing/image_editing.cpp)</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;v3.1.0</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;==============</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;Function Additions</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;------------------</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;* Computer Vision Functions</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    * \ref nearestNeighbour() - Nearest Neighbour with SAD, SSD and SHD distances</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    * \ref harris() - Harris Corner Detector</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    * \ref susan() - Susan Corner Detector</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    * \ref sift() - Scale Invariant Feature Transform (SIFT)</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;        * Method and apparatus for identifying scale invariant features&quot;</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;          &quot;in an image and use of same for locating an object in an image,\&quot; David&quot;</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;          &quot;G. Lowe, US Patent 6,711,293 (March 23, 2004). Provisional application&quot;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;          &quot;filed March 8, 1999. Asignee: The University of British Columbia. For&quot;</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;          &quot;further details, contact David Lowe (lowe@cs.ubc.ca) or the&quot;</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;          &quot;University-Industry Liaison Office of the University of British&quot;</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;          &quot;Columbia.&quot;)</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;        * SIFT is available for compiling but does not ship with ArrayFire</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;          hosted installers/pre-built libraries</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    * \ref dog() -  Difference of Gaussians</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;* Image Processing Functions</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    * \ref ycbcr2rgb() and \ref rgb2ycbcr() - RGB &lt;-&gt;YCbCr color space conversion</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;    * \ref wrap() and \ref unwrap() Wrap and Unwrap</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    * \ref sat() - Summed Area Tables</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    * \ref loadImageMem() and \ref saveImageMem() - Load and Save images to/from memory</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;        * \ref af_image_format - Added imageFormat (af_image_format) enum</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;* Array &amp; Data Handling</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    * \ref copy() - Copy</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;    * array::lock() and array::unlock() - Lock and Unlock</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    * \ref select() and \ref replace() - Select and Replace</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    * Get array reference count (af_get_data_ref_count)</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;* Signal Processing</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    * \ref fftInPlace() - 1D in place FFT</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    * \ref fft2InPlace() - 2D in place FFT</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    * \ref fft3InPlace() - 3D in place FFT</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    * \ref ifftInPlace() - 1D in place Inverse FFT</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    * \ref ifft2InPlace() - 2D in place Inverse FFT</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    * \ref ifft3InPlace() - 3D in place Inverse FFT</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    * \ref fftR2C() - Real to complex FFT</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    * \ref fftC2R() - Complex to Real FFT</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;* Linear Algebra</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    * \ref svd() and \ref svdInPlace() - Singular Value Decomposition</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;* Other operations</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    * \ref sigmoid() - Sigmoid</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    * Sum (with option to replace NaN values)</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    * Product (with option to replace NaN values)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;* Graphics</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    * Window::setSize() - Window resizing using Forge API</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;* Utility</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    * Allow users to set print precision (print, af_print_array_gen)</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    * \ref saveArray() and \ref readArray() - Stream arrays to binary files</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    * \ref toString() - toString function returns the array and data as a string</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;* CUDA specific functionality</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    * \ref getStream() - Returns default CUDA stream ArrayFire uses for the current device</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    * \ref getNativeId() - Returns native id of the CUDA device</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;Improvements</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;------------</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;* dot</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    * Allow complex inputs with conjugate option</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;* AF_INTERP_LOWER interpolation</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    * For resize, rotate and transform based functions</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;* 64-bit integer support</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    * For reductions, random, iota, range, diff1, diff2, accum, join, shift</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;      and tile</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;* convolve</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    * Support for non-overlapping batched convolutions</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;* Complex Arrays</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    * Fix binary ops on complex inputs of mixed types</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    * Complex type support for exp</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;* tile</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    * Performance improvements by using JIT when possible.</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;* Add AF_API_VERSION macro</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    * Allows disabling of API to maintain consistency with previous versions</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;* Other Performance Improvements</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    * Use reference counting to reduce unnecessary copies</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;* CPU Backend</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    * Device properties for CPU</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    * Improved performance when all buffers are indexed linearly</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;* CUDA Backend</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    * Use streams in CUDA (no longer using default stream)</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    * Using async cudaMem ops</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    * Add 64-bit integer support for JIT functions</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    * Performance improvements for CUDA JIT for non-linear 3D and 4D arrays</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;* OpenCL Backend</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    * Improve compilation times for OpenCL backend</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    * Performance improvements for non-linear JIT kernels on OpenCL</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    * Improved shared memory load/store in many OpenCL kernels (PR 933)</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;    * Using cl.hpp v1.2.7</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;Bug Fixes</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;---------</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;* Common</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    * Fix compatibility of c32/c64 arrays when operating with scalars</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    * Fix median for all values of an array</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    * Fix double free issue when indexing (30cbbc7)</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    * Fix [bug](https://github.com/arrayfire/arrayfire/issues/901) in rank</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    * Fix default values for scale throwing exception</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    * Fix conjg raising exception on real input</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    * Fix bug when using conjugate transpose for vector input</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    * Fix issue with const input for array_proxy::get()</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;* CPU Backend</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    * Fix randn generating same sequence for multiple calls</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    * Fix setSeed for randu</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    * Fix casting to and from complex</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    * Check NULL values when allocating memory</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    * Fix [offset issue](https://github.com/arrayfire/arrayfire/issues/923) for CPU element-wise operations</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;New Examples</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;------------</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;* Match Template</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;* Susan</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;* Heston Model (contributed by Michael Nowotny)</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;Installer</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;----------</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;* Fixed bug in automatic detection of ArrayFire when using with CMake in Windows</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;* The Linux libraries are now compiled with static version of FreeImage</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;Known Issues</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;------------</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;* OpenBlas can cause issues with QR factorization in CPU backend</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;* FreeImage older than 3.10 can cause issues with loadImageMem and</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;  saveImageMem</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;* OpenCL backend issues on OSX</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    * AMD GPUs not supported because of driver issues</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    * Intel CPUs not supported</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    * Linear algebra functions do not work on Intel GPUs.</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;* Stability and correctness issues with open source OpenCL implementations such as Beignet, GalliumCompute.</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;v3.0.2</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;==============</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;Bug Fixes</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;--------------</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;* Added missing symbols from the compatible API</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;* Fixed a bug affecting corner rows and elements in \ref grad()</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;* Fixed linear interpolation bugs affecting large images in the following:</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    - \ref approx1()</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    - \ref approx2()</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    - \ref resize()</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    - \ref rotate()</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;    - \ref scale()</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    - \ref skew()</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    - \ref transform()</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;Documentation</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;-----------------</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;* Added missing documentation for \ref constant()</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;* Added missing documentation for `array::scalar()`</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;* Added supported input types for functions in `arith.h`</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;v3.0.1</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;==============</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;Bug Fixes</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;--------------</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;* Fixed header to work in Visual Studio 2015</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;* Fixed a bug in batched mode for FFT based convolutions</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;* Fixed graphics issues on OSX</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;* Fixed various bugs in visualization functions</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;Other improvements</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;---------------</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;* Improved fractal example</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;* New OSX installer</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;* Improved Windows installer</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;  * Default install path has been changed</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;* Fixed bug in machine learning examples</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;&lt;br&gt;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;v3.0.0</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;=================</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;Major Updates</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;-------------</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;* ArrayFire is now open source</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;* Major changes to the visualization library</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;* Introducing handle based C API</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;* New backend: CPU fallback available for systems without GPUs</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;* Dense linear algebra functions available for all backends</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;* Support for 64 bit integers</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;Function Additions</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;------------------</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;* Data generation functions</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    * range()</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;    * iota()</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;* Computer Vision Algorithms</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    * features()</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        * A data structure to hold features</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;    * fast()</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        * FAST feature detector</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    * orb()</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;        * ORB A feature descriptor extractor</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;* Image Processing</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    * convolve1(), convolve2(), convolve3()</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;        * Specialized versions of convolve() to enable better batch support</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    * fftconvolve1(), fftconvolve2(), fftconvolve3()</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;        * Convolutions in frequency domain to support larger kernel sizes</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    * dft(), idft()</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;        * Unified functions for calling multi dimensional ffts.</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    * matchTemplate()</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;        * Match a kernel in an image</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    * sobel()</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;        * Get sobel gradients of an image</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    * rgb2hsv(), hsv2rgb(), rgb2gray(), gray2rgb()</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;        * Explicit function calls to colorspace conversions</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    * erode3d(), dilate3d()</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;        * Explicit erode and dilate calls for image morphing</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;* Linear Algebra</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    * matmulNT(), matmulTN(), matmulTT()</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;        * Specialized versions of matmul() for transposed inputs</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    * luInPlace(), choleskyInPlace(), qrInPlace()</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;        * In place factorizations to improve memory requirements</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    * solveLU()</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;        * Specialized solve routines to improve performance</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    * OpenCL backend now Linear Algebra functions</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;* Other functions</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    * lookup() - lookup indices from a table</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    * batchFunc() - helper function to perform batch operations</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;* Visualization functions</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    * Support for multiple windows</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    * window.hist()</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;        * Visualize the output of the histogram</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;* C API</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    * Removed old pointer based C API</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    * Introducing handle base C API</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    * Just In Time compilation available in C API</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    * C API has feature parity with C++ API</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    * bessel functions removed</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    * cross product functions removed</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    * Kronecker product functions removed</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;Performance Improvements</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;------------------------</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;* Improvements across the board for OpenCL backend</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;API Changes</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;---------------------</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;* `print` is now af_print()</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;* seq(): The step parameter is now the third input</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    * seq(start, step, end) changed to seq(start, end, step)</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;* gfor(): The iterator now needs to be seq()</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;Deprecated Function APIs</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;------------------------</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;Deprecated APIs are in af/compatible.h</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;* devicecount() changed to getDeviceCount()</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;* deviceset() changed to setDevice()</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;* deviceget() changed to getDevice()</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;* loadimage() changed to loadImage()</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;* saveimage() changed to saveImage()</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;* gaussiankernel() changed to gaussianKernel()</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;* alltrue() changed to allTrue()</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;* anytrue() changed to anyTrue()</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;* setunique() changed to setUnique()</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;* setunion() changed to setUnion()</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;* setintersect() changed to setIntersect()</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;* histequal() changed to histEqual()</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;* colorspace() changed to colorSpace()</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;* filter() deprecated. Use convolve1() and convolve2()</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;* mul() changed to product()</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;* deviceprop() changed to deviceProp()</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;Known Issues</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;----------------------</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;* OpenCL backend issues on OSX</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    * AMD GPUs not supported because of driver issues</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    * Intel CPUs not supported</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    * Linear algebra functions do not work on Intel GPUs.</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;* Stability and correctness issues with open source OpenCL implementations such as Beignet, GalliumCompute.</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.org']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
