<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: convolve1</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__signal__func__convolve1.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">convolve1<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__signal__mat.htm">Signal Processing</a> &raquo; <a class="el" href="group__convolve__mat.htm">Convolutions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Convolution Integral for one dimensional data.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga72a117436a82ed5fe593fe7072c01968"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm#ga72a117436a82ed5fe593fe7072c01968">convolve1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:ga72a117436a82ed5fe593fe7072c01968"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on one dimensional signals.  <a href="group__signal__func__convolve1.htm#ga72a117436a82ed5fe593fe7072c01968">More...</a><br /></td></tr>
<tr class="separator:ga72a117436a82ed5fe593fe7072c01968"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga95ec82427447ca372f760341e6e4da7d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm#ga95ec82427447ca372f760341e6e4da7d">fftConvolve1</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga95ec82427447ca372f760341e6e4da7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution on 1D signals using FFT.  <a href="group__signal__func__convolve1.htm#ga95ec82427447ca372f760341e6e4da7d">More...</a><br /></td></tr>
<tr class="separator:ga95ec82427447ca372f760341e6e4da7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25d77b794463b5cd72cd0b7f4af140d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm#ga25d77b794463b5cd72cd0b7f4af140d7">af_convolve1</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> signal, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> filter, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a> mode, <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">af_conv_domain</a> domain)</td></tr>
<tr class="memdesc:ga25d77b794463b5cd72cd0b7f4af140d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for convolution on one dimensional signals.  <a href="group__signal__func__convolve1.htm#ga25d77b794463b5cd72cd0b7f4af140d7">More...</a><br /></td></tr>
<tr class="separator:ga25d77b794463b5cd72cd0b7f4af140d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3cbc675cc70478f73803e906253a52c1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm#ga3cbc675cc70478f73803e906253a52c1">af_fft_convolve1</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> signal, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> filter, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a> mode)</td></tr>
<tr class="memdesc:ga3cbc675cc70478f73803e906253a52c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for convolution on 1D signals using FFT.  <a href="group__signal__func__convolve1.htm#ga3cbc675cc70478f73803e906253a52c1">More...</a><br /></td></tr>
<tr class="separator:ga3cbc675cc70478f73803e906253a52c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Convolution Integral for one dimensional data. </p>
<p>A convolution is a common operation between a source array, a, and a filter (or kernel) array b. The answer to the convolution is the same as computing the coefficients in polynomial multiplication, if a and b are the coefficients.</p>
<p>Another way to think about it is that the filter kernel is centered on each pixel in a, and the output for that pixel or data point is the sum of the products.</p>
<p>Depending on the size of the signal and the filter, any one of the following batch mode convolutions take place.</p>
<ul>
<li><b>No Batch</b> - Single filter applied to single input.</li>
<li><b>Filter is Batched</b> - Many filters applied on same input</li>
<li><b>Signal is Batched</b> - Single filter applied to a set of inputs.</li>
<li><b>Identical Batches</b> - A set of filters applied onto to a set of inputs in one-to-one correspondence.</li>
<li><b>Non overlapping Batches</b> - All batched filters are applied to all batched signals. The batch axis of Signal and Filter <b>should not</b> be the same.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>All non-overlapping(interleaved) convolutions default to frequency domain <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dba0a1b168b058f58bd6b092af8bd5581fd">AF_CONV_FREQ</a> irrespective of the provided convolution mode argument.</dd></dl>
<p>For one dimensional signals (lets say m is size of 0th axis), below batch operations are possible.</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadCenter">Signal Size </th><th class="markdownTableHeadCenter">Filter Size </th><th class="markdownTableHeadCenter">Output Size </th><th class="markdownTableHeadCenter">Batch Mode </th><th class="markdownTableHeadLeft">Description  </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyCenter">\( [m \ 1 \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ 1 \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ 1 \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">No Batch </td><td class="markdownTableBodyLeft">Output will be a single convolved array  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyCenter">\( [m \ 1 \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">Filter is Batched </td><td class="markdownTableBodyLeft">n filters applied to same input  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ 1 \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">Signal is Batched </td><td class="markdownTableBodyLeft">1 filter applied to n inputs  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyCenter">\( [m \ n \ p \ q] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ p \ q] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ p \ q] \) </td><td class="markdownTableBodyCenter">Identical Batches </td><td class="markdownTableBodyLeft">n*p*q filters applied to n*p*q inputs in one-to-one correspondence  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ 1 \ p \ q] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ p \ q] \) </td><td class="markdownTableBodyCenter">Non-overlapping batches </td><td class="markdownTableBodyLeft">p*q filters applied to n inputs to produce n x p x q results  </td></tr>
</table>
<p>There are various other permutations of signal and filter sizes that fall under the category of non-overlapping batch mode that are not listed in the above table. For any signal and filter size combination to fall under the non-overlapping batch mode, they should satisfy one of the following conditions.</p><ul>
<li>Signal and filter size along a given batch axis ( \( &gt; 1 \)) should be same.</li>
<li>Either signal size or filter size along a given batch axis ( \( &gt; 1 \)) should be equal to one.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>For the above tabular illustrations, we assumed <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a> is <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>. </dd></dl>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga25d77b794463b5cd72cd0b7f4af140d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga25d77b794463b5cd72cd0b7f4af140d7">&#9670;&nbsp;</a></span>af_convolve1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_convolve1 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a>&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">af_conv_domain</a>&#160;</td>
          <td class="paramname"><em>domain</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for convolution on one dimensional signals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is convolved array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input signal </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filter</td><td>is the signal that shall be flipped for the convolution operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">domain</td><td>specifies if the convolution should be performed in frequency os spatial domain </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the convolution is successful, otherwise an appropriate error code is returned.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The default parameter of <code>domain</code>, <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>, heuristically switches between frequency and spatial domain. </dd></dl>

</div>
</div>
<a id="ga3cbc675cc70478f73803e906253a52c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3cbc675cc70478f73803e906253a52c1">&#9670;&nbsp;</a></span>af_fft_convolve1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_fft_convolve1 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a>&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for convolution on 1D signals using FFT. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is convolved array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input signal </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filter</td><td>is the signal that shall be used for the convolution operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the convolution is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="ga72a117436a82ed5fe593fe7072c01968"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga72a117436a82ed5fe593fe7072c01968">&#9670;&nbsp;</a></span>convolve1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::convolve1 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a>&#160;</td>
          <td class="paramname"><em>mode</em> = <code><a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a>&#160;</td>
          <td class="paramname"><em>domain</em> = <code><a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for convolution on one dimensional signals. </p>
<div class="fragment"><div class="line">    <span class="comment">// vector&lt;dim4&gt; numDims;</span></div>
<div class="line">    <span class="comment">// vector&lt;vector&lt;float&gt; &gt; in;</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> signal(numDims[0], &amp;(in[0].front()));</div>
<div class="line">    <span class="comment">// signal dims = [32 1 1 1]</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>(numDims[1], &amp;(in[1].front()));</div>
<div class="line">    <span class="comment">// filter dims = [4 1 1 1]</span></div>
<div class="line"> </div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> output = <a class="code" href="group__signal__func__convolve1.htm#ga72a117436a82ed5fe593fe7072c01968">convolve1</a>(signal, <a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, <a class="code" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>);</div>
<div class="line">    <span class="comment">// output dims = [32 1 1 1] - same as input since expand(3rd argument is</span></div>
<div class="line">    <span class="comment">// false) None of the dimensions &gt; 1 has lenght &gt; 1, so no batch mode is</span></div>
<div class="line">    <span class="comment">// activated.</span></div>
</div><!-- fragment --> <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input signal </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filter</td><td>is the signal that shall be flipped for the convolution operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">domain</td><td>specifies if the convolution should be performed in frequency os spatial domain </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the convolved array</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The default parameter of <code>domain</code>, <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>, heuristically switches between frequency and spatial domain. </dd></dl>

</div>
</div>
<a id="ga95ec82427447ca372f760341e6e4da7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga95ec82427447ca372f760341e6e4da7d">&#9670;&nbsp;</a></span>fftConvolve1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::fftConvolve1 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a>&#160;</td>
          <td class="paramname"><em>mode</em> = <code><a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for convolution on 1D signals using FFT. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input signal </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filter</td><td>is the signal that shall be used for the convolution operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the convolved array </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="adefines_8h_htm_ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48"><div class="ttname"><a href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a></div><div class="ttdeci">@ AF_CONV_DEFAULT</div><div class="ttdoc">Output of the convolution is the same size as input.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00305">defines.h:305</a></div></div>
<div class="ttc" id="agroup__signal__func__convolve1_htm_ga72a117436a82ed5fe593fe7072c01968"><div class="ttname"><a href="group__signal__func__convolve1.htm#ga72a117436a82ed5fe593fe7072c01968">af::convolve1</a></div><div class="ttdeci">AFAPI array convolve1(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution on one dimensional signals.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a53c4f9a4b5440458bffe355803514c90"><div class="ttname"><a href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">af::filter</a></div><div class="ttdeci">AFAPI array filter(const array &amp;image, const array &amp;kernel)</div><div class="ttdoc">Image Filtering.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
