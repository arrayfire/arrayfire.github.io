<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: machine_learning/geneticalgorithm.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('machine_learning_2geneticalgorithm_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">machine_learning/geneticalgorithm.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;climits&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;ctime&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">float</span> DefaultTopFittest = 0.5;</div>
<div class="line"> </div>
<div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> update(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; searchSpace, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleX,</div>
<div class="line">             <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleY, <span class="keyword">const</span> <span class="keywordtype">int</span> n) {</div>
<div class="line">    <span class="keywordflow">return</span> searchSpace(sampleY * n + sampleX);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> selectFittest(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleZ, <span class="keyword">const</span> <span class="keywordtype">int</span> nSamples,</div>
<div class="line">                    <span class="keyword">const</span> <span class="keywordtype">float</span> topFit = DefaultTopFittest) {</div>
<div class="line">    <span class="comment">// pick top fittest</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> indices, values;</div>
<div class="line">    <a name="a1"></a><a class="code" href="group__sort__func__sort.htm#ga8d1a62b3e41bfcdeef810a442869b42c">sort</a>(values, indices, sampleZ);</div>
<div class="line">    <span class="keywordtype">int</span> topFitElem = topFit * nSamples;</div>
<div class="line">    <span class="keywordtype">int</span> n          = indices.<a name="a2"></a><a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>();</div>
<div class="line">    <span class="keywordflow">return</span> (n &gt; topFitElem) ? indices(<a name="_a3"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(n - topFitElem, n - 1)) : indices;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> reproduce(<a class="code" href="classaf_1_1array.htm">array</a>&amp; searchSpace, <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleX, <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleY,</div>
<div class="line">               <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleZ, <span class="keyword">const</span> <span class="keywordtype">int</span> nSamples, <span class="keyword">const</span> <span class="keywordtype">int</span> n) {</div>
<div class="line">    <span class="comment">// Get fittest parents</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> selection = selectFittest(sampleZ, nSamples);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> parentsX  = sampleX(selection);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> parentsY  = sampleY(selection);</div>
<div class="line">    <span class="keywordtype">int</span> bits        = (int)<a name="a4"></a><a class="code" href="namespaceaf.htm#a7018268791fadde166753d079cf70cd3">log2</a>(n);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Divide selection in two</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> parentsX1 = parentsX.<a name="a5"></a><a class="code" href="group__array__mem__row.htm#gacb5178c8a2361d0405cc34775e20c3af">rows</a>(0, parentsX.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>() / 2 - 1);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> parentsX2 =</div>
<div class="line">        parentsX.<a class="code" href="group__array__mem__row.htm#gacb5178c8a2361d0405cc34775e20c3af">rows</a>(parentsX.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>() / 2, parentsX.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>() - 1);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> parentsY1 = parentsY.<a class="code" href="group__array__mem__row.htm#gacb5178c8a2361d0405cc34775e20c3af">rows</a>(0, parentsY.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>() / 2 - 1);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> parentsY2 =</div>
<div class="line">        parentsY.<a class="code" href="group__array__mem__row.htm#gacb5178c8a2361d0405cc34775e20c3af">rows</a>(parentsY.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>() / 2, parentsY.<a class="code" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a>() - 1);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Get crossover points (at which bit to crossover) and construct bit masks</span></div>
<div class="line">    <span class="comment">// from them</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> crossover = <a name="a6"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(nSamples / 4, <a name="a7"></a><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) % bits;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> lowermask = (1 &lt;&lt; crossover) - 1;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> uppermask = INT_MAX - lowermask;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create children as the cross between two parents</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> childrenX1 = (parentsX1 &amp; uppermask) + (parentsX2 &amp; lowermask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> childrenY1 = (parentsY1 &amp; uppermask) + (parentsY2 &amp; lowermask);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> childrenX2 = (parentsX2 &amp; uppermask) + (parentsX1 &amp; lowermask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> childrenY2 = (parentsY2 &amp; uppermask) + (parentsY1 &amp; lowermask);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Join two new sets</span></div>
<div class="line">    sampleX = <a name="a8"></a><a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(0, childrenX1, childrenX2);</div>
<div class="line">    sampleY = <a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(0, childrenY1, childrenY2);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create mutant children</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> mutantX = sampleX;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> mutantY = sampleY;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Flip a random bit to vary the gene pool</span></div>
<div class="line">    mutantX = mutantX ^ (1 &lt;&lt; (<a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(nSamples / 2, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) % bits));</div>
<div class="line">    mutantY = mutantY ^ (1 &lt;&lt; (<a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(nSamples / 2, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) % bits));</div>
<div class="line"> </div>
<div class="line">    sampleX = <a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(0, sampleX, mutantX);</div>
<div class="line">    sampleY = <a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(0, sampleY, mutantY);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Update the value of each sample with the new coordinates</span></div>
<div class="line">    sampleZ = update(searchSpace, sampleX, sampleY, n);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> initSamples(<a class="code" href="classaf_1_1array.htm">array</a>&amp; searchSpace, <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleX, <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleY,</div>
<div class="line">                 <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleZ, <span class="keyword">const</span> <span class="keywordtype">int</span> nSamples, <span class="keyword">const</span> <span class="keywordtype">int</span> n) {</div>
<div class="line">    <a name="a9"></a><a class="code" href="group__random__func__set__seed.htm#gacc0b010152a273ffc828ea4fc4436ff2">setSeed</a>(time(NULL));</div>
<div class="line">    sampleX = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(nSamples, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) % n;</div>
<div class="line">    sampleY = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(nSamples, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) % n;</div>
<div class="line">    sampleZ = update(searchSpace, sampleX, sampleY, n);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> init(<a class="code" href="classaf_1_1array.htm">array</a>&amp; searchSpace, <a class="code" href="classaf_1_1array.htm">array</a>&amp; searchSpaceXDisplay,</div>
<div class="line">          <a class="code" href="classaf_1_1array.htm">array</a>&amp; searchSpaceYDisplay, <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleX, <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleY,</div>
<div class="line">          <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleZ, <span class="keyword">const</span> <span class="keywordtype">int</span> nSamples, <span class="keyword">const</span> <span class="keywordtype">int</span> n) {</div>
<div class="line">    <span class="comment">// initialize space</span></div>
<div class="line">    searchSpace = <a name="a10"></a><a class="code" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a>(<a name="_a11"></a><a class="code" href="classaf_1_1dim4.htm">dim4</a>(n / 2, n / 2), 0) + <a class="code" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a>(<a class="code" href="classaf_1_1dim4.htm">dim4</a>(n / 2, n / 2), 1);</div>
<div class="line">    searchSpace = <a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(0, searchSpace, <a name="a12"></a><a class="code" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">flip</a>(searchSpace, 0));</div>
<div class="line">    searchSpace = <a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1, searchSpace, <a class="code" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">flip</a>(searchSpace, 1));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// initialize display data</span></div>
<div class="line">    searchSpaceXDisplay = <a name="a13"></a><a class="code" href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">iota</a>(<a class="code" href="classaf_1_1dim4.htm">dim4</a>(n, 1), <a class="code" href="classaf_1_1dim4.htm">dim4</a>(1, n));</div>
<div class="line">    searchSpaceYDisplay = <a class="code" href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">iota</a>(<a class="code" href="classaf_1_1dim4.htm">dim4</a>(1, n), <a class="code" href="classaf_1_1dim4.htm">dim4</a>(n, 1));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// initalize searchers</span></div>
<div class="line">    initSamples(searchSpace, sampleX, sampleY, sampleZ, nSamples, n);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> reproducePrint(<span class="keywordtype">float</span>&amp; currentMax, <a class="code" href="classaf_1_1array.htm">array</a>&amp; searchSpace, <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleX,</div>
<div class="line">                    <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleY, <a class="code" href="classaf_1_1array.htm">array</a>&amp; sampleZ, <span class="keyword">const</span> <span class="keywordtype">float</span> trueMax,</div>
<div class="line">                    <span class="keyword">const</span> <span class="keywordtype">int</span> nSamples, <span class="keyword">const</span> <span class="keywordtype">int</span> n) {</div>
<div class="line">    <span class="keywordflow">if</span> (currentMax &lt; trueMax * 0.99) {</div>
<div class="line">        <span class="keywordtype">float</span> maximum = max&lt;float&gt;(sampleZ);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> whereM  = <a name="a14"></a><a class="code" href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">where</a>(sampleZ == maximum);</div>
<div class="line">        <span class="keywordflow">if</span> (maximum &lt; trueMax * 0.99) {</div>
<div class="line">            printf(<span class="stringliteral">&quot;Current max at &quot;</span>);</div>
<div class="line">        } <span class="keywordflow">else</span> {</div>
<div class="line">            printf(<span class="stringliteral">&quot;\nMax found at &quot;</span>);</div>
<div class="line">        }</div>
<div class="line">        printf(<span class="stringliteral">&quot;(%d,%d): %f (trueMax %f)\n&quot;</span>,</div>
<div class="line">               sampleX(whereM).scalar&lt;unsigned int&gt;(),</div>
<div class="line">               sampleY(whereM).scalar&lt;unsigned int&gt;(), maximum, trueMax);</div>
<div class="line">        currentMax = maximum;</div>
<div class="line">        reproduce(searchSpace, sampleX, sampleY, sampleZ, nSamples, n);</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> geneticSearch(<span class="keywordtype">bool</span> console, <span class="keyword">const</span> <span class="keywordtype">int</span> nSamples, <span class="keyword">const</span> <span class="keywordtype">int</span> n) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> searchSpaceXDisplay = 0;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> searchSpaceYDisplay = 0;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> searchSpace;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> sampleX;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> sampleY;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> sampleZ;</div>
<div class="line"> </div>
<div class="line">    init(searchSpace, searchSpaceXDisplay, searchSpaceYDisplay, sampleX,</div>
<div class="line">         sampleY, sampleZ, nSamples, n);</div>
<div class="line">    <span class="keywordtype">float</span> trueMax = max&lt;float&gt;(searchSpace);</div>
<div class="line">    <span class="keywordtype">float</span> maximum = -trueMax;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line">        <a name="_a15"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> win(1600, 800, <span class="stringliteral">&quot;Arrayfire Genetic Algorithm Search Demo&quot;</span>);</div>
<div class="line">        win.grid(1, 2);</div>
<div class="line">        <span class="keywordflow">do</span> {</div>
<div class="line">            reproducePrint(maximum, searchSpace, sampleX, sampleY, sampleZ,</div>
<div class="line">                           trueMax, nSamples, n);</div>
<div class="line">            win(0, 0).setAxesTitles(<span class="stringliteral">&quot;IdX&quot;</span>, <span class="stringliteral">&quot;IdY&quot;</span>, <span class="stringliteral">&quot;Search Space&quot;</span>);</div>
<div class="line">            win(0, 1).setAxesTitles(<span class="stringliteral">&quot;IdX&quot;</span>, <span class="stringliteral">&quot;IdY&quot;</span>, <span class="stringliteral">&quot;Search Space&quot;</span>);</div>
<div class="line">            win(0, 0).surface(searchSpaceXDisplay, searchSpaceYDisplay,</div>
<div class="line">                              searchSpace);</div>
<div class="line">            win(0, 1).scatter(sampleX.<a name="a16"></a><a class="code" href="group__method__mat.htm#ga5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a name="a17"></a><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>), sampleY.<a class="code" href="group__method__mat.htm#ga5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>), sampleZ.<a class="code" href="group__method__mat.htm#ga5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>),</div>
<div class="line">                              <a name="a18"></a><a class="code" href="defines_8h.htm#ada5c8e0c0cea5e50765377715ff2c02bab98902cf89030856ac9d6f5b7cf35178">AF_MARKER_CIRCLE</a>);</div>
<div class="line">            win.show();</div>
<div class="line">        } <span class="keywordflow">while</span> (!win.close());</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        <span class="keywordflow">do</span> {</div>
<div class="line">            reproducePrint(maximum, searchSpace, sampleX, sampleY, sampleZ,</div>
<div class="line">                           trueMax, nSamples, n);</div>
<div class="line">        } <span class="keywordflow">while</span> (maximum &lt; trueMax * 0.99);</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv) {</div>
<div class="line">    <span class="keywordtype">bool</span> console       = <span class="keyword">false</span>;</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> n        = 32;</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> nSamples = 16;</div>
<div class="line">    <span class="keywordflow">if</span> (argc &gt; 2 || (argc == 2 &amp;&amp; strcmp(argv[1], <span class="stringliteral">&quot;-&quot;</span>))) {</div>
<div class="line">        printf(<span class="stringliteral">&quot;usage: %s [-]\n&quot;</span>, argv[0]);</div>
<div class="line">        <span class="keywordflow">return</span> -1;</div>
<div class="line">    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (argc == 2 &amp;&amp; argv[1][0] == <span class="charliteral">&#39;-&#39;</span>) {</div>
<div class="line">        console = <span class="keyword">true</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a name="a19"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        printf(<span class="stringliteral">&quot;** ArrayFire Genetic Algorithm Search Demo **\n\n&quot;</span>);</div>
<div class="line">        printf(</div>
<div class="line">            <span class="stringliteral">&quot;Search for trueMax in a search space where the objective function &quot;</span></div>
<div class="line">            <span class="stringliteral">&quot;is defined as :\n\n&quot;</span>);</div>
<div class="line">        printf(<span class="stringliteral">&quot;SS(x ,y) = min(x, n - (x + 1)) + min(y, n - (y + 1))\n\n&quot;</span>);</div>
<div class="line">        printf(<span class="stringliteral">&quot;(x, y) belongs to RxR; R = [0, n); n = %d\n\n&quot;</span>, n);</div>
<div class="line">        <span class="keywordflow">if</span> (!console) {</div>
<div class="line">            printf(<span class="stringliteral">&quot;The left figure shows the objective function.\n&quot;</span>);</div>
<div class="line">            printf(</div>
<div class="line">                <span class="stringliteral">&quot;The figure on the right shows current generation&#39;s parameters &quot;</span></div>
<div class="line">                <span class="stringliteral">&quot;and function values.\n\n&quot;</span>);</div>
<div class="line">        }</div>
<div class="line">        geneticSearch(console, nSamples, n);</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a20"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) { fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a21"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>()); }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00032">dim4.hpp:32</a></div></div>
<div class="ttc" id="agroup__data__func__range_htm_ga3789475e962b4c31e07c1c3bdab8498b"><div class="ttname"><a href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">af::range</a></div><div class="ttdeci">AFAPI array range(const dim4 &amp;dims, const int seq_dim=-1, const dtype ty=f32)</div></div>
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:45</a></div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__manip__func__join_htm_ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><div class="ttname"><a href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">af::join</a></div><div class="ttdeci">AFAPI array join(const int dim, const array &amp;first, const array &amp;second)</div><div class="ttdoc">Join 2 arrays along dim.</div></div>
<div class="ttc" id="adefines_8h_htm_ada5c8e0c0cea5e50765377715ff2c02bab98902cf89030856ac9d6f5b7cf35178"><div class="ttname"><a href="defines_8h.htm#ada5c8e0c0cea5e50765377715ff2c02bab98902cf89030856ac9d6f5b7cf35178">AF_MARKER_CIRCLE</a></div><div class="ttdeci">@ AF_MARKER_CIRCLE</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00471">defines.h:471</a></div></div>
<div class="ttc" id="agroup__sort__func__sort_htm_ga8d1a62b3e41bfcdeef810a442869b42c"><div class="ttname"><a href="group__sort__func__sort.htm#ga8d1a62b3e41bfcdeef810a442869b42c">af::sort</a></div><div class="ttdeci">AFAPI array sort(const array &amp;in, const unsigned dim=0, const bool isAscending=true)</div><div class="ttdoc">C++ Interface for sorting an array.</div></div>
<div class="ttc" id="agroup__manip__func__flip_htm_ga1dcebf2f17837b217ee9e880d028dd18"><div class="ttname"><a href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">af::flip</a></div><div class="ttdeci">AFAPI array flip(const array &amp;in, const unsigned dim)</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:14</a></div></div>
<div class="ttc" id="agroup__array__mem__row_htm_gacb5178c8a2361d0405cc34775e20c3af"><div class="ttname"><a href="group__array__mem__row.htm#gacb5178c8a2361d0405cc34775e20c3af">af::array::rows</a></div><div class="ttdeci">array::array_proxy rows(int first, int last)</div><div class="ttdoc">Returns a reference to sequence of rows.</div></div>
<div class="ttc" id="agroup__method__mat_htm_ga5822c6bdfbf4ff01f23c4417934b924c"><div class="ttname"><a href="group__method__mat.htm#ga5822c6bdfbf4ff01f23c4417934b924c">af::array::as</a></div><div class="ttdeci">const array as(dtype type) const</div><div class="ttdoc">Converts the array into another type.</div></div>
<div class="ttc" id="anamespaceaf_htm_a7018268791fadde166753d079cf70cd3"><div class="ttname"><a href="namespaceaf.htm#a7018268791fadde166753d079cf70cd3">af::log2</a></div><div class="ttdeci">AFAPI array log2(const array &amp;in)</div><div class="ttdoc">C++ Interface for logarithm base 2.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:28</a></div></div>
<div class="ttc" id="agroup__method__mat_htm_ga89f91cdf327a8b304589916db5bde3c2"><div class="ttname"><a href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">af::array::elements</a></div><div class="ttdeci">dim_t elements() const</div><div class="ttdoc">Get the total number of elements across all dimensions of the array.</div></div>
<div class="ttc" id="agroup__scan__func__where_htm_ga1e677067915477bc4aec1605d80d9b7b"><div class="ttname"><a href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">af::where</a></div><div class="ttdeci">AFAPI array where(const array &amp;in)</div><div class="ttdoc">C++ Interface for finding the locations of non-zero values in an array.</div></div>
<div class="ttc" id="agroup__data__func__iota_htm_ga8f7c55a54d1f93e55340f59b61662f29"><div class="ttname"><a href="group__data__func__iota.htm#ga8f7c55a54d1f93e55340f59b61662f29">af::iota</a></div><div class="ttdeci">AFAPI array iota(const dim4 &amp;dims, const dim4 &amp;tile_dims=dim4(1), const dtype ty=f32)</div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a></div><div class="ttdeci">@ u32</div><div class="ttdoc">32-bit unsigned integral values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00217">defines.h:217</a></div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="agroup__random__func__set__seed_htm_gacc0b010152a273ffc828ea4fc4436ff2"><div class="ttname"><a href="group__random__func__set__seed.htm#gacc0b010152a273ffc828ea4fc4436ff2">af::setSeed</a></div><div class="ttdeci">AFAPI void setSeed(const unsigned long long seed)</div><div class="ttdoc">Sets the seed of the default random number generator.</div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
