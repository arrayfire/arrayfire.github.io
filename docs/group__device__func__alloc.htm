<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: allocV2</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__device__func__alloc.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">allocV2<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a> &raquo; <a class="el" href="group__device__mat.htm">Managing devices in ArrayFire</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Allocate memory using the ArrayFire memory manager.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga230872718cdd26f96547aedbc71a4ab1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm#ga230872718cdd26f96547aedbc71a4ab1">af_alloc_device</a> (void **ptr, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> bytes)</td></tr>
<tr class="memdesc:ga230872718cdd26f96547aedbc71a4ab1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory using ArrayFire's memory manager.  <a href="group__device__func__alloc.htm#ga230872718cdd26f96547aedbc71a4ab1">More...</a><br /></td></tr>
<tr class="separator:ga230872718cdd26f96547aedbc71a4ab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa8868199b29eae4bac42cc22ff5891a9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm#gaa8868199b29eae4bac42cc22ff5891a9">af_alloc_device_v2</a> (void **ptr, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> bytes)</td></tr>
<tr class="memdesc:gaa8868199b29eae4bac42cc22ff5891a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory using ArrayFire's memory manager.  <a href="group__device__func__alloc.htm#gaa8868199b29eae4bac42cc22ff5891a9">More...</a><br /></td></tr>
<tr class="separator:gaa8868199b29eae4bac42cc22ff5891a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga714a6da5680ea41fbcb0769c24fe514b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm#ga714a6da5680ea41fbcb0769c24fe514b">alloc</a> (const size_t elements, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type)</td></tr>
<tr class="memdesc:ga714a6da5680ea41fbcb0769c24fe514b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory using ArrayFire's memory manager.  <a href="group__device__func__alloc.htm#ga714a6da5680ea41fbcb0769c24fe514b">More...</a><br /></td></tr>
<tr class="separator:ga714a6da5680ea41fbcb0769c24fe514b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0cb0857d16623f2cd1fdace44a6595ba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm#ga0cb0857d16623f2cd1fdace44a6595ba">allocV2</a> (const size_t bytes)</td></tr>
<tr class="memdesc:ga0cb0857d16623f2cd1fdace44a6595ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory using ArrayFire's memory manager.  <a href="group__device__func__alloc.htm#ga0cb0857d16623f2cd1fdace44a6595ba">More...</a><br /></td></tr>
<tr class="separator:ga0cb0857d16623f2cd1fdace44a6595ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a234b3dbe6cf6f9c6603a0f0c132b79"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga4a234b3dbe6cf6f9c6603a0f0c132b79"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm#ga4a234b3dbe6cf6f9c6603a0f0c132b79">alloc</a> (const size_t elements)</td></tr>
<tr class="memdesc:ga4a234b3dbe6cf6f9c6603a0f0c132b79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory using ArrayFire's memory manager.  <a href="group__device__func__alloc.htm#ga4a234b3dbe6cf6f9c6603a0f0c132b79">More...</a><br /></td></tr>
<tr class="separator:ga4a234b3dbe6cf6f9c6603a0f0c132b79"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Allocate memory using the ArrayFire memory manager. </p>
<p >This function will allocate memory on the device and return a pointer to it. The memory is allocated using ArrayFire's memory manager which will defer releasing memory to the driver and reuse the same memory for later operations.</p>
<p >This function will return different objects based on the type used. The interface returns a void pointer that needs to be cast to the backend appropriate memory type.</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">function   </th><th class="markdownTableHeadNone">CPU   </th><th class="markdownTableHeadNone">CUDA   </th><th class="markdownTableHeadNone">OpenCL    </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">af_alloc_device_v2   </td><td class="markdownTableBodyNone">T*   </td><td class="markdownTableBodyNone">T*   </td><td class="markdownTableBodyNone">cl_mem    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone"><a class="el" href="group__device__func__alloc.htm#ga0cb0857d16623f2cd1fdace44a6595ba" title="Allocates memory using ArrayFire&#39;s memory manager.">af::allocV2</a>   </td><td class="markdownTableBodyNone">T*   </td><td class="markdownTableBodyNone">T*   </td><td class="markdownTableBodyNone">cl_mem    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">af_alloc_device (deprecated)   </td><td class="markdownTableBodyNone">T*   </td><td class="markdownTableBodyNone">T*   </td><td class="markdownTableBodyNone">cl::Buffer*    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone"><a class="el" href="group__device__func__alloc.htm#ga714a6da5680ea41fbcb0769c24fe514b" title="Allocates memory using ArrayFire&#39;s memory manager.">af::alloc</a> (deprecated)   </td><td class="markdownTableBodyNone">T*   </td><td class="markdownTableBodyNone">T*   </td><td class="markdownTableBodyNone">cl::Buffer*   </td></tr>
</table>
<h2>CPU Backend </h2>
<div class="fragment"><div class="line"> </div>
<div class="line">        <span class="comment">// Allocate one float and cast to float*</span></div>
<div class="line">        <span class="keywordtype">void</span> *ptr   = <a class="code hl_function" href="group__device__func__alloc.htm#ga0cb0857d16623f2cd1fdace44a6595ba">af::allocV2</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">float</span>));</div>
<div class="line">        <span class="keywordtype">float</span> *dptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(ptr);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// This is the CPU backend so we can assign to the pointer</span></div>
<div class="line">        dptr[0] = 5.0f;</div>
<div class="line">        freeV2(ptr);</div>
<div class="line"> </div>
<div class="ttc" id="agroup__device__func__alloc_htm_ga0cb0857d16623f2cd1fdace44a6595ba"><div class="ttname"><a href="group__device__func__alloc.htm#ga0cb0857d16623f2cd1fdace44a6595ba">af::allocV2</a></div><div class="ttdeci">AFAPI void * allocV2(const size_t bytes)</div><div class="ttdoc">Allocates memory using ArrayFire's memory manager.</div></div>
</div><!-- fragment --><h2>CUDA Backend </h2>
<div class="fragment"><div class="line"> </div>
<div class="line">    void *ptr = allocV2(sizeof(float));</div>
<div class="line"> </div>
<div class="line">    float *dptr     = static_cast&lt;float *&gt;(ptr);</div>
<div class="line">    float host_data = 5.0f;</div>
<div class="line"> </div>
<div class="line">    cudaError_t error = cudaSuccess;</div>
<div class="line">    error = cudaMemcpy(dptr, &amp;host_data, sizeof(float), cudaMemcpyHostToDevice);</div>
<div class="line">    freeV2(ptr);</div>
<div class="line"> </div>
</div><!-- fragment --><h2>OpenCL Backend </h2>
<div class="fragment"><div class="line">    cl_command_queue queue;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#gab1701ef4f2b68429eb31c1e21c88d0bc">afcl_get_queue</a>(&amp;queue, <span class="keyword">true</span>);</div>
<div class="line">    cl_context context;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#gad42de383f405b3e38d6eb669c0cbe2e3">afcl_get_context</a>(&amp;context, <span class="keyword">true</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">void</span> *alloc_ptr = allocV2(<span class="keyword">sizeof</span>(<span class="keywordtype">float</span>));</div>
<div class="line">    cl_mem mem = <span class="keyword">static_cast&lt;</span>cl_mem<span class="keyword">&gt;</span>(alloc_ptr);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Map memory from the device to the System memory</span></div>
<div class="line">    cl_int map_err_code;</div>
<div class="line">    <span class="keywordtype">void</span> *mapped_ptr = clEnqueueMapBuffer(</div>
<div class="line">        queue, <span class="comment">// command queueu</span></div>
<div class="line">        mem, <span class="comment">// buffer</span></div>
<div class="line">        CL_TRUE, <span class="comment">// is blocking</span></div>
<div class="line">        CL_MAP_READ | CL_MAP_WRITE, <span class="comment">// map type</span></div>
<div class="line">        0, <span class="comment">// offset</span></div>
<div class="line">        <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>), <span class="comment">// size</span></div>
<div class="line">        0, <span class="comment">// num_events_in_wait_list</span></div>
<div class="line">        <span class="keyword">nullptr</span>, <span class="comment">// event_wait_list</span></div>
<div class="line">        <span class="keyword">nullptr</span>, <span class="comment">// event</span></div>
<div class="line">        &amp;map_err_code); <span class="comment">// error code</span></div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> *float_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(mapped_ptr);</div>
<div class="line">    float_ptr[0]     = 5.0f;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Unmap buffer after we are done using it</span></div>
<div class="line">    cl_int unmap_err_code =</div>
<div class="line">        clEnqueueUnmapMemObject(queue,      <span class="comment">// command queue</span></div>
<div class="line">                                mem,        <span class="comment">// buffer</span></div>
<div class="line">                                mapped_ptr, <span class="comment">// mapped pointer</span></div>
<div class="line">                                0,          <span class="comment">// num_events_in_wait_list</span></div>
<div class="line">                                <span class="keyword">nullptr</span>,    <span class="comment">// event_wait_list</span></div>
<div class="line">                                <span class="keyword">nullptr</span>);   <span class="comment">// event</span></div>
<div class="line">    freeV2(alloc_ptr);</div>
<div class="ttc" id="agroup__opencl__mat_htm_gab1701ef4f2b68429eb31c1e21c88d0bc"><div class="ttname"><a href="group__opencl__mat.htm#gab1701ef4f2b68429eb31c1e21c88d0bc">afcl_get_queue</a></div><div class="ttdeci">AFAPI af_err afcl_get_queue(cl_command_queue *queue, const bool retain)</div><div class="ttdoc">Get a handle to ArrayFire's OpenCL command queue.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_gad42de383f405b3e38d6eb669c0cbe2e3"><div class="ttname"><a href="group__opencl__mat.htm#gad42de383f405b3e38d6eb669c0cbe2e3">afcl_get_context</a></div><div class="ttdeci">AFAPI af_err afcl_get_context(cl_context *ctx, const bool retain)</div><div class="ttdoc">Get a handle to ArrayFire's OpenCL context.</div></div>
</div><!-- fragment --><hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="ga230872718cdd26f96547aedbc71a4ab1" name="ga230872718cdd26f96547aedbc71a4ab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga230872718cdd26f96547aedbc71a4ab1">&#9670;&#160;</a></span>af_alloc_device()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_alloc_device </td>
          <td>(</td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates memory using ArrayFire's memory manager. </p>
<p >This device memory returned by this function can only be freed using af_free_device</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ptr</td><td>Pointer to the device memory on the current device. This is a CUDA device pointer for the CUDA backend. A cl::Buffer pointer on the OpenCL backend and a C pointer for the CPU backend </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bytes</td><td>The number of bites to allocate on the device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>AF_SUCCESS if a pointer could be allocated. AF_ERR_NO_MEM if there is no memory </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000020">Deprecated:</a></b></dt><dd>Use af_alloc_device_v2 instead. af_alloc_device_v2 returns a cl_mem object instead of the cl::Buffer object for the OpenCL backend. Otherwise the functionallity is identical </dd></dl>

</div>
</div>
<a id="gaa8868199b29eae4bac42cc22ff5891a9" name="gaa8868199b29eae4bac42cc22ff5891a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa8868199b29eae4bac42cc22ff5891a9">&#9670;&#160;</a></span>af_alloc_device_v2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_alloc_device_v2 </td>
          <td>(</td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates memory using ArrayFire's memory manager. </p>
<p >This device memory returned by this function can only be freed using af_free_device_v2.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">ptr</td><td>Pointer to the device memory on the current device. This is a CUDA device pointer for the CUDA backend. A cl::Buffer pointer on the OpenCL backend and a C pointer for the CPU backend </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bytes</td><td>The number of bites to allocate on the device</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>AF_SUCCESS if a pointer could be allocated. AF_ERR_NO_MEM if there is no memory </dd></dl>

</div>
</div>
<a id="ga4a234b3dbe6cf6f9c6603a0f0c132b79" name="ga4a234b3dbe6cf6f9c6603a0f0c132b79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4a234b3dbe6cf6f9c6603a0f0c132b79">&#9670;&#160;</a></span>alloc() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T * alloc </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>elements</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates memory using ArrayFire's memory manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">elements</td><td>the number of elements to allocate </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the device memory on the current device. This is a CUDA device pointer for the CUDA backend. A cl::Buffer pointer from the cl2.hpp header on the OpenCL backend and a C pointer for the CPU backend</dd></dl>
<dl class="section note"><dt>Note</dt><dd>the size of the memory allocated is the number of <code>elements</code> * sizeof(type) </dd>
<dd>
The device memory returned by this function is only freed if <a class="el" href="group__device__func__free.htm#gab013c750b4b42af693e73f699a317bb7" title="Returns memory to ArrayFire&#39;s memory manager.">af::free()</a> is called explicitly </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000023">Deprecated:</a></b></dt><dd>Use allocV2 instead. allocV2 accepts number of bytes instead of number of elements and returns a cl_mem object instead of the cl::Buffer object for the OpenCL backend. Otherwise the functionallity is identical to <a class="el" href="group__device__func__alloc.htm#ga714a6da5680ea41fbcb0769c24fe514b" title="Allocates memory using ArrayFire&#39;s memory manager.">af::alloc</a>. </dd></dl>

</div>
</div>
<a id="ga714a6da5680ea41fbcb0769c24fe514b" name="ga714a6da5680ea41fbcb0769c24fe514b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga714a6da5680ea41fbcb0769c24fe514b">&#9670;&#160;</a></span>alloc() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void * alloc </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>elements</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates memory using ArrayFire's memory manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">elements</td><td>the number of elements to allocate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>is the type of the elements to allocate </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the device memory on the current device. This is a CUDA device pointer for the CUDA backend. A cl::Buffer pointer from the cl2.hpp header on the OpenCL backend and a C pointer for the CPU backend</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The device memory returned by this function is only freed if <a class="el" href="group__device__func__free.htm#gab013c750b4b42af693e73f699a317bb7" title="Returns memory to ArrayFire&#39;s memory manager.">af::free()</a> is called explicitly </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000022">Deprecated:</a></b></dt><dd>Use allocV2 instead. allocV2 accepts number of bytes instead of number of elements and returns a cl_mem object instead of the cl::Buffer object for the OpenCL backend. Otherwise the functionallity is identical to <a class="el" href="group__device__func__alloc.htm#ga714a6da5680ea41fbcb0769c24fe514b" title="Allocates memory using ArrayFire&#39;s memory manager.">af::alloc</a>. </dd></dl>

</div>
</div>
<a id="ga0cb0857d16623f2cd1fdace44a6595ba" name="ga0cb0857d16623f2cd1fdace44a6595ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0cb0857d16623f2cd1fdace44a6595ba">&#9670;&#160;</a></span>allocV2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void * allocV2 </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>bytes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocates memory using ArrayFire's memory manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bytes</td><td>the number of bytes to allocate </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the device memory on the current device. This is a CUDA device pointer for the CUDA backend. A cl_mem pointer on the OpenCL backend and a C pointer for the CPU backend</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The device memory returned by this function is only freed if <a class="el" href="group__device__func__free.htm#gadc2eee7c38b4c0321a13106ea4237879">af::freeV2()</a> is called explicitly </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:56 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
