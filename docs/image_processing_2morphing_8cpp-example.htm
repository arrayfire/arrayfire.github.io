<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: image_processing/morphing.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('image_processing_2morphing_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">image_processing/morphing.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> morphopen(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> <a name="a1"></a><a class="code" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a>(<a name="a2"></a><a class="code" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a>(img, mask), mask);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> morphclose(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a>(<a class="code" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a>(img, mask), mask);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> morphgrad(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> (<a class="code" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a>(img, mask) - <a class="code" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a>(img, mask));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> tophat(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> (img - morphopen(img, mask));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> bottomhat(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> (morphclose(img, mask) - img);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> left, <span class="keyword">const</span> <span class="keywordtype">int</span> right, <span class="keyword">const</span> <span class="keywordtype">int</span> top,</div>
<div class="line">             <span class="keyword">const</span> <span class="keywordtype">int</span> bottom, <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0) {</div>
<div class="line">    <span class="keywordflow">if</span> ((<span class="keywordtype">int</span>)img.<a name="a3"></a><a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0) &lt; (top + bottom))</div>
<div class="line">        printf(<span class="stringliteral">&quot;input does not have enough rows\n&quot;</span>);</div>
<div class="line">    <span class="keywordflow">if</span> ((<span class="keywordtype">int</span>)img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1) &lt; (left + right))</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;input does not have enough columns\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <a name="_a4"></a><a class="code" href="classaf_1_1dim4.htm">dim4</a> imgDims = img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>();</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> ret    = <a name="a5"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(value, imgDims);</div>
<div class="line">    ret(<a name="_a6"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(top, imgDims[0] - bottom), <a class="code" href="classaf_1_1seq.htm">seq</a>(left, imgDims[1] - right), <a name="a7"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>,</div>
<div class="line">        <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>)    = img(<a class="code" href="classaf_1_1seq.htm">seq</a>(top, imgDims[0] - bottom),</div>
<div class="line">                    <a class="code" href="classaf_1_1seq.htm">seq</a>(left, imgDims[1] - right), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> ret;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> w, <span class="keyword">const</span> <span class="keywordtype">int</span> h,</div>
<div class="line">             <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0) {</div>
<div class="line">    <span class="keywordflow">return</span> border(img, w, w, h, h, value);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> size, <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0) {</div>
<div class="line">    <span class="keywordflow">return</span> border(img, size, size, size, size, value);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> blur(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> mask = <a name="a8"></a><a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(3, 3)) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> blurred = <a name="a9"></a><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(), img.<a name="a10"></a><a class="code" href="group__method__mat.htm#ga122667ba97054fbee7b1ff885bb3bfe4">type</a>());</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (int)blurred.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2); i++)</div>
<div class="line">        blurred(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, i) = <a name="a11"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(img(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, i), mask);</div>
<div class="line">    <span class="keywordflow">return</span> blurred;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Demonstrates various image morphing manipulations.</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> morphing_demo() {</div>
<div class="line">    <a name="_a12"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd(1280, 720, <span class="stringliteral">&quot;Morphological Operations&quot;</span>);</div>
<div class="line">    <span class="comment">// load images</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> img_rgb = <a name="a13"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/man.jpg&quot;</span>, <span class="keyword">true</span>) /</div>
<div class="line">                    255.f;  <span class="comment">// 3 channel RGB       [0-1]</span></div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> mask = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, 5, 5);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> er = <a class="code" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a>(img_rgb, mask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> di = <a class="code" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a>(img_rgb, mask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> op = morphopen(img_rgb, mask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> cl = morphclose(img_rgb, mask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> gr = morphgrad(img_rgb, mask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> th = tophat(img_rgb, mask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> bh = bottomhat(img_rgb, mask);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> bl = blur(img_rgb, <a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(5, 5));</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> bp = border(img_rgb, 20, 30, 40, 50, 0.5);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> bo = border(img_rgb, 20);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">while</span> (!wnd.close()) {</div>
<div class="line">        wnd.grid(3, 4);</div>
<div class="line"> </div>
<div class="line">        wnd(0, 0).image(img_rgb, <span class="stringliteral">&quot;Input&quot;</span>);</div>
<div class="line">        wnd(1, 0).image(er, <span class="stringliteral">&quot;Erosion&quot;</span>);</div>
<div class="line">        wnd(2, 0).image(di, <span class="stringliteral">&quot;Dilation&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd(0, 1).image(op, <span class="stringliteral">&quot;Opening&quot;</span>);</div>
<div class="line">        wnd(1, 1).image(cl, <span class="stringliteral">&quot;Closing&quot;</span>);</div>
<div class="line">        wnd(2, 1).image(gr, <span class="stringliteral">&quot;Gradient&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd(0, 2).image(th, <span class="stringliteral">&quot;TopHat&quot;</span>);</div>
<div class="line">        wnd(1, 2).image(bh, <span class="stringliteral">&quot;BottomHat&quot;</span>);</div>
<div class="line">        wnd(2, 2).image(bl, <span class="stringliteral">&quot;Blur&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd(0, 3).image(bp, <span class="stringliteral">&quot;Border to Gray&quot;</span>);</div>
<div class="line">        wnd(1, 3).image(bo, <span class="stringliteral">&quot;Border to black&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd.show();</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a name="a14"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        <a name="a15"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        printf(<span class="stringliteral">&quot;** ArrayFire Image Morphing Demo **\n\n&quot;</span>);</div>
<div class="line">        morphing_demo();</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a16"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a17"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00032">dim4.hpp:32</a></div></div>
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:45</a></div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:14</a></div></div>
<div class="ttc" id="agroup__image__func__gauss_htm_gaa5de1866bc1bf50bf5fe3cb26d4e410d"><div class="ttname"><a href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">af::gaussianKernel</a></div><div class="ttdeci">AFAPI array gaussianKernel(const int rows, const int cols, const double sig_r=0, const double sig_c=0)</div><div class="ttdoc">C++ Interface for generating gausian kernels.</div></div>
<div class="ttc" id="agroup__method__mat_htm_ga10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:28</a></div></div>
<div class="ttc" id="agroup__image__func__erode_htm_ga67a7a6f8713e9df3ffdab5e859cddf69"><div class="ttname"><a href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">af::erode</a></div><div class="ttdeci">AFAPI array erode(const array &amp;in, const array &amp;mask)</div><div class="ttdoc">C++ Interface for image erosion (min filter)</div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="agroup__imageio__func__load_htm_ga8bcf01ffa60bc513856d98b8a63bb12a"><div class="ttname"><a href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">af::loadImage</a></div><div class="ttdeci">AFAPI array loadImage(const char *filename, const bool is_color=false)</div><div class="ttdoc">C++ Interface for loading an image.</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="agroup__image__func__dilate_htm_gaceef10b27d910ca3b95245fd1127bbab"><div class="ttname"><a href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">af::dilate</a></div><div class="ttdeci">AFAPI array dilate(const array &amp;in, const array &amp;mask)</div><div class="ttdoc">C++ Interface for image dilation (max filter)</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_gae79b64c8b0d6a06309e8b67bf89cf6c9"><div class="ttname"><a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="agroup__method__mat_htm_ga122667ba97054fbee7b1ff885bb3bfe4"><div class="ttname"><a href="group__method__mat.htm#ga122667ba97054fbee7b1ff885bb3bfe4">af::array::type</a></div><div class="ttdeci">dtype type() const</div><div class="ttdoc">Get array data type.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
