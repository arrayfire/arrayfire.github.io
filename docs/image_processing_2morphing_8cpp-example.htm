<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>image_processing/morphing.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('image_processing_2morphing_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">image_processing/morphing.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div><div class="line"></div><div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> morphopen(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> <a name="a1"></a><a class="code" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a>(<a name="a2"></a><a class="code" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a>(img, mask), mask);</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> morphclose(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> <a class="code" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a>(<a class="code" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a>(img, mask), mask);</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> morphgrad(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> (<a class="code" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a>(img, mask) - <a class="code" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a>(img, mask));</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> tophat(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> (img - morphopen(img, mask));</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> bottomhat(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; mask)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> (morphclose(img, mask) - img);</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> left, <span class="keyword">const</span> <span class="keywordtype">int</span> right,</div><div class="line">        <span class="keyword">const</span> <span class="keywordtype">int</span> top, <span class="keyword">const</span> <span class="keywordtype">int</span> bottom,</div><div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0)</div><div class="line">{</div><div class="line">    <span class="keywordflow">if</span>((<span class="keywordtype">int</span>)img.<a name="a3"></a><a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(0) &lt; (top + bottom))</div><div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;input does not have enough rows&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">if</span>((<span class="keywordtype">int</span>)img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(1) &lt; (left + right))</div><div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;input does not have enough columns&quot;</span> &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    <a name="_a4"></a><a class="code" href="classaf_1_1dim4.htm">dim4</a> imgDims = img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>();</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> ret = <a name="a5"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(value, imgDims);</div><div class="line">    ret(<a name="_a6"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(top, imgDims[0]-bottom), <a class="code" href="classaf_1_1seq.htm">seq</a>(left, imgDims[1]-right), <a name="a7"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) =</div><div class="line">        img(<a class="code" href="classaf_1_1seq.htm">seq</a>(top, imgDims[0]-bottom), <a class="code" href="classaf_1_1seq.htm">seq</a>(left, imgDims[1]-right), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> ret;</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> w, <span class="keyword">const</span> <span class="keywordtype">int</span> h,</div><div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> border(img, w, w, h, h, value);</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> size, <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> border(img, size, size, size, size, value);</div><div class="line">}</div><div class="line"></div><div class="line"><a class="code" href="classaf_1_1array.htm">array</a> blur(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> mask = <a name="a8"></a><a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(3,3))</div><div class="line">{</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> blurred = <a name="a9"></a><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(), img.<a name="a10"></a><a class="code" href="group__method__mat.htm#ga0844daa9b8cc7b7912e89a3d8ddf1a4b">type</a>());</div><div class="line">    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; (int)blurred.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(2); i++)</div><div class="line">        blurred(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, i) = <a name="a11"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(img(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, i), mask);</div><div class="line">    <span class="keywordflow">return</span> blurred;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// Demonstrates various image morphing manipulations.</span></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> morphing_demo()</div><div class="line">{</div><div class="line">    <a name="_a12"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd(1280, 720, <span class="stringliteral">&quot;Morphological Operations&quot;</span>);</div><div class="line">    <span class="comment">// load images</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> img_rgb = <a name="a13"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/man.jpg&quot;</span>, <span class="keyword">true</span>) / 255.f; <span class="comment">// 3 channel RGB       [0-1]</span></div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> mask = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, 5, 5);</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> er = <a class="code" href="group__image__func__erode.htm#ga67a7a6f8713e9df3ffdab5e859cddf69">erode</a>(img_rgb, mask);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> di = <a class="code" href="group__image__func__dilate.htm#gaceef10b27d910ca3b95245fd1127bbab">dilate</a>(img_rgb, mask);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> op = morphopen(img_rgb, mask);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> cl = morphclose(img_rgb, mask);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> gr = morphgrad(img_rgb, mask);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> th = tophat(img_rgb, mask);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> bh = bottomhat(img_rgb, mask);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> bl = blur(img_rgb, <a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(5,5));</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> bp = border(img_rgb, 20, 30, 40, 50, 0.5);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> bo = border(img_rgb, 20);</div><div class="line"></div><div class="line">    <span class="keywordflow">while</span> (!wnd.<a name="a14"></a><a class="code" href="group__gfx__func__window.htm#ga46143fd6de3be9ab9951f140d3ae8c2f">close</a>()) {</div><div class="line">        wnd.<a name="a15"></a><a class="code" href="group__gfx__func__window.htm#gaecba84f1690934bbc397e8ac7e141268">grid</a>(3, 4);</div><div class="line"></div><div class="line">        wnd(0, 0).<a name="a16"></a><a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(img_rgb, <span class="stringliteral">&quot;Input&quot;</span>          );</div><div class="line">        wnd(1, 0).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(er     , <span class="stringliteral">&quot;Erosion&quot;</span>        );</div><div class="line">        wnd(2, 0).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(di     , <span class="stringliteral">&quot;Dilation&quot;</span>       );</div><div class="line"></div><div class="line">        wnd(0, 1).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(op     , <span class="stringliteral">&quot;Opening&quot;</span>        );</div><div class="line">        wnd(1, 1).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(cl     , <span class="stringliteral">&quot;Closing&quot;</span>        );</div><div class="line">        wnd(2, 1).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(gr     , <span class="stringliteral">&quot;Gradient&quot;</span>       );</div><div class="line"></div><div class="line">        wnd(0, 2).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(th     , <span class="stringliteral">&quot;TopHat&quot;</span>         );</div><div class="line">        wnd(1, 2).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(bh     , <span class="stringliteral">&quot;BottomHat&quot;</span>      );</div><div class="line">        wnd(2, 2).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(bl     , <span class="stringliteral">&quot;Blur&quot;</span>           );</div><div class="line"></div><div class="line">        wnd(0, 3).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(bp     , <span class="stringliteral">&quot;Border to Gray&quot;</span> );</div><div class="line">        wnd(1, 3).<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(bo     , <span class="stringliteral">&quot;Border to black&quot;</span>);</div><div class="line"></div><div class="line">        wnd.<a name="a17"></a><a class="code" href="group__gfx__func__window.htm#ga4b148f40a95444d5669406b918ad2f52">show</a>();</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div><div class="line"></div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line">        <a name="a18"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div><div class="line">        <a name="a19"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div><div class="line">        printf(<span class="stringliteral">&quot;** ArrayFire Image Morphing Demo **\n\n&quot;</span>);</div><div class="line">        morphing_demo();</div><div class="line"></div><div class="line">    } <span class="keywordflow">catch</span> (<a name="_a20"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div><div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a21"></a><a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>());</div><div class="line">        <span class="keywordflow">throw</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
