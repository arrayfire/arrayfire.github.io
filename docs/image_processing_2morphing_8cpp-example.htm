<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: image_processing/morphing.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('image_processing_2morphing_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">image_processing/morphing.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><a id="_a0" name="_a0"></a><a class="code hl_class" href="classaf_1_1array.htm">array</a> morphopen(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> dilate(erode(img, mask), mask);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> morphclose(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> erode(dilate(img, mask), mask);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> morphgrad(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> (<a class="code hl_function" href="group__image__func__dilate.htm#ga0d435bca1e30a440267624056654e9eb">dilate</a>(img, mask) - <a class="code hl_function" href="group__image__func__erode.htm#gaa25e0009132b5aa83b6462b732cbf031">erode</a>(img, mask));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> tophat(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> (img - morphopen(img, mask));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> bottomhat(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; mask) {</div>
<div class="line">    <span class="keywordflow">return</span> (morphclose(img, mask) - img);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> left, <span class="keyword">const</span> <span class="keywordtype">int</span> right, <span class="keyword">const</span> <span class="keywordtype">int</span> top,</div>
<div class="line">             <span class="keyword">const</span> <span class="keywordtype">int</span> bottom, <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0) {</div>
<div class="line">    <span class="keywordflow">if</span> ((<span class="keywordtype">int</span>)img.<a id="a1" name="a1"></a><a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0) &lt; (top + bottom))</div>
<div class="line">        printf(<span class="stringliteral">&quot;input does not have enough rows\n&quot;</span>);</div>
<div class="line">    <span class="keywordflow">if</span> ((<span class="keywordtype">int</span>)img.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1) &lt; (left + right))</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;input does not have enough columns\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <a id="_a2" name="_a2"></a><a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a> imgDims = img.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>();</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> ret    = <a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(value, imgDims);</div>
<div class="line">    ret(<a id="_a3" name="_a3"></a><a class="code hl_class" href="classaf_1_1seq.htm">seq</a>(top, imgDims[0] - bottom), <a class="code hl_class" href="classaf_1_1seq.htm">seq</a>(left, imgDims[1] - right), span,</div>
<div class="line">        span)    = img(<a class="code hl_class" href="classaf_1_1seq.htm">seq</a>(top, imgDims[0] - bottom),</div>
<div class="line">                       <a class="code hl_class" href="classaf_1_1seq.htm">seq</a>(left, imgDims[1] - right), span, span);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> ret;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> w, <span class="keyword">const</span> <span class="keywordtype">int</span> h,</div>
<div class="line">             <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0) {</div>
<div class="line">    <span class="keywordflow">return</span> border(img, w, w, h, h, value);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> border(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> size, <span class="keyword">const</span> <span class="keywordtype">float</span> value = 0.0) {</div>
<div class="line">    <span class="keywordflow">return</span> border(img, size, size, size, size, value);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> blur(<span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> mask = <a class="code hl_function" href="group__image__func__gauss.htm#gacd7cc37308ee4d90a0071968073987e5">gaussianKernel</a>(3, 3)) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> blurred = <a class="code hl_class" href="classaf_1_1array.htm">array</a>(img.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(), img.<a id="a4" name="a4"></a><a class="code hl_function" href="classaf_1_1array.htm#a122667ba97054fbee7b1ff885bb3bfe4">type</a>());</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (int)blurred.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(2); i++)</div>
<div class="line">        blurred(span, span, i) = <a class="code hl_function" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">convolve</a>(img(span, span, i), mask);</div>
<div class="line">    <span class="keywordflow">return</span> blurred;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Demonstrates various image morphing manipulations.</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> morphing_demo() {</div>
<div class="line">    <a id="_a5" name="_a5"></a><a class="code hl_class" href="classaf_1_1Window.htm">af::Window</a> wnd(1280, 720, <span class="stringliteral">&quot;Morphological Operations&quot;</span>);</div>
<div class="line">    <span class="comment">// load images</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> img_rgb = <a class="code hl_function" href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/man.jpg&quot;</span>, <span class="keyword">true</span>) /</div>
<div class="line">                    255.f;  <span class="comment">// 3 channel RGB       [0-1]</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> mask = <a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(1, 5, 5);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> er = <a class="code hl_function" href="group__image__func__erode.htm#gaa25e0009132b5aa83b6462b732cbf031">erode</a>(img_rgb, mask);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> di = <a class="code hl_function" href="group__image__func__dilate.htm#ga0d435bca1e30a440267624056654e9eb">dilate</a>(img_rgb, mask);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> op = morphopen(img_rgb, mask);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> cl = morphclose(img_rgb, mask);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> gr = morphgrad(img_rgb, mask);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> th = tophat(img_rgb, mask);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> bh = bottomhat(img_rgb, mask);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> bl = blur(img_rgb, <a class="code hl_function" href="group__image__func__gauss.htm#gacd7cc37308ee4d90a0071968073987e5">gaussianKernel</a>(5, 5));</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> bp = border(img_rgb, 20, 30, 40, 50, 0.5);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> bo = border(img_rgb, 20);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">while</span> (!wnd.close()) {</div>
<div class="line">        wnd.grid(3, 4);</div>
<div class="line"> </div>
<div class="line">        wnd(0, 0).image(img_rgb, <span class="stringliteral">&quot;Input&quot;</span>);</div>
<div class="line">        wnd(1, 0).image(er, <span class="stringliteral">&quot;Erosion&quot;</span>);</div>
<div class="line">        wnd(2, 0).image(di, <span class="stringliteral">&quot;Dilation&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd(0, 1).image(op, <span class="stringliteral">&quot;Opening&quot;</span>);</div>
<div class="line">        wnd(1, 1).image(cl, <span class="stringliteral">&quot;Closing&quot;</span>);</div>
<div class="line">        wnd(2, 1).image(gr, <span class="stringliteral">&quot;Gradient&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd(0, 2).image(th, <span class="stringliteral">&quot;TopHat&quot;</span>);</div>
<div class="line">        wnd(1, 2).image(bh, <span class="stringliteral">&quot;BottomHat&quot;</span>);</div>
<div class="line">        wnd(2, 2).image(bl, <span class="stringliteral">&quot;Blur&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd(0, 3).image(bp, <span class="stringliteral">&quot;Border to Gray&quot;</span>);</div>
<div class="line">        wnd(1, 3).image(bo, <span class="stringliteral">&quot;Border to black&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd.show();</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a6" name="a6"></a><a class="code hl_function" href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a>();</div>
<div class="line">        <a id="a7" name="a7"></a><a class="code hl_function" href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">af::setDevice</a>(device);</div>
<div class="line">        printf(<span class="stringliteral">&quot;** ArrayFire Image Morphing Demo **\n\n&quot;</span>);</div>
<div class="line">        morphing_demo();</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a id="_a8" name="_a8"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a id="a9" name="a9"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a122667ba97054fbee7b1ff885bb3bfe4"><div class="ttname"><a href="classaf_1_1array.htm#a122667ba97054fbee7b1ff885bb3bfe4">af::array::type</a></div><div class="ttdeci">dtype type() const</div><div class="ttdoc">Get array data type.</div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00025">dim4.hpp:26</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:46</a></div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga0db7363474e85542f16e4bbcf57fe842"><div class="ttname"><a href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga3e22b6ff6e0940bb31577bea2863ca27"><div class="ttname"><a href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gad7c36828c21e7efc06a067bbc47d8d3b"><div class="ttname"><a href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__image__func__dilate_htm_ga0d435bca1e30a440267624056654e9eb"><div class="ttname"><a href="group__image__func__dilate.htm#ga0d435bca1e30a440267624056654e9eb">af::dilate</a></div><div class="ttdeci">AFAPI array dilate(const array &amp;in, const array &amp;mask)</div><div class="ttdoc">C++ Interface for image dilation (max filter)</div></div>
<div class="ttc" id="agroup__image__func__erode_htm_gaa25e0009132b5aa83b6462b732cbf031"><div class="ttname"><a href="group__image__func__erode.htm#gaa25e0009132b5aa83b6462b732cbf031">af::erode</a></div><div class="ttdeci">AFAPI array erode(const array &amp;in, const array &amp;mask)</div><div class="ttdoc">C++ Interface for image erosion (min filter)</div></div>
<div class="ttc" id="agroup__image__func__gauss_htm_gacd7cc37308ee4d90a0071968073987e5"><div class="ttname"><a href="group__image__func__gauss.htm#gacd7cc37308ee4d90a0071968073987e5">af::gaussianKernel</a></div><div class="ttdeci">AFAPI array gaussianKernel(const int rows, const int cols, const double sig_r=0, const double sig_c=0)</div><div class="ttdoc">C++ Interface for generating gausian kernels.</div></div>
<div class="ttc" id="agroup__imageio__func__load_htm_ga5a57870c43a81ec21fcdb7a11bef20d4"><div class="ttname"><a href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">af::loadImage</a></div><div class="ttdeci">AFAPI array loadImage(const char *filename, const bool is_color=false)</div><div class="ttdoc">C++ Interface for loading an image.</div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_ga801b0f4a09a017ccb196fac3c0dc417b"><div class="ttname"><a href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Tue Feb 14 2023 10:39:41 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
    </ul>
</div>
</body>
</html>
