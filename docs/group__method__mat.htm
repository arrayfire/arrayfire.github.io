<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>Methods of array class</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__method__mat.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Methods of array class<div class="ingroups"><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Get information about the array object.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga28967fdd5fff8001f4ef6181d9b186fb"><td class="memItemLeft" align="right" valign="top">const array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga28967fdd5fff8001f4ef6181d9b186fb">as</a> (dtype type) const </td></tr>
<tr class="memdesc:ga28967fdd5fff8001f4ef6181d9b186fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts the array into another type.  <a href="#ga28967fdd5fff8001f4ef6181d9b186fb">More...</a><br /></td></tr>
<tr class="separator:ga28967fdd5fff8001f4ef6181d9b186fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeadf9256b56215a58dc12f14d97312eb"><td class="memItemLeft" align="right" valign="top">array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a> () const </td></tr>
<tr class="memdesc:gaeadf9256b56215a58dc12f14d97312eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the transposed the array.  <a href="#gaeadf9256b56215a58dc12f14d97312eb">More...</a><br /></td></tr>
<tr class="separator:gaeadf9256b56215a58dc12f14d97312eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac9bbab3a8a569979cb4b6f055faa7eca"><td class="memItemLeft" align="right" valign="top">array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gac9bbab3a8a569979cb4b6f055faa7eca">H</a> () const </td></tr>
<tr class="memdesc:gac9bbab3a8a569979cb4b6f055faa7eca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the conjugate-transpose of the current array.  <a href="#gac9bbab3a8a569979cb4b6f055faa7eca">More...</a><br /></td></tr>
<tr class="separator:gac9bbab3a8a569979cb4b6f055faa7eca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f8e4d3732b5fd4b91ad51eec634f7a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga0f8e4d3732b5fd4b91ad51eec634f7a2">af_copy_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga0f8e4d3732b5fd4b91ad51eec634f7a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deep copy an array to another.  <a href="#ga0f8e4d3732b5fd4b91ad51eec634f7a2">More...</a><br /></td></tr>
<tr class="separator:ga0f8e4d3732b5fd4b91ad51eec634f7a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34d9070b94c3bac673df7f13b9c718a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga34d9070b94c3bac673df7f13b9c718a2">af_get_data_ref_count</a> (int *use_count, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga34d9070b94c3bac673df7f13b9c718a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the use count of <code>af_array</code>  <a href="#ga34d9070b94c3bac673df7f13b9c718a2">More...</a><br /></td></tr>
<tr class="separator:ga34d9070b94c3bac673df7f13b9c718a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafef13633d184acc726ad9daca7a7bc99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gafef13633d184acc726ad9daca7a7bc99">af_write_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr, const void *data, const size_t bytes, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a> src)</td></tr>
<tr class="memdesc:gafef13633d184acc726ad9daca7a7bc99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy data from a C pointer (host/device) to an existing array.  <a href="#gafef13633d184acc726ad9daca7a7bc99">More...</a><br /></td></tr>
<tr class="separator:gafef13633d184acc726ad9daca7a7bc99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6040dc6f0eb127402fbf62c1165f0b9d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6040dc6f0eb127402fbf62c1165f0b9d">af_get_data_ptr</a> (void *data, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga6040dc6f0eb127402fbf62c1165f0b9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy data from an af_array to a C pointer.  <a href="#ga6040dc6f0eb127402fbf62c1165f0b9d">More...</a><br /></td></tr>
<tr class="separator:ga6040dc6f0eb127402fbf62c1165f0b9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad6c58648ed0db398e170dabf045e8309"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gad6c58648ed0db398e170dabf045e8309">af_release_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gad6c58648ed0db398e170dabf045e8309"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce the reference count of the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>.  <a href="#gad6c58648ed0db398e170dabf045e8309">More...</a><br /></td></tr>
<tr class="separator:gad6c58648ed0db398e170dabf045e8309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ed45b3f881c0f6c80c5cf2af886dbab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga7ed45b3f881c0f6c80c5cf2af886dbab">af_retain_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga7ed45b3f881c0f6c80c5cf2af886dbab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increments an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> reference count.  <a href="#ga7ed45b3f881c0f6c80c5cf2af886dbab">More...</a><br /></td></tr>
<tr class="separator:ga7ed45b3f881c0f6c80c5cf2af886dbab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9de141bfc5936741d2496f59c1bac777"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga9de141bfc5936741d2496f59c1bac777">af_eval</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga9de141bfc5936741d2496f59c1bac777"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate any expressions in the Array.  <a href="#ga9de141bfc5936741d2496f59c1bac777">More...</a><br /></td></tr>
<tr class="separator:ga9de141bfc5936741d2496f59c1bac777"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6845bbe4385a60a606b88f8130252c1f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6845bbe4385a60a606b88f8130252c1f">af_get_elements</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *elems, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga6845bbe4385a60a606b88f8130252c1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of elements in an array.  <a href="#ga6845bbe4385a60a606b88f8130252c1f">More...</a><br /></td></tr>
<tr class="separator:ga6845bbe4385a60a606b88f8130252c1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0dda6898e1c0d9a43efb56cd6a988c9b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga0dda6898e1c0d9a43efb56cd6a988c9b">af_get_type</a> (<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> *type, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga0dda6898e1c0d9a43efb56cd6a988c9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the type of an array.  <a href="#ga0dda6898e1c0d9a43efb56cd6a988c9b">More...</a><br /></td></tr>
<tr class="separator:ga0dda6898e1c0d9a43efb56cd6a988c9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b90da50a532837d9763e301b2267348"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga8b90da50a532837d9763e301b2267348">af_get_dims</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d2, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d3, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga8b90da50a532837d9763e301b2267348"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the dimseions of an array.  <a href="#ga8b90da50a532837d9763e301b2267348">More...</a><br /></td></tr>
<tr class="separator:ga8b90da50a532837d9763e301b2267348"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefa019d932ff58c2a829ce87edddd2a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaefa019d932ff58c2a829ce87edddd2a8">af_get_numdims</a> (unsigned *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gaefa019d932ff58c2a829ce87edddd2a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of dimensions of an array.  <a href="#gaefa019d932ff58c2a829ce87edddd2a8">More...</a><br /></td></tr>
<tr class="separator:gaefa019d932ff58c2a829ce87edddd2a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19c749e95314e1c77d816ad9952fb680"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga19c749e95314e1c77d816ad9952fb680">af_is_empty</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga19c749e95314e1c77d816ad9952fb680"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is empty.  <a href="#ga19c749e95314e1c77d816ad9952fb680">More...</a><br /></td></tr>
<tr class="separator:ga19c749e95314e1c77d816ad9952fb680"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae3dfa6dc1c03c5efe7482bfc9c41266a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gae3dfa6dc1c03c5efe7482bfc9c41266a">af_is_scalar</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gae3dfa6dc1c03c5efe7482bfc9c41266a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is scalar, ie.  <a href="#gae3dfa6dc1c03c5efe7482bfc9c41266a">More...</a><br /></td></tr>
<tr class="separator:gae3dfa6dc1c03c5efe7482bfc9c41266a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabbe3249a355293daabd5907d7df67c6a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gabbe3249a355293daabd5907d7df67c6a">af_is_row</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gabbe3249a355293daabd5907d7df67c6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is row vector.  <a href="#gabbe3249a355293daabd5907d7df67c6a">More...</a><br /></td></tr>
<tr class="separator:gabbe3249a355293daabd5907d7df67c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga184b5a5feb146f2a2a44fed36b35e435"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga184b5a5feb146f2a2a44fed36b35e435">af_is_column</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga184b5a5feb146f2a2a44fed36b35e435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is a column vector.  <a href="#ga184b5a5feb146f2a2a44fed36b35e435">More...</a><br /></td></tr>
<tr class="separator:ga184b5a5feb146f2a2a44fed36b35e435"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00a23c7dd281fdcdec10b8395e611154"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga00a23c7dd281fdcdec10b8395e611154">af_is_vector</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga00a23c7dd281fdcdec10b8395e611154"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is a vector.  <a href="#ga00a23c7dd281fdcdec10b8395e611154">More...</a><br /></td></tr>
<tr class="separator:ga00a23c7dd281fdcdec10b8395e611154"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd8a5edf6467340d0b40341be9f677e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gacd8a5edf6467340d0b40341be9f677e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is complex type.  <a href="#gacd8a5edf6467340d0b40341be9f677e9">More...</a><br /></td></tr>
<tr class="separator:gacd8a5edf6467340d0b40341be9f677e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafaa0c1597ef34a7320ed589f80fdce10"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gafaa0c1597ef34a7320ed589f80fdce10">af_is_real</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gafaa0c1597ef34a7320ed589f80fdce10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is real type.  <a href="#gafaa0c1597ef34a7320ed589f80fdce10">More...</a><br /></td></tr>
<tr class="separator:gafaa0c1597ef34a7320ed589f80fdce10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb499641bfc02dfa56a75be9ba237e3f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gadb499641bfc02dfa56a75be9ba237e3f">af_is_double</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gadb499641bfc02dfa56a75be9ba237e3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is double precision type.  <a href="#gadb499641bfc02dfa56a75be9ba237e3f">More...</a><br /></td></tr>
<tr class="separator:gadb499641bfc02dfa56a75be9ba237e3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1bd444b2c78a4f4731d4523a90200175"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga1bd444b2c78a4f4731d4523a90200175">af_is_single</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga1bd444b2c78a4f4731d4523a90200175"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is single precision type.  <a href="#ga1bd444b2c78a4f4731d4523a90200175">More...</a><br /></td></tr>
<tr class="separator:ga1bd444b2c78a4f4731d4523a90200175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f2b3e689d07f5135dfc1ee6cf9825a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6f2b3e689d07f5135dfc1ee6cf9825a3">af_is_realfloating</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga6f2b3e689d07f5135dfc1ee6cf9825a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is real floating point type.  <a href="#ga6f2b3e689d07f5135dfc1ee6cf9825a3">More...</a><br /></td></tr>
<tr class="separator:ga6f2b3e689d07f5135dfc1ee6cf9825a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5eb0d277412a2beeffe7e7a9f89b98ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga5eb0d277412a2beeffe7e7a9f89b98ea">af_is_floating</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga5eb0d277412a2beeffe7e7a9f89b98ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is floating precision type.  <a href="#ga5eb0d277412a2beeffe7e7a9f89b98ea">More...</a><br /></td></tr>
<tr class="separator:ga5eb0d277412a2beeffe7e7a9f89b98ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga768e8326a6aaa81c6543949afc781af2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga768e8326a6aaa81c6543949afc781af2">af_is_integer</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga768e8326a6aaa81c6543949afc781af2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is integer type.  <a href="#ga768e8326a6aaa81c6543949afc781af2">More...</a><br /></td></tr>
<tr class="separator:ga768e8326a6aaa81c6543949afc781af2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafae10fc1378b72404120572e21ff5d27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gafae10fc1378b72404120572e21ff5d27">af_is_bool</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gafae10fc1378b72404120572e21ff5d27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is bool type.  <a href="#gafae10fc1378b72404120572e21ff5d27">More...</a><br /></td></tr>
<tr class="separator:gafae10fc1378b72404120572e21ff5d27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga121545fb637db409a523862cdb8ffe39"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a> (array &amp;a)</td></tr>
<tr class="memdesc:ga121545fb637db409a523862cdb8ffe39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate an expression (nonblocking).  <a href="#ga121545fb637db409a523862cdb8ffe39">More...</a><br /></td></tr>
<tr class="separator:ga121545fb637db409a523862cdb8ffe39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a17a89fab2c26be8e911c4628c4c54c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6a17a89fab2c26be8e911c4628c4c54c">eval</a> (array &amp;a, array &amp;b)</td></tr>
<tr class="separator:ga6a17a89fab2c26be8e911c4628c4c54c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga932cc56a65acbe91ff2cea42e2f43bb6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga932cc56a65acbe91ff2cea42e2f43bb6">eval</a> (array &amp;a, array &amp;b, array &amp;c)</td></tr>
<tr class="separator:ga932cc56a65acbe91ff2cea42e2f43bb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8d75de296c6378ef17825a3776db93e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga8d75de296c6378ef17825a3776db93e4">eval</a> (array &amp;a, array &amp;b, array &amp;c, array &amp;d)</td></tr>
<tr class="separator:ga8d75de296c6378ef17825a3776db93e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad2cfee88b0b16efb2e4c3fe5a01187ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gad2cfee88b0b16efb2e4c3fe5a01187ac">eval</a> (array &amp;a, array &amp;b, array &amp;c, array &amp;d, array &amp;e)</td></tr>
<tr class="separator:gad2cfee88b0b16efb2e4c3fe5a01187ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b49360b87556fcc3d256c864e72e50b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a> (array &amp;a, array &amp;b, array &amp;c, array &amp;d, array &amp;e, array &amp;f)</td></tr>
<tr class="separator:ga0b49360b87556fcc3d256c864e72e50b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac57222501ff47f5d795503ac47c87e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaac57222501ff47f5d795503ac47c87e3">get</a> ()</td></tr>
<tr class="memdesc:gaac57222501ff47f5d795503ac47c87e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle  <a href="#gaac57222501ff47f5d795503ac47c87e3">More...</a><br /></td></tr>
<tr class="separator:gaac57222501ff47f5d795503ac47c87e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga175ec1df8cbb7ff785a6ae104ce950f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga175ec1df8cbb7ff785a6ae104ce950f8">get</a> () const </td></tr>
<tr class="memdesc:ga175ec1df8cbb7ff785a6ae104ce950f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle  <a href="#ga175ec1df8cbb7ff785a6ae104ce950f8">More...</a><br /></td></tr>
<tr class="separator:ga175ec1df8cbb7ff785a6ae104ce950f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf343b49d35978f4b617a65b83a7affb4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaf343b49d35978f4b617a65b83a7affb4">elements</a> () const </td></tr>
<tr class="memdesc:gaf343b49d35978f4b617a65b83a7affb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the number of elements in array  <a href="#gaf343b49d35978f4b617a65b83a7affb4">More...</a><br /></td></tr>
<tr class="separator:gaf343b49d35978f4b617a65b83a7affb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad65cdb27b05827c55d4e2f59f6bbf2b4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gad65cdb27b05827c55d4e2f59f6bbf2b4"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gad65cdb27b05827c55d4e2f59f6bbf2b4">host</a> () const </td></tr>
<tr class="memdesc:gad65cdb27b05827c55d4e2f59f6bbf2b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy array data to host and return host pointer.  <a href="#gad65cdb27b05827c55d4e2f59f6bbf2b4">More...</a><br /></td></tr>
<tr class="separator:gad65cdb27b05827c55d4e2f59f6bbf2b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga67d1d90fb9f4423a68333104230d930d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga67d1d90fb9f4423a68333104230d930d">host</a> (void *ptr) const </td></tr>
<tr class="memdesc:ga67d1d90fb9f4423a68333104230d930d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy array data to existing host pointer.  <a href="#ga67d1d90fb9f4423a68333104230d930d">More...</a><br /></td></tr>
<tr class="separator:ga67d1d90fb9f4423a68333104230d930d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa70b253da2d32394c521a815f7627116"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaa70b253da2d32394c521a815f7627116"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaa70b253da2d32394c521a815f7627116">write</a> (const T *ptr, const size_t bytes, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:gaa70b253da2d32394c521a815f7627116"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform deep copy from host/device pointer to an existing array.  <a href="#gaa70b253da2d32394c521a815f7627116">More...</a><br /></td></tr>
<tr class="separator:gaa70b253da2d32394c521a815f7627116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0844daa9b8cc7b7912e89a3d8ddf1a4b"><td class="memItemLeft" align="right" valign="top">dtype&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga0844daa9b8cc7b7912e89a3d8ddf1a4b">type</a> () const </td></tr>
<tr class="memdesc:ga0844daa9b8cc7b7912e89a3d8ddf1a4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get array data type.  <a href="#ga0844daa9b8cc7b7912e89a3d8ddf1a4b">More...</a><br /></td></tr>
<tr class="separator:ga0844daa9b8cc7b7912e89a3d8ddf1a4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf056729e3ff924f5c1d41e0a8db3ce1b"><td class="memItemLeft" align="right" valign="top">dim4&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a> () const </td></tr>
<tr class="memdesc:gaf056729e3ff924f5c1d41e0a8db3ce1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get dimensions of the array.  <a href="#gaf056729e3ff924f5c1d41e0a8db3ce1b">More...</a><br /></td></tr>
<tr class="separator:gaf056729e3ff924f5c1d41e0a8db3ce1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga30abc2404f8202bb6ac736282a9d18b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga30abc2404f8202bb6ac736282a9d18b7">dims</a> (unsigned dim) const </td></tr>
<tr class="memdesc:ga30abc2404f8202bb6ac736282a9d18b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get dimensions of the array.  <a href="#ga30abc2404f8202bb6ac736282a9d18b7">More...</a><br /></td></tr>
<tr class="separator:ga30abc2404f8202bb6ac736282a9d18b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga269a19b0320a93f19314d4903045b067"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga269a19b0320a93f19314d4903045b067">numdims</a> () const </td></tr>
<tr class="memdesc:ga269a19b0320a93f19314d4903045b067"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of dimensions of the array.  <a href="#ga269a19b0320a93f19314d4903045b067">More...</a><br /></td></tr>
<tr class="separator:ga269a19b0320a93f19314d4903045b067"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9a95268261b397cae87b47a59b7e3cb"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gae9a95268261b397cae87b47a59b7e3cb">bytes</a> () const </td></tr>
<tr class="memdesc:gae9a95268261b397cae87b47a59b7e3cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the array in bytes.  <a href="#gae9a95268261b397cae87b47a59b7e3cb">More...</a><br /></td></tr>
<tr class="separator:gae9a95268261b397cae87b47a59b7e3cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad79c786c646fe05a18e208eabf4dae94"><td class="memItemLeft" align="right" valign="top">array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gad79c786c646fe05a18e208eabf4dae94">copy</a> () const </td></tr>
<tr class="memdesc:gad79c786c646fe05a18e208eabf4dae94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform deep copy of the array.  <a href="#gad79c786c646fe05a18e208eabf4dae94">More...</a><br /></td></tr>
<tr class="separator:gad79c786c646fe05a18e208eabf4dae94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe874940ae5ed8c40a8f99913982e657"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gabe874940ae5ed8c40a8f99913982e657">isempty</a> () const </td></tr>
<tr class="memdesc:gabe874940ae5ed8c40a8f99913982e657"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true of the array is empty.  <a href="#gabe874940ae5ed8c40a8f99913982e657">More...</a><br /></td></tr>
<tr class="separator:gabe874940ae5ed8c40a8f99913982e657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga016bc4f85b1d25196b855dda9f1ad2ea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga016bc4f85b1d25196b855dda9f1ad2ea">isscalar</a> () const </td></tr>
<tr class="memdesc:ga016bc4f85b1d25196b855dda9f1ad2ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true of the array contains only one value.  <a href="#ga016bc4f85b1d25196b855dda9f1ad2ea">More...</a><br /></td></tr>
<tr class="separator:ga016bc4f85b1d25196b855dda9f1ad2ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga650bf1b218899dbd93ad801e98a30c74"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga650bf1b218899dbd93ad801e98a30c74">isvector</a> () const </td></tr>
<tr class="memdesc:ga650bf1b218899dbd93ad801e98a30c74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only one of the array dimensions has more than one element.  <a href="#ga650bf1b218899dbd93ad801e98a30c74">More...</a><br /></td></tr>
<tr class="separator:ga650bf1b218899dbd93ad801e98a30c74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c4552fcef8cab444e9cfe8f737b1c44"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga3c4552fcef8cab444e9cfe8f737b1c44">isrow</a> () const </td></tr>
<tr class="memdesc:ga3c4552fcef8cab444e9cfe8f737b1c44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only the second dimension has more than one element.  <a href="#ga3c4552fcef8cab444e9cfe8f737b1c44">More...</a><br /></td></tr>
<tr class="separator:ga3c4552fcef8cab444e9cfe8f737b1c44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c04511e60f8b2e47ee04a750ace6173"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga4c04511e60f8b2e47ee04a750ace6173">iscolumn</a> () const </td></tr>
<tr class="memdesc:ga4c04511e60f8b2e47ee04a750ace6173"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only the first dimension has more than one element.  <a href="#ga4c04511e60f8b2e47ee04a750ace6173">More...</a><br /></td></tr>
<tr class="separator:ga4c04511e60f8b2e47ee04a750ace6173"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabd6245f1b5b8a30850b6457e4ef1e4a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaabd6245f1b5b8a30850b6457e4ef1e4a">iscomplex</a> () const </td></tr>
<tr class="memdesc:gaabd6245f1b5b8a30850b6457e4ef1e4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#gaabd6245f1b5b8a30850b6457e4ef1e4a">More...</a><br /></td></tr>
<tr class="separator:gaabd6245f1b5b8a30850b6457e4ef1e4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabddfbe553d7a512bdcfb064f1ca65c79"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gabddfbe553d7a512bdcfb064f1ca65c79">isreal</a> () const </td></tr>
<tr class="memdesc:gabddfbe553d7a512bdcfb064f1ca65c79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#gabddfbe553d7a512bdcfb064f1ca65c79">More...</a><br /></td></tr>
<tr class="separator:gabddfbe553d7a512bdcfb064f1ca65c79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2be2b7ba9df7ddee4ddee0352c72b421"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga2be2b7ba9df7ddee4ddee0352c72b421">isdouble</a> () const </td></tr>
<tr class="memdesc:ga2be2b7ba9df7ddee4ddee0352c72b421"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#ga2be2b7ba9df7ddee4ddee0352c72b421">More...</a><br /></td></tr>
<tr class="separator:ga2be2b7ba9df7ddee4ddee0352c72b421"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga18eb5420d9a638a06b377e48a14d917f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga18eb5420d9a638a06b377e48a14d917f">issingle</a> () const </td></tr>
<tr class="memdesc:ga18eb5420d9a638a06b377e48a14d917f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#ga18eb5420d9a638a06b377e48a14d917f">More...</a><br /></td></tr>
<tr class="separator:ga18eb5420d9a638a06b377e48a14d917f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga40b78a473238c94c3471ab50cba094f3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga40b78a473238c94c3471ab50cba094f3">isrealfloating</a> () const </td></tr>
<tr class="memdesc:ga40b78a473238c94c3471ab50cba094f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>.  <a href="#ga40b78a473238c94c3471ab50cba094f3">More...</a><br /></td></tr>
<tr class="separator:ga40b78a473238c94c3471ab50cba094f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6482e0a17f961340b609692bb20ba829"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6482e0a17f961340b609692bb20ba829">isfloating</a> () const </td></tr>
<tr class="memdesc:ga6482e0a17f961340b609692bb20ba829"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#ga6482e0a17f961340b609692bb20ba829">More...</a><br /></td></tr>
<tr class="separator:ga6482e0a17f961340b609692bb20ba829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga754b616f9a6e4ebb333c18fbbbb848e6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga754b616f9a6e4ebb333c18fbbbb848e6">isinteger</a> () const </td></tr>
<tr class="memdesc:ga754b616f9a6e4ebb333c18fbbbb848e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0">u8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1">s32</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a2fb596fb851c71689624894525c069e4">s64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1b18b7885e1360b6696142284b4b4928">u64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a98085990ff18bf438d3c839ea4c80bb4">s16</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5ae817c8a85914a5f150f2739df6b76c57">u16</a>.  <a href="#ga754b616f9a6e4ebb333c18fbbbb848e6">More...</a><br /></td></tr>
<tr class="separator:ga754b616f9a6e4ebb333c18fbbbb848e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga498d5a466c883cf22ae069a100c8d7c7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga498d5a466c883cf22ae069a100c8d7c7">isbool</a> () const </td></tr>
<tr class="memdesc:ga498d5a466c883cf22ae069a100c8d7c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>.  <a href="#ga498d5a466c883cf22ae069a100c8d7c7">More...</a><br /></td></tr>
<tr class="separator:ga498d5a466c883cf22ae069a100c8d7c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01195c59132e1b0af7655075ba770581"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga01195c59132e1b0af7655075ba770581">eval</a> () const </td></tr>
<tr class="memdesc:ga01195c59132e1b0af7655075ba770581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate any JIT expressions to generate data for the array.  <a href="#ga01195c59132e1b0af7655075ba770581">More...</a><br /></td></tr>
<tr class="separator:ga01195c59132e1b0af7655075ba770581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5400245c298ffb4d790d846fa97f0e6a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga5400245c298ffb4d790d846fa97f0e6a"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga5400245c298ffb4d790d846fa97f0e6a">scalar</a> () const </td></tr>
<tr class="memdesc:ga5400245c298ffb4d790d846fa97f0e6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the first element of the array as a scalar.  <a href="#ga5400245c298ffb4d790d846fa97f0e6a">More...</a><br /></td></tr>
<tr class="separator:ga5400245c298ffb4d790d846fa97f0e6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Get information about the array object. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga0f8e4d3732b5fd4b91ad51eec634f7a2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_copy_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deep copy an array to another. </p>

</div>
</div>
<a class="anchor" id="ga9de141bfc5936741d2496f59c1bac777"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluate any expressions in the Array. </p>

</div>
</div>
<a class="anchor" id="ga6040dc6f0eb127402fbf62c1165f0b9d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_data_ptr </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy data from an af_array to a C pointer. </p>
<p>Needs to used in conjunction with the two functions above </p>

</div>
</div>
<a class="anchor" id="ga34d9070b94c3bac673df7f13b9c718a2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_data_ref_count </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>use_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the use count of <code>af_array</code> </p>

</div>
</div>
<a class="anchor" id="ga8b90da50a532837d9763e301b2267348"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_dims </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>d0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>d1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>d2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>d3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the dimseions of an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">d0</td><td>is the output that contains the size of first dimension of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">d1</td><td>is the output that contains the size of second dimension of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">d2</td><td>is the output that contains the size of third dimension of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">d3</td><td>is the output that contains the size of fourth dimension of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga6845bbe4385a60a606b88f8130252c1f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_elements </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>elems</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the number of elements in an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">elems</td><td>is the output that contains number of elements of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="gaefa019d932ff58c2a829ce87edddd2a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_numdims </td>
          <td>(</td>
          <td class="paramtype">unsigned *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the number of dimensions of an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is the output that contains the number of dims of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga0dda6898e1c0d9a43efb56cd6a988c9b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> *&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the type of an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">type</td><td>is the output that contains the type of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="gafae10fc1378b72404120572e21ff5d27"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_bool </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is bool type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a> type, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga184b5a5feb146f2a2a44fed36b35e435"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_column </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is a column vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr has dims [x 1 1 1], false otherwise </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="gacd8a5edf6467340d0b40341be9f677e9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_complex </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is complex type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="gadb499641bfc02dfa56a75be9ba237e3f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_double </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is double precision type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga19c749e95314e1c77d816ad9952fb680"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_empty </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is empty. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if elements of arr is 0, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga5eb0d277412a2beeffe7e7a9f89b98ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_floating </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is floating precision type. </p>
<p>This is a combination of <a class="el" href="group__method__mat.htm#ga6f2b3e689d07f5135dfc1ee6cf9825a3">af_is_realfloating</a> and <a class="el" href="group__method__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga768e8326a6aaa81c6543949afc781af2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_integer </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is integer type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of integer types, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="gafaa0c1597ef34a7320ed589f80fdce10"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_real </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is real type. </p>
<p>This is mutually exclusive to <a class="el" href="group__method__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is NOT of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga6f2b3e689d07f5135dfc1ee6cf9825a3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_realfloating </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is real floating point type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="gabbe3249a355293daabd5907d7df67c6a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_row </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is row vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr has dims [1 x 1 1], false otherwise </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="gae3dfa6dc1c03c5efe7482bfc9c41266a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_scalar </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is scalar, ie. </p>
<p>single element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if elements of arr is 1, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga1bd444b2c78a4f4731d4523a90200175"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_single </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is single precision type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="ga00a23c7dd281fdcdec10b8395e611154"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_vector </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is a vector. </p>
<p>A vector is any array that has exactly 1 dimension not equal to 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is a vector, false otherwise </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a class="anchor" id="gad6c58648ed0db398e170dabf045e8309"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_release_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reduce the reference count of the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>. </p>

</div>
</div>
<a class="anchor" id="ga7ed45b3f881c0f6c80c5cf2af886dbab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_retain_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Increments an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> reference count. </p>

</div>
</div>
<a class="anchor" id="gafef13633d184acc726ad9daca7a7bc99"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_write_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a>&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy data from a C pointer (host/device) to an existing array. </p>

</div>
</div>
<a class="anchor" id="ga28967fdd5fff8001f4ef6181d9b186fb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const array as </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts the array into another type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>is the desired type(f32, s64, etc.) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with the type specified by <code>type</code> </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="graphics_2conway_8cpp-example.htm#a6">graphics/conway.cpp</a>, <a class="el" href="graphics_2conway_pretty_8cpp-example.htm#a7">graphics/conway_pretty.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a14">graphics/gravity_sim.cpp</a>, <a class="el" href="graphics_2histogram_8cpp-example.htm#a8">graphics/histogram.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a12">image_processing/brain_segmentation.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a7">machine_learning/deep_belief_net.cpp</a>, and <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a6">machine_learning/rbm.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="gae9a95268261b397cae87b47a59b7e3cb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the array in bytes. </p>

</div>
</div>
<a class="anchor" id="gad79c786c646fe05a18e208eabf4dae94"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array copy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform deep copy of the array. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a3">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a2">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a4">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a1">image_processing/pyramids.cpp</a>, <a class="el" href="lin_algebra_2cholesky_8cpp-example.htm#a7">lin_algebra/cholesky.cpp</a>, <a class="el" href="lin_algebra_2lu_8cpp-example.htm#a5">lin_algebra/lu.cpp</a>, and <a class="el" href="lin_algebra_2qr_8cpp-example.htm#a5">lin_algebra/qr.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="gaf056729e3ff924f5c1d41e0a8db3ce1b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">dim4 dims </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get dimensions of the array. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="computer_vision_2harris_8cpp-example.htm#a12">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2matching_8cpp-example.htm#a7">computer_vision/matching.cpp</a>, <a class="el" href="financial_2black_scholes_options_8cpp-example.htm#a11">financial/black_scholes_options.cpp</a>, <a class="el" href="financial_2heston_model_8cpp-example.htm#a11">financial/heston_model.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#a2">getting_started/vectorize.cpp</a>, <a class="el" href="graphics_2fractal_8cpp-example.htm#a6">graphics/fractal.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a16">graphics/gravity_sim.cpp</a>, <a class="el" href="graphics_2plot2d_8cpp-example.htm#a7">graphics/plot2d.cpp</a>, <a class="el" href="graphics_2surface_8cpp-example.htm#a5">graphics/surface.cpp</a>, <a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a2">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a1">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a11">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a5">image_processing/edge.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a3">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a11">image_processing/image_editing.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a3">image_processing/morphing.cpp</a>, <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#a9">image_processing/optical_flow.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a2">image_processing/pyramids.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a2">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a6">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#a1">machine_learning/kmeans.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a2">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a6">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a2">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a7">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a6">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a5">machine_learning/rbm.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a8">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="ga30abc2404f8202bb6ac736282a9d18b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dims </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>dim</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get dimensions of the array. </p>

</div>
</div>
<a class="anchor" id="gaf343b49d35978f4b617a65b83a7affb4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> elements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the number of elements in array </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a6">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a10">image_processing/filters.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a1">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a2">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a1">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a2">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a1">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a2">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a2">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a2">machine_learning/rbm.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a2">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="ga01195c59132e1b0af7655075ba770581"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void eval </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluate any JIT expressions to generate data for the array. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="benchmarks_2blas_8cpp-example.htm#a2">benchmarks/blas.cpp</a>, <a class="el" href="benchmarks_2fft_8cpp-example.htm#a2">benchmarks/fft.cpp</a>, <a class="el" href="graphics_2fractal_8cpp-example.htm#a9">graphics/fractal.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a8">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a8">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a15">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a9">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a12">machine_learning/perceptron.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a16">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="ga121545fb637db409a523862cdb8ffe39"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Evaluate an expression (nonblocking). </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="financial_2black_scholes_options_8cpp-example.htm#a7">financial/black_scholes_options.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a15">pde/swe.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="ga6a17a89fab2c26be8e911c4628c4c54c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ga932cc56a65acbe91ff2cea42e2f43bb6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ga8d75de296c6378ef17825a3776db93e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="gad2cfee88b0b16efb2e4c3fe5a01187ac"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ga0b49360b87556fcc3d256c864e72e50b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="gaac57222501ff47f5d795503ac47c87e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle </p>

</div>
</div>
<a class="anchor" id="ga175ec1df8cbb7ff785a6ae104ce950f8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle </p>

</div>
</div>
<a class="anchor" id="gac9bbab3a8a569979cb4b6f055faa7eca"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array H </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the conjugate-transpose of the current array. </p>
<dl class="section return"><dt>Returns</dt><dd>conjugate-transpose matrix </dd></dl>

</div>
</div>
<a class="anchor" id="gad65cdb27b05827c55d4e2f59f6bbf2b4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T* host </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy array data to host and return host pointer. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="computer_vision_2fast_8cpp-example.htm#a8">computer_vision/fast.cpp</a>, <a class="el" href="computer_vision_2harris_8cpp-example.htm#a11">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2susan_8cpp-example.htm#a9">computer_vision/susan.cpp</a>, and <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a11">image_processing/binary_thresholding.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="ga67d1d90fb9f4423a68333104230d930d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void host </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy array data to existing host pointer. </p>

</div>
</div>
<a class="anchor" id="ga498d5a466c883cf22ae069a100c8d7c7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isbool </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>. </p>

</div>
</div>
<a class="anchor" id="ga4c04511e60f8b2e47ee04a750ace6173"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool iscolumn </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only the first dimension has more than one element. </p>

</div>
</div>
<a class="anchor" id="gaabd6245f1b5b8a30850b6457e4ef1e4a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool iscomplex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a class="anchor" id="ga2be2b7ba9df7ddee4ddee0352c72b421"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isdouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a class="anchor" id="gabe874940ae5ed8c40a8f99913982e657"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isempty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true of the array is empty. </p>

</div>
</div>
<a class="anchor" id="ga6482e0a17f961340b609692bb20ba829"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isfloating </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a class="anchor" id="ga754b616f9a6e4ebb333c18fbbbb848e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isinteger </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0">u8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1">s32</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a2fb596fb851c71689624894525c069e4">s64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1b18b7885e1360b6696142284b4b4928">u64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a98085990ff18bf438d3c839ea4c80bb4">s16</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5ae817c8a85914a5f150f2739df6b76c57">u16</a>. </p>

</div>
</div>
<a class="anchor" id="gabddfbe553d7a512bdcfb064f1ca65c79"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool isreal </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a class="anchor" id="ga40b78a473238c94c3471ab50cba094f3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isrealfloating </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>. </p>

</div>
</div>
<a class="anchor" id="ga3c4552fcef8cab444e9cfe8f737b1c44"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isrow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only the second dimension has more than one element. </p>

</div>
</div>
<a class="anchor" id="ga016bc4f85b1d25196b855dda9f1ad2ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isscalar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true of the array contains only one value. </p>

</div>
</div>
<a class="anchor" id="ga18eb5420d9a638a06b377e48a14d917f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool issingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a class="anchor" id="ga650bf1b218899dbd93ad801e98a30c74"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isvector </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only one of the array dimensions has more than one element. </p>

</div>
</div>
<a class="anchor" id="ga269a19b0320a93f19314d4903045b067"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned numdims </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of dimensions of the array. </p>

</div>
</div>
<a class="anchor" id="ga5400245c298ffb4d790d846fa97f0e6a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T scalar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the first element of the array as a scalar. </p>
<dl class="section note"><dt>Note</dt><dd>This is recommended for use while debugging. Calling this method constantly reduces performance. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a14">image_processing/binary_thresholding.cpp</a>, and <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#a11">machine_learning/kmeans.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="gaeadf9256b56215a58dc12f14d97312eb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array T </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the transposed the array. </p>
<dl class="section return"><dt>Returns</dt><dd>Transposed matrix </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="getting_started_2integer_8cpp-example.htm#a8">getting_started/integer.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#a9">getting_started/vectorize.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a18">image_processing/filters.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a5">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a21">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a5">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a17">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a15">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a11">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a14">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a21">machine_learning/rbm.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a18">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="ga0844daa9b8cc7b7912e89a3d8ddf1a4b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">dtype type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get array data type. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a13">image_processing/brain_segmentation.cpp</a>, and <a class="el" href="image_processing_2morphing_8cpp-example.htm#a10">image_processing/morphing.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="gaa70b253da2d32394c521a815f7627116"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void write </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a> *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform deep copy from host/device pointer to an existing array. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
