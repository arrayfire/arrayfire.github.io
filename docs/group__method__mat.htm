<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>Methods of array class</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__method__mat.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Methods of array class<div class="ingroups"><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Get information about the array object.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga5822c6bdfbf4ff01f23c4417934b924c"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga5822c6bdfbf4ff01f23c4417934b924c">as</a> (<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> <a class="el" href="group__method__mat.htm#ga122667ba97054fbee7b1ff885bb3bfe4">type</a>) const</td></tr>
<tr class="memdesc:ga5822c6bdfbf4ff01f23c4417934b924c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts the array into another type.  <a href="#ga5822c6bdfbf4ff01f23c4417934b924c">More...</a><br /></td></tr>
<tr class="separator:ga5822c6bdfbf4ff01f23c4417934b924c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fc1c437c072767fc8acea2b67469498"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a> () const</td></tr>
<tr class="memdesc:ga7fc1c437c072767fc8acea2b67469498"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the transposed the array.  <a href="#ga7fc1c437c072767fc8acea2b67469498">More...</a><br /></td></tr>
<tr class="separator:ga7fc1c437c072767fc8acea2b67469498"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga222cd421e1a99821609a17d54c9fc488"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga222cd421e1a99821609a17d54c9fc488">H</a> () const</td></tr>
<tr class="memdesc:ga222cd421e1a99821609a17d54c9fc488"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the conjugate-transpose of the current array.  <a href="#ga222cd421e1a99821609a17d54c9fc488">More...</a><br /></td></tr>
<tr class="separator:ga222cd421e1a99821609a17d54c9fc488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f8e4d3732b5fd4b91ad51eec634f7a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga0f8e4d3732b5fd4b91ad51eec634f7a2">af_copy_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga0f8e4d3732b5fd4b91ad51eec634f7a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deep copy an array to another.  <a href="#ga0f8e4d3732b5fd4b91ad51eec634f7a2">More...</a><br /></td></tr>
<tr class="separator:ga0f8e4d3732b5fd4b91ad51eec634f7a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34d9070b94c3bac673df7f13b9c718a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga34d9070b94c3bac673df7f13b9c718a2">af_get_data_ref_count</a> (int *use_count, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga34d9070b94c3bac673df7f13b9c718a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the use count of <code>af_array</code>  <a href="#ga34d9070b94c3bac673df7f13b9c718a2">More...</a><br /></td></tr>
<tr class="separator:ga34d9070b94c3bac673df7f13b9c718a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafef13633d184acc726ad9daca7a7bc99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gafef13633d184acc726ad9daca7a7bc99">af_write_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr, const void *data, const size_t bytes, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a> src)</td></tr>
<tr class="memdesc:gafef13633d184acc726ad9daca7a7bc99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy data from a C pointer (host/device) to an existing array.  <a href="#gafef13633d184acc726ad9daca7a7bc99">More...</a><br /></td></tr>
<tr class="separator:gafef13633d184acc726ad9daca7a7bc99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6040dc6f0eb127402fbf62c1165f0b9d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6040dc6f0eb127402fbf62c1165f0b9d">af_get_data_ptr</a> (void *data, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga6040dc6f0eb127402fbf62c1165f0b9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy data from an af_array to a C pointer.  <a href="#ga6040dc6f0eb127402fbf62c1165f0b9d">More...</a><br /></td></tr>
<tr class="separator:ga6040dc6f0eb127402fbf62c1165f0b9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad6c58648ed0db398e170dabf045e8309"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gad6c58648ed0db398e170dabf045e8309">af_release_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gad6c58648ed0db398e170dabf045e8309"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduce the reference count of the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>.  <a href="#gad6c58648ed0db398e170dabf045e8309">More...</a><br /></td></tr>
<tr class="separator:gad6c58648ed0db398e170dabf045e8309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ed45b3f881c0f6c80c5cf2af886dbab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga7ed45b3f881c0f6c80c5cf2af886dbab">af_retain_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga7ed45b3f881c0f6c80c5cf2af886dbab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increments an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> reference count.  <a href="#ga7ed45b3f881c0f6c80c5cf2af886dbab">More...</a><br /></td></tr>
<tr class="separator:ga7ed45b3f881c0f6c80c5cf2af886dbab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9de141bfc5936741d2496f59c1bac777"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga9de141bfc5936741d2496f59c1bac777">af_eval</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga9de141bfc5936741d2496f59c1bac777"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate any expressions in the Array.  <a href="#ga9de141bfc5936741d2496f59c1bac777">More...</a><br /></td></tr>
<tr class="separator:ga9de141bfc5936741d2496f59c1bac777"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6845bbe4385a60a606b88f8130252c1f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6845bbe4385a60a606b88f8130252c1f">af_get_elements</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *elems, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga6845bbe4385a60a606b88f8130252c1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of elements in an array.  <a href="#ga6845bbe4385a60a606b88f8130252c1f">More...</a><br /></td></tr>
<tr class="separator:ga6845bbe4385a60a606b88f8130252c1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0dda6898e1c0d9a43efb56cd6a988c9b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga0dda6898e1c0d9a43efb56cd6a988c9b">af_get_type</a> (<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> *type, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga0dda6898e1c0d9a43efb56cd6a988c9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the type of an array.  <a href="#ga0dda6898e1c0d9a43efb56cd6a988c9b">More...</a><br /></td></tr>
<tr class="separator:ga0dda6898e1c0d9a43efb56cd6a988c9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b90da50a532837d9763e301b2267348"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga8b90da50a532837d9763e301b2267348">af_get_dims</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d2, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d3, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga8b90da50a532837d9763e301b2267348"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the dimensions of an array.  <a href="#ga8b90da50a532837d9763e301b2267348">More...</a><br /></td></tr>
<tr class="separator:ga8b90da50a532837d9763e301b2267348"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefa019d932ff58c2a829ce87edddd2a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaefa019d932ff58c2a829ce87edddd2a8">af_get_numdims</a> (unsigned *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gaefa019d932ff58c2a829ce87edddd2a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of dimensions of an array.  <a href="#gaefa019d932ff58c2a829ce87edddd2a8">More...</a><br /></td></tr>
<tr class="separator:gaefa019d932ff58c2a829ce87edddd2a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19c749e95314e1c77d816ad9952fb680"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga19c749e95314e1c77d816ad9952fb680">af_is_empty</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga19c749e95314e1c77d816ad9952fb680"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is empty.  <a href="#ga19c749e95314e1c77d816ad9952fb680">More...</a><br /></td></tr>
<tr class="separator:ga19c749e95314e1c77d816ad9952fb680"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae3dfa6dc1c03c5efe7482bfc9c41266a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gae3dfa6dc1c03c5efe7482bfc9c41266a">af_is_scalar</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gae3dfa6dc1c03c5efe7482bfc9c41266a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is scalar, ie.  <a href="#gae3dfa6dc1c03c5efe7482bfc9c41266a">More...</a><br /></td></tr>
<tr class="separator:gae3dfa6dc1c03c5efe7482bfc9c41266a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabbe3249a355293daabd5907d7df67c6a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gabbe3249a355293daabd5907d7df67c6a">af_is_row</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gabbe3249a355293daabd5907d7df67c6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is row vector.  <a href="#gabbe3249a355293daabd5907d7df67c6a">More...</a><br /></td></tr>
<tr class="separator:gabbe3249a355293daabd5907d7df67c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga184b5a5feb146f2a2a44fed36b35e435"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga184b5a5feb146f2a2a44fed36b35e435">af_is_column</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga184b5a5feb146f2a2a44fed36b35e435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is a column vector.  <a href="#ga184b5a5feb146f2a2a44fed36b35e435">More...</a><br /></td></tr>
<tr class="separator:ga184b5a5feb146f2a2a44fed36b35e435"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00a23c7dd281fdcdec10b8395e611154"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga00a23c7dd281fdcdec10b8395e611154">af_is_vector</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga00a23c7dd281fdcdec10b8395e611154"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is a vector.  <a href="#ga00a23c7dd281fdcdec10b8395e611154">More...</a><br /></td></tr>
<tr class="separator:ga00a23c7dd281fdcdec10b8395e611154"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd8a5edf6467340d0b40341be9f677e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gacd8a5edf6467340d0b40341be9f677e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is complex type.  <a href="#gacd8a5edf6467340d0b40341be9f677e9">More...</a><br /></td></tr>
<tr class="separator:gacd8a5edf6467340d0b40341be9f677e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafaa0c1597ef34a7320ed589f80fdce10"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gafaa0c1597ef34a7320ed589f80fdce10">af_is_real</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gafaa0c1597ef34a7320ed589f80fdce10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is real type.  <a href="#gafaa0c1597ef34a7320ed589f80fdce10">More...</a><br /></td></tr>
<tr class="separator:gafaa0c1597ef34a7320ed589f80fdce10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb499641bfc02dfa56a75be9ba237e3f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gadb499641bfc02dfa56a75be9ba237e3f">af_is_double</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gadb499641bfc02dfa56a75be9ba237e3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is double precision type.  <a href="#gadb499641bfc02dfa56a75be9ba237e3f">More...</a><br /></td></tr>
<tr class="separator:gadb499641bfc02dfa56a75be9ba237e3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1bd444b2c78a4f4731d4523a90200175"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga1bd444b2c78a4f4731d4523a90200175">af_is_single</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga1bd444b2c78a4f4731d4523a90200175"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is single precision type.  <a href="#ga1bd444b2c78a4f4731d4523a90200175">More...</a><br /></td></tr>
<tr class="separator:ga1bd444b2c78a4f4731d4523a90200175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f2b3e689d07f5135dfc1ee6cf9825a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6f2b3e689d07f5135dfc1ee6cf9825a3">af_is_realfloating</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga6f2b3e689d07f5135dfc1ee6cf9825a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is real floating point type.  <a href="#ga6f2b3e689d07f5135dfc1ee6cf9825a3">More...</a><br /></td></tr>
<tr class="separator:ga6f2b3e689d07f5135dfc1ee6cf9825a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5eb0d277412a2beeffe7e7a9f89b98ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga5eb0d277412a2beeffe7e7a9f89b98ea">af_is_floating</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga5eb0d277412a2beeffe7e7a9f89b98ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is floating precision type.  <a href="#ga5eb0d277412a2beeffe7e7a9f89b98ea">More...</a><br /></td></tr>
<tr class="separator:ga5eb0d277412a2beeffe7e7a9f89b98ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga768e8326a6aaa81c6543949afc781af2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga768e8326a6aaa81c6543949afc781af2">af_is_integer</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga768e8326a6aaa81c6543949afc781af2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is integer type.  <a href="#ga768e8326a6aaa81c6543949afc781af2">More...</a><br /></td></tr>
<tr class="separator:ga768e8326a6aaa81c6543949afc781af2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafae10fc1378b72404120572e21ff5d27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gafae10fc1378b72404120572e21ff5d27">af_is_bool</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gafae10fc1378b72404120572e21ff5d27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is bool type.  <a href="#gafae10fc1378b72404120572e21ff5d27">More...</a><br /></td></tr>
<tr class="separator:gafae10fc1378b72404120572e21ff5d27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac96d3ca37a435874de22a76838a8cf54"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gac96d3ca37a435874de22a76838a8cf54">af_is_sparse</a> (bool *result, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gac96d3ca37a435874de22a76838a8cf54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an array is sparse.  <a href="#gac96d3ca37a435874de22a76838a8cf54">More...</a><br /></td></tr>
<tr class="separator:gac96d3ca37a435874de22a76838a8cf54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefe2e343a74a84bd43b588218ecc09a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaefe2e343a74a84bd43b588218ecc09a3">af_get_scalar</a> (void *output_value, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gaefe2e343a74a84bd43b588218ecc09a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get first element from an array.  <a href="#gaefe2e343a74a84bd43b588218ecc09a3">More...</a><br /></td></tr>
<tr class="separator:gaefe2e343a74a84bd43b588218ecc09a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga121545fb637db409a523862cdb8ffe39"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a)</td></tr>
<tr class="memdesc:ga121545fb637db409a523862cdb8ffe39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate an expression (nonblocking).  <a href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">More...</a><br /></td></tr>
<tr class="separator:ga121545fb637db409a523862cdb8ffe39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeade064317ff4e40e66180718a34f9da"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaeade064317ff4e40e66180718a34f9da">eval</a> (int num, <a class="el" href="classaf_1_1array.htm">array</a> **arrays)</td></tr>
<tr class="memdesc:gaeade064317ff4e40e66180718a34f9da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate multiple arrays simultaneously.  <a href="group__method__mat.htm#gaeade064317ff4e40e66180718a34f9da">More...</a><br /></td></tr>
<tr class="separator:gaeade064317ff4e40e66180718a34f9da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a17a89fab2c26be8e911c4628c4c54c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6a17a89fab2c26be8e911c4628c4c54c">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b)</td></tr>
<tr class="separator:ga6a17a89fab2c26be8e911c4628c4c54c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga932cc56a65acbe91ff2cea42e2f43bb6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga932cc56a65acbe91ff2cea42e2f43bb6">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, <a class="el" href="classaf_1_1array.htm">array</a> &amp;c)</td></tr>
<tr class="separator:ga932cc56a65acbe91ff2cea42e2f43bb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8d75de296c6378ef17825a3776db93e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga8d75de296c6378ef17825a3776db93e4">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, <a class="el" href="classaf_1_1array.htm">array</a> &amp;d)</td></tr>
<tr class="separator:ga8d75de296c6378ef17825a3776db93e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad2cfee88b0b16efb2e4c3fe5a01187ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gad2cfee88b0b16efb2e4c3fe5a01187ac">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, <a class="el" href="classaf_1_1array.htm">array</a> &amp;d, <a class="el" href="classaf_1_1array.htm">array</a> &amp;e)</td></tr>
<tr class="separator:gad2cfee88b0b16efb2e4c3fe5a01187ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b49360b87556fcc3d256c864e72e50b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;a, <a class="el" href="classaf_1_1array.htm">array</a> &amp;b, <a class="el" href="classaf_1_1array.htm">array</a> &amp;c, <a class="el" href="classaf_1_1array.htm">array</a> &amp;d, <a class="el" href="classaf_1_1array.htm">array</a> &amp;e, <a class="el" href="classaf_1_1array.htm">array</a> &amp;f)</td></tr>
<tr class="separator:ga0b49360b87556fcc3d256c864e72e50b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga11dba1a052f2fe004665237d9670e1f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga11dba1a052f2fe004665237d9670e1f5">setManualEvalFlag</a> (bool flag)</td></tr>
<tr class="memdesc:ga11dba1a052f2fe004665237d9670e1f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Turn the manual eval flag on or off.  <a href="group__method__mat.htm#ga11dba1a052f2fe004665237d9670e1f5">More...</a><br /></td></tr>
<tr class="separator:ga11dba1a052f2fe004665237d9670e1f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0c2f8602994b437164ee5783cedabfa9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga0c2f8602994b437164ee5783cedabfa9">getManualEvalFlag</a> ()</td></tr>
<tr class="memdesc:ga0c2f8602994b437164ee5783cedabfa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the manual eval flag.  <a href="group__method__mat.htm#ga0c2f8602994b437164ee5783cedabfa9">More...</a><br /></td></tr>
<tr class="separator:ga0c2f8602994b437164ee5783cedabfa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac57222501ff47f5d795503ac47c87e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaac57222501ff47f5d795503ac47c87e3">get</a> ()</td></tr>
<tr class="memdesc:gaac57222501ff47f5d795503ac47c87e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle  <a href="#gaac57222501ff47f5d795503ac47c87e3">More...</a><br /></td></tr>
<tr class="separator:gaac57222501ff47f5d795503ac47c87e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae2b564347156aa7fd3908617a84ba3cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gae2b564347156aa7fd3908617a84ba3cc">get</a> () const</td></tr>
<tr class="memdesc:gae2b564347156aa7fd3908617a84ba3cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle  <a href="#gae2b564347156aa7fd3908617a84ba3cc">More...</a><br /></td></tr>
<tr class="separator:gae2b564347156aa7fd3908617a84ba3cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga89f91cdf327a8b304589916db5bde3c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga89f91cdf327a8b304589916db5bde3c2">elements</a> () const</td></tr>
<tr class="memdesc:ga89f91cdf327a8b304589916db5bde3c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the number of elements in array  <a href="#ga89f91cdf327a8b304589916db5bde3c2">More...</a><br /></td></tr>
<tr class="separator:ga89f91cdf327a8b304589916db5bde3c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga332e06d4340867375a5e415fc1befc1d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga332e06d4340867375a5e415fc1befc1d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga332e06d4340867375a5e415fc1befc1d">host</a> () const</td></tr>
<tr class="memdesc:ga332e06d4340867375a5e415fc1befc1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy array data to host and return host pointer.  <a href="#ga332e06d4340867375a5e415fc1befc1d">More...</a><br /></td></tr>
<tr class="separator:ga332e06d4340867375a5e415fc1befc1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cc0f3c2307de6b82ede47c9b26da2d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga5cc0f3c2307de6b82ede47c9b26da2d0">host</a> (void *ptr) const</td></tr>
<tr class="memdesc:ga5cc0f3c2307de6b82ede47c9b26da2d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy array data to existing host pointer.  <a href="#ga5cc0f3c2307de6b82ede47c9b26da2d0">More...</a><br /></td></tr>
<tr class="separator:ga5cc0f3c2307de6b82ede47c9b26da2d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa70b253da2d32394c521a815f7627116"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaa70b253da2d32394c521a815f7627116"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaa70b253da2d32394c521a815f7627116">write</a> (const <a class="el" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a> *ptr, const size_t <a class="el" href="group__method__mat.htm#ga3b73c6479b9490ad49b8156e14473541">bytes</a>, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:gaa70b253da2d32394c521a815f7627116"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform deep copy from host/device pointer to an existing array.  <a href="#gaa70b253da2d32394c521a815f7627116">More...</a><br /></td></tr>
<tr class="separator:gaa70b253da2d32394c521a815f7627116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga122667ba97054fbee7b1ff885bb3bfe4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga122667ba97054fbee7b1ff885bb3bfe4">type</a> () const</td></tr>
<tr class="memdesc:ga122667ba97054fbee7b1ff885bb3bfe4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get array data type.  <a href="#ga122667ba97054fbee7b1ff885bb3bfe4">More...</a><br /></td></tr>
<tr class="separator:ga122667ba97054fbee7b1ff885bb3bfe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga10d14b019693bc98f672ad7c4ac60bac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a> () const</td></tr>
<tr class="memdesc:ga10d14b019693bc98f672ad7c4ac60bac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get dimensions of the array.  <a href="#ga10d14b019693bc98f672ad7c4ac60bac">More...</a><br /></td></tr>
<tr class="separator:ga10d14b019693bc98f672ad7c4ac60bac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83301f0006c5cb2de7b92b596b40b97b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga83301f0006c5cb2de7b92b596b40b97b">dims</a> (unsigned dim) const</td></tr>
<tr class="memdesc:ga83301f0006c5cb2de7b92b596b40b97b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get dimensions of the array.  <a href="#ga83301f0006c5cb2de7b92b596b40b97b">More...</a><br /></td></tr>
<tr class="separator:ga83301f0006c5cb2de7b92b596b40b97b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf44710cddd99a7992a890b6096265041"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaf44710cddd99a7992a890b6096265041">numdims</a> () const</td></tr>
<tr class="memdesc:gaf44710cddd99a7992a890b6096265041"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of dimensions of the array.  <a href="#gaf44710cddd99a7992a890b6096265041">More...</a><br /></td></tr>
<tr class="separator:gaf44710cddd99a7992a890b6096265041"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3b73c6479b9490ad49b8156e14473541"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga3b73c6479b9490ad49b8156e14473541">bytes</a> () const</td></tr>
<tr class="memdesc:ga3b73c6479b9490ad49b8156e14473541"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the array in bytes.  <a href="#ga3b73c6479b9490ad49b8156e14473541">More...</a><br /></td></tr>
<tr class="separator:ga3b73c6479b9490ad49b8156e14473541"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8bc3e142a14a07815b29e230cefacd3e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga8bc3e142a14a07815b29e230cefacd3e">allocated</a> () const</td></tr>
<tr class="memdesc:ga8bc3e142a14a07815b29e230cefacd3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the array in memory.  <a href="#ga8bc3e142a14a07815b29e230cefacd3e">More...</a><br /></td></tr>
<tr class="separator:ga8bc3e142a14a07815b29e230cefacd3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa859f53b411dd3ab37c8c817b4352e07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaa859f53b411dd3ab37c8c817b4352e07">copy</a> () const</td></tr>
<tr class="memdesc:gaa859f53b411dd3ab37c8c817b4352e07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform deep copy of the array.  <a href="#gaa859f53b411dd3ab37c8c817b4352e07">More...</a><br /></td></tr>
<tr class="separator:gaa859f53b411dd3ab37c8c817b4352e07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga02af51409898c251bb31665e41596057"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga02af51409898c251bb31665e41596057">isempty</a> () const</td></tr>
<tr class="memdesc:ga02af51409898c251bb31665e41596057"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true of the array is empty.  <a href="#ga02af51409898c251bb31665e41596057">More...</a><br /></td></tr>
<tr class="separator:ga02af51409898c251bb31665e41596057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga41966eaad67492044dc4757b843dbbac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga41966eaad67492044dc4757b843dbbac">isscalar</a> () const</td></tr>
<tr class="memdesc:ga41966eaad67492044dc4757b843dbbac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true of the array contains only one value.  <a href="#ga41966eaad67492044dc4757b843dbbac">More...</a><br /></td></tr>
<tr class="separator:ga41966eaad67492044dc4757b843dbbac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga237bd79e8bf4cb8ad0c6eb1f0a9aa3d9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga237bd79e8bf4cb8ad0c6eb1f0a9aa3d9">isvector</a> () const</td></tr>
<tr class="memdesc:ga237bd79e8bf4cb8ad0c6eb1f0a9aa3d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only one of the array dimensions has more than one element.  <a href="#ga237bd79e8bf4cb8ad0c6eb1f0a9aa3d9">More...</a><br /></td></tr>
<tr class="separator:ga237bd79e8bf4cb8ad0c6eb1f0a9aa3d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga99cd74de21bde89f497dac1c2e1b23f1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga99cd74de21bde89f497dac1c2e1b23f1">isrow</a> () const</td></tr>
<tr class="memdesc:ga99cd74de21bde89f497dac1c2e1b23f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only the second dimension has more than one element.  <a href="#ga99cd74de21bde89f497dac1c2e1b23f1">More...</a><br /></td></tr>
<tr class="separator:ga99cd74de21bde89f497dac1c2e1b23f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5e12ba6e9d5b29ab276fb4271cb0764"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gaf5e12ba6e9d5b29ab276fb4271cb0764">iscolumn</a> () const</td></tr>
<tr class="memdesc:gaf5e12ba6e9d5b29ab276fb4271cb0764"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only the first dimension has more than one element.  <a href="#gaf5e12ba6e9d5b29ab276fb4271cb0764">More...</a><br /></td></tr>
<tr class="separator:gaf5e12ba6e9d5b29ab276fb4271cb0764"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2e82c9d93b78f06278146e85a222604b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga2e82c9d93b78f06278146e85a222604b">iscomplex</a> () const</td></tr>
<tr class="memdesc:ga2e82c9d93b78f06278146e85a222604b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#ga2e82c9d93b78f06278146e85a222604b">More...</a><br /></td></tr>
<tr class="separator:ga2e82c9d93b78f06278146e85a222604b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae778ca527466663084f5797f23075603"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gae778ca527466663084f5797f23075603">isreal</a> () const</td></tr>
<tr class="memdesc:gae778ca527466663084f5797f23075603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#gae778ca527466663084f5797f23075603">More...</a><br /></td></tr>
<tr class="separator:gae778ca527466663084f5797f23075603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae1893dbf4e3ad0325a7cdff6bc5485f5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gae1893dbf4e3ad0325a7cdff6bc5485f5">isdouble</a> () const</td></tr>
<tr class="memdesc:gae1893dbf4e3ad0325a7cdff6bc5485f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#gae1893dbf4e3ad0325a7cdff6bc5485f5">More...</a><br /></td></tr>
<tr class="separator:gae1893dbf4e3ad0325a7cdff6bc5485f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga819cfdc18b093dce679d6b6c72d0110b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga819cfdc18b093dce679d6b6c72d0110b">issingle</a> () const</td></tr>
<tr class="memdesc:ga819cfdc18b093dce679d6b6c72d0110b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#ga819cfdc18b093dce679d6b6c72d0110b">More...</a><br /></td></tr>
<tr class="separator:ga819cfdc18b093dce679d6b6c72d0110b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga26b61c0ea2dcb7aa91d21db31c0cf148"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga26b61c0ea2dcb7aa91d21db31c0cf148">isrealfloating</a> () const</td></tr>
<tr class="memdesc:ga26b61c0ea2dcb7aa91d21db31c0cf148"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>.  <a href="#ga26b61c0ea2dcb7aa91d21db31c0cf148">More...</a><br /></td></tr>
<tr class="separator:ga26b61c0ea2dcb7aa91d21db31c0cf148"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab33ad283445e5af655bf7e87bbab72e3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#gab33ad283445e5af655bf7e87bbab72e3">isfloating</a> () const</td></tr>
<tr class="memdesc:gab33ad283445e5af655bf7e87bbab72e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="#gab33ad283445e5af655bf7e87bbab72e3">More...</a><br /></td></tr>
<tr class="separator:gab33ad283445e5af655bf7e87bbab72e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b69d758673c8443bd0609685cb97615"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga4b69d758673c8443bd0609685cb97615">isinteger</a> () const</td></tr>
<tr class="memdesc:ga4b69d758673c8443bd0609685cb97615"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0">u8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1">s32</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a2fb596fb851c71689624894525c069e4">s64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1b18b7885e1360b6696142284b4b4928">u64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a98085990ff18bf438d3c839ea4c80bb4">s16</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5ae817c8a85914a5f150f2739df6b76c57">u16</a>.  <a href="#ga4b69d758673c8443bd0609685cb97615">More...</a><br /></td></tr>
<tr class="separator:ga4b69d758673c8443bd0609685cb97615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75548d3af424a944fd62f0c897321311"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga75548d3af424a944fd62f0c897321311">isbool</a> () const</td></tr>
<tr class="memdesc:ga75548d3af424a944fd62f0c897321311"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>.  <a href="#ga75548d3af424a944fd62f0c897321311">More...</a><br /></td></tr>
<tr class="separator:ga75548d3af424a944fd62f0c897321311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c71baaa51ca6bc9403a2a9ef0c46d96"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga4c71baaa51ca6bc9403a2a9ef0c46d96">issparse</a> () const</td></tr>
<tr class="memdesc:ga4c71baaa51ca6bc9403a2a9ef0c46d96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array is a sparse array.  <a href="#ga4c71baaa51ca6bc9403a2a9ef0c46d96">More...</a><br /></td></tr>
<tr class="separator:ga4c71baaa51ca6bc9403a2a9ef0c46d96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a8d7156cd3c66a9ca9f0f2688ee9f72"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a> () const</td></tr>
<tr class="memdesc:ga6a8d7156cd3c66a9ca9f0f2688ee9f72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate any JIT expressions to generate data for the array.  <a href="#ga6a8d7156cd3c66a9ca9f0f2688ee9f72">More...</a><br /></td></tr>
<tr class="separator:ga6a8d7156cd3c66a9ca9f0f2688ee9f72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga048d77db849d74f18a13dabfd43ce55d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga048d77db849d74f18a13dabfd43ce55d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__method__mat.htm#ga048d77db849d74f18a13dabfd43ce55d">scalar</a> () const</td></tr>
<tr class="memdesc:ga048d77db849d74f18a13dabfd43ce55d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the first element of the array as a scalar.  <a href="#ga048d77db849d74f18a13dabfd43ce55d">More...</a><br /></td></tr>
<tr class="separator:ga048d77db849d74f18a13dabfd43ce55d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Get information about the array object. </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga0f8e4d3732b5fd4b91ad51eec634f7a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0f8e4d3732b5fd4b91ad51eec634f7a2">&#9670;&nbsp;</a></span>af_copy_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_copy_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deep copy an array to another. </p>

</div>
</div>
<a id="ga9de141bfc5936741d2496f59c1bac777"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9de141bfc5936741d2496f59c1bac777">&#9670;&nbsp;</a></span>af_eval()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluate any expressions in the Array. </p>

</div>
</div>
<a id="ga6040dc6f0eb127402fbf62c1165f0b9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6040dc6f0eb127402fbf62c1165f0b9d">&#9670;&nbsp;</a></span>af_get_data_ptr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_data_ptr </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy data from an af_array to a C pointer. </p>
<p>Needs to used in conjunction with the two functions above </p>

</div>
</div>
<a id="ga34d9070b94c3bac673df7f13b9c718a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga34d9070b94c3bac673df7f13b9c718a2">&#9670;&nbsp;</a></span>af_get_data_ref_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_data_ref_count </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>use_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the use count of <code>af_array</code> </p>

</div>
</div>
<a id="ga8b90da50a532837d9763e301b2267348"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8b90da50a532837d9763e301b2267348">&#9670;&nbsp;</a></span>af_get_dims()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_dims </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>d0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>d1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>d2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>d3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the dimensions of an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">d0</td><td>is the output that contains the size of first dimension of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">d1</td><td>is the output that contains the size of second dimension of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">d2</td><td>is the output that contains the size of third dimension of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">d3</td><td>is the output that contains the size of fourth dimension of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="ga6845bbe4385a60a606b88f8130252c1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6845bbe4385a60a606b88f8130252c1f">&#9670;&nbsp;</a></span>af_get_elements()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_elements </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>elems</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the number of elements in an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">elems</td><td>is the output that contains number of elements of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gaefa019d932ff58c2a829ce87edddd2a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaefa019d932ff58c2a829ce87edddd2a8">&#9670;&nbsp;</a></span>af_get_numdims()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_numdims </td>
          <td>(</td>
          <td class="paramtype">unsigned *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the number of dimensions of an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is the output that contains the number of dims of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gaefe2e343a74a84bd43b588218ecc09a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaefe2e343a74a84bd43b588218ecc09a3">&#9670;&nbsp;</a></span>af_get_scalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_scalar </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>output_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get first element from an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">output_value</td><td>is the element requested </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="ga0dda6898e1c0d9a43efb56cd6a988c9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0dda6898e1c0d9a43efb56cd6a988c9b">&#9670;&nbsp;</a></span>af_get_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> *&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the type of an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">type</td><td>is the output that contains the type of <code>arr</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gafae10fc1378b72404120572e21ff5d27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafae10fc1378b72404120572e21ff5d27">&#9670;&nbsp;</a></span>af_is_bool()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_bool </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is bool type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a> type, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="ga184b5a5feb146f2a2a44fed36b35e435"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga184b5a5feb146f2a2a44fed36b35e435">&#9670;&nbsp;</a></span>af_is_column()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_column </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is a column vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr has dims [x 1 1 1], false otherwise </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gacd8a5edf6467340d0b40341be9f677e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacd8a5edf6467340d0b40341be9f677e9">&#9670;&nbsp;</a></span>af_is_complex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_complex </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is complex type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gadb499641bfc02dfa56a75be9ba237e3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadb499641bfc02dfa56a75be9ba237e3f">&#9670;&nbsp;</a></span>af_is_double()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_double </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is double precision type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="ga19c749e95314e1c77d816ad9952fb680"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga19c749e95314e1c77d816ad9952fb680">&#9670;&nbsp;</a></span>af_is_empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_empty </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is empty. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if elements of arr is 0, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="ga5eb0d277412a2beeffe7e7a9f89b98ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5eb0d277412a2beeffe7e7a9f89b98ea">&#9670;&nbsp;</a></span>af_is_floating()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_floating </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is floating precision type. </p>
<p>This is a combination of <a class="el" href="group__method__mat.htm#ga6f2b3e689d07f5135dfc1ee6cf9825a3">af_is_realfloating</a> and <a class="el" href="group__method__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="ga768e8326a6aaa81c6543949afc781af2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga768e8326a6aaa81c6543949afc781af2">&#9670;&nbsp;</a></span>af_is_integer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_integer </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is integer type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of integer types, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gafaa0c1597ef34a7320ed589f80fdce10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafaa0c1597ef34a7320ed589f80fdce10">&#9670;&nbsp;</a></span>af_is_real()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_real </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is real type. </p>
<p>This is mutually exclusive to <a class="el" href="group__method__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is NOT of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="ga6f2b3e689d07f5135dfc1ee6cf9825a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6f2b3e689d07f5135dfc1ee6cf9825a3">&#9670;&nbsp;</a></span>af_is_realfloating()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_realfloating </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is real floating point type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gabbe3249a355293daabd5907d7df67c6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabbe3249a355293daabd5907d7df67c6a">&#9670;&nbsp;</a></span>af_is_row()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_row </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is row vector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr has dims [1 x 1 1], false otherwise </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gae3dfa6dc1c03c5efe7482bfc9c41266a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae3dfa6dc1c03c5efe7482bfc9c41266a">&#9670;&nbsp;</a></span>af_is_scalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_scalar </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is scalar, ie. </p>
<p>single element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if elements of arr is 1, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="ga1bd444b2c78a4f4731d4523a90200175"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1bd444b2c78a4f4731d4523a90200175">&#9670;&nbsp;</a></span>af_is_single()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_single </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is single precision type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is of type <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a>, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gac96d3ca37a435874de22a76838a8cf54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac96d3ca37a435874de22a76838a8cf54">&#9670;&nbsp;</a></span>af_is_sparse()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_sparse </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is sparse. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is sparse, otherwise false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="ga00a23c7dd281fdcdec10b8395e611154"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga00a23c7dd281fdcdec10b8395e611154">&#9670;&nbsp;</a></span>af_is_vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_vector </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an array is a vector. </p>
<p>A vector is any array that has exactly 1 dimension not equal to 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">result</td><td>is true if arr is a vector, false otherwise </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>error codes </dd></dl>

</div>
</div>
<a id="gad6c58648ed0db398e170dabf045e8309"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad6c58648ed0db398e170dabf045e8309">&#9670;&nbsp;</a></span>af_release_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_release_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reduce the reference count of the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>. </p>

</div>
</div>
<a id="ga7ed45b3f881c0f6c80c5cf2af886dbab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7ed45b3f881c0f6c80c5cf2af886dbab">&#9670;&nbsp;</a></span>af_retain_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_retain_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Increments an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> reference count. </p>

</div>
</div>
<a id="gafef13633d184acc726ad9daca7a7bc99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafef13633d184acc726ad9daca7a7bc99">&#9670;&nbsp;</a></span>af_write_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_write_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a>&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy data from a C pointer (host/device) to an existing array. </p>

</div>
</div>
<a id="ga8bc3e142a14a07815b29e230cefacd3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8bc3e142a14a07815b29e230cefacd3e">&#9670;&nbsp;</a></span>allocated()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t allocated </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the array in memory. </p>
<p>This will return the parent's <a class="el" href="group__method__mat.htm#ga3b73c6479b9490ad49b8156e14473541" title="Get the size of the array in bytes. ">bytes()</a> if the array is indexed. </p>

</div>
</div>
<a id="ga5822c6bdfbf4ff01f23c4417934b924c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5822c6bdfbf4ff01f23c4417934b924c">&#9670;&nbsp;</a></span>as()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classaf_1_1array.htm">array</a> as </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts the array into another type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>is the desired type(f32, s64, etc.) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with the type specified by <code>type</code> </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="graphics_2conway_8cpp-example.htm#a6">graphics/conway.cpp</a>, <a class="el" href="graphics_2conway_pretty_8cpp-example.htm#a7">graphics/conway_pretty.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a8">graphics/gravity_sim.cpp</a>, <a class="el" href="graphics_2histogram_8cpp-example.htm#a10">graphics/histogram.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a12">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a9">image_processing/edge.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a7">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2geneticalgorithm_8cpp-example.htm#a16">machine_learning/geneticalgorithm.cpp</a>, and <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a6">machine_learning/rbm.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga3b73c6479b9490ad49b8156e14473541"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3b73c6479b9490ad49b8156e14473541">&#9670;&nbsp;</a></span>bytes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the array in bytes. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="benchmarks_2cg_8cpp-example.htm#a10">benchmarks/cg.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="gaa859f53b411dd3ab37c8c817b4352e07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa859f53b411dd3ab37c8c817b4352e07">&#9670;&nbsp;</a></span>copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> copy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform deep copy of the array. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a3">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a2">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a2">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a1">image_processing/pyramids.cpp</a>, <a class="el" href="lin_algebra_2cholesky_8cpp-example.htm#a7">lin_algebra/cholesky.cpp</a>, <a class="el" href="lin_algebra_2lu_8cpp-example.htm#a5">lin_algebra/lu.cpp</a>, and <a class="el" href="lin_algebra_2qr_8cpp-example.htm#a5">lin_algebra/qr.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga10d14b019693bc98f672ad7c4ac60bac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga10d14b019693bc98f672ad7c4ac60bac">&#9670;&nbsp;</a></span>dims() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1dim4.htm">dim4</a> dims </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get dimensions of the array. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="benchmarks_2cg_8cpp-example.htm#a5">benchmarks/cg.cpp</a>, <a class="el" href="computer_vision_2harris_8cpp-example.htm#a12">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2matching_8cpp-example.htm#a7">computer_vision/matching.cpp</a>, <a class="el" href="financial_2black_scholes_options_8cpp-example.htm#a11">financial/black_scholes_options.cpp</a>, <a class="el" href="financial_2heston_model_8cpp-example.htm#a11">financial/heston_model.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#a2">getting_started/vectorize.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#a6">graphics/field.cpp</a>, <a class="el" href="graphics_2fractal_8cpp-example.htm#a6">graphics/fractal.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a27">graphics/gravity_sim.cpp</a>, <a class="el" href="graphics_2plot2d_8cpp-example.htm#a7">graphics/plot2d.cpp</a>, <a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a2">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a1">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a11">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a5">image_processing/edge.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a1">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2gradient_diffusion_8cpp-example.htm#a1">image_processing/gradient_diffusion.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a12">image_processing/image_editing.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a3">image_processing/morphing.cpp</a>, <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#a9">image_processing/optical_flow.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a2">image_processing/pyramids.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a2">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a6">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#a1">machine_learning/kmeans.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a2">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a6">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a2">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a7">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a6">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a5">machine_learning/rbm.cpp</a>, <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a8">machine_learning/softmax_regression.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a15">pde/swe.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga83301f0006c5cb2de7b92b596b40b97b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga83301f0006c5cb2de7b92b596b40b97b">&#9670;&nbsp;</a></span>dims() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dims </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>dim</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get dimensions of the array. </p>

</div>
</div>
<a id="ga89f91cdf327a8b304589916db5bde3c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga89f91cdf327a8b304589916db5bde3c2">&#9670;&nbsp;</a></span>elements()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> elements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the number of elements in array </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="graphics_2field_8cpp-example.htm#a14">graphics/field.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a6">image_processing/binary_thresholding.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a1">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a2">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2geneticalgorithm_8cpp-example.htm#a2">machine_learning/geneticalgorithm.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a1">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a2">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a1">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a2">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a2">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a2">machine_learning/rbm.cpp</a>, <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a2">machine_learning/softmax_regression.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a14">pde/swe.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga6a8d7156cd3c66a9ca9f0f2688ee9f72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6a8d7156cd3c66a9ca9f0f2688ee9f72">&#9670;&nbsp;</a></span>eval() <span class="overload">[1/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void eval </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluate any JIT expressions to generate data for the array. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="benchmarks_2blas_8cpp-example.htm#a2">benchmarks/blas.cpp</a>, <a class="el" href="benchmarks_2fft_8cpp-example.htm#a2">benchmarks/fft.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#a8">graphics/field.cpp</a>, <a class="el" href="graphics_2fractal_8cpp-example.htm#a10">graphics/fractal.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a12">graphics/gravity_sim.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a8">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a8">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a15">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a9">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a12">machine_learning/perceptron.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a16">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga121545fb637db409a523862cdb8ffe39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga121545fb637db409a523862cdb8ffe39">&#9670;&nbsp;</a></span>eval() <span class="overload">[2/8]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Evaluate an expression (nonblocking). </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="financial_2black_scholes_options_8cpp-example.htm#a7">financial/black_scholes_options.cpp</a>, <a class="el" href="graphics_2fractal_8cpp-example.htm#a9">graphics/fractal.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a18">pde/swe.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l01337">1337</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;{ a.eval(); <span class="keywordflow">return</span> a; }</div></div><!-- fragment -->
</div>
</div>
<a id="gaeade064317ff4e40e66180718a34f9da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaeade064317ff4e40e66180718a34f9da">&#9670;&nbsp;</a></span>eval() <span class="overload">[3/8]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::eval </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> **&#160;</td>
          <td class="paramname"><em>arrays</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluate multiple arrays simultaneously. </p>

</div>
</div>
<a id="ga6a17a89fab2c26be8e911c4628c4c54c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6a17a89fab2c26be8e911c4628c4c54c">&#9670;&nbsp;</a></span>eval() <span class="overload">[4/8]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l01346">1346</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    {</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> *arrays[] = {&amp;a, &amp;b};</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(2, arrays);</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;        <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(a); b.eval();</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    }</div><div class="ttc" id="group__method__mat_htm_ga0b49360b87556fcc3d256c864e72e50b"><div class="ttname"><a href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">af::eval</a></div><div class="ttdeci">void eval(array &amp;a, array &amp;b, array &amp;c, array &amp;d, array &amp;e, array &amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01387">array.h:1387</a></div></div>
<div class="ttc" id="group__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc"> Create an af::array object from an OpenCL cl_mem buffer </div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ga932cc56a65acbe91ff2cea42e2f43bb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga932cc56a65acbe91ff2cea42e2f43bb6">&#9670;&nbsp;</a></span>eval() <span class="overload">[5/8]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l01356">1356</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    {</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c};</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(3, arrays);</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(a, b); c.eval();</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    }</div><div class="ttc" id="group__method__mat_htm_ga0b49360b87556fcc3d256c864e72e50b"><div class="ttname"><a href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">af::eval</a></div><div class="ttdeci">void eval(array &amp;a, array &amp;b, array &amp;c, array &amp;d, array &amp;e, array &amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01387">array.h:1387</a></div></div>
<div class="ttc" id="group__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc"> Create an af::array object from an OpenCL cl_mem buffer </div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ga8d75de296c6378ef17825a3776db93e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8d75de296c6378ef17825a3776db93e4">&#9670;&nbsp;</a></span>eval() <span class="overload">[6/8]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l01366">1366</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    {</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d};</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(4, arrays);</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;        <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(a, b, c); d.eval();</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    }</div><div class="ttc" id="group__method__mat_htm_ga0b49360b87556fcc3d256c864e72e50b"><div class="ttname"><a href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">af::eval</a></div><div class="ttdeci">void eval(array &amp;a, array &amp;b, array &amp;c, array &amp;d, array &amp;e, array &amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01387">array.h:1387</a></div></div>
<div class="ttc" id="group__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc"> Create an af::array object from an OpenCL cl_mem buffer </div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="gad2cfee88b0b16efb2e4c3fe5a01187ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad2cfee88b0b16efb2e4c3fe5a01187ac">&#9670;&nbsp;</a></span>eval() <span class="overload">[7/8]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l01377">1377</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    {</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d, &amp;e};</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(5, arrays);</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;        <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(a, b, c, d); e.eval();</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    }</div><div class="ttc" id="group__method__mat_htm_ga0b49360b87556fcc3d256c864e72e50b"><div class="ttname"><a href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">af::eval</a></div><div class="ttdeci">void eval(array &amp;a, array &amp;b, array &amp;c, array &amp;d, array &amp;e, array &amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01387">array.h:1387</a></div></div>
<div class="ttc" id="group__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc"> Create an af::array object from an OpenCL cl_mem buffer </div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ga0b49360b87556fcc3d256c864e72e50b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0b49360b87556fcc3d256c864e72e50b">&#9670;&nbsp;</a></span>eval() <span class="overload">[8/8]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void af::eval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l01387">1387</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    {</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f};</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(6, arrays);</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;        <a class="code" href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">eval</a>(a, b, c, d, e); f.eval();</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    }</div><div class="ttc" id="group__method__mat_htm_ga0b49360b87556fcc3d256c864e72e50b"><div class="ttname"><a href="group__method__mat.htm#ga0b49360b87556fcc3d256c864e72e50b">af::eval</a></div><div class="ttdeci">void eval(array &amp;a, array &amp;b, array &amp;c, array &amp;d, array &amp;e, array &amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01387">array.h:1387</a></div></div>
<div class="ttc" id="group__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc"> Create an af::array object from an OpenCL cl_mem buffer </div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="gaac57222501ff47f5d795503ac47c87e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaac57222501ff47f5d795503ac47c87e3">&#9670;&nbsp;</a></span>get() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle </p>

</div>
</div>
<a id="gae2b564347156aa7fd3908617a84ba3cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae2b564347156aa7fd3908617a84ba3cc">&#9670;&nbsp;</a></span>get() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle </p>

</div>
</div>
<a id="ga0c2f8602994b437164ee5783cedabfa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0c2f8602994b437164ee5783cedabfa9">&#9670;&nbsp;</a></span>getManualEvalFlag()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> bool af::getManualEvalFlag </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the manual eval flag. </p>

</div>
</div>
<a id="ga222cd421e1a99821609a17d54c9fc488"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga222cd421e1a99821609a17d54c9fc488">&#9670;&nbsp;</a></span>H()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> H </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the conjugate-transpose of the current array. </p>
<dl class="section return"><dt>Returns</dt><dd>conjugate-transpose matrix </dd></dl>

</div>
</div>
<a id="ga332e06d4340867375a5e415fc1befc1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga332e06d4340867375a5e415fc1befc1d">&#9670;&nbsp;</a></span>host() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a>* host </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy array data to host and return host pointer. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="computer_vision_2fast_8cpp-example.htm#a8">computer_vision/fast.cpp</a>, <a class="el" href="computer_vision_2harris_8cpp-example.htm#a11">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2susan_8cpp-example.htm#a9">computer_vision/susan.cpp</a>, and <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a11">image_processing/binary_thresholding.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga5cc0f3c2307de6b82ede47c9b26da2d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5cc0f3c2307de6b82ede47c9b26da2d0">&#9670;&nbsp;</a></span>host() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void host </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy array data to existing host pointer. </p>

</div>
</div>
<a id="ga75548d3af424a944fd62f0c897321311"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga75548d3af424a944fd62f0c897321311">&#9670;&nbsp;</a></span>isbool()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isbool </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>. </p>

</div>
</div>
<a id="gaf5e12ba6e9d5b29ab276fb4271cb0764"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf5e12ba6e9d5b29ab276fb4271cb0764">&#9670;&nbsp;</a></span>iscolumn()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool iscolumn </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only the first dimension has more than one element. </p>

</div>
</div>
<a id="ga2e82c9d93b78f06278146e85a222604b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2e82c9d93b78f06278146e85a222604b">&#9670;&nbsp;</a></span>iscomplex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool iscomplex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a id="gae1893dbf4e3ad0325a7cdff6bc5485f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae1893dbf4e3ad0325a7cdff6bc5485f5">&#9670;&nbsp;</a></span>isdouble()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isdouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a id="ga02af51409898c251bb31665e41596057"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga02af51409898c251bb31665e41596057">&#9670;&nbsp;</a></span>isempty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isempty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true of the array is empty. </p>

</div>
</div>
<a id="gab33ad283445e5af655bf7e87bbab72e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab33ad283445e5af655bf7e87bbab72e3">&#9670;&nbsp;</a></span>isfloating()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isfloating </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a id="ga4b69d758673c8443bd0609685cb97615"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4b69d758673c8443bd0609685cb97615">&#9670;&nbsp;</a></span>isinteger()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isinteger </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0">u8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1">s32</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a2fb596fb851c71689624894525c069e4">s64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1b18b7885e1360b6696142284b4b4928">u64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a98085990ff18bf438d3c839ea4c80bb4">s16</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5ae817c8a85914a5f150f2739df6b76c57">u16</a>. </p>

</div>
</div>
<a id="gae778ca527466663084f5797f23075603"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae778ca527466663084f5797f23075603">&#9670;&nbsp;</a></span>isreal()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool isreal </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l00633">633</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;{ <span class="keywordflow">return</span> !<a class="code" href="group__method__mat.htm#ga2e82c9d93b78f06278146e85a222604b">iscomplex</a>(); }</div><div class="ttc" id="group__method__mat_htm_ga2e82c9d93b78f06278146e85a222604b"><div class="ttname"><a href="group__method__mat.htm#ga2e82c9d93b78f06278146e85a222604b">af::array::iscomplex</a></div><div class="ttdeci">bool iscomplex() const</div><div class="ttdoc">Returns true if the array type is c32 or c64. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ga26b61c0ea2dcb7aa91d21db31c0cf148"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga26b61c0ea2dcb7aa91d21db31c0cf148">&#9670;&nbsp;</a></span>isrealfloating()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isrealfloating </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>. </p>

</div>
</div>
<a id="ga99cd74de21bde89f497dac1c2e1b23f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga99cd74de21bde89f497dac1c2e1b23f1">&#9670;&nbsp;</a></span>isrow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isrow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only the second dimension has more than one element. </p>

</div>
</div>
<a id="ga41966eaad67492044dc4757b843dbbac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga41966eaad67492044dc4757b843dbbac">&#9670;&nbsp;</a></span>isscalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isscalar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true of the array contains only one value. </p>

</div>
</div>
<a id="ga819cfdc18b093dce679d6b6c72d0110b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga819cfdc18b093dce679d6b6c72d0110b">&#9670;&nbsp;</a></span>issingle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool issingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a id="ga4c71baaa51ca6bc9403a2a9ef0c46d96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4c71baaa51ca6bc9403a2a9ef0c46d96">&#9670;&nbsp;</a></span>issparse()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool issparse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array is a sparse array. </p>

</div>
</div>
<a id="ga237bd79e8bf4cb8ad0c6eb1f0a9aa3d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga237bd79e8bf4cb8ad0c6eb1f0a9aa3d9">&#9670;&nbsp;</a></span>isvector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isvector </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only one of the array dimensions has more than one element. </p>

</div>
</div>
<a id="gaf44710cddd99a7992a890b6096265041"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf44710cddd99a7992a890b6096265041">&#9670;&nbsp;</a></span>numdims()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned numdims </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of dimensions of the array. </p>

</div>
</div>
<a id="ga048d77db849d74f18a13dabfd43ce55d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga048d77db849d74f18a13dabfd43ce55d">&#9670;&nbsp;</a></span>scalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a> scalar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the first element of the array as a scalar. </p>
<dl class="section note"><dt>Note</dt><dd>This is recommended for use while debugging. Calling this method constantly reduces performance. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a14">image_processing/binary_thresholding.cpp</a>, and <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#a11">machine_learning/kmeans.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga11dba1a052f2fe004665237d9670e1f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga11dba1a052f2fe004665237d9670e1f5">&#9670;&nbsp;</a></span>setManualEvalFlag()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::setManualEvalFlag </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Turn the manual eval flag on or off. </p>

</div>
</div>
<a id="ga7fc1c437c072767fc8acea2b67469498"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7fc1c437c072767fc8acea2b67469498">&#9670;&nbsp;</a></span>T()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> T </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the transposed the array. </p>
<dl class="section return"><dt>Returns</dt><dd>Transposed matrix </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="getting_started_2integer_8cpp-example.htm#a8">getting_started/integer.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#a9">getting_started/vectorize.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#a7">graphics/field.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a18">image_processing/filters.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a5">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a23">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a5">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a17">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a15">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a16">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a14">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a21">machine_learning/rbm.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a18">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga122667ba97054fbee7b1ff885bb3bfe4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga122667ba97054fbee7b1ff885bb3bfe4">&#9670;&nbsp;</a></span>type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get array data type. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a13">image_processing/brain_segmentation.cpp</a>, and <a class="el" href="image_processing_2morphing_8cpp-example.htm#a10">image_processing/morphing.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="gaa70b253da2d32394c521a815f7627116"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa70b253da2d32394c521a815f7627116">&#9670;&nbsp;</a></span>write()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void write </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform deep copy from host/device pointer to an existing array. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
