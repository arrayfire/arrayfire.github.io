<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>bitand</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__arith__func__bitand.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">bitand<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__mathfunc__mat.htm">Mathematical functions</a> &raquo;  &#124; <a class="el" href="group__logic__mat.htm">Logical operations</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Bitwise and operation of two inputs.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga45c0779ade4703708596df11cca98800"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga45c0779ade4703708596df11cca98800">af_bitand</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga45c0779ade4703708596df11cca98800"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for performing bitwise and on two arrays.  <a href="#ga45c0779ade4703708596df11cca98800">More...</a><br /></td></tr>
<tr class="separator:ga45c0779ade4703708596df11cca98800"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9952ba151293dcae29e5dba3de096deb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga9952ba151293dcae29e5dba3de096deb">operator&amp;</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga9952ba151293dcae29e5dba3de096deb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value.  <a href="group__arith__func__bitand.htm#ga9952ba151293dcae29e5dba3de096deb">More...</a><br /></td></tr>
<tr class="separator:ga9952ba151293dcae29e5dba3de096deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6bbeda99d46318ab639bbc2c0d26e741"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga6bbeda99d46318ab639bbc2c0d26e741">operator&amp;</a> (const bool &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga6bbeda99d46318ab639bbc2c0d26e741"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga6bbeda99d46318ab639bbc2c0d26e741">More...</a><br /></td></tr>
<tr class="separator:ga6bbeda99d46318ab639bbc2c0d26e741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf295b50b1711d447027c0d21cda84e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gadf295b50b1711d447027c0d21cda84e7">operator&amp;</a> (const int &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gadf295b50b1711d447027c0d21cda84e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gadf295b50b1711d447027c0d21cda84e7">More...</a><br /></td></tr>
<tr class="separator:gadf295b50b1711d447027c0d21cda84e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga55e3deb59ef941b1cc1bd15d5a8fca68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga55e3deb59ef941b1cc1bd15d5a8fca68">operator&amp;</a> (const unsigned &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga55e3deb59ef941b1cc1bd15d5a8fca68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga55e3deb59ef941b1cc1bd15d5a8fca68">More...</a><br /></td></tr>
<tr class="separator:ga55e3deb59ef941b1cc1bd15d5a8fca68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae05458743f806dca1ba107777c10480c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gae05458743f806dca1ba107777c10480c">operator&amp;</a> (const char &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gae05458743f806dca1ba107777c10480c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gae05458743f806dca1ba107777c10480c">More...</a><br /></td></tr>
<tr class="separator:gae05458743f806dca1ba107777c10480c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga580d402f6d637a1ca3346c58c0fbbed1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga580d402f6d637a1ca3346c58c0fbbed1">operator&amp;</a> (const unsigned char &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga580d402f6d637a1ca3346c58c0fbbed1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga580d402f6d637a1ca3346c58c0fbbed1">More...</a><br /></td></tr>
<tr class="separator:ga580d402f6d637a1ca3346c58c0fbbed1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga92a6fcb3a870eaf99a992ee772661a2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga92a6fcb3a870eaf99a992ee772661a2d">operator&amp;</a> (const long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga92a6fcb3a870eaf99a992ee772661a2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga92a6fcb3a870eaf99a992ee772661a2d">More...</a><br /></td></tr>
<tr class="separator:ga92a6fcb3a870eaf99a992ee772661a2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f0f90bd3ca8e7b86388be19bcf19182"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga2f0f90bd3ca8e7b86388be19bcf19182">operator&amp;</a> (const unsigned long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga2f0f90bd3ca8e7b86388be19bcf19182"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga2f0f90bd3ca8e7b86388be19bcf19182">More...</a><br /></td></tr>
<tr class="separator:ga2f0f90bd3ca8e7b86388be19bcf19182"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a364e35c4911780793d8486d5901db6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga7a364e35c4911780793d8486d5901db6">operator&amp;</a> (const long long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga7a364e35c4911780793d8486d5901db6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga7a364e35c4911780793d8486d5901db6">More...</a><br /></td></tr>
<tr class="separator:ga7a364e35c4911780793d8486d5901db6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7ec272342c61e20b61e47c081baa981"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gae7ec272342c61e20b61e47c081baa981">operator&amp;</a> (const unsigned long long &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gae7ec272342c61e20b61e47c081baa981"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gae7ec272342c61e20b61e47c081baa981">More...</a><br /></td></tr>
<tr class="separator:gae7ec272342c61e20b61e47c081baa981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9acbdf50e4d60daf2fe5426eeaa34201"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga9acbdf50e4d60daf2fe5426eeaa34201">operator&amp;</a> (const double &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga9acbdf50e4d60daf2fe5426eeaa34201"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga9acbdf50e4d60daf2fe5426eeaa34201">More...</a><br /></td></tr>
<tr class="separator:ga9acbdf50e4d60daf2fe5426eeaa34201"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga800e2ca3cbbb8339858fb7bab9479261"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga800e2ca3cbbb8339858fb7bab9479261">operator&amp;</a> (const float &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga800e2ca3cbbb8339858fb7bab9479261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga800e2ca3cbbb8339858fb7bab9479261">More...</a><br /></td></tr>
<tr class="separator:ga800e2ca3cbbb8339858fb7bab9479261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga681d1a8281fd3a483672603b2eb44e2e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga681d1a8281fd3a483672603b2eb44e2e">operator&amp;</a> (const cfloat &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga681d1a8281fd3a483672603b2eb44e2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga681d1a8281fd3a483672603b2eb44e2e">More...</a><br /></td></tr>
<tr class="separator:ga681d1a8281fd3a483672603b2eb44e2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga99a2b84f00d01e30d5247f0e3750d84e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga99a2b84f00d01e30d5247f0e3750d84e">operator&amp;</a> (const cdouble &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga99a2b84f00d01e30d5247f0e3750d84e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga99a2b84f00d01e30d5247f0e3750d84e">More...</a><br /></td></tr>
<tr class="separator:ga99a2b84f00d01e30d5247f0e3750d84e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0749c77fd9b1315f76c2da4bda22ea95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga0749c77fd9b1315f76c2da4bda22ea95">operator&amp;</a> (const array &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga0749c77fd9b1315f76c2da4bda22ea95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga0749c77fd9b1315f76c2da4bda22ea95">More...</a><br /></td></tr>
<tr class="separator:ga0749c77fd9b1315f76c2da4bda22ea95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a569520c5f5ba120e5413ce3796eeb6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga2a569520c5f5ba120e5413ce3796eeb6">operator&amp;</a> (const array &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:ga2a569520c5f5ba120e5413ce3796eeb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga2a569520c5f5ba120e5413ce3796eeb6">More...</a><br /></td></tr>
<tr class="separator:ga2a569520c5f5ba120e5413ce3796eeb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga77252925b1388adf094b93e1a94ffcb5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga77252925b1388adf094b93e1a94ffcb5">operator&amp;</a> (const array &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga77252925b1388adf094b93e1a94ffcb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga77252925b1388adf094b93e1a94ffcb5">More...</a><br /></td></tr>
<tr class="separator:ga77252925b1388adf094b93e1a94ffcb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2c43f25095e297d2c032773780eb310"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gac2c43f25095e297d2c032773780eb310">operator&amp;</a> (const array &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:gac2c43f25095e297d2c032773780eb310"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gac2c43f25095e297d2c032773780eb310">More...</a><br /></td></tr>
<tr class="separator:gac2c43f25095e297d2c032773780eb310"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga77cdc01cc66d2e2635fc864c2e120376"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga77cdc01cc66d2e2635fc864c2e120376">operator&amp;</a> (const array &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga77cdc01cc66d2e2635fc864c2e120376"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga77cdc01cc66d2e2635fc864c2e120376">More...</a><br /></td></tr>
<tr class="separator:ga77cdc01cc66d2e2635fc864c2e120376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17e6647058f2a2205b0f38776adc1185"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga17e6647058f2a2205b0f38776adc1185">operator&amp;</a> (const array &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga17e6647058f2a2205b0f38776adc1185"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga17e6647058f2a2205b0f38776adc1185">More...</a><br /></td></tr>
<tr class="separator:ga17e6647058f2a2205b0f38776adc1185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacc62ac687dd92904515d4888502688e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gacc62ac687dd92904515d4888502688e6">operator&amp;</a> (const array &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:gacc62ac687dd92904515d4888502688e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gacc62ac687dd92904515d4888502688e6">More...</a><br /></td></tr>
<tr class="separator:gacc62ac687dd92904515d4888502688e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafefb3e583f5eb31a6e671832b30bffbb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gafefb3e583f5eb31a6e671832b30bffbb">operator&amp;</a> (const array &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gafefb3e583f5eb31a6e671832b30bffbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gafefb3e583f5eb31a6e671832b30bffbb">More...</a><br /></td></tr>
<tr class="separator:gafefb3e583f5eb31a6e671832b30bffbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad1107d724fd4efb464136962a7bdf715"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gad1107d724fd4efb464136962a7bdf715">operator&amp;</a> (const array &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gad1107d724fd4efb464136962a7bdf715"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gad1107d724fd4efb464136962a7bdf715">More...</a><br /></td></tr>
<tr class="separator:gad1107d724fd4efb464136962a7bdf715"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a324365a8cb64063d302b2ead1e59e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga7a324365a8cb64063d302b2ead1e59e6">operator&amp;</a> (const array &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga7a324365a8cb64063d302b2ead1e59e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga7a324365a8cb64063d302b2ead1e59e6">More...</a><br /></td></tr>
<tr class="separator:ga7a324365a8cb64063d302b2ead1e59e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga61912247f6ded6b2d708ef7b7de6b469"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga61912247f6ded6b2d708ef7b7de6b469">operator&amp;</a> (const array &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga61912247f6ded6b2d708ef7b7de6b469"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga61912247f6ded6b2d708ef7b7de6b469">More...</a><br /></td></tr>
<tr class="separator:ga61912247f6ded6b2d708ef7b7de6b469"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ea6c38754753ad070793ad5403e01a7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga5ea6c38754753ad070793ad5403e01a7">operator&amp;</a> (const array &amp;lhs, const cfloat &amp;rhs)</td></tr>
<tr class="memdesc:ga5ea6c38754753ad070793ad5403e01a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga5ea6c38754753ad070793ad5403e01a7">More...</a><br /></td></tr>
<tr class="separator:ga5ea6c38754753ad070793ad5403e01a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf4c97412e30f894e75ce4f3d045281f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gaf4c97412e30f894e75ce4f3d045281f3">operator&amp;</a> (const array &amp;lhs, const cdouble &amp;rhs)</td></tr>
<tr class="memdesc:gaf4c97412e30f894e75ce4f3d045281f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gaf4c97412e30f894e75ce4f3d045281f3">More...</a><br /></td></tr>
<tr class="separator:gaf4c97412e30f894e75ce4f3d045281f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc3faf5423ac1cdbc1f48c82e8f7c8bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#gafc3faf5423ac1cdbc1f48c82e8f7c8bd">operator&amp;</a> (const short &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gafc3faf5423ac1cdbc1f48c82e8f7c8bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#gafc3faf5423ac1cdbc1f48c82e8f7c8bd">More...</a><br /></td></tr>
<tr class="separator:gafc3faf5423ac1cdbc1f48c82e8f7c8bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76e41fe82a4d87031e42120cc99029bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga76e41fe82a4d87031e42120cc99029bd">operator&amp;</a> (const unsigned short &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga76e41fe82a4d87031e42120cc99029bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga76e41fe82a4d87031e42120cc99029bd">More...</a><br /></td></tr>
<tr class="separator:ga76e41fe82a4d87031e42120cc99029bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga23ab0966537c593177150390311e62bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga23ab0966537c593177150390311e62bc">operator&amp;</a> (const array &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga23ab0966537c593177150390311e62bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga23ab0966537c593177150390311e62bc">More...</a><br /></td></tr>
<tr class="separator:ga23ab0966537c593177150390311e62bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga53e9938ef4e65b7fa81953f41706854f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga53e9938ef4e65b7fa81953f41706854f">operator&amp;</a> (const array &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="memdesc:ga53e9938ef4e65b7fa81953f41706854f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;)  <a href="group__arith__func__bitand.htm#ga53e9938ef4e65b7fa81953f41706854f">More...</a><br /></td></tr>
<tr class="separator:ga53e9938ef4e65b7fa81953f41706854f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Bitwise and operation of two inputs. </p>
<dl class="section note"><dt>Note</dt><dd>This function supports integer only. </dd></dl>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga45c0779ade4703708596df11cca98800"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_bitand </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>batch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for performing bitwise and on two arrays. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain result of <code>lhs</code> &amp; <code>rhs</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch</td><td>specifies if operations need to be performed in batch mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a class="anchor" id="ga53e9938ef4e65b7fa81953f41706854f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga23ab0966537c593177150390311e62bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga76e41fe82a4d87031e42120cc99029bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafc3faf5423ac1cdbc1f48c82e8f7c8bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf4c97412e30f894e75ce4f3d045281f3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga5ea6c38754753ad070793ad5403e01a7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga61912247f6ded6b2d708ef7b7de6b469"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga7a324365a8cb64063d302b2ead1e59e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gad1107d724fd4efb464136962a7bdf715"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafefb3e583f5eb31a6e671832b30bffbb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gacc62ac687dd92904515d4888502688e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga17e6647058f2a2205b0f38776adc1185"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga77cdc01cc66d2e2635fc864c2e120376"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gac2c43f25095e297d2c032773780eb310"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga77252925b1388adf094b93e1a94ffcb5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga2a569520c5f5ba120e5413ce3796eeb6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga0749c77fd9b1315f76c2da4bda22ea95"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga99a2b84f00d01e30d5247f0e3750d84e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga681d1a8281fd3a483672603b2eb44e2e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga800e2ca3cbbb8339858fb7bab9479261"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga9acbdf50e4d60daf2fe5426eeaa34201"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gae7ec272342c61e20b61e47c081baa981"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga7a364e35c4911780793d8486d5901db6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga2f0f90bd3ca8e7b86388be19bcf19182"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga92a6fcb3a870eaf99a992ee772661a2d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga580d402f6d637a1ca3346c58c0fbbed1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gae05458743f806dca1ba107777c10480c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga55e3deb59ef941b1cc1bd15d5a8fca68"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gadf295b50b1711d447027c0d21cda84e7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga6bbeda99d46318ab639bbc2c0d26e741"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. (const array&amp;, const array&amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> (const array&amp;, const array&amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga9952ba151293dcae29e5dba3de096deb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an bitwise AND operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a bitwise AND operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
