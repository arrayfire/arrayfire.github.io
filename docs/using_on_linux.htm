<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Using ArrayFire on Linux</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('using_on_linux.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Using ArrayFire on Linux </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Once you have <a class="el" href="installing.htm">installed</a> ArrayFire on your system, the next thing to do is set up your build system. On Linux, you can create ArrayFire projects using almost any editor, compiler, or build system. The only requirements are that you include the ArrayFire header directories and link with the ArrayFire library you intend to use i.e. CUDA, OpenCL, CPU, or Unified backends.</p>
<h1><a class="anchor" id="big-picture"></a> The big picture</h1>
<p>On Linux, we recommend installing ArrayFire to <code>/opt/arrayfire</code> directory. The installer will populate files in the following sub-directories: </p><pre class="fragment">include/arrayfire.h         - Primary ArrayFire include file
include/af/*.h              - Additional include files
lib/libaf*                  - CPU, CUDA, and OpenCL libraries (.a, .so)
lib/libforge*               - Visualization library
lib/libcu*                  - CUDA backend dependencies
lib/libOpenCL.so            - OpenCL ICD Loader library
share/ArrayFire/cmake/*     - CMake config (find) scripts
share/ArrayFire/examples/*  - All ArrayFire examples
</pre><p>Because ArrayFire follows standard installation practices, you can use basically any build system to create and compile projects that use ArrayFire. Among the many possible build systems on Linux we suggest using ArrayFire with either CMake or Makefiles with CMake being our preferred build system.</p>
<h1>Prerequisite software</h1>
<p>To build ArrayFire projects you will need a compiler</p>
<h3>Fedora, Centos and Redhat</h3>
<p>Install EPEL repo (not required for Fedora)</p>
<div class="fragment"><div class="line">yum install epel-release</div>
<div class="line">yum update</div>
</div><!-- fragment --><p>Install build dependencies</p>
<div class="fragment"><div class="line">yum install gcc gcc-c++ cmake3 make</div>
</div><!-- fragment --><h3>Debian and its derivatives</h3>
<p>Install common dependencies</p>
<div class="fragment"><div class="line">apt install build-essential cmake cmake-curses-gui</div>
</div><!-- fragment --><h1>CMake</h1>
<p>We recommend that the CMake build system be used to create ArrayFire projects. As <a href="#big-picture">discussed above</a>, ArrayFire ships with a series of CMake scripts to make finding and using our library easy.</p>
<p>First create a file called <code>CMakeLists.txt</code> in your project directory: </p><pre class="fragment">cd your-project-directory
touch CMakeLists.txt
</pre><p>and populate it with the following code: </p><pre class="fragment">find_package(ArrayFire)
add_executable(&lt;my_executable&gt; [list your source files here])

# To use Unified backend, do the following.
# Unified backend lets you choose the backend at runtime
target_link_libraries(&lt;my_executable&gt; ArrayFire::af)
</pre><p>where <code>my_executable</code> is the name of the executable you wish to create. See the <a href="https://cmake.org/documentation/">CMake documentation</a> for more information on how to use CMake. To link with a specific backend directly, replace the <code>ArrayFire::af</code> with the following for their respective backends.</p>
<ul>
<li><code>ArrayFire::afcpu</code> for CPU backend.</li>
<li><code>ArrayFire::afcuda</code> for CUDA backend.</li>
<li><code>ArrayFire::afopencl</code> for OpenCL backend.</li>
</ul>
<p>Next we need to instruct CMake to create build instructions and then compile. We suggest using CMake's out-of-source build functionality to keep your build and source files cleanly separated. To do this open the CMake GUI. </p><pre class="fragment">cd your-project-directory
mkdir build
cd build
cmake ..
make
</pre><p><em>NOTE:</em> If you have installed ArrayFire to a non-standard location, CMake can still help you out. When you execute CMake specify the path to ArrayFire installation root as <code>ArrayFire_DIR</code> variable.</p>
<p>For example, if ArrayFire were installed locally to <code>/home/user/ArrayFire</code> then you would modify the <code>cmake</code> command above to contain the following definition: </p><pre class="fragment">cmake -DArrayFire_DIR=/home/user/ArrayFire ..
</pre><p>You can also specify this information in the <code>ccmake</code> command-line interface.</p>
<h1>Makefiles</h1>
<p>Building ArrayFire projects with Makefiles is fairly similar to CMake except you must specify all paths and libraries manually.</p>
<p>As with any <code>make</code> project, you need to specify the include path to the directory containing <code><a class="el" href="arrayfire_8h.htm">arrayfire.h</a></code> file. This should be <code>-I /opt/arrayfire/include</code> if you followed our installation instructions.</p>
<p>Similarly, you will need to specify the path to the ArrayFire library using the <code>-L</code> option (e.g. <code>-L/opt/arrayfire/lib</code>) followed by the specific ArrayFire library you wish to use using the <code>-l</code> option (for example <code>-lafcpu</code>, <code>-lafopencl</code>, <code>-lafcuda</code>, or <code>-laf</code> for the CPU, OpenCL, CUDA, and unified backends, respectively.</p>
<p>Here is a minimal example Makefile which uses ArrayFire's CPU backend: </p><pre class="fragment">LIBS=-lafcpu
LIB_PATHS=-L/opt/arrayfire/lib
INCLUDES=-I/opt/arrayfire/include
CC=g++ $(COMPILER_OPTIONS)
COMPILER_OPTIONS=-std=c++11 -g

all: main.cpp Makefile
    $(CC) main.cpp -o test $(INCLUDES) $(LIBS) $(LIB_PATHS)
</pre> </div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
