<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: gaussiankernel</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__image__func__gauss.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">gaussiankernel<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__image__mat.htm">Image Processing</a> &raquo; <a class="el" href="group__utility__mat.htm">Utility Functions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Creates a Gaussian Kernel.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga340e55dad18edc59e9387dcf99d5ab78"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gauss.htm#ga340e55dad18edc59e9387dcf99d5ab78">gaussiankernel</a> (const int rows, const int cols, const double sig_r=0, const double sig_c=0)</td></tr>
<tr class="memdesc:ga340e55dad18edc59e9387dcf99d5ab78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a Gaussian Kernel.  <a href="group__image__func__gauss.htm#ga340e55dad18edc59e9387dcf99d5ab78">More...</a><br /></td></tr>
<tr class="separator:ga340e55dad18edc59e9387dcf99d5ab78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5de1866bc1bf50bf5fe3cb26d4e410d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a> (const int rows, const int cols, const double sig_r=0, const double sig_c=0)</td></tr>
<tr class="memdesc:gaa5de1866bc1bf50bf5fe3cb26d4e410d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for generating gausian kernels.  <a href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">More...</a><br /></td></tr>
<tr class="separator:gaa5de1866bc1bf50bf5fe3cb26d4e410d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae27509f852c88f97fb31df2d5bdef2b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gauss.htm#gaae27509f852c88f97fb31df2d5bdef2b">af_gaussian_kernel</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const int rows, const int cols, const double sigma_r, const double sigma_c)</td></tr>
<tr class="memdesc:gaae27509f852c88f97fb31df2d5bdef2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface generating gaussian kernels.  <a href="group__image__func__gauss.htm#gaae27509f852c88f97fb31df2d5bdef2b">More...</a><br /></td></tr>
<tr class="separator:gaae27509f852c88f97fb31df2d5bdef2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Creates a Gaussian Kernel. </p>
<p>This function creates a kernel of a specified size that contains a Gaussian distribution. This distribution is normalized to one. This is most commonly used when performing a Gaussian blur on an image. The function takes two sets of arguments, the size of the kernel (width and height in pixels) and the sigma parameters (for row and column) which effect the distribution of the weights in the y and x directions, respectively.</p>
<p>Changing sigma causes the weights in each direction to vary. Sigma is calculated internally as (0.25 * rows + 0.75) for rows and similarly for columns.</p>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="gaae27509f852c88f97fb31df2d5bdef2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaae27509f852c88f97fb31df2d5bdef2b">&#9670;&nbsp;</a></span>af_gaussian_kernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_gaussian_kernel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>sigma_r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>sigma_c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface generating gaussian kernels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is an array with values generated using gaussian function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rows</td><td>number of rows of the gaussian kernel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cols</td><td>number of columns of the gaussian kernel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sigma_r</td><td>(default 0) (calculated internally as 0.25 * rows + 0.75) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sigma_c</td><td>(default 0) (calculated internally as 0.25 * cols + 0.75) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if gaussian distribution values are generated successfully, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="ga340e55dad18edc59e9387dcf99d5ab78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga340e55dad18edc59e9387dcf99d5ab78">&#9670;&nbsp;</a></span>gaussiankernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::gaussiankernel </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>sig_r</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>sig_c</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a Gaussian Kernel. </p>
<p>This function creates a kernel of a specified size that contains a Gaussian distribution. This distribution is normalized to one. This is most commonly used when performing a Gaussian blur on an image. The function takes two sets of arguments, the size of the kernel (width and height in pixels) and the sigma parameters (for row and column) which effect the distribution of the weights in the y and x directions, respectively.</p>
<p>Changing sigma causes the weights in each direction to vary. Sigma is calculated internally as (0.25 * rows + 0.75) for rows and similarly for columns.</p>
<hr  />
 <dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000006">Deprecated:</a></b></dt><dd>Use <a class="el" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a> instead </dd></dl>

</div>
</div>
<a id="gaa5de1866bc1bf50bf5fe3cb26d4e410d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa5de1866bc1bf50bf5fe3cb26d4e410d">&#9670;&nbsp;</a></span>gaussianKernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::gaussianKernel </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>sig_r</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>sig_c</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for generating gausian kernels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rows</td><td>number of rows of the kernel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cols</td><td>number of columns of the kernel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sig_r</td><td>(default 0) (calculated internally as 0.25 * rows + 0.75) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sig_c</td><td>(default 0) (calculated internally as 0.25 * cols + 0.75) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with values generated using gaussian function </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="computer_vision_2harris_8cpp-example.htm#a7">computer_vision/harris.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a22">graphics/gravity_sim.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a20">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2deconvolution_8cpp-example.htm#a7">image_processing/deconvolution.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a6">image_processing/edge.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a18">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2gradient_diffusion_8cpp-example.htm#a2">image_processing/gradient_diffusion.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a7">image_processing/image_editing.cpp</a>, and <a class="el" href="image_processing_2morphing_8cpp-example.htm#a8">image_processing/morphing.cpp</a>.</dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
