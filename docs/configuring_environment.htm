<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Configuring ArrayFire Environment</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('configuring_environment.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Configuring ArrayFire Environment </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This page lists environment and runtime configurations that will help enhance your experience with ArrayFire.</p>
<h1><a class="anchor" id="environment_variables"></a>
Environment Variables</h1>
<p>The following are useful environment variable that can be used with ArrayFire.</p>
<h2><a class="anchor" id="af_path"></a>
AF_PATH</h2>
<p>This is the path with ArrayFire gets installed, ie. the includes and libs are present in this directory. You can use this variable to add include paths and libraries to your projects.</p>
<h2><a class="anchor" id="af_print_errors"></a>
AF_PRINT_ERRORS</h2>
<p>When AF_PRINT_ERRORS is set to 1, the exceptions thrown are more verbose and detailed. This helps in locating the exact failure.</p>
<div class="fragment"><div class="line">AF_PRINT_ERRORS=1 ./myprogram</div>
</div><!-- fragment --><h2><a class="anchor" id="af_cuda_default_device"></a>
AF_CUDA_DEFAULT_DEVICE</h2>
<p>Use this variable to set the default CUDA device. Valid values for this variable are the device identifiers shown when <a class="el" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a> is run.</p>
<div class="fragment"><div class="line">AF_CUDA_DEFAULT_DEVICE=1 ./myprogram_cuda</div>
</div><!-- fragment --><p>Note: <a class="el" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7" title="Sets the current device.">af::setDevice</a> call in the source code will take precedence over this variable.</p>
<h2><a class="anchor" id="af_opencl_default_device"></a>
AF_OPENCL_DEFAULT_DEVICE</h2>
<p>Use this variable to set the default OpenCL device. Valid values for this variable are the device identifiers shown when <a class="el" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a> is run.</p>
<div class="fragment"><div class="line">AF_OPENCL_DEFAULT_DEVICE=1 ./myprogram_opencl</div>
</div><!-- fragment --><p>Note: <a class="el" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7" title="Sets the current device.">af::setDevice</a> call in the source code will take precedence over this variable.</p>
<h2><a class="anchor" id="af_opencl_default_device_type"></a>
AF_OPENCL_DEFAULT_DEVICE_TYPE</h2>
<p>Use this variable to set the default OpenCL device type. Valid values for this variable are: CPU, GPU, ACC (Accelerators).</p>
<p>When set, the first device of the specified type is chosen as default device.</p>
<div class="fragment"><div class="line">AF_OPENCL_DEFAULT_DEVICE_TYPE=CPU ./myprogram_opencl</div>
</div><!-- fragment --><p>Note: <code>AF_OPENCL_DEFAULT_DEVICE</code> and <a class="el" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7" title="Sets the current device.">af::setDevice</a> takes precedence over this variable.</p>
<h2><a class="anchor" id="af_opencl_device_type"></a>
AF_OPENCL_DEVICE_TYPE</h2>
<p>Use this variable to only choose OpenCL devices of specified type. Valid values for this variable are:</p>
<ul>
<li>ALL: All OpenCL devices. (Default behavior).</li>
<li>CPU: CPU devices only.</li>
<li>GPU: GPU devices only.</li>
<li>ACC: Accelerator devices only.</li>
</ul>
<p>When set, the remaining OpenCL device types are ignored by the OpenCL backend.</p>
<div class="fragment"><div class="line">AF_OPENCL_DEVICE_TYPE=CPU ./myprogram_opencl</div>
</div><!-- fragment --><h2><a class="anchor" id="af_opencl_cpu_offload"></a>
AF_OPENCL_CPU_OFFLOAD</h2>
<p>When ArrayFire runs on devices with unified memory with the host (ie. <code>CL_DEVICE_HOST_UNIFIED_MENORY</code> is true for the device) then certain functions are offloaded to run on the CPU using mapped buffers.</p>
<p>ArrayFire takes advantage of fast libraries such as MKL while spending no time copying memory from device to host. The device memory is mapped to a host pointer which can be used in the offloaded functions.</p>
<p>This functionality can be disabled by using the environment variable <code>AF_OPENCL_CPU_OFFLOAD=0</code>.</p>
<p>The default bevaior of this has changed in version 3.4.</p>
<p>Prior to v3.4, CPU Offload functionality was used only when the user set <code>AF_OPENCL_CPU_OFFLOAD=1</code> and disabled otherwise.</p>
<p>From v3.4 onwards, CPU Offload is enabled by default and is disabled only when <code>AF_OPENCL_CPU_OFFLOAD=0</code> is set.</p>
<h2><a class="anchor" id="af_opencl_show_build_info"></a>
AF_OPENCL_SHOW_BUILD_INFO</h2>
<p>This variable is useful when debuggin OpenCL kernel compilation failures. When this variable is set to 1, and an error occurs during a OpenCL kernel compilation, then the log and kernel are printed to screen.</p>
<h2><a class="anchor" id="af_disable_graphics"></a>
AF_DISABLE_GRAPHICS</h2>
<p>Setting this variable to 1 will disable window creation when graphics functions are being called. Disabling window creation will disable all other graphics calls at runtime as well.</p>
<p>This is a useful enviornment variable when running code on servers and systems without displays. When graphics calls are run on such machines, they will print warning about window creation failing. To suppress those calls, set this variable.</p>
<h2><a class="anchor" id="af_synchronous_calls"></a>
AF_SYNCHRONOUS_CALLS</h2>
<p>When this environment variable is set to 1, ArrayFire will execute all functions synchronously.</p>
<h2><a class="anchor" id="af_show_load_path"></a>
AF_SHOW_LOAD_PATH</h2>
<p>When using the Unified backend, if this variable is set to 1, it will show the path where the ArrayFire backend libraries are loaded from.</p>
<p>If the libraries are loaded from system paths, such as PATH or LD_LIBRARY_PATH etc, then it will print "system path". If the libraries are loaded from other paths, then those paths are shown in full.</p>
<h2><a class="anchor" id="af_mem_debug"></a>
AF_MEM_DEBUG</h2>
<p>When AF_MEM_DEBUG is set to 1 (or anything not equal to 0), the caching mechanism in the memory manager is disabled. The device buffers are allocated using native functions as needed and freed when going out of scope.</p>
<p>When the environment variable is not set, it is treated to be zero.</p>
<div class="fragment"><div class="line">AF_MEM_DEBUG=1 ./myprogram</div>
</div><!-- fragment --><h2><a class="anchor" id="af_trace"></a>
AF_TRACE</h2>
<p>If ArrayFire was built with logging support, this enviornment variable will enable tracing of various modules within ArrayFire. This is a comma separated list of modules to trace. If enabled, ArrayFire will print relevant information to stdout. Currently the following modules are supported:</p>
<ul>
<li>all: All trace outputs</li>
<li>jit: Logs kernel fetch &amp; respective compile options and any errors.</li>
<li>mem: Memory management allocation, free and garbage collection information</li>
<li>platform: Device management information</li>
<li>unified: Unified backend dynamic loading information</li>
</ul>
<p>Tracing displays the information that could be useful when debugging or optimizing your application. Here is how you would use this variable: </p><pre class="fragment">AF_TRACE=mem,unified ./myprogram
</pre><p>This will print information about memory operations such as allocations, deallocations, and garbage collection.</p>
<p>All trace statements printed to the console have a suffix with the following pattern.</p>
<p><b>[category][Seconds since Epoch][Thread Id][source file relative path] &lt;Message&gt;</b></p>
<h2><a class="anchor" id="af_max_buffers"></a>
AF_MAX_BUFFERS</h2>
<p>When AF_MAX_BUFFERS is set, this environment variable specifies the maximum number of buffers allocated before garbage collection kicks in.</p>
<p>Please note that the total number of buffers that can exist simultaneously can be higher than this number. This variable tells the garbage collector that it should free any available buffers immediately if the treshold is reached.</p>
<p>When not set, the default value is 1000.</p>
<h2><a class="anchor" id="af_opencl_max_jit_len"></a>
AF_OPENCL_MAX_JIT_LEN</h2>
<p>When set, this environment variable specifies the maximum height of the OpenCL JIT tree after which evaluation is forced.</p>
<p>The default value, as of v3.4, is 50 on OSX, 100 everywhere else. This value was 20 for older versions.</p>
<h2><a class="anchor" id="af_cuda_max_jit_len"></a>
AF_CUDA_MAX_JIT_LEN</h2>
<p>When set, this environment variable specifies the maximum height of the CUDA JIT tree after which evaluation is forced.</p>
<p>The default value, as of v3.4, 100. This value was 20 for older versions.</p>
<h2><a class="anchor" id="af_cpu_max_jit_len"></a>
AF_CPU_MAX_JIT_LEN</h2>
<p>When set, this environment variable specifies the maximum length of the CPU JIT tree after which evaluation is forced.</p>
<p>The default value, as of v3.4, 100. This value was 20 for older versions.</p>
<h2><a class="anchor" id="af_build_lib_custom_path"></a>
AF_BUILD_LIB_CUSTOM_PATH</h2>
<p>When set, this environment variable specifies a custom path along which the symbol manager will search for dynamic (shared library) backends to load. This is useful for specialized build configurations that use the unified backend and build shared libraries separately.</p>
<p>By default, no additional path will be searched for an empty value.</p>
<h2><a class="anchor" id="af_jit_kernel_trace"></a>
AF_JIT_KERNEL_TRACE</h2>
<p>When set, this environment variable has to be set to one of the following three values:</p>
<ul>
<li>stdout : generated kernels will be printed to standard output</li>
<li>stderr : generated kernels will be printed to standard error stream</li>
<li>absolute path to a folder on the disk where generated kernels will be stored</li>
</ul>
<p>CUDA backend kernels are stored in files with cu file extension.</p>
<p>OpenCL backend kernels are stored in files with cl file extension. </p>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
