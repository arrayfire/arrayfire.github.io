<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>Window Functions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__gfx__func__window.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Window Functions<div class="ingroups"><a class="el" href="group__graphics__func.htm">Graphics</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Window creation, modification and destruction functions.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga004cf7aac21e18b5b5675f1b635c3734"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga004cf7aac21e18b5b5675f1b635c3734">Window</a> ()</td></tr>
<tr class="memdesc:ga004cf7aac21e18b5b5675f1b635c3734"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a window object with default width and height with title set to "ArrayFire".  <a href="#ga004cf7aac21e18b5b5675f1b635c3734">More...</a><br /></td></tr>
<tr class="separator:ga004cf7aac21e18b5b5675f1b635c3734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gada96f4fe8740ad0bf79388378f217c1f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gada96f4fe8740ad0bf79388378f217c1f">Window</a> (const char *const title)</td></tr>
<tr class="memdesc:gada96f4fe8740ad0bf79388378f217c1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a window object with default width and height using the title provided by the user.  <a href="#gada96f4fe8740ad0bf79388378f217c1f">More...</a><br /></td></tr>
<tr class="separator:gada96f4fe8740ad0bf79388378f217c1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01089293d764f6706f9873c5f5221a8a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga01089293d764f6706f9873c5f5221a8a">Window</a> (const int width, const int height, const char *const title=&quot;ArrayFire&quot;)</td></tr>
<tr class="memdesc:ga01089293d764f6706f9873c5f5221a8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a window object using the parameters provided by the user.  <a href="#ga01089293d764f6706f9873c5f5221a8a">More...</a><br /></td></tr>
<tr class="separator:ga01089293d764f6706f9873c5f5221a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5730679e2a1b3400d35493a41eb8ba92"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga5730679e2a1b3400d35493a41eb8ba92">Window</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wnd)</td></tr>
<tr class="memdesc:ga5730679e2a1b3400d35493a41eb8ba92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a window object with default width and height with title set to "ArrayFire".  <a href="#ga5730679e2a1b3400d35493a41eb8ba92">More...</a><br /></td></tr>
<tr class="separator:ga5730679e2a1b3400d35493a41eb8ba92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga254ab61160c1cd5eaa46cc0475bb7a06"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga254ab61160c1cd5eaa46cc0475bb7a06">~Window</a> ()</td></tr>
<tr class="memdesc:ga254ab61160c1cd5eaa46cc0475bb7a06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the window handle.  <a href="#ga254ab61160c1cd5eaa46cc0475bb7a06">More...</a><br /></td></tr>
<tr class="separator:ga254ab61160c1cd5eaa46cc0475bb7a06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d2481ae9d5600854146e6661280c249"><td class="memItemLeft" align="right" valign="top"><a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga0d2481ae9d5600854146e6661280c249">get</a> () const</td></tr>
<tr class="separator:ga0d2481ae9d5600854146e6661280c249"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91f824616f7dcac3265fff01a55990a9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga91f824616f7dcac3265fff01a55990a9">setPos</a> (const unsigned x, const unsigned y)</td></tr>
<tr class="memdesc:ga91f824616f7dcac3265fff01a55990a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the start position where the window will appear.  <a href="#ga91f824616f7dcac3265fff01a55990a9">More...</a><br /></td></tr>
<tr class="separator:ga91f824616f7dcac3265fff01a55990a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5982bd1cc411e471606311939b3c2721"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga5982bd1cc411e471606311939b3c2721">setTitle</a> (const char *const title)</td></tr>
<tr class="memdesc:ga5982bd1cc411e471606311939b3c2721"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the window title.  <a href="#ga5982bd1cc411e471606311939b3c2721">More...</a><br /></td></tr>
<tr class="separator:ga5982bd1cc411e471606311939b3c2721"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2958ea98540a67f41f2b0c34dc9067bd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga2958ea98540a67f41f2b0c34dc9067bd">setSize</a> (const unsigned w, const unsigned h)</td></tr>
<tr class="memdesc:ga2958ea98540a67f41f2b0c34dc9067bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the window size.  <a href="#ga2958ea98540a67f41f2b0c34dc9067bd">More...</a><br /></td></tr>
<tr class="separator:ga2958ea98540a67f41f2b0c34dc9067bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacbfc8c0729f789aacefaa78f6421ab14"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gacbfc8c0729f789aacefaa78f6421ab14">setColorMap</a> (const <a class="el" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574ae">ColorMap</a> cmap)</td></tr>
<tr class="memdesc:gacbfc8c0729f789aacefaa78f6421ab14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the colormap to be used for subsequent rendering calls.  <a href="#gacbfc8c0729f789aacefaa78f6421ab14">More...</a><br /></td></tr>
<tr class="separator:gacbfc8c0729f789aacefaa78f6421ab14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1277bb007f5f2845eac09ead91ad36d2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga1277bb007f5f2845eac09ead91ad36d2">setAxesLimits</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;y, const bool exact=false)</td></tr>
<tr class="memdesc:ga1277bb007f5f2845eac09ead91ad36d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setup the axes limits for a 2D histogram/plot/vector field.  <a href="#ga1277bb007f5f2845eac09ead91ad36d2">More...</a><br /></td></tr>
<tr class="separator:ga1277bb007f5f2845eac09ead91ad36d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc18fa771f03e10feeede73cf007706e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gabc18fa771f03e10feeede73cf007706e">setAxesLimits</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;x, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;y, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;z, const bool exact=false)</td></tr>
<tr class="memdesc:gabc18fa771f03e10feeede73cf007706e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setup the axes limits for a histogram/plot/surface/vector field.  <a href="#gabc18fa771f03e10feeede73cf007706e">More...</a><br /></td></tr>
<tr class="separator:gabc18fa771f03e10feeede73cf007706e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga554b0a23b70b411582c526db0cc2ebef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga554b0a23b70b411582c526db0cc2ebef">setAxesLimits</a> (const float xmin, const float xmax, const float ymin, const float ymax, const bool exact=false)</td></tr>
<tr class="memdesc:ga554b0a23b70b411582c526db0cc2ebef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setup the axes limits for a histogram/plot/surface/vector field.  <a href="#ga554b0a23b70b411582c526db0cc2ebef">More...</a><br /></td></tr>
<tr class="separator:ga554b0a23b70b411582c526db0cc2ebef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0bb71025fa53918509cef04796e0d3c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga0bb71025fa53918509cef04796e0d3c5">setAxesLimits</a> (const float xmin, const float xmax, const float ymin, const float ymax, const float zmin, const float zmax, const bool exact=false)</td></tr>
<tr class="memdesc:ga0bb71025fa53918509cef04796e0d3c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setup the axes limits for a histogram/plot/surface/vector field.  <a href="#ga0bb71025fa53918509cef04796e0d3c5">More...</a><br /></td></tr>
<tr class="separator:ga0bb71025fa53918509cef04796e0d3c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ec0dd422af7a5a0e3894045dfd37b4a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga2ec0dd422af7a5a0e3894045dfd37b4a">setAxesTitles</a> (const char *const xtitle=&quot;X-Axis&quot;, const char *const ytitle=&quot;Y-Axis&quot;, const char *const ztitle=&quot;Z-Axis&quot;)</td></tr>
<tr class="memdesc:ga2ec0dd422af7a5a0e3894045dfd37b4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setup the axes titles for a plot/surface/vector field.  <a href="#ga2ec0dd422af7a5a0e3894045dfd37b4a">More...</a><br /></td></tr>
<tr class="separator:ga2ec0dd422af7a5a0e3894045dfd37b4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaecba84f1690934bbc397e8ac7e141268"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gaecba84f1690934bbc397e8ac7e141268">grid</a> (const int rows, const int cols)</td></tr>
<tr class="memdesc:gaecba84f1690934bbc397e8ac7e141268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setup grid layout for multiview mode in a window.  <a href="#gaecba84f1690934bbc397e8ac7e141268">More...</a><br /></td></tr>
<tr class="separator:gaecba84f1690934bbc397e8ac7e141268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b148f40a95444d5669406b918ad2f52"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga4b148f40a95444d5669406b918ad2f52">show</a> ()</td></tr>
<tr class="memdesc:ga4b148f40a95444d5669406b918ad2f52"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function swaps the background buffer to current view and polls for any key strokes while the window was in focus.  <a href="#ga4b148f40a95444d5669406b918ad2f52">More...</a><br /></td></tr>
<tr class="separator:ga4b148f40a95444d5669406b918ad2f52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga46143fd6de3be9ab9951f140d3ae8c2f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga46143fd6de3be9ab9951f140d3ae8c2f">close</a> ()</td></tr>
<tr class="memdesc:ga46143fd6de3be9ab9951f140d3ae8c2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if window is marked for close.  <a href="#ga46143fd6de3be9ab9951f140d3ae8c2f">More...</a><br /></td></tr>
<tr class="separator:ga46143fd6de3be9ab9951f140d3ae8c2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9ff8d74c894cf172a03900f61887524d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga9ff8d74c894cf172a03900f61887524d">setVisibility</a> (const bool isVisible)</td></tr>
<tr class="memdesc:ga9ff8d74c894cf172a03900f61887524d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hide/Show the window.  <a href="#ga9ff8d74c894cf172a03900f61887524d">More...</a><br /></td></tr>
<tr class="separator:ga9ff8d74c894cf172a03900f61887524d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ecf69f50436a268031b4ff1b0843a7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga7ecf69f50436a268031b4ff1b0843a7e">af_create_window</a> (<a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> *out, const int width, const int height, const char *const title)</td></tr>
<tr class="memdesc:ga7ecf69f50436a268031b4ff1b0843a7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for creating a window.  <a href="#ga7ecf69f50436a268031b4ff1b0843a7e">More...</a><br /></td></tr>
<tr class="separator:ga7ecf69f50436a268031b4ff1b0843a7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga87e2e2291f1642f4a2ef38a094d61d75"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga87e2e2291f1642f4a2ef38a094d61d75">af_set_position</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const unsigned x, const unsigned y)</td></tr>
<tr class="memdesc:ga87e2e2291f1642f4a2ef38a094d61d75"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for setting the start position when window is displayed.  <a href="#ga87e2e2291f1642f4a2ef38a094d61d75">More...</a><br /></td></tr>
<tr class="separator:ga87e2e2291f1642f4a2ef38a094d61d75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga40859c4145276f77c83d37e2d3608cf4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga40859c4145276f77c83d37e2d3608cf4">af_set_title</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const char *const title)</td></tr>
<tr class="memdesc:ga40859c4145276f77c83d37e2d3608cf4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for setting window title.  <a href="#ga40859c4145276f77c83d37e2d3608cf4">More...</a><br /></td></tr>
<tr class="separator:ga40859c4145276f77c83d37e2d3608cf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc9ce32cb2c0a7a71b48812db8ef822e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gabc9ce32cb2c0a7a71b48812db8ef822e">af_set_size</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const unsigned w, const unsigned h)</td></tr>
<tr class="memdesc:gabc9ce32cb2c0a7a71b48812db8ef822e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for setting window position.  <a href="#gabc9ce32cb2c0a7a71b48812db8ef822e">More...</a><br /></td></tr>
<tr class="separator:gabc9ce32cb2c0a7a71b48812db8ef822e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37fc7eb00ae11c25e1a60d341663d68d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga37fc7eb00ae11c25e1a60d341663d68d">af_grid</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const int rows, const int cols)</td></tr>
<tr class="memdesc:ga37fc7eb00ae11c25e1a60d341663d68d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for grid setup in a window.  <a href="#ga37fc7eb00ae11c25e1a60d341663d68d">More...</a><br /></td></tr>
<tr class="separator:ga37fc7eb00ae11c25e1a60d341663d68d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62d2cad30e3aad06c24999fe5ac34598"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga62d2cad30e3aad06c24999fe5ac34598">af_set_axes_limits_compute</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> x, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> y, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> z, const bool exact, const <a class="el" href="structaf__cell.htm">af_cell</a> *const props)</td></tr>
<tr class="memdesc:ga62d2cad30e3aad06c24999fe5ac34598"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for setting axes limits for a histogram/plot/surface/vector field.  <a href="#ga62d2cad30e3aad06c24999fe5ac34598">More...</a><br /></td></tr>
<tr class="separator:ga62d2cad30e3aad06c24999fe5ac34598"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadcd1bd46b9d6fabc047365ca5dc3f73d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gadcd1bd46b9d6fabc047365ca5dc3f73d">af_set_axes_limits_2d</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const float xmin, const float xmax, const float ymin, const float ymax, const bool exact, const <a class="el" href="structaf__cell.htm">af_cell</a> *const props)</td></tr>
<tr class="memdesc:gadcd1bd46b9d6fabc047365ca5dc3f73d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for setting axes limits for a 2D histogram/plot/vector field.  <a href="#gadcd1bd46b9d6fabc047365ca5dc3f73d">More...</a><br /></td></tr>
<tr class="separator:gadcd1bd46b9d6fabc047365ca5dc3f73d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadadc41caf7d6a9b7ca2e674079971895"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gadadc41caf7d6a9b7ca2e674079971895">af_set_axes_limits_3d</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const float xmin, const float xmax, const float ymin, const float ymax, const float zmin, const float zmax, const bool exact, const <a class="el" href="structaf__cell.htm">af_cell</a> *const props)</td></tr>
<tr class="memdesc:gadadc41caf7d6a9b7ca2e674079971895"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for setting axes limits for a 3D plot/surface/vector field.  <a href="#gadadc41caf7d6a9b7ca2e674079971895">More...</a><br /></td></tr>
<tr class="separator:gadadc41caf7d6a9b7ca2e674079971895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga43dd0b670b6dfd4dab0545b6c06af528"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga43dd0b670b6dfd4dab0545b6c06af528">af_set_axes_titles</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const char *const xtitle, const char *const ytitle, const char *const ztitle, const <a class="el" href="structaf__cell.htm">af_cell</a> *const props)</td></tr>
<tr class="memdesc:ga43dd0b670b6dfd4dab0545b6c06af528"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for setting axes titles for histogram/plot/surface/vector field.  <a href="#ga43dd0b670b6dfd4dab0545b6c06af528">More...</a><br /></td></tr>
<tr class="separator:ga43dd0b670b6dfd4dab0545b6c06af528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50dae861324dca1cce9f583256f5a654"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga50dae861324dca1cce9f583256f5a654">af_show</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind)</td></tr>
<tr class="memdesc:ga50dae861324dca1cce9f583256f5a654"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for showing a window.  <a href="#ga50dae861324dca1cce9f583256f5a654">More...</a><br /></td></tr>
<tr class="separator:ga50dae861324dca1cce9f583256f5a654"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2068f5373f6ddc316a26382fb8d5b9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gac2068f5373f6ddc316a26382fb8d5b9c">af_is_window_closed</a> (bool *out, const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind)</td></tr>
<tr class="memdesc:gac2068f5373f6ddc316a26382fb8d5b9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for checking if window is marked for close.  <a href="#gac2068f5373f6ddc316a26382fb8d5b9c">More...</a><br /></td></tr>
<tr class="separator:gac2068f5373f6ddc316a26382fb8d5b9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7b63c70d45e101c4d8d500273e310c7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#gad7b63c70d45e101c4d8d500273e310c7">af_set_visibility</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind, const bool is_visible)</td></tr>
<tr class="memdesc:gad7b63c70d45e101c4d8d500273e310c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hide/Show a window.  <a href="#gad7b63c70d45e101c4d8d500273e310c7">More...</a><br /></td></tr>
<tr class="separator:gad7b63c70d45e101c4d8d500273e310c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a8dff5e0ca0ac4505a999281fbbad44"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__gfx__func__window.htm#ga4a8dff5e0ca0ac4505a999281fbbad44">af_destroy_window</a> (const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> wind)</td></tr>
<tr class="memdesc:ga4a8dff5e0ca0ac4505a999281fbbad44"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for destroying a window handle.  <a href="#ga4a8dff5e0ca0ac4505a999281fbbad44">More...</a><br /></td></tr>
<tr class="separator:ga4a8dff5e0ca0ac4505a999281fbbad44"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Window creation, modification and destruction functions. </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga7ecf69f50436a268031b4ff1b0843a7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7ecf69f50436a268031b4ff1b0843a7e">&#9670;&nbsp;</a></span>af_create_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_window </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>title</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for creating a window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is the handle to the created window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>is the width of the window that will be created </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>is the height of the window that will be created </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">title</td><td>is the window title</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if window creation is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="ga4a8dff5e0ca0ac4505a999281fbbad44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4a8dff5e0ca0ac4505a999281fbbad44">&#9670;&nbsp;</a></span>af_destroy_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_destroy_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for destroying a window handle. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if window destroy is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="ga37fc7eb00ae11c25e1a60d341663d68d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga37fc7eb00ae11c25e1a60d341663d68d">&#9670;&nbsp;</a></span>af_grid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_grid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for grid setup in a window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rows</td><td>is number of rows you want to show in a window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cols</td><td>is number of coloumns you want to show in a window</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if grid setup for window is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="gac2068f5373f6ddc316a26382fb8d5b9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac2068f5373f6ddc316a26382fb8d5b9c">&#9670;&nbsp;</a></span>af_is_window_closed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_window_closed </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for checking if window is marked for close. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is a boolean which indicates whether window is marked for close. This usually happens when user presses ESC key while the window is in focus. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if <code>wind</code> show is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="gadcd1bd46b9d6fabc047365ca5dc3f73d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadcd1bd46b9d6fabc047365ca5dc3f73d">&#9670;&nbsp;</a></span>af_set_axes_limits_2d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_axes_limits_2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>xmin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>xmax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>ymin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>ymax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>exact</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structaf__cell.htm">af_cell</a> *const&#160;</td>
          <td class="paramname"><em>props</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for setting axes limits for a 2D histogram/plot/vector field. </p>
<p>This function sets the axes limits to the ones provided by the user.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">xmin</td><td>is the minimum on x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">xmax</td><td>is the maximum on x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ymin</td><td>is the minimum on y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ymax</td><td>is the maximum on y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exact</td><td>is for using the exact min/max values from <code>x</code>, and <code>y</code>. If exact is false then the most significant digit is rounded up to next power of 2 and the magnitude remains the same. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">props</td><td>is structure <a class="el" href="structaf__cell.htm">af_cell</a> that has the properties that are used for the current rendering. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gadadc41caf7d6a9b7ca2e674079971895"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadadc41caf7d6a9b7ca2e674079971895">&#9670;&nbsp;</a></span>af_set_axes_limits_3d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_axes_limits_3d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>xmin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>xmax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>ymin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>ymax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>zmin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>zmax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>exact</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structaf__cell.htm">af_cell</a> *const&#160;</td>
          <td class="paramname"><em>props</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for setting axes limits for a 3D plot/surface/vector field. </p>
<p>This function sets the axes limits to the ones provided by the user.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">xmin</td><td>is the minimum on x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">xmax</td><td>is the maximum on x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ymin</td><td>is the minimum on y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ymax</td><td>is the maximum on y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">zmin</td><td>is the minimum on z-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">zmax</td><td>is the maximum on z-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exact</td><td>is for using the exact min/max values from <code>x</code>, <code>y</code> and <code>z</code>. If exact is false then the most significant digit is rounded up to next power of 2 and the magnitude remains the same. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">props</td><td>is structure <a class="el" href="structaf__cell.htm">af_cell</a> that has the properties that are used for the current rendering. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga62d2cad30e3aad06c24999fe5ac34598"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga62d2cad30e3aad06c24999fe5ac34598">&#9670;&nbsp;</a></span>af_set_axes_limits_compute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_axes_limits_compute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>exact</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structaf__cell.htm">af_cell</a> *const&#160;</td>
          <td class="paramname"><em>props</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for setting axes limits for a histogram/plot/surface/vector field. </p>
<p>This function computes the minimum and maximum for each dimension</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>the data to compute the limits for x-axis. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>the data to compute the limits for y-axis. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">z</td><td>the data to compute the limits for z-axis. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exact</td><td>is for using the exact min/max values from <code>x</code>, <code>y</code> and <code>z</code>. If exact is false then the most significant digit is rounded up to next power of 2 and the magnitude remains the same. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">props</td><td>is structure <a class="el" href="structaf__cell.htm">af_cell</a> that has the properties that are used for the current rendering.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Set <code>to</code> NULL if the chart is 2D. </dd></dl>

</div>
</div>
<a id="ga43dd0b670b6dfd4dab0545b6c06af528"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga43dd0b670b6dfd4dab0545b6c06af528">&#9670;&nbsp;</a></span>af_set_axes_titles()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_axes_titles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>xtitle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>ytitle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>ztitle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structaf__cell.htm">af_cell</a> *const&#160;</td>
          <td class="paramname"><em>props</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for setting axes titles for histogram/plot/surface/vector field. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">xtitle</td><td>is the name of the x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ytitle</td><td>is the name of the y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ztitle</td><td>is the name of the z-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">props</td><td>is structure <a class="el" href="structaf__cell.htm">af_cell</a> that has the properties that are used for the current rendering. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga87e2e2291f1642f4a2ef38a094d61d75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga87e2e2291f1642f4a2ef38a094d61d75">&#9670;&nbsp;</a></span>af_set_position()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_position </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for setting the start position when window is displayed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>is horizontal start coordinate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>is vertical start coordinate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if set position for window is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="gabc9ce32cb2c0a7a71b48812db8ef822e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabc9ce32cb2c0a7a71b48812db8ef822e">&#9670;&nbsp;</a></span>af_set_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_size </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for setting window position. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">w</td><td>is target width of the window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h</td><td>is target height of the window</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if set size for window is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="ga40859c4145276f77c83d37e2d3608cf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga40859c4145276f77c83d37e2d3608cf4">&#9670;&nbsp;</a></span>af_set_title()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_title </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>title</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for setting window title. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">title</td><td>is title of the window</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if set title for window is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="gad7b63c70d45e101c4d8d500273e310c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad7b63c70d45e101c4d8d500273e310c7">&#9670;&nbsp;</a></span>af_set_visibility()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_visibility </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_visible</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Hide/Show a window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window whose visibility is to be changed </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_visible</td><td>indicates if the window is to be hidden or brought into focus </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga50dae861324dca1cce9f583256f5a654"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga50dae861324dca1cce9f583256f5a654">&#9670;&nbsp;</a></span>af_show()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_show </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wind</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for showing a window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wind</td><td>is the window handle</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if window show is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="ga46143fd6de3be9ab9951f140d3ae8c2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga46143fd6de3be9ab9951f140d3ae8c2f">&#9670;&nbsp;</a></span>close()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if window is marked for close. </p>
<p>This usually happens when user presses ESC key while the window is in focus.</p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if window show is successful, otherwise an appropriate error code is returned. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="computer_vision_2fast_8cpp-example.htm#a14">computer_vision/fast.cpp</a>, <a class="el" href="computer_vision_2harris_8cpp-example.htm#a15">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2susan_8cpp-example.htm#a14">computer_vision/susan.cpp</a>, <a class="el" href="graphics_2conway_8cpp-example.htm#a7">graphics/conway.cpp</a>, <a class="el" href="graphics_2conway_pretty_8cpp-example.htm#a9">graphics/conway_pretty.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#a17">graphics/field.cpp</a>, <a class="el" href="graphics_2histogram_8cpp-example.htm#a7">graphics/histogram.cpp</a>, <a class="el" href="graphics_2plot2d_8cpp-example.htm#a9">graphics/plot2d.cpp</a>, <a class="el" href="graphics_2plot3_8cpp-example.htm#a9">graphics/plot3.cpp</a>, <a class="el" href="graphics_2surface_8cpp-example.htm#a5">graphics/surface.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a10">pde/swe.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga0d2481ae9d5600854146e6661280c249"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0d2481ae9d5600854146e6661280c249">&#9670;&nbsp;</a></span>get()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Returns the <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> window handle. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graphics_8h_source.htm#l00107">107</a> of file <a class="el" href="graphics_8h_source.htm">graphics.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{ <span class="keywordflow">return</span> wnd; }</div></div><!-- fragment -->
</div>
</div>
<a id="gaecba84f1690934bbc397e8ac7e141268"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaecba84f1690934bbc397e8ac7e141268">&#9670;&nbsp;</a></span>grid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void grid </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setup grid layout for multiview mode in a window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rows</td><td>is number of rows you want to divide the display area </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cols</td><td>is number of coloumns you want to divide the display area </td></tr>
  </table>
  </dd>
</dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="graphics_2field_8cpp-example.htm#a2">graphics/field.cpp</a>, <a class="el" href="graphics_2plot2d_8cpp-example.htm#a8">graphics/plot2d.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a9">pde/swe.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga1277bb007f5f2845eac09ead91ad36d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1277bb007f5f2845eac09ead91ad36d2">&#9670;&nbsp;</a></span>setAxesLimits() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setAxesLimits </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>exact</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setup the axes limits for a 2D histogram/plot/vector field. </p>
<p>This function computes the minimum and maximum for each dimension</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>the data to compute the limits for x-axis. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>the data to compute the limits for y-axis. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exact</td><td>is for using the exact min/max values from <code>x</code> and <code>y</code>. If exact is false then the most significant digit is rounded up to next power of 2 and the magnitude remains the same. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gabc18fa771f03e10feeede73cf007706e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabc18fa771f03e10feeede73cf007706e">&#9670;&nbsp;</a></span>setAxesLimits() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setAxesLimits </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>exact</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setup the axes limits for a histogram/plot/surface/vector field. </p>
<p>This function computes the minimum and maximum for each dimension</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>the data to compute the limits for x-axis. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>the data to compute the limits for y-axis. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">z</td><td>the data to compute the limits for z-axis. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exact</td><td>is for using the exact min/max values from <code>x</code> and <code>y</code>. If exact is false then the most significant digit is rounded up to next power of 2 and the magnitude remains the same. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga554b0a23b70b411582c526db0cc2ebef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga554b0a23b70b411582c526db0cc2ebef">&#9670;&nbsp;</a></span>setAxesLimits() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setAxesLimits </td>
          <td>(</td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>xmin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>xmax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>ymin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>ymax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>exact</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setup the axes limits for a histogram/plot/surface/vector field. </p>
<p>This function sets the axes limits to the ones provided by the user.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">xmin</td><td>is the minimum on x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">xmax</td><td>is the maximum on x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ymin</td><td>is the minimum on y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ymax</td><td>is the maximum on y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exact</td><td>is for using the exact min/max values from <code>x</code> and <code>y</code>. If exact is false then the most significant digit is rounded up to next power of 2 and the magnitude remains the same. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga0bb71025fa53918509cef04796e0d3c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0bb71025fa53918509cef04796e0d3c5">&#9670;&nbsp;</a></span>setAxesLimits() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setAxesLimits </td>
          <td>(</td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>xmin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>xmax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>ymin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>ymax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>zmin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>zmax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>exact</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setup the axes limits for a histogram/plot/surface/vector field. </p>
<p>This function sets the axes limits to the ones provided by the user.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">xmin</td><td>is the minimum on x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">xmax</td><td>is the maximum on x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ymin</td><td>is the minimum on y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ymax</td><td>is the maximum on y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">zmin</td><td>is the minimum on z-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">zmax</td><td>is the maximum on z-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exact</td><td>is for using the exact min/max values from <code>x</code>, <code>y</code> and <code>z</code>. If exact is false then the most significant digit is rounded up to next power of 2 and the magnitude remains the same. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga2ec0dd422af7a5a0e3894045dfd37b4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2ec0dd422af7a5a0e3894045dfd37b4a">&#9670;&nbsp;</a></span>setAxesTitles()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setAxesTitles </td>
          <td>(</td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>xtitle</em> = <code>&quot;X-Axis&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>ytitle</em> = <code>&quot;Y-Axis&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>ztitle</em> = <code>&quot;Z-Axis&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setup the axes titles for a plot/surface/vector field. </p>
<p>This function creates the axis titles for a chart.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">xtitle</td><td>is the name of the x-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ytitle</td><td>is the name of the y-axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ztitle</td><td>is the name of the z-axis </td></tr>
  </table>
  </dd>
</dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="graphics_2histogram_8cpp-example.htm#a5">graphics/histogram.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="gacbfc8c0729f789aacefaa78f6421ab14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacbfc8c0729f789aacefaa78f6421ab14">&#9670;&nbsp;</a></span>setColorMap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setColorMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574ae">ColorMap</a>&#160;</td>
          <td class="paramname"><em>cmap</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the colormap to be used for subsequent rendering calls. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cmap</td><td>should be one of the enum values from <a class="el" href="namespaceaf.htm#ac9622c24ded435e51b610ba590f91ff2">ColorMap</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga91f824616f7dcac3265fff01a55990a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga91f824616f7dcac3265fff01a55990a9">&#9670;&nbsp;</a></span>setPos()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setPos </td>
          <td>(</td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the start position where the window will appear. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>is horizontal coordinate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>is vertical coordinate </td></tr>
  </table>
  </dd>
</dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="graphics_2conway_pretty_8cpp-example.htm#a2">graphics/conway_pretty.cpp</a>, and <a class="el" href="graphics_2histogram_8cpp-example.htm#a6">graphics/histogram.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga2958ea98540a67f41f2b0c34dc9067bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2958ea98540a67f41f2b0c34dc9067bd">&#9670;&nbsp;</a></span>setSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setSize </td>
          <td>(</td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the window size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">w</td><td>is target width of the window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h</td><td>is target height of the window </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga5982bd1cc411e471606311939b3c2721"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5982bd1cc411e471606311939b3c2721">&#9670;&nbsp;</a></span>setTitle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setTitle </td>
          <td>(</td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the window title. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">title</td><td>is the window title </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga9ff8d74c894cf172a03900f61887524d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9ff8d74c894cf172a03900f61887524d">&#9670;&nbsp;</a></span>setVisibility()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setVisibility </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>isVisible</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Hide/Show the window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">isVisible</td><td>indicates if the window is to be hidden or brought into focus </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga4b148f40a95444d5669406b918ad2f52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4b148f40a95444d5669406b918ad2f52">&#9670;&nbsp;</a></span>show()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void show </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function swaps the background buffer to current view and polls for any key strokes while the window was in focus. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="graphics_2field_8cpp-example.htm#a16">graphics/field.cpp</a>, and <a class="el" href="graphics_2plot2d_8cpp-example.htm#a14">graphics/plot2d.cpp</a>.</dd>
</dl>
</div>
</div>
<a id="ga004cf7aac21e18b5b5675f1b635c3734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga004cf7aac21e18b5b5675f1b635c3734">&#9670;&nbsp;</a></span>Window() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1Window.htm">Window</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a window object with default width and height with title set to "ArrayFire". </p>

</div>
</div>
<a id="gada96f4fe8740ad0bf79388378f217c1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gada96f4fe8740ad0bf79388378f217c1f">&#9670;&nbsp;</a></span>Window() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1Window.htm">Window</a> </td>
          <td>(</td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a window object with default width and height using the title provided by the user. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">title</td><td>is the window title </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga01089293d764f6706f9873c5f5221a8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga01089293d764f6706f9873c5f5221a8a">&#9670;&nbsp;</a></span>Window() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1Window.htm">Window</a> </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *const&#160;</td>
          <td class="paramname"><em>title</em> = <code>&quot;ArrayFire&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a window object using the parameters provided by the user. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>is the window width </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>is the window height </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">title</td><td>is the window title with default value as "ArrayFire" </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga5730679e2a1b3400d35493a41eb8ba92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5730679e2a1b3400d35493a41eb8ba92">&#9670;&nbsp;</a></span>Window() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1Window.htm">Window</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a>&#160;</td>
          <td class="paramname"><em>wnd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a window object with default width and height with title set to "ArrayFire". </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">wnd</td><td>is an <a class="el" href="graphics_8h.htm#a2b08e6c9404d961d4ae3a32a1203041f">af_window</a> handle which can be retrieved by doing a get call on any <a class="el" href="classaf_1_1Window.htm">Window</a> object </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga254ab61160c1cd5eaa46cc0475bb7a06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga254ab61160c1cd5eaa46cc0475bb7a06">&#9670;&nbsp;</a></span>~Window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classaf_1_1Window.htm">Window</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroys the window handle. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
