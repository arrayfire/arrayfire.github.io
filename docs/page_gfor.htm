<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: GFOR: Parallel For-Loops</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('page_gfor.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div><div class="header">
  <div class="headertitle"><div class="title">GFOR: Parallel For-Loops </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p><a class="anchor" id="md__data_devel_arrayfire_docs_pages_gfor"></a></p>
<p>Run many independent loops simultaneously on the GPU or device.</p>
<h1><a class="anchor" id="gfor_intro"></a>
Introduction</h1>
<p>The gfor-loop construct may be used to simultaneously launch all of the iterations of a for-loop on the GPU or device, as long as the iterations are independent. While the standard for-loop performs each iteration sequentially, ArrayFire's gfor-loop performs each iteration at the same time (in parallel). ArrayFire does this by tiling out the values of all loop iterations and then performing computation on those tiles in one pass.</p>
<p>You can think of <code>gfor</code> as performing auto-vectorization of your code, e.g. you write a gfor-loop that increments every element of a vector but behind the scenes ArrayFire rewrites it to operate on the entire vector in parallel.</p>
<div class="fragment"><div class="line"><span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; ++i)</div>
<div class="line">   A(i) = A(i) + 1;</div>
<div class="line"> </div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq i, n)</div>
<div class="line">   A(i) = A(i) + 1;</div>
<div class="ttc" id="agfor_8h_htm_a6d6cd11d53daad217fd0b92f5a7ceec6"><div class="ttname"><a href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a></div><div class="ttdeci">#define gfor(var,...)</div><div class="ttdef"><b>Definition:</b> <a href="gfor_8h_source.htm#l00026">gfor.h:26</a></div></div>
</div><!-- fragment --><p>Behind the scenes, ArrayFire rewrites your code into this equivalent and faster version:</p>
<div class="fragment"><div class="line">A = A + 1;</div>
</div><!-- fragment --><p>It is best to vectorize computation as much as possible to avoid the overhead in both for-loops and gfor-loops.</p>
<p>To see another example, you could run an FFT on every 2D slice of a volume in a for-loop, or you could "vectorize" and simply do it all in one gfor-loop operation:</p>
<div class="fragment"><div class="line"><span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; N; ++i)</div>
<div class="line">   A(span,span,i) = fft2(A(span,span,i)); <span class="comment">// runs each FFT in sequence</span></div>
<div class="line"> </div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq i, N)</div>
<div class="line">   A(span,span,i) = fft2(A(span,span,i)); <span class="comment">// runs N FFTs in parallel</span></div>
</div><!-- fragment --><p>There are three formats for instantiating gfor-loops.</p><ol type="1">
<li><a class="el" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor(var,n)</a> Creates a sequence _{0, 1, ..., n-1}_</li>
<li><a class="el" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor(var,first,last)</a> Creates a sequence _{first, first+1, ..., last}_</li>
<li><a class="el" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor(var,first,last,incr)</a> Creates a sequence _{first, first+inc, first+2*inc, ..., last}_</li>
</ol>
<p>So all of the following represent the equivalent sequence: <em>0,1,2,3,4</em></p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq i, 5)</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq i, 0, 4)</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq i, 0, 1, 4)</div>
</div><!-- fragment --><p>More examples:</p>
<div class="fragment"><div class="line">array A = constant(1, n, n);</div>
<div class="line">array B = constant(1, 1, n);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, 0, n-1) {</div>
<div class="line">   B(span, k) = sum(A(span, k) * A(span,k));  <span class="comment">// inner product</span></div>
<div class="line">}</div>
</div><!-- fragment --><div class="fragment"><div class="line">array A = randu(n,m);</div>
<div class="line">array B = constant(0,n,m);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, 0, m-1) {</div>
<div class="line">   B(span,k) = fft(A(span,k));</div>
<div class="line">}</div>
</div><!-- fragment --><h1><a class="anchor" id="gfor"></a>
Usage</h1>
<h2><a class="anchor" id="gfor_user_functions"></a>
User Functions called within GFOR</h2>
<p>If you have defined a function that you want to call within a GFOR loop, then that function has to meet all the conditions described in this page in order to be able to work as expected.</p>
<p>Consider the (trivial) example below. The function compute() has to satisfy all requirements for GFOR Usage, so you cannot use if-else conditions inside it.</p>
<div class="fragment"><div class="line">array compute(array A, array B, <span class="keywordtype">float</span> ep)</div>
<div class="line">{</div>
<div class="line">  array H;</div>
<div class="line">  <span class="keywordflow">if</span> (ep &gt; 0) H = (A * B) / ep;  <span class="comment">// BAD</span></div>
<div class="line">  <span class="keywordflow">else</span>        H = A * 0;</div>
<div class="line">  <span class="keywordflow">return</span> H;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> m = 2, n = 3;</div>
<div class="line">array A = randu(m, n);</div>
<div class="line">array B = randu(m, n);</div>
<div class="line"><span class="keywordtype">float</span> ep = 2.35;</div>
<div class="line">array H = constant(0,m,n);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq ii, n)</div>
<div class="line">  H(span,ii) = compute(A(span,ii), B(span,ii), ep);</div>
</div><!-- fragment --><h2><a class="anchor" id="gfor_iterator"></a>
The Iterator</h2>
<p>The iterator can be involved in expressions.</p>
<div class="fragment"><div class="line">A = constant(1,n,n,m);</div>
<div class="line">B = constant(1,n,n);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, m)</div>
<div class="line">  A(span,span,k) = (k+1)*B + sin(k+1);  <span class="comment">// expressions</span></div>
</div><!-- fragment --><p>Iterator definitions can include arithmetic in expressions.</p>
<div class="fragment"><div class="line">A = constant(1,n,n,m);</div>
<div class="line">B = constant(1,n,n);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, m/4, m-m/4)</div>
<div class="line">  A(span,span,k) = k*B + sin(k+1);  <span class="comment">// expressions</span></div>
</div><!-- fragment --><h2><a class="anchor" id="gfor_subscripting"></a>
Subscripting</h2>
<p>More complicated subscripting is supported.</p>
<div class="fragment"><div class="line">A = constant(1,n,n,m);</div>
<div class="line">B = constant(1,n,10);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, m)</div>
<div class="line">  A(span,seq(10),k) = k*B;  <span class="comment">// subscripting, seq(10) generates index [0,9]</span></div>
</div><!-- fragment --><p>Iterators can be combined with arithmetic in subscripts.</p>
<div class="fragment"><div class="line">array A = randu(n,m);</div>
<div class="line">array B = constant(1,n,m);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, 1, m-1)</div>
<div class="line">  B(span,k) = A(span,k-1);</div>
<div class="line"> </div>
<div class="line">A = randu(n,2*m);</div>
<div class="line">B = constant(1,n,m);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, m)</div>
<div class="line">  B(span,k) = A(span,2*(k+1)-1);</div>
<div class="line"> </div>
<div class="line">A = randu(n,2*m);</div>
<div class="line">B = constant(1,n,m);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, m)</div>
<div class="line">  B(span,k) = A(span,floor(k+.2));</div>
</div><!-- fragment --><h2><a class="anchor" id="gfor_in_loop"></a>
In-Loop Reuse</h2>
<p>Within the loop, you can use a result you just computed.</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, n) {</div>
<div class="line">  A(span,k) = 4 * B(span,k);</div>
<div class="line">  C(span,k) = 4 * A(span,k); <span class="comment">// use it again</span></div>
<div class="line">}</div>
</div><!-- fragment --><p>Although it is more efficient to store the value in a temporary variable:</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, n) {</div>
<div class="line">  a = 4 * B(span,k);</div>
<div class="line">  A(span,k) = a;</div>
<div class="line">  C(span,k) = 4 * a;</div>
<div class="line">}</div>
</div><!-- fragment --><h2><a class="anchor" id="gfor_in_place_computation"></a>
In-Place Computation</h2>
<p>In some cases, GFOR behaves differently than the typical sequential FOR-loop. For example, you can read and modify a result in place as long as the accesses are independent.</p>
<div class="fragment"><div class="line">A = constant(1,n,n);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, n)</div>
<div class="line">  A(span,k) = sin(k) + A(span,k);</div>
</div><!-- fragment --><p>Subscripting behaviors <code>arrays</code> also work with GFOR.</p>
<div class="fragment"><div class="line">A = constant(1,n,n,m,k);</div>
<div class="line">m = m * k; <span class="comment">// precompute since cannot have expressions in iterator</span></div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, m)</div>
<div class="line">  A(span,span,k) = 4 * A(span,span,k); <span class="comment">// collapse last dimension</span></div>
</div><!-- fragment --><h2><a class="anchor" id="gfor_random"></a>
Random Data Generation</h2>
<p>Random data should always be generated outside the GFOR loop. This is due to the fact that GFOR only passes over the body of the loop once. Therefore, any calls to randu() inside the body of the loop will result in the same random matrix being assigned to every iteration of the loop.</p>
<p>For example, in the following trivial code, all columns of <code>B</code> are identical because <code>A</code> is only evaluated once:</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq ii, n) {</div>
<div class="line">  array A = randu(3,1);</div>
<div class="line">  B(span,ii) = A;</div>
<div class="line">}</div>
<div class="line">print(B);</div>
</div><!-- fragment --> <pre class="fragment">B =
   0.1209    0.1209    0.1209
   0.6432    0.6432    0.6432
   0.8746    0.8746    0.8746
</pre><p> This can be rectified by bringing the random number generation outside the loop, as follows:</p>
<div class="fragment"><div class="line">array A = randu(3,n);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq ii, n)</div>
<div class="line">  B(span,ii) = A(span,ii);</div>
<div class="line">print(B);</div>
</div><!-- fragment --> <pre class="fragment">B =
  0.0892    0.1655    0.7807
  0.5626    0.5173    0.2932
  0.5664    0.5898    0.1391
</pre><p> This is a trivial example, but demonstrates the principle that random numbers should be pre-allocated outside the loop in most cases.</p>
<h1><a class="anchor" id="gfor_restrictions"></a>
Restrictions</h1>
<p>This preliminary implementation of GFOR has the following restrictions.</p>
<h2><a class="anchor" id="gfor_iteration_independence"></a>
Iteration independence</h2>
<p>The most important property of the loop body is that each iteration must be independent of the other iterations. Note that accessing the result of a separate iteration produces undefined behavior.</p>
<div class="fragment"><div class="line">array B = randu(3);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, n)</div>
<div class="line">  B = B + k; <span class="comment">// bad</span></div>
</div><!-- fragment --><h2><a class="anchor" id="gfor_no_cond"></a>
No conditional statements</h2>
<p>No conditional statements in the body of the loop, (i.e. no branching). However, you can often find ways to overcome this restriction. Consider the following two examples:</p>
<p>Example 1: Problem</p>
<div class="fragment"><div class="line">A = constant(1,n,m);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, n) {</div>
<div class="line"> <span class="keywordflow">if</span> (k &gt; 10) A(span,k) = k + 1; <span class="comment">// bad</span></div>
<div class="line">}</div>
</div><!-- fragment --><p>However, you can do a few tricks to overcome this restriction by expressing the conditional statement as a multiplication by logical values. For instance, the block of code above can be converted to run as follows, without error:</p>
<p>Example 1: Solution</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, m) {</div>
<div class="line">  array condition = (k &gt; 1); <span class="comment">// good</span></div>
<div class="line">  A(span,k) = (!condition).as(<a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>) * A(span,k) + condition.as(<a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>) * (k + 1);</div>
<div class="line">}</div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
</div><!-- fragment --><p>Another example of overcoming the conditional statement restriction in GFOR is as follows:</p>
<p>Example 2: Problem</p>
<div class="fragment"><div class="line">array A = constant(1,n,n,m);</div>
<div class="line">array B = randu(n,n);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, 4) {</div>
<div class="line">  <span class="keywordflow">if</span> ((k % 2) != 0)</div>
<div class="line">     A(span,span,k) = B + k;</div>
<div class="line">  <span class="keywordflow">else</span></div>
<div class="line">     A(span,span,k) = B * k;</div>
<div class="line">}</div>
</div><!-- fragment --><p>Instead, you can make two passes over the same data, each pass performing one branch.</p>
<p>Example 2: Solution</p>
<div class="fragment"><div class="line">A = constant(1,n,n,m);</div>
<div class="line">B = randu(n);</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, 0, 2, 3)</div>
<div class="line">  A(span,span,k) = B + k;</div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, 1, 2, 3)</div>
<div class="line">  A(span,span,k) = B * k;</div>
</div><!-- fragment --><h2><a class="anchor" id="gfor_nested_loop"></a>
Nested loop restrictions</h2>
<p>Nesting GFOR-loops within GFOR-loops is unsupported. You may interleave FOR-loops as long as they are completely independent of the GFOR-loop iterator.</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, n) {</div>
<div class="line">  <a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq j, m) { <span class="comment">// bad</span></div>
<div class="line">  <span class="comment">// ...</span></div>
<div class="line">  }</div>
<div class="line">}</div>
</div><!-- fragment --><p>Nesting FOR-loops within GFOR-loops is supported, as long as the GFOR iterator is not used in the FOR loop iterator, as follows:</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, n) {</div>
<div class="line">  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; (m+k); j++) { <span class="comment">// bad</span></div>
<div class="line">  <span class="comment">// ...</span></div>
<div class="line">  }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, n) {</div>
<div class="line">  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; m; j++) { <span class="comment">// good</span></div>
<div class="line">  <span class="comment">//...</span></div>
<div class="line">  }</div>
<div class="line">}</div>
</div><!-- fragment --><p>Nesting GFOR-loops inside of FOR-loops is fully supported.</p>
<div class="fragment"><div class="line"><span class="keywordflow">for</span> (seq k, n) {</div>
<div class="line">  <a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (<span class="keywordtype">int</span> j = 0; j &lt; m; j++) { <span class="comment">// good</span></div>
<div class="line">  <span class="comment">//  ...</span></div>
<div class="line">  }</div>
<div class="line">}</div>
</div><!-- fragment --><h2><a class="anchor" id="gfor_no_logical"></a>
No logical indexing</h2>
<p>Logical indexing like the following is not supported:</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq i, n) {</div>
<div class="line">  array B = A(span,i);</div>
<div class="line">  array tmp = B(B &gt; .5); <span class="comment">// bad</span></div>
<div class="line">  D(i) = sum(tmp);</div>
<div class="line">}</div>
</div><!-- fragment --><p>The problem is that every GFOR tile has a different number of elements, something which GFOR cannot yet handle.</p>
<p>Similar to the workaround for conditional statements, it might work to use masked arithmetic:</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq i, n) {</div>
<div class="line">  array B = A(span,i);</div>
<div class="line">  array mask = B &gt; .5;</div>
<div class="line">  D(i) = sum(mask .* B);</div>
<div class="line">}</div>
</div><!-- fragment --><p>Sub-assignment with scalars and logical masks is supported:</p>
<div class="fragment"><div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq i, n) {</div>
<div class="line">  a = A(span,i);</div>
<div class="line">  a(isnan(a)) = 0;</div>
<div class="line">  A(span,i) = a;</div>
<div class="line">}</div>
</div><!-- fragment --><h1><a class="anchor" id="gfor_memory"></a>
Memory considerations</h1>
<p>Since each computation is done in parallel for all iterator values, you need to have enough card memory available to do all iterations simultaneously. If the problem exceeds memory, it will trigger "out of
memory" errors.</p>
<p>You can work around the memory limitations of your GPU or device by breaking the GFOR loop up into segments; however, you might want to consider using a larger memory GPU or device.</p>
<div class="fragment"><div class="line"><span class="comment">// BEFORE</span></div>
<div class="line"><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, 400) {</div>
<div class="line">  array B = A(span,k);</div>
<div class="line">  C(span,span,k) = matmulNT(B * B);  <span class="comment">// outer product expansion runs out of memory</span></div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// AFTER</span></div>
<div class="line"><span class="keywordflow">for</span> (<span class="keywordtype">int</span> kk = 0; kk &lt; 400; kk += 100) {</div>
<div class="line">  <a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (seq k, kk, kk+99) { <span class="comment">// four batches of 100</span></div>
<div class="line">     array B = A(span,k);</div>
<div class="line">     C(span,span,k) = matmulNT(B, B); <span class="comment">// now several smaller problems fit in card memory</span></div>
<div class="line">  }</div>
<div class="line">}</div>
</div><!-- fragment --> </div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Tue Feb 14 2023 10:39:42 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
    </ul>
</div>
</body>
</html>
