<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: arith.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('arith_8h.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">arith.h File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="defines_8h_source.htm">af/defines.h</a>&gt;</code><br />
</div>
<p><a href="arith_8h_source.htm">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="namespaces" name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceaf"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm">af</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gab7263a0ddf1274df8236ae35bd47f97b"><td class="memItemLeft" align="right" valign="top">AFAPI array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__min.htm#gab7263a0ddf1274df8236ae35bd47f97b">min</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gab7263a0ddf1274df8236ae35bd47f97b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise minimum between two arrays.  <a href="group__arith__func__min.htm#gab7263a0ddf1274df8236ae35bd47f97b">More...</a><br /></td></tr>
<tr class="separator:gab7263a0ddf1274df8236ae35bd47f97b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga49d779932680f4c307dc3a0955b0c8aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__min.htm#ga49d779932680f4c307dc3a0955b0c8aa">min</a> (const array &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:ga49d779932680f4c307dc3a0955b0c8aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise minimum between an array and a scalar value.  <a href="group__arith__func__min.htm#ga49d779932680f4c307dc3a0955b0c8aa">More...</a><br /></td></tr>
<tr class="separator:ga49d779932680f4c307dc3a0955b0c8aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ecbbb9ab2a8fd1f6b2792a75ebda11a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__min.htm#ga3ecbbb9ab2a8fd1f6b2792a75ebda11a">min</a> (const double lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga3ecbbb9ab2a8fd1f6b2792a75ebda11a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise minimum between an array and a scalar value.  <a href="group__arith__func__min.htm#ga3ecbbb9ab2a8fd1f6b2792a75ebda11a">More...</a><br /></td></tr>
<tr class="separator:ga3ecbbb9ab2a8fd1f6b2792a75ebda11a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae015e7d89f6bde5375244258d4250a32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__max.htm#gae015e7d89f6bde5375244258d4250a32">max</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:gae015e7d89f6bde5375244258d4250a32"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise maximum between two arrays.  <a href="group__arith__func__max.htm#gae015e7d89f6bde5375244258d4250a32">More...</a><br /></td></tr>
<tr class="separator:gae015e7d89f6bde5375244258d4250a32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacbeec971cc7ba6bb0916ea04685ac30e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__max.htm#gacbeec971cc7ba6bb0916ea04685ac30e">max</a> (const array &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:gacbeec971cc7ba6bb0916ea04685ac30e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise maximum between an array and a scalar value.  <a href="group__arith__func__max.htm#gacbeec971cc7ba6bb0916ea04685ac30e">More...</a><br /></td></tr>
<tr class="separator:gacbeec971cc7ba6bb0916ea04685ac30e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ce99c80071bb646463f8aecafe17c7f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__max.htm#ga4ce99c80071bb646463f8aecafe17c7f">max</a> (const double lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga4ce99c80071bb646463f8aecafe17c7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to find the elementwise maximum between an array and a scalar value.  <a href="group__arith__func__max.htm#ga4ce99c80071bb646463f8aecafe17c7f">More...</a><br /></td></tr>
<tr class="separator:ga4ce99c80071bb646463f8aecafe17c7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04a72240299a891b0d950e2c517e4a9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga04a72240299a891b0d950e2c517e4a9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the absolute value.  <a href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">More...</a><br /></td></tr>
<tr class="separator:ga04a72240299a891b0d950e2c517e4a9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ff1281766ca6b30a8e1c3e1163f4ead"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__arg.htm#ga4ff1281766ca6b30a8e1c3e1163f4ead">arg</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga4ff1281766ca6b30a8e1c3e1163f4ead"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the phase angle (in radians) of a complex array.  <a href="group__arith__func__arg.htm#ga4ff1281766ca6b30a8e1c3e1163f4ead">More...</a><br /></td></tr>
<tr class="separator:ga4ff1281766ca6b30a8e1c3e1163f4ead"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae966f38d9a7ead2fe25e4f7ba661a512"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sign.htm#gae966f38d9a7ead2fe25e4f7ba661a512">sign</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gae966f38d9a7ead2fe25e4f7ba661a512"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the sign of elements in an array.  <a href="group__arith__func__sign.htm#gae966f38d9a7ead2fe25e4f7ba661a512">More...</a><br /></td></tr>
<tr class="separator:gae966f38d9a7ead2fe25e4f7ba661a512"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60c90dbd268f909f21cee46e5001f96a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__round.htm#ga60c90dbd268f909f21cee46e5001f96a">round</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga60c90dbd268f909f21cee46e5001f96a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to round numbers.  <a href="group__arith__func__round.htm#ga60c90dbd268f909f21cee46e5001f96a">More...</a><br /></td></tr>
<tr class="separator:ga60c90dbd268f909f21cee46e5001f96a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1ba83310cab8448c8073bdd1db2b5f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__trunc.htm#gab1ba83310cab8448c8073bdd1db2b5f8">trunc</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gab1ba83310cab8448c8073bdd1db2b5f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to truncate numbers.  <a href="group__arith__func__trunc.htm#gab1ba83310cab8448c8073bdd1db2b5f8">More...</a><br /></td></tr>
<tr class="separator:gab1ba83310cab8448c8073bdd1db2b5f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf885d5dcafe962759c75da5da37ce31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__floor.htm#gaaf885d5dcafe962759c75da5da37ce31">floor</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gaaf885d5dcafe962759c75da5da37ce31"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to floor numbers.  <a href="group__arith__func__floor.htm#gaaf885d5dcafe962759c75da5da37ce31">More...</a><br /></td></tr>
<tr class="separator:gaaf885d5dcafe962759c75da5da37ce31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad751368621daa925c6a5d5a4b2f88233"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ceil.htm#gad751368621daa925c6a5d5a4b2f88233">ceil</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gad751368621daa925c6a5d5a4b2f88233"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to ceil numbers.  <a href="group__arith__func__ceil.htm#gad751368621daa925c6a5d5a4b2f88233">More...</a><br /></td></tr>
<tr class="separator:gad751368621daa925c6a5d5a4b2f88233"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad65c32b144ce6352260090e89be18c99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sin.htm#gad65c32b144ce6352260090e89be18c99">sin</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gad65c32b144ce6352260090e89be18c99"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the sine function.  <a href="group__arith__func__sin.htm#gad65c32b144ce6352260090e89be18c99">More...</a><br /></td></tr>
<tr class="separator:gad65c32b144ce6352260090e89be18c99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80c63bb4cd301157a1a9ad8c5bfe4aaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cos.htm#ga80c63bb4cd301157a1a9ad8c5bfe4aaa">cos</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga80c63bb4cd301157a1a9ad8c5bfe4aaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the cosine function.  <a href="group__arith__func__cos.htm#ga80c63bb4cd301157a1a9ad8c5bfe4aaa">More...</a><br /></td></tr>
<tr class="separator:ga80c63bb4cd301157a1a9ad8c5bfe4aaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c1b803ffbc144c23087a34766eaa10f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tan.htm#ga8c1b803ffbc144c23087a34766eaa10f">tan</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga8c1b803ffbc144c23087a34766eaa10f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the tangent function.  <a href="group__arith__func__tan.htm#ga8c1b803ffbc144c23087a34766eaa10f">More...</a><br /></td></tr>
<tr class="separator:ga8c1b803ffbc144c23087a34766eaa10f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga533b24b121e7f3df304f3dbb0220a494"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asin.htm#ga533b24b121e7f3df304f3dbb0220a494">asin</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga533b24b121e7f3df304f3dbb0220a494"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse sine function.  <a href="group__arith__func__asin.htm#ga533b24b121e7f3df304f3dbb0220a494">More...</a><br /></td></tr>
<tr class="separator:ga533b24b121e7f3df304f3dbb0220a494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5fe5965a0243e9982171a0715382cf66"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acos.htm#ga5fe5965a0243e9982171a0715382cf66">acos</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga5fe5965a0243e9982171a0715382cf66"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse cosine function.  <a href="group__arith__func__acos.htm#ga5fe5965a0243e9982171a0715382cf66">More...</a><br /></td></tr>
<tr class="separator:ga5fe5965a0243e9982171a0715382cf66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4d0599379df92612d9916f5d481f688"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#gab4d0599379df92612d9916f5d481f688">atan</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gab4d0599379df92612d9916f5d481f688"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse tangent function.  <a href="group__arith__func__atan.htm#gab4d0599379df92612d9916f5d481f688">More...</a><br /></td></tr>
<tr class="separator:gab4d0599379df92612d9916f5d481f688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2be957de4196a3185cc15528c3d0c4d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sinh.htm#ga2be957de4196a3185cc15528c3d0c4d1">sinh</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga2be957de4196a3185cc15528c3d0c4d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the hyperbolic sine function.  <a href="group__arith__func__sinh.htm#ga2be957de4196a3185cc15528c3d0c4d1">More...</a><br /></td></tr>
<tr class="separator:ga2be957de4196a3185cc15528c3d0c4d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d4cca44d8f2037e285ea6021ca0d094"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cosh.htm#ga6d4cca44d8f2037e285ea6021ca0d094">cosh</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga6d4cca44d8f2037e285ea6021ca0d094"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the hyperbolic cosine function.  <a href="group__arith__func__cosh.htm#ga6d4cca44d8f2037e285ea6021ca0d094">More...</a><br /></td></tr>
<tr class="separator:ga6d4cca44d8f2037e285ea6021ca0d094"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb123558731ea1f083b6f60d85809708"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tanh.htm#gafb123558731ea1f083b6f60d85809708">tanh</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gafb123558731ea1f083b6f60d85809708"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the hyperbolic tangent function.  <a href="group__arith__func__tanh.htm#gafb123558731ea1f083b6f60d85809708">More...</a><br /></td></tr>
<tr class="separator:gafb123558731ea1f083b6f60d85809708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6104aa17f156f9b682dbe13ef033b61"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asinh.htm#gac6104aa17f156f9b682dbe13ef033b61">asinh</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gac6104aa17f156f9b682dbe13ef033b61"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse hyperbolic sine function.  <a href="group__arith__func__asinh.htm#gac6104aa17f156f9b682dbe13ef033b61">More...</a><br /></td></tr>
<tr class="separator:gac6104aa17f156f9b682dbe13ef033b61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa76c8497cf72723b843962b7ebafc00"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acosh.htm#gafa76c8497cf72723b843962b7ebafc00">acosh</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gafa76c8497cf72723b843962b7ebafc00"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse hyperbolic cosine function.  <a href="group__arith__func__acosh.htm#gafa76c8497cf72723b843962b7ebafc00">More...</a><br /></td></tr>
<tr class="separator:gafa76c8497cf72723b843962b7ebafc00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga893e5a4bdddb5414347ca9e3d39925ab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atanh.htm#ga893e5a4bdddb5414347ca9e3d39925ab">atanh</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga893e5a4bdddb5414347ca9e3d39925ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse hyperbolic tangent function.  <a href="group__arith__func__atanh.htm#ga893e5a4bdddb5414347ca9e3d39925ab">More...</a><br /></td></tr>
<tr class="separator:ga893e5a4bdddb5414347ca9e3d39925ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58d06a6595a56ad5f79a7cfebaf2ca9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__real.htm#ga58d06a6595a56ad5f79a7cfebaf2ca9e">real</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga58d06a6595a56ad5f79a7cfebaf2ca9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the real part of a complex array.  <a href="group__arith__func__real.htm#ga58d06a6595a56ad5f79a7cfebaf2ca9e">More...</a><br /></td></tr>
<tr class="separator:ga58d06a6595a56ad5f79a7cfebaf2ca9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc5d46cd82835c90cf030f31ef5f904b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__imag.htm#gafc5d46cd82835c90cf030f31ef5f904b">imag</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gafc5d46cd82835c90cf030f31ef5f904b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the imaginary part of a complex array.  <a href="group__arith__func__imag.htm#gafc5d46cd82835c90cf030f31ef5f904b">More...</a><br /></td></tr>
<tr class="separator:gafc5d46cd82835c90cf030f31ef5f904b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19f10686a918b51dc75da9a86add1353"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__conjg.htm#ga19f10686a918b51dc75da9a86add1353">conjg</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga19f10686a918b51dc75da9a86add1353"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the complex conjugate of an input array.  <a href="group__arith__func__conjg.htm#ga19f10686a918b51dc75da9a86add1353">More...</a><br /></td></tr>
<tr class="separator:ga19f10686a918b51dc75da9a86add1353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe3fc0e6a0e013cbe8265fcd0c777f77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gafe3fc0e6a0e013cbe8265fcd0c777f77">root</a> (const array &amp;nth_root, const array &amp;value)</td></tr>
<tr class="memdesc:gafe3fc0e6a0e013cbe8265fcd0c777f77"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the nth root.  <a href="group__arith__func__root.htm#gafe3fc0e6a0e013cbe8265fcd0c777f77">More...</a><br /></td></tr>
<tr class="separator:gafe3fc0e6a0e013cbe8265fcd0c777f77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee34baf07e32006550ae3392d125e253"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gaee34baf07e32006550ae3392d125e253">root</a> (const array &amp;nth_root, const double value)</td></tr>
<tr class="memdesc:gaee34baf07e32006550ae3392d125e253"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the nth root.  <a href="group__arith__func__root.htm#gaee34baf07e32006550ae3392d125e253">More...</a><br /></td></tr>
<tr class="separator:gaee34baf07e32006550ae3392d125e253"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacdd2f7e7d1b11b6ec8de05a114e96677"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#gacdd2f7e7d1b11b6ec8de05a114e96677">root</a> (const double nth_root, const array &amp;value)</td></tr>
<tr class="memdesc:gacdd2f7e7d1b11b6ec8de05a114e96677"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the nth root.  <a href="group__arith__func__root.htm#gacdd2f7e7d1b11b6ec8de05a114e96677">More...</a><br /></td></tr>
<tr class="separator:gacdd2f7e7d1b11b6ec8de05a114e96677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25484c08c4af7cc892c45e92b5a5ae43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sigmoid.htm#ga25484c08c4af7cc892c45e92b5a5ae43">sigmoid</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga25484c08c4af7cc892c45e92b5a5ae43"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the logistical sigmoid function.  <a href="group__arith__func__sigmoid.htm#ga25484c08c4af7cc892c45e92b5a5ae43">More...</a><br /></td></tr>
<tr class="separator:ga25484c08c4af7cc892c45e92b5a5ae43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga583acbad8eb6db6ee6b8b363e2c38710"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">exp</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga583acbad8eb6db6ee6b8b363e2c38710"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the exponential.  <a href="group__arith__func__exp.htm#ga583acbad8eb6db6ee6b8b363e2c38710">More...</a><br /></td></tr>
<tr class="separator:ga583acbad8eb6db6ee6b8b363e2c38710"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaacc08428562cc9da985443467e97a517"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__expm1.htm#gaacc08428562cc9da985443467e97a517">expm1</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gaacc08428562cc9da985443467e97a517"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the exponential of an array minus 1, <code>exp(in) - 1</code>.  <a href="group__arith__func__expm1.htm#gaacc08428562cc9da985443467e97a517">More...</a><br /></td></tr>
<tr class="separator:gaacc08428562cc9da985443467e97a517"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga514378f292bd6cff8f22a377ec79d5ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erf.htm#ga514378f292bd6cff8f22a377ec79d5ca">erf</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga514378f292bd6cff8f22a377ec79d5ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the error function.  <a href="group__arith__func__erf.htm#ga514378f292bd6cff8f22a377ec79d5ca">More...</a><br /></td></tr>
<tr class="separator:ga514378f292bd6cff8f22a377ec79d5ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5639fa042b89e51308ddd3e22c1dad2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erfc.htm#gaa5639fa042b89e51308ddd3e22c1dad2">erfc</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gaa5639fa042b89e51308ddd3e22c1dad2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the complementary error function.  <a href="group__arith__func__erfc.htm#gaa5639fa042b89e51308ddd3e22c1dad2">More...</a><br /></td></tr>
<tr class="separator:gaa5639fa042b89e51308ddd3e22c1dad2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga706e8267880cf69e751ac197bc8aef30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log.htm#ga706e8267880cf69e751ac197bc8aef30">log</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga706e8267880cf69e751ac197bc8aef30"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the natural logarithm.  <a href="group__arith__func__log.htm#ga706e8267880cf69e751ac197bc8aef30">More...</a><br /></td></tr>
<tr class="separator:ga706e8267880cf69e751ac197bc8aef30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf1f1354103963df98ce14abc047b7e1e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log1p.htm#gaf1f1354103963df98ce14abc047b7e1e">log1p</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gaf1f1354103963df98ce14abc047b7e1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the natural logarithm of 1 + input, <code>ln(1+in)</code>.  <a href="group__arith__func__log1p.htm#gaf1f1354103963df98ce14abc047b7e1e">More...</a><br /></td></tr>
<tr class="separator:gaf1f1354103963df98ce14abc047b7e1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa705a35c9981fcc18298812033676b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log10.htm#gafa705a35c9981fcc18298812033676b2">log10</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gafa705a35c9981fcc18298812033676b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the base 10 logarithm.  <a href="group__arith__func__log10.htm#gafa705a35c9981fcc18298812033676b2">More...</a><br /></td></tr>
<tr class="separator:gafa705a35c9981fcc18298812033676b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1e7c6eb6b42ed166c1e85e242304eb8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#ae1e7c6eb6b42ed166c1e85e242304eb8">log2</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ae1e7c6eb6b42ed166c1e85e242304eb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the base 2 logarithm.  <a href="namespaceaf.htm#ae1e7c6eb6b42ed166c1e85e242304eb8">More...</a><br /></td></tr>
<tr class="separator:ae1e7c6eb6b42ed166c1e85e242304eb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdfe0e5a01f91a1079451b1e094a6893"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sqrt.htm#gabdfe0e5a01f91a1079451b1e094a6893">sqrt</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gabdfe0e5a01f91a1079451b1e094a6893"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the square root.  <a href="group__arith__func__sqrt.htm#gabdfe0e5a01f91a1079451b1e094a6893">More...</a><br /></td></tr>
<tr class="separator:gabdfe0e5a01f91a1079451b1e094a6893"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebafe312a006f27d80bd0777f85baef9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rsqrt.htm#gaebafe312a006f27d80bd0777f85baef9">rsqrt</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gaebafe312a006f27d80bd0777f85baef9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the reciprocal square root.  <a href="group__arith__func__rsqrt.htm#gaebafe312a006f27d80bd0777f85baef9">More...</a><br /></td></tr>
<tr class="separator:gaebafe312a006f27d80bd0777f85baef9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5898f2bff28dfa170f93c8ddf914d77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cbrt.htm#gad5898f2bff28dfa170f93c8ddf914d77">cbrt</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gad5898f2bff28dfa170f93c8ddf914d77"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the cube root.  <a href="group__arith__func__cbrt.htm#gad5898f2bff28dfa170f93c8ddf914d77">More...</a><br /></td></tr>
<tr class="separator:gad5898f2bff28dfa170f93c8ddf914d77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01bad677c74dd25185abec9add252328"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__factorial.htm#ga01bad677c74dd25185abec9add252328">factorial</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga01bad677c74dd25185abec9add252328"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the factorial.  <a href="group__arith__func__factorial.htm#ga01bad677c74dd25185abec9add252328">More...</a><br /></td></tr>
<tr class="separator:ga01bad677c74dd25185abec9add252328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac1e740132998e766fad33114ac972285"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tgamma.htm#gac1e740132998e766fad33114ac972285">tgamma</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gac1e740132998e766fad33114ac972285"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the gamma function.  <a href="group__arith__func__tgamma.htm#gac1e740132998e766fad33114ac972285">More...</a><br /></td></tr>
<tr class="separator:gac1e740132998e766fad33114ac972285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga847513dd059428a526f5207409eebdb6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lgamma.htm#ga847513dd059428a526f5207409eebdb6">lgamma</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga847513dd059428a526f5207409eebdb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the logarithm of the absolute value of the gamma function.  <a href="group__arith__func__lgamma.htm#ga847513dd059428a526f5207409eebdb6">More...</a><br /></td></tr>
<tr class="separator:ga847513dd059428a526f5207409eebdb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b76c8e189148a555cbd5634f16f3da5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__iszero.htm#ga0b76c8e189148a555cbd5634f16f3da5">iszero</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga0b76c8e189148a555cbd5634f16f3da5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check which values are zero.  <a href="group__arith__func__iszero.htm#ga0b76c8e189148a555cbd5634f16f3da5">More...</a><br /></td></tr>
<tr class="separator:ga0b76c8e189148a555cbd5634f16f3da5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b657f1911a16abbaf7c8211bc27ae45"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isinf.htm#ga7b657f1911a16abbaf7c8211bc27ae45">isInf</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga7b657f1911a16abbaf7c8211bc27ae45"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if values are infinite.  <a href="group__arith__func__isinf.htm#ga7b657f1911a16abbaf7c8211bc27ae45">More...</a><br /></td></tr>
<tr class="separator:ga7b657f1911a16abbaf7c8211bc27ae45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga462cf8505197a9ad3e12a48f530bba31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isnan.htm#ga462cf8505197a9ad3e12a48f530bba31">isNaN</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga462cf8505197a9ad3e12a48f530bba31"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if values are NaN.  <a href="group__arith__func__isnan.htm#ga462cf8505197a9ad3e12a48f530bba31">More...</a><br /></td></tr>
<tr class="separator:ga462cf8505197a9ad3e12a48f530bba31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1dfbee755fedd680f4476803ddfe06a7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm#ga1dfbee755fedd680f4476803ddfe06a7">af_add</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga1dfbee755fedd680f4476803ddfe06a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to add two arrays.  <a href="group__arith__func__add.htm#ga1dfbee755fedd680f4476803ddfe06a7">More...</a><br /></td></tr>
<tr class="separator:ga1dfbee755fedd680f4476803ddfe06a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80ff99a2e186c23614ea9f36ffc6f0a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm#ga80ff99a2e186c23614ea9f36ffc6f0a4">af_sub</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga80ff99a2e186c23614ea9f36ffc6f0a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to subtract one array from another array.  <a href="group__arith__func__sub.htm#ga80ff99a2e186c23614ea9f36ffc6f0a4">More...</a><br /></td></tr>
<tr class="separator:ga80ff99a2e186c23614ea9f36ffc6f0a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f7588b2809ff7551d38b6a0bd583a02"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga5f7588b2809ff7551d38b6a0bd583a02">af_mul</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga5f7588b2809ff7551d38b6a0bd583a02"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply two arrays.  <a href="group__arith__func__mul.htm#ga5f7588b2809ff7551d38b6a0bd583a02">More...</a><br /></td></tr>
<tr class="separator:ga5f7588b2809ff7551d38b6a0bd583a02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21f3f97755702692ec8976934e75fde6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm#ga21f3f97755702692ec8976934e75fde6">af_div</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga21f3f97755702692ec8976934e75fde6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to divide one array by another array.  <a href="group__arith__func__div.htm#ga21f3f97755702692ec8976934e75fde6">More...</a><br /></td></tr>
<tr class="separator:ga21f3f97755702692ec8976934e75fde6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7aa04bf23b32bb11c4bab8bdd637103"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="arith_8h.htm#ae7aa04bf23b32bb11c4bab8bdd637103">af_lt</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ae7aa04bf23b32bb11c4bab8bdd637103"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to perform a less-than comparison between corresponding elements of two arrays.  <a href="arith_8h.htm#ae7aa04bf23b32bb11c4bab8bdd637103">More...</a><br /></td></tr>
<tr class="separator:ae7aa04bf23b32bb11c4bab8bdd637103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e65603259515de8939899a163ebaf9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm#ga4e65603259515de8939899a163ebaf9e">af_gt</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga4e65603259515de8939899a163ebaf9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to perform a greater-than comparison between corresponding elements of two arrays.  <a href="group__arith__func__gt.htm#ga4e65603259515de8939899a163ebaf9e">More...</a><br /></td></tr>
<tr class="separator:ga4e65603259515de8939899a163ebaf9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5535ce64dbed46d0773fd494e84e922"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm#gad5535ce64dbed46d0773fd494e84e922">af_le</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:gad5535ce64dbed46d0773fd494e84e922"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to perform a less-than-or-equal comparison between corresponding elements of two arrays.  <a href="group__arith__func__le.htm#gad5535ce64dbed46d0773fd494e84e922">More...</a><br /></td></tr>
<tr class="separator:gad5535ce64dbed46d0773fd494e84e922"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4513f212e0b0a22dcf4653e89c85e3d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm#ga4513f212e0b0a22dcf4653e89c85e3d9">af_ge</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga4513f212e0b0a22dcf4653e89c85e3d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to perform a greater-than-or-equal comparison between corresponding elements of two arrays.  <a href="group__arith__func__ge.htm#ga4513f212e0b0a22dcf4653e89c85e3d9">More...</a><br /></td></tr>
<tr class="separator:ga4513f212e0b0a22dcf4653e89c85e3d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76d2da7716831616bb81effa9e163693"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm#ga76d2da7716831616bb81effa9e163693">af_eq</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga76d2da7716831616bb81effa9e163693"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if corresponding elements of two arrays are equal.  <a href="group__arith__func__eq.htm#ga76d2da7716831616bb81effa9e163693">More...</a><br /></td></tr>
<tr class="separator:ga76d2da7716831616bb81effa9e163693"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae4ee8bd06a410f259f1493fb811ce441"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm#gae4ee8bd06a410f259f1493fb811ce441">af_neq</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:gae4ee8bd06a410f259f1493fb811ce441"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if corresponding elements of two arrays are not equal.  <a href="group__arith__func__neq.htm#gae4ee8bd06a410f259f1493fb811ce441">More...</a><br /></td></tr>
<tr class="separator:gae4ee8bd06a410f259f1493fb811ce441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb1373bebcdfb72f62cd1cdaa6e05c89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm#gabb1373bebcdfb72f62cd1cdaa6e05c89">af_and</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:gabb1373bebcdfb72f62cd1cdaa6e05c89"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the logical AND of two arrays.  <a href="group__arith__func__and.htm#gabb1373bebcdfb72f62cd1cdaa6e05c89">More...</a><br /></td></tr>
<tr class="separator:gabb1373bebcdfb72f62cd1cdaa6e05c89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga93943807f322d79e890e03bd757c2b91"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm#ga93943807f322d79e890e03bd757c2b91">af_or</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga93943807f322d79e890e03bd757c2b91"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface the evaluate the logical OR of two arrays.  <a href="group__arith__func__or.htm#ga93943807f322d79e890e03bd757c2b91">More...</a><br /></td></tr>
<tr class="separator:ga93943807f322d79e890e03bd757c2b91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae43c58913317abc7fa16462e6336c98b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__not.htm#gae43c58913317abc7fa16462e6336c98b">af_not</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gae43c58913317abc7fa16462e6336c98b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the logical NOT of an array.  <a href="group__arith__func__not.htm#gae43c58913317abc7fa16462e6336c98b">More...</a><br /></td></tr>
<tr class="separator:gae43c58913317abc7fa16462e6336c98b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf97e8a38aab59ed2d3a742515467d01e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitnot.htm#gaf97e8a38aab59ed2d3a742515467d01e">af_bitnot</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gaf97e8a38aab59ed2d3a742515467d01e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the bitwise NOT of an array.  <a href="group__arith__func__bitnot.htm#gaf97e8a38aab59ed2d3a742515467d01e">More...</a><br /></td></tr>
<tr class="separator:gaf97e8a38aab59ed2d3a742515467d01e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga45c0779ade4703708596df11cca98800"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm#ga45c0779ade4703708596df11cca98800">af_bitand</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga45c0779ade4703708596df11cca98800"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the bitwise AND of two arrays.  <a href="group__arith__func__bitand.htm#ga45c0779ade4703708596df11cca98800">More...</a><br /></td></tr>
<tr class="separator:ga45c0779ade4703708596df11cca98800"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84c99f77d1d83fd53f949b4d67b5b210"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm#ga84c99f77d1d83fd53f949b4d67b5b210">af_bitor</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga84c99f77d1d83fd53f949b4d67b5b210"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the bitwise OR of two arrays.  <a href="group__arith__func__bitor.htm#ga84c99f77d1d83fd53f949b4d67b5b210">More...</a><br /></td></tr>
<tr class="separator:ga84c99f77d1d83fd53f949b4d67b5b210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8188620da6b432998e55fdd1fad22100"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm#ga8188620da6b432998e55fdd1fad22100">af_bitxor</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga8188620da6b432998e55fdd1fad22100"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the bitwise XOR of two arrays.  <a href="group__arith__func__bitxor.htm#ga8188620da6b432998e55fdd1fad22100">More...</a><br /></td></tr>
<tr class="separator:ga8188620da6b432998e55fdd1fad22100"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3139645aafe6f045a5cab454e9c13137"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm#ga3139645aafe6f045a5cab454e9c13137">af_bitshiftl</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga3139645aafe6f045a5cab454e9c13137"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to shift the bits of integer arrays left.  <a href="group__arith__func__shiftl.htm#ga3139645aafe6f045a5cab454e9c13137">More...</a><br /></td></tr>
<tr class="separator:ga3139645aafe6f045a5cab454e9c13137"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c06b9977ecf96cdfc83b5dfd1ac4895"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm#ga4c06b9977ecf96cdfc83b5dfd1ac4895">af_bitshiftr</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga4c06b9977ecf96cdfc83b5dfd1ac4895"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to shift the bits of integer arrays right.  <a href="group__arith__func__shiftr.htm#ga4c06b9977ecf96cdfc83b5dfd1ac4895">More...</a><br /></td></tr>
<tr class="separator:ga4c06b9977ecf96cdfc83b5dfd1ac4895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab0cb307d6f9019ac8cbbbe9b8a4d6b9b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cast.htm#gab0cb307d6f9019ac8cbbbe9b8a4d6b9b">af_cast</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type)</td></tr>
<tr class="memdesc:gab0cb307d6f9019ac8cbbbe9b8a4d6b9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to cast an array from one type to another.  <a href="group__arith__func__cast.htm#gab0cb307d6f9019ac8cbbbe9b8a4d6b9b">More...</a><br /></td></tr>
<tr class="separator:gab0cb307d6f9019ac8cbbbe9b8a4d6b9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b842c2d86df978ff68699aeaafca794"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__min.htm#ga2b842c2d86df978ff68699aeaafca794">af_minof</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga2b842c2d86df978ff68699aeaafca794"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to find the elementwise minimum between two arrays.  <a href="group__arith__func__min.htm#ga2b842c2d86df978ff68699aeaafca794">More...</a><br /></td></tr>
<tr class="separator:ga2b842c2d86df978ff68699aeaafca794"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0cd47e70cf82b48730a97c59f494b421"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__max.htm#ga0cd47e70cf82b48730a97c59f494b421">af_maxof</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga0cd47e70cf82b48730a97c59f494b421"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to find the elementwise minimum between an array and a scalar value.  <a href="group__arith__func__max.htm#ga0cd47e70cf82b48730a97c59f494b421">More...</a><br /></td></tr>
<tr class="separator:ga0cd47e70cf82b48730a97c59f494b421"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac4e785c5c877c7905e56f44ef0cb5e61"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#gac4e785c5c877c7905e56f44ef0cb5e61">af_clamp</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lo, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> hi, const bool batch)</td></tr>
<tr class="memdesc:gac4e785c5c877c7905e56f44ef0cb5e61"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to clamp an array between an upper and a lower limit.  <a href="group__arith__func__clamp.htm#gac4e785c5c877c7905e56f44ef0cb5e61">More...</a><br /></td></tr>
<tr class="separator:gac4e785c5c877c7905e56f44ef0cb5e61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4357bfcc23516a5747fac9e6a0456826"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rem.htm#ga4357bfcc23516a5747fac9e6a0456826">af_rem</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga4357bfcc23516a5747fac9e6a0456826"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the remainder.  <a href="group__arith__func__rem.htm#ga4357bfcc23516a5747fac9e6a0456826">More...</a><br /></td></tr>
<tr class="separator:ga4357bfcc23516a5747fac9e6a0456826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01924d1b59d8886e46fabd2dc9b27e0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga01924d1b59d8886e46fabd2dc9b27e0f">af_mod</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga01924d1b59d8886e46fabd2dc9b27e0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the modulus.  <a href="group__arith__func__mod.htm#ga01924d1b59d8886e46fabd2dc9b27e0f">More...</a><br /></td></tr>
<tr class="separator:ga01924d1b59d8886e46fabd2dc9b27e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae9670ec823c309ac0f8d53bfbf05886"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__abs.htm#gaae9670ec823c309ac0f8d53bfbf05886">af_abs</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gaae9670ec823c309ac0f8d53bfbf05886"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the absolute value.  <a href="group__arith__func__abs.htm#gaae9670ec823c309ac0f8d53bfbf05886">More...</a><br /></td></tr>
<tr class="separator:gaae9670ec823c309ac0f8d53bfbf05886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad04de0f7948688378dcd3628628a7424"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__arg.htm#gad04de0f7948688378dcd3628628a7424">af_arg</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gad04de0f7948688378dcd3628628a7424"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the phase angle (in radians) of a complex array.  <a href="group__arith__func__arg.htm#gad04de0f7948688378dcd3628628a7424">More...</a><br /></td></tr>
<tr class="separator:gad04de0f7948688378dcd3628628a7424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2d55dfb9b25e0a1316b70f01d5b44b35"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sign.htm#ga2d55dfb9b25e0a1316b70f01d5b44b35">af_sign</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga2d55dfb9b25e0a1316b70f01d5b44b35"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the sign of elements in an array.  <a href="group__arith__func__sign.htm#ga2d55dfb9b25e0a1316b70f01d5b44b35">More...</a><br /></td></tr>
<tr class="separator:ga2d55dfb9b25e0a1316b70f01d5b44b35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga40aedaa5100b3330f8f018329901df49"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__round.htm#ga40aedaa5100b3330f8f018329901df49">af_round</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga40aedaa5100b3330f8f018329901df49"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to round numbers.  <a href="group__arith__func__round.htm#ga40aedaa5100b3330f8f018329901df49">More...</a><br /></td></tr>
<tr class="separator:ga40aedaa5100b3330f8f018329901df49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad805f3f8ca3eb47d3f60693b5f5574a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__trunc.htm#gad805f3f8ca3eb47d3f60693b5f5574a0">af_trunc</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gad805f3f8ca3eb47d3f60693b5f5574a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to truncate numbers.  <a href="group__arith__func__trunc.htm#gad805f3f8ca3eb47d3f60693b5f5574a0">More...</a><br /></td></tr>
<tr class="separator:gad805f3f8ca3eb47d3f60693b5f5574a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e34bac2324b2fa4865ba36848be3af5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__floor.htm#ga5e34bac2324b2fa4865ba36848be3af5">af_floor</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga5e34bac2324b2fa4865ba36848be3af5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to floor numbers.  <a href="group__arith__func__floor.htm#ga5e34bac2324b2fa4865ba36848be3af5">More...</a><br /></td></tr>
<tr class="separator:ga5e34bac2324b2fa4865ba36848be3af5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaef6fb24da1164b62807aa746cda515a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ceil.htm#gaef6fb24da1164b62807aa746cda515a4">af_ceil</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gaef6fb24da1164b62807aa746cda515a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to ceil numbers.  <a href="group__arith__func__ceil.htm#gaef6fb24da1164b62807aa746cda515a4">More...</a><br /></td></tr>
<tr class="separator:gaef6fb24da1164b62807aa746cda515a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e716c1d12d13628844bfcd567fbfefe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__floor.htm#ga4e716c1d12d13628844bfcd567fbfefe">af_hypot</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga4e716c1d12d13628844bfcd567fbfefe"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the length of the hypotenuse of two inputs.  <a href="group__arith__func__floor.htm#ga4e716c1d12d13628844bfcd567fbfefe">More...</a><br /></td></tr>
<tr class="separator:ga4e716c1d12d13628844bfcd567fbfefe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f063e12c1b836098fdc9b65c40d2a76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sin.htm#ga0f063e12c1b836098fdc9b65c40d2a76">af_sin</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga0f063e12c1b836098fdc9b65c40d2a76"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the sine function.  <a href="group__arith__func__sin.htm#ga0f063e12c1b836098fdc9b65c40d2a76">More...</a><br /></td></tr>
<tr class="separator:ga0f063e12c1b836098fdc9b65c40d2a76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebb0ff5e77be24320b326165ed35efbf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cos.htm#gaebb0ff5e77be24320b326165ed35efbf">af_cos</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gaebb0ff5e77be24320b326165ed35efbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the cosine function.  <a href="group__arith__func__cos.htm#gaebb0ff5e77be24320b326165ed35efbf">More...</a><br /></td></tr>
<tr class="separator:gaebb0ff5e77be24320b326165ed35efbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf9f32b9af0af333892e0a3cb09f68cc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tan.htm#gaf9f32b9af0af333892e0a3cb09f68cc9">af_tan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gaf9f32b9af0af333892e0a3cb09f68cc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the tangent function.  <a href="group__arith__func__tan.htm#gaf9f32b9af0af333892e0a3cb09f68cc9">More...</a><br /></td></tr>
<tr class="separator:gaf9f32b9af0af333892e0a3cb09f68cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f3dcb9d9aaafa8bb55cba504f9f587f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asin.htm#ga2f3dcb9d9aaafa8bb55cba504f9f587f">af_asin</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga2f3dcb9d9aaafa8bb55cba504f9f587f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the inverse sine function.  <a href="group__arith__func__asin.htm#ga2f3dcb9d9aaafa8bb55cba504f9f587f">More...</a><br /></td></tr>
<tr class="separator:ga2f3dcb9d9aaafa8bb55cba504f9f587f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga23c081137211f01dafd7138f12a3fe97"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acos.htm#ga23c081137211f01dafd7138f12a3fe97">af_acos</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga23c081137211f01dafd7138f12a3fe97"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the inverse cosine function.  <a href="group__arith__func__acos.htm#ga23c081137211f01dafd7138f12a3fe97">More...</a><br /></td></tr>
<tr class="separator:ga23c081137211f01dafd7138f12a3fe97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga05b56256e8687f4afcba10694b76885c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#ga05b56256e8687f4afcba10694b76885c">af_atan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga05b56256e8687f4afcba10694b76885c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the inverse tangent function.  <a href="group__arith__func__atan.htm#ga05b56256e8687f4afcba10694b76885c">More...</a><br /></td></tr>
<tr class="separator:ga05b56256e8687f4afcba10694b76885c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc9e538b00b6b929e6f041e434e13862"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#gafc9e538b00b6b929e6f041e434e13862">af_atan2</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:gafc9e538b00b6b929e6f041e434e13862"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the inverse tangent of two arrays.  <a href="group__arith__func__atan.htm#gafc9e538b00b6b929e6f041e434e13862">More...</a><br /></td></tr>
<tr class="separator:gafc9e538b00b6b929e6f041e434e13862"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac5ee06a9436478f6aebf3e85f48fd858"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sinh.htm#gac5ee06a9436478f6aebf3e85f48fd858">af_sinh</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gac5ee06a9436478f6aebf3e85f48fd858"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the hyperbolic sine function.  <a href="group__arith__func__sinh.htm#gac5ee06a9436478f6aebf3e85f48fd858">More...</a><br /></td></tr>
<tr class="separator:gac5ee06a9436478f6aebf3e85f48fd858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6ef3dcc492534879af5ecc2ce206f8c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cosh.htm#gac6ef3dcc492534879af5ecc2ce206f8c">af_cosh</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gac6ef3dcc492534879af5ecc2ce206f8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the hyperbolic cosine function.  <a href="group__arith__func__cosh.htm#gac6ef3dcc492534879af5ecc2ce206f8c">More...</a><br /></td></tr>
<tr class="separator:gac6ef3dcc492534879af5ecc2ce206f8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80af29d535768cf4f0381f43637537ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tanh.htm#ga80af29d535768cf4f0381f43637537ef">af_tanh</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga80af29d535768cf4f0381f43637537ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the hyperbolic tangent function.  <a href="group__arith__func__tanh.htm#ga80af29d535768cf4f0381f43637537ef">More...</a><br /></td></tr>
<tr class="separator:ga80af29d535768cf4f0381f43637537ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58c6e65f858b5663e49ef2dd9d20615d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asinh.htm#ga58c6e65f858b5663e49ef2dd9d20615d">af_asinh</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga58c6e65f858b5663e49ef2dd9d20615d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the inverse hyperbolic sine function.  <a href="group__arith__func__asinh.htm#ga58c6e65f858b5663e49ef2dd9d20615d">More...</a><br /></td></tr>
<tr class="separator:ga58c6e65f858b5663e49ef2dd9d20615d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafebe073681f1a4269920a42dddf7551c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acosh.htm#gafebe073681f1a4269920a42dddf7551c">af_acosh</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gafebe073681f1a4269920a42dddf7551c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the inverse hyperbolic cosine function.  <a href="group__arith__func__acosh.htm#gafebe073681f1a4269920a42dddf7551c">More...</a><br /></td></tr>
<tr class="separator:gafebe073681f1a4269920a42dddf7551c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c23b18ca5b3f2ef99520b3fe20b31df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atanh.htm#ga4c23b18ca5b3f2ef99520b3fe20b31df">af_atanh</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga4c23b18ca5b3f2ef99520b3fe20b31df"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the inverse hyperbolic tangent function.  <a href="group__arith__func__atanh.htm#ga4c23b18ca5b3f2ef99520b3fe20b31df">More...</a><br /></td></tr>
<tr class="separator:ga4c23b18ca5b3f2ef99520b3fe20b31df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57e8010d6228c7c0d087acb88c77765f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#ga57e8010d6228c7c0d087acb88c77765f">af_cplx</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga57e8010d6228c7c0d087acb88c77765f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to create a complex array from a single real array.  <a href="group__arith__func__cplx.htm#ga57e8010d6228c7c0d087acb88c77765f">More...</a><br /></td></tr>
<tr class="separator:ga57e8010d6228c7c0d087acb88c77765f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8119672eaa835b8d5c39b9a30b28030b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#ga8119672eaa835b8d5c39b9a30b28030b">af_cplx2</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> real, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> imag, const bool batch)</td></tr>
<tr class="memdesc:ga8119672eaa835b8d5c39b9a30b28030b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to create a complex array from two real arrays.  <a href="group__arith__func__cplx.htm#ga8119672eaa835b8d5c39b9a30b28030b">More...</a><br /></td></tr>
<tr class="separator:ga8119672eaa835b8d5c39b9a30b28030b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d4a824d46cceb91f323d7760fbbed89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__real.htm#ga0d4a824d46cceb91f323d7760fbbed89">af_real</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga0d4a824d46cceb91f323d7760fbbed89"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the real part of a complex array.  <a href="group__arith__func__real.htm#ga0d4a824d46cceb91f323d7760fbbed89">More...</a><br /></td></tr>
<tr class="separator:ga0d4a824d46cceb91f323d7760fbbed89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4769132c720e522c619097cc8bfe288e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__imag.htm#ga4769132c720e522c619097cc8bfe288e">af_imag</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga4769132c720e522c619097cc8bfe288e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the imaginary part of a complex array.  <a href="group__arith__func__imag.htm#ga4769132c720e522c619097cc8bfe288e">More...</a><br /></td></tr>
<tr class="separator:ga4769132c720e522c619097cc8bfe288e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae774e0a535f29ab1267fc248cac6abef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__conjg.htm#gae774e0a535f29ab1267fc248cac6abef">af_conjg</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gae774e0a535f29ab1267fc248cac6abef"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the complex conjugate of an input array.  <a href="group__arith__func__conjg.htm#gae774e0a535f29ab1267fc248cac6abef">More...</a><br /></td></tr>
<tr class="separator:gae774e0a535f29ab1267fc248cac6abef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c9ab2083576a18ff217d52ac262edd6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm#ga4c9ab2083576a18ff217d52ac262edd6">af_root</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga4c9ab2083576a18ff217d52ac262edd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the nth root.  <a href="group__arith__func__root.htm#ga4c9ab2083576a18ff217d52ac262edd6">More...</a><br /></td></tr>
<tr class="separator:ga4c9ab2083576a18ff217d52ac262edd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f28be1a9c8b176a78c4a47f483e7fc6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga0f28be1a9c8b176a78c4a47f483e7fc6">af_pow</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga0f28be1a9c8b176a78c4a47f483e7fc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to raise a base to a power (or exponent).  <a href="group__arith__func__pow.htm#ga0f28be1a9c8b176a78c4a47f483e7fc6">More...</a><br /></td></tr>
<tr class="separator:ga0f28be1a9c8b176a78c4a47f483e7fc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga81e7392a6ad038d7f8c19381eb87e278"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow2.htm#ga81e7392a6ad038d7f8c19381eb87e278">af_pow2</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga81e7392a6ad038d7f8c19381eb87e278"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to raise 2 to a power (or exponent).  <a href="group__arith__func__pow2.htm#ga81e7392a6ad038d7f8c19381eb87e278">More...</a><br /></td></tr>
<tr class="separator:ga81e7392a6ad038d7f8c19381eb87e278"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf4280e3283b65264de75194e0a6d565"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sigmoid.htm#gadf4280e3283b65264de75194e0a6d565">af_sigmoid</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gadf4280e3283b65264de75194e0a6d565"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the logistical sigmoid function.  <a href="group__arith__func__sigmoid.htm#gadf4280e3283b65264de75194e0a6d565">More...</a><br /></td></tr>
<tr class="separator:gadf4280e3283b65264de75194e0a6d565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga09dcdefdefeec69384dce5e3786ecd59"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__exp.htm#ga09dcdefdefeec69384dce5e3786ecd59">af_exp</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga09dcdefdefeec69384dce5e3786ecd59"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the exponential.  <a href="group__arith__func__exp.htm#ga09dcdefdefeec69384dce5e3786ecd59">More...</a><br /></td></tr>
<tr class="separator:ga09dcdefdefeec69384dce5e3786ecd59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga51c38c0d988f7003dcc11642270433d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__expm1.htm#ga51c38c0d988f7003dcc11642270433d1">af_expm1</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga51c38c0d988f7003dcc11642270433d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the exponential of an array minus 1, <code>exp(in) - 1</code>.  <a href="group__arith__func__expm1.htm#ga51c38c0d988f7003dcc11642270433d1">More...</a><br /></td></tr>
<tr class="separator:ga51c38c0d988f7003dcc11642270433d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0fc12cb57f527b06d82d1cbcfc695e1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erf.htm#gaa0fc12cb57f527b06d82d1cbcfc695e1">af_erf</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gaa0fc12cb57f527b06d82d1cbcfc695e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the error function.  <a href="group__arith__func__erf.htm#gaa0fc12cb57f527b06d82d1cbcfc695e1">More...</a><br /></td></tr>
<tr class="separator:gaa0fc12cb57f527b06d82d1cbcfc695e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c67664da1ab580be31d78f31a387c51"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erfc.htm#ga8c67664da1ab580be31d78f31a387c51">af_erfc</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga8c67664da1ab580be31d78f31a387c51"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the complementary error function.  <a href="group__arith__func__erfc.htm#ga8c67664da1ab580be31d78f31a387c51">More...</a><br /></td></tr>
<tr class="separator:ga8c67664da1ab580be31d78f31a387c51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6c4f9ef490ba42d60399514f5a6d2898"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log.htm#ga6c4f9ef490ba42d60399514f5a6d2898">af_log</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga6c4f9ef490ba42d60399514f5a6d2898"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the natural logarithm.  <a href="group__arith__func__log.htm#ga6c4f9ef490ba42d60399514f5a6d2898">More...</a><br /></td></tr>
<tr class="separator:ga6c4f9ef490ba42d60399514f5a6d2898"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21759737e78a5e7ba8853c82bfe16651"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log1p.htm#ga21759737e78a5e7ba8853c82bfe16651">af_log1p</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga21759737e78a5e7ba8853c82bfe16651"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the natural logarithm of 1 + input, <code>ln(1+in)</code>.  <a href="group__arith__func__log1p.htm#ga21759737e78a5e7ba8853c82bfe16651">More...</a><br /></td></tr>
<tr class="separator:ga21759737e78a5e7ba8853c82bfe16651"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga864b77e86146a0ccace962ad1cd03cdf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log10.htm#ga864b77e86146a0ccace962ad1cd03cdf">af_log10</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga864b77e86146a0ccace962ad1cd03cdf"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the base 10 logarithm.  <a href="group__arith__func__log10.htm#ga864b77e86146a0ccace962ad1cd03cdf">More...</a><br /></td></tr>
<tr class="separator:ga864b77e86146a0ccace962ad1cd03cdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50974c64b6ba549d2187b9a63b4ab0cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="arith_8h.htm#a50974c64b6ba549d2187b9a63b4ab0cd">af_log2</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:a50974c64b6ba549d2187b9a63b4ab0cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the base 2 logarithm.  <a href="arith_8h.htm#a50974c64b6ba549d2187b9a63b4ab0cd">More...</a><br /></td></tr>
<tr class="separator:a50974c64b6ba549d2187b9a63b4ab0cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc569d3b6cb3a947882c0ae106656a24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sqrt.htm#gabc569d3b6cb3a947882c0ae106656a24">af_sqrt</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gabc569d3b6cb3a947882c0ae106656a24"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the square root.  <a href="group__arith__func__sqrt.htm#gabc569d3b6cb3a947882c0ae106656a24">More...</a><br /></td></tr>
<tr class="separator:gabc569d3b6cb3a947882c0ae106656a24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae8a25666f1a283f7dd5bce32f7258c6a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rsqrt.htm#gae8a25666f1a283f7dd5bce32f7258c6a">af_rsqrt</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gae8a25666f1a283f7dd5bce32f7258c6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the reciprocal square root.  <a href="group__arith__func__rsqrt.htm#gae8a25666f1a283f7dd5bce32f7258c6a">More...</a><br /></td></tr>
<tr class="separator:gae8a25666f1a283f7dd5bce32f7258c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72f50f5c8039ca08b7cb58f01d9814a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cbrt.htm#ga72f50f5c8039ca08b7cb58f01d9814a8">af_cbrt</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga72f50f5c8039ca08b7cb58f01d9814a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the cube root.  <a href="group__arith__func__cbrt.htm#ga72f50f5c8039ca08b7cb58f01d9814a8">More...</a><br /></td></tr>
<tr class="separator:ga72f50f5c8039ca08b7cb58f01d9814a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab08cf9e4b344da8ca244d09338000633"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__factorial.htm#gab08cf9e4b344da8ca244d09338000633">af_factorial</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gab08cf9e4b344da8ca244d09338000633"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the factorial.  <a href="group__arith__func__factorial.htm#gab08cf9e4b344da8ca244d09338000633">More...</a><br /></td></tr>
<tr class="separator:gab08cf9e4b344da8ca244d09338000633"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga94789bb78e2aae684b8cadcde1c2b434"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tgamma.htm#ga94789bb78e2aae684b8cadcde1c2b434">af_tgamma</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga94789bb78e2aae684b8cadcde1c2b434"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the gamma function.  <a href="group__arith__func__tgamma.htm#ga94789bb78e2aae684b8cadcde1c2b434">More...</a><br /></td></tr>
<tr class="separator:ga94789bb78e2aae684b8cadcde1c2b434"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadee8c158b45fd61f20e949abdb6ca4aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lgamma.htm#gadee8c158b45fd61f20e949abdb6ca4aa">af_lgamma</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gadee8c158b45fd61f20e949abdb6ca4aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the logarithm of the absolute value of the gamma function.  <a href="group__arith__func__lgamma.htm#gadee8c158b45fd61f20e949abdb6ca4aa">More...</a><br /></td></tr>
<tr class="separator:gadee8c158b45fd61f20e949abdb6ca4aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga559003777ce5148277b07903c351ecea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__iszero.htm#ga559003777ce5148277b07903c351ecea">af_iszero</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga559003777ce5148277b07903c351ecea"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if values are zero.  <a href="group__arith__func__iszero.htm#ga559003777ce5148277b07903c351ecea">More...</a><br /></td></tr>
<tr class="separator:ga559003777ce5148277b07903c351ecea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga933758a10227f15697ff503339e86823"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isinf.htm#ga933758a10227f15697ff503339e86823">af_isinf</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga933758a10227f15697ff503339e86823"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if values are infinite.  <a href="group__arith__func__isinf.htm#ga933758a10227f15697ff503339e86823">More...</a><br /></td></tr>
<tr class="separator:ga933758a10227f15697ff503339e86823"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga40a48fc1cd94ff02f6ddeb7dafd1f87e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isnan.htm#ga40a48fc1cd94ff02f6ddeb7dafd1f87e">af_isnan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga40a48fc1cd94ff02f6ddeb7dafd1f87e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if values are NaN.  <a href="group__arith__func__isnan.htm#ga40a48fc1cd94ff02f6ddeb7dafd1f87e">More...</a><br /></td></tr>
<tr class="separator:ga40a48fc1cd94ff02f6ddeb7dafd1f87e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga7a28608d80d434a0019bc3090b0d29b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#ga7a28608d80d434a0019bc3090b0d29b4">clamp</a> (const array &amp;in, const array &amp;lo, const array &amp;hi)</td></tr>
<tr class="separator:ga7a28608d80d434a0019bc3090b0d29b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga674981125b5e6d923d7be80ba793cf08"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#ga674981125b5e6d923d7be80ba793cf08">clamp</a> (const array &amp;in, const array &amp;lo, const double hi)</td></tr>
<tr class="separator:ga674981125b5e6d923d7be80ba793cf08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e1e2a3a430d163ab71680e81b238aec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#ga3e1e2a3a430d163ab71680e81b238aec">clamp</a> (const array &amp;in, const double lo, const array &amp;hi)</td></tr>
<tr class="separator:ga3e1e2a3a430d163ab71680e81b238aec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga778bd7924602127bfc7e1bbc8c1d1347"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__clamp.htm#ga778bd7924602127bfc7e1bbc8c1d1347">clamp</a> (const array &amp;in, const double lo, const double hi)</td></tr>
<tr class="separator:ga778bd7924602127bfc7e1bbc8c1d1347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga20d1ab30acd4ba437f6d3c53a757d345"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rem.htm#ga20d1ab30acd4ba437f6d3c53a757d345">rem</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="separator:ga20d1ab30acd4ba437f6d3c53a757d345"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5ad02745e5b4d752eb702aa890ea9906"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rem.htm#ga5ad02745e5b4d752eb702aa890ea9906">rem</a> (const array &amp;lhs, const double rhs)</td></tr>
<tr class="separator:ga5ad02745e5b4d752eb702aa890ea9906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga08818ec8b1dc3f41a7149ca035ba7c30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rem.htm#ga08818ec8b1dc3f41a7149ca035ba7c30">rem</a> (const double lhs, const array &amp;rhs)</td></tr>
<tr class="separator:ga08818ec8b1dc3f41a7149ca035ba7c30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gaaa28b62e9e553d4bc4738d99bba0dd39"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gaaa28b62e9e553d4bc4738d99bba0dd39">mod</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="separator:gaaa28b62e9e553d4bc4738d99bba0dd39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga731d6f227a94a632764e485d1baefcb0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga731d6f227a94a632764e485d1baefcb0">mod</a> (const array &amp;lhs, const double rhs)</td></tr>
<tr class="separator:ga731d6f227a94a632764e485d1baefcb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa33acaca64e1bd8e77a2f62fb4ac2db1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gaa33acaca64e1bd8e77a2f62fb4ac2db1">mod</a> (const double lhs, const array &amp;rhs)</td></tr>
<tr class="separator:gaa33acaca64e1bd8e77a2f62fb4ac2db1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga290faa6384905def505b523879d4022d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__hypot.htm#ga290faa6384905def505b523879d4022d">hypot</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga290faa6384905def505b523879d4022d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the length of the hypotenuse of two inputs.  <a href="group__arith__func__hypot.htm#ga290faa6384905def505b523879d4022d">More...</a><br /></td></tr>
<tr class="separator:ga290faa6384905def505b523879d4022d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd5eb0f3d303923e17ce12825289b3b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__hypot.htm#gafd5eb0f3d303923e17ce12825289b3b7">hypot</a> (const array &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:gafd5eb0f3d303923e17ce12825289b3b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the length of the hypotenuse of two inputs.   <a href="group__arith__func__hypot.htm#gafd5eb0f3d303923e17ce12825289b3b7">More...</a><br /></td></tr>
<tr class="separator:gafd5eb0f3d303923e17ce12825289b3b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga88a9c238de12dd93f9ea3938bdf0ee2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__hypot.htm#ga88a9c238de12dd93f9ea3938bdf0ee2c">hypot</a> (const double lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga88a9c238de12dd93f9ea3938bdf0ee2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the length of the hypotenuse of two inputs.   <a href="group__arith__func__hypot.htm#ga88a9c238de12dd93f9ea3938bdf0ee2c">More...</a><br /></td></tr>
<tr class="separator:ga88a9c238de12dd93f9ea3938bdf0ee2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga4d78567a4f07d1e2031d37610bbef86a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#ga4d78567a4f07d1e2031d37610bbef86a">atan2</a> (const array &amp;lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga4d78567a4f07d1e2031d37610bbef86a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse tangent of two arrays.  <a href="group__arith__func__atan.htm#ga4d78567a4f07d1e2031d37610bbef86a">More...</a><br /></td></tr>
<tr class="separator:ga4d78567a4f07d1e2031d37610bbef86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6532fa8f9580cdbc7499dd9a01f343f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#ga6532fa8f9580cdbc7499dd9a01f343f0">atan2</a> (const array &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:ga6532fa8f9580cdbc7499dd9a01f343f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse tangent of two arrays.   <a href="group__arith__func__atan.htm#ga6532fa8f9580cdbc7499dd9a01f343f0">More...</a><br /></td></tr>
<tr class="separator:ga6532fa8f9580cdbc7499dd9a01f343f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga946ca072ff37ae2439862a3c28519abb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm#ga946ca072ff37ae2439862a3c28519abb">atan2</a> (const double lhs, const array &amp;rhs)</td></tr>
<tr class="memdesc:ga946ca072ff37ae2439862a3c28519abb"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the inverse tangent of two arrays.   <a href="group__arith__func__atan.htm#ga946ca072ff37ae2439862a3c28519abb">More...</a><br /></td></tr>
<tr class="separator:ga946ca072ff37ae2439862a3c28519abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga44ff7fc2e3e8ed0489fe78b5d724d0f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#ga44ff7fc2e3e8ed0489fe78b5d724d0f8">complex</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga44ff7fc2e3e8ed0489fe78b5d724d0f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create a complex array from a single real array.  <a href="group__arith__func__cplx.htm#ga44ff7fc2e3e8ed0489fe78b5d724d0f8">More...</a><br /></td></tr>
<tr class="separator:ga44ff7fc2e3e8ed0489fe78b5d724d0f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga26aae98c96aa6b8fbf7ad2052e12d0b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#ga26aae98c96aa6b8fbf7ad2052e12d0b4">complex</a> (const array &amp;real_, const array &amp;imag_)</td></tr>
<tr class="memdesc:ga26aae98c96aa6b8fbf7ad2052e12d0b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create a complex array from two real arrays.  <a href="group__arith__func__cplx.htm#ga26aae98c96aa6b8fbf7ad2052e12d0b4">More...</a><br /></td></tr>
<tr class="separator:ga26aae98c96aa6b8fbf7ad2052e12d0b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d957c17ce3875722a10b626c9b0b2d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#ga1d957c17ce3875722a10b626c9b0b2d9">complex</a> (const array &amp;real_, const double imag_)</td></tr>
<tr class="memdesc:ga1d957c17ce3875722a10b626c9b0b2d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create a complex array from a single real array for the real component and a single scalar for each imaginary component.  <a href="group__arith__func__cplx.htm#ga1d957c17ce3875722a10b626c9b0b2d9">More...</a><br /></td></tr>
<tr class="separator:ga1d957c17ce3875722a10b626c9b0b2d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae033ce031ad7732d15a0fe42245a6e0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm#gae033ce031ad7732d15a0fe42245a6e0f">complex</a> (const double real_, const array &amp;imag_)</td></tr>
<tr class="memdesc:gae033ce031ad7732d15a0fe42245a6e0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to create a complex array from a single scalar for each real component and a single real array for the imaginary component.  <a href="group__arith__func__cplx.htm#gae033ce031ad7732d15a0fe42245a6e0f">More...</a><br /></td></tr>
<tr class="separator:gae033ce031ad7732d15a0fe42245a6e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga3bfbc7fe4ed35c215dc26c5c377dd761"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga3bfbc7fe4ed35c215dc26c5c377dd761">pow</a> (const array &amp;base, const array &amp;exponent)</td></tr>
<tr class="memdesc:ga3bfbc7fe4ed35c215dc26c5c377dd761"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to raise a base to a power (or exponent).  <a href="group__arith__func__pow.htm#ga3bfbc7fe4ed35c215dc26c5c377dd761">More...</a><br /></td></tr>
<tr class="separator:ga3bfbc7fe4ed35c215dc26c5c377dd761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga59bc058729eeaebe35ee047d16dc0331"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga59bc058729eeaebe35ee047d16dc0331">pow</a> (const array &amp;base, const double exponent)</td></tr>
<tr class="memdesc:ga59bc058729eeaebe35ee047d16dc0331"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to raise a base to a power (or exponent).   <a href="group__arith__func__pow.htm#ga59bc058729eeaebe35ee047d16dc0331">More...</a><br /></td></tr>
<tr class="separator:ga59bc058729eeaebe35ee047d16dc0331"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0c871c4580a80a5ecfb34189cb28db7b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga0c871c4580a80a5ecfb34189cb28db7b">pow</a> (const double base, const array &amp;exponent)</td></tr>
<tr class="memdesc:ga0c871c4580a80a5ecfb34189cb28db7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to raise a base to a power (or exponent).   <a href="group__arith__func__pow.htm#ga0c871c4580a80a5ecfb34189cb28db7b">More...</a><br /></td></tr>
<tr class="separator:ga0c871c4580a80a5ecfb34189cb28db7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15965c869d1e79c2d850f22e700860c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm#ga15965c869d1e79c2d850f22e700860c0">pow2</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga15965c869d1e79c2d850f22e700860c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to raise 2 to a power (or exponent).  <a href="group__arith__func__pow.htm#ga15965c869d1e79c2d850f22e700860c0">More...</a><br /></td></tr>
<tr class="separator:ga15965c869d1e79c2d850f22e700860c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a50974c64b6ba549d2187b9a63b4ab0cd" name="a50974c64b6ba549d2187b9a63b4ab0cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50974c64b6ba549d2187b9a63b4ab0cd">&#9670;&#160;</a></span>af_log2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_log2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface to evaluate the base 2 logarithm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>base 2 logarithm </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>input array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>, if function returns successfully, else an <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> code is given </dd></dl>

</div>
</div>
<a id="ae7aa04bf23b32bb11c4bab8bdd637103" name="ae7aa04bf23b32bb11c4bab8bdd637103"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7aa04bf23b32bb11c4bab8bdd637103">&#9670;&#160;</a></span>af_lt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_lt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>batch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface to perform a less-than comparison between corresponding elements of two arrays. </p>
<p >Output type is b8.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>1's where <code>lhs &lt; rhs</code>, else 0's </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch</td><td>batch mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>, if function returns successfully, else an <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> code is given </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="navelem"><a class="el" href="arith_8h.htm">arith.h</a></li>
        <li class="footer">Generated on Mon Sep 25 2023 12:35:28 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
