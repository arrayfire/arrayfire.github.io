<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Visualizing af::array with Forge</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('forge_visualization.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Visualizing <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> with Forge </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Arrayfire as a library aims to provide a robust and easy to use platform for high-performance, parallel and GPU computing.</p>
<p>The goal of <a href="https://github.com/arrayfire/forge">Forge</a>, an OpenGL visualization library, is to provide equally robust visualizations that are interoperable between Arrayfire data-structures and an OpenGL context.</p>
<p>Arrayfire provides wrapper functions that are designed to be a simple interface to visualize af::arrays. These functions perform various interop tasks. One in particular is that instead of wasting time copying and reformatting data from the GPU to the host and back to the GPU, we can draw directly from GPU-data to GPU-framebuffers! This saves 2 memory copies.</p>
<p>Visualizations can be manipulated with a mouse. The following actions are available:</p><ul>
<li>zoom (Alt + Mouse Left Click, move up &amp; down)</li>
<li>pan (Just left click and drag)</li>
<li>rotation (Mouse right click - track ball rotation).</li>
</ul>
<p>Let's see exactly what visuals we can illuminate with forge and how Arrayfire anneals the data between the two libraries.</p>
<h1><a class="anchor" id="setup"></a>
Setup</h1>
<p>Before we can call Forge functions, we need to set up the related "canvas" classes. Forge functions are tied to the <a class="el" href="classaf_1_1Window.htm" title="Window object to render af::arrays.">af::Window</a> class. First let's create a window: </p><div class="fragment"><div class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">int</span> width = 512, height = 512;</div>
<div class="line"><a class="code" href="classaf_1_1Window.htm">af::Window</a> window(width, height, <span class="stringliteral">&quot;2D plot example title&quot;</span>);</div>
<div class="line"> </div>
<div class="line"><span class="keywordflow">do</span>{</div>
<div class="line"> </div>
<div class="line"><span class="comment">//drawing functions here</span></div>
<div class="line"> </div>
<div class="line">} <span class="keywordflow">while</span>( !window.close() );</div>
</div><!-- fragment --><p>We also added a drawing loop, so now we can use Forge's drawing functions to draw to the window. The drawing functions present in Forge are listed below.</p>
<h1><a class="anchor" id="render_func"></a>
Rendering Functions</h1>
<p>Documentation for rendering functions can be found <a class="el" href="group__gfx__func__draw.htm">here</a>.</p>
<h2><a class="anchor" id="image"></a>
Image</h2>
<p>The <a class="el" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57" title="Renders the input array as an image to the window.">af::Window::image()</a> function can be used to plot grayscale or color images. To plot a grayscale image a 2d array should be passed into the function. Let's see this on a static noise example: </p><div class="fragment"><div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> img = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, width, height); <span class="comment">//make a black image</span></div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> random = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(width, height);      <span class="comment">//make random [0,1] distribution</span></div>
<div class="line">img(random &gt; 0.5) = 1; <span class="comment">//set all pixels where distribution &gt; 0.5 to white</span></div>
<div class="line"> </div>
<div class="line">window.image(img);</div>
</div><!-- fragment --><p><img src="gfx_docs_images/noise.png" alt="Forge image plot of noise" width="20%" class="inline"/> Tweaking the previous example by giving our image a depth of 3 for the RGB values allows us to generate colorful noise: </p><div class="fragment"><div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> img = 255 * <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(width, height, 3);      <span class="comment">//make random [0, 255] distribution</span></div>
<div class="line">window.image( img.as(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0">u8</a>) );</div>
</div><!-- fragment --><p><img src="gfx_docs_images/color_noise.png" alt="Forge image plot of color noise" width="20%" class="inline"/> Note that Forge automatically handles any <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> type passed from Arrayfire. In the first example we passed in an image of floats in the range [0, 1]. In the last example we cast our array to an unsigned byte array with the range [0, 255]. The type-handling properties are consistent for all Forge drawing functions.</p>
<h2><a class="anchor" id="plot"></a>
Plot</h2>
<p>The <a class="el" href="group__gfx__func__draw.htm#gaed2e96201d07c5f90e430632de5e26f1" title="Renders the input arrays as a 2D or 3D plot to the window.">af::Window::plot()</a> function visualizes an array as a 2d-line plot. Let's see a simple example: </p><div class="fragment"><div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> X = seq(-<a class="code" href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a>, <a class="code" href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a>, 0.01);</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Y = <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(X);</div>
<div class="line">window.plot(X, Y);</div>
</div><!-- fragment --><p><img src="gfx_docs_images/sin_plot.png" alt="Forge 2d line plot of sin() function" width="30%" class="inline"/> The plot function has the signature:</p>
<blockquote class="doxtable">
<p><b>void plot( const array &amp;X, const array &amp;Y, const char * const title = NULL );</b> </p>
</blockquote>
<p>Both the x and y coordinates of the points are required to plot. This allows for non-uniform, or parametric plots: </p><div class="fragment"><div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> t = seq(0, 100, 0.01);</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> X = <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(t) * (<a class="code" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>(<a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(t)) - 2 * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(4 * t) - <a class="code" href="group__arith__func__pow.htm#ga299da8cda1458a6cb7adba9718ec613d">pow</a>(<a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(t / 12), 5));</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Y = <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(t) * (<a class="code" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>(<a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(t)) - 2 * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(4 * t) - <a class="code" href="group__arith__func__pow.htm#ga299da8cda1458a6cb7adba9718ec613d">pow</a>(<a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(t / 12), 5));</div>
<div class="line">window.plot(X, Y);</div>
</div><!-- fragment --><p><img src="gfx_docs_images/butterfly_plot.png" alt="Forge 2d line plot of butterfly function" width="30%" class="inline"/></p>
<h2><a class="anchor" id="plot3"></a>
Plot3</h2>
<p>The <a class="el" href="group__gfx__func__draw.htm#ga8e04ec129034e9fe769f3e6b14cd087f" title="Renders the input array as an 3d line plot to the window.">af::Window::plot3()</a> function will plot a curve in 3d-space. Its signature is: </p><blockquote class="doxtable">
<p><b>void plot3 (const array &amp;in, const char * title = NULL);</b> </p>
</blockquote>
<p>The input array expects xyz-triplets in sequential order. The points can be in a flattened one dimensional (<em>3n x 1</em>) array, or in one of the (<em>3 x n</em>), (<em>n x 3</em>) matrix forms. </p><div class="fragment"><div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Z = seq(0.1f, 10.f, 0.01);</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Y = <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(10 * Z) / Z;</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> X = <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(10 * Z) / Z;</div>
<div class="line"> </div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Pts = <a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1, X, Y, Z);</div>
<div class="line"><span class="comment">//Pts can be passed in as a matrix in the from n x 3, 3 x n</span></div>
<div class="line"><span class="comment">//or in the flattened xyz-triplet array with size 3n x 1</span></div>
<div class="line">window.plot3(Pts);</div>
<div class="line"><span class="comment">//both of the following are equally valid</span></div>
<div class="line"><span class="comment">//window.plot3(transpose(Pts));</span></div>
<div class="line"><span class="comment">//window.plot3(flat(Pts));</span></div>
</div><!-- fragment --><p><img src="gfx_docs_images/spiral_plot3.png" alt="Forge 3d line plot" width="40%" class="inline"/></p>
<h2><a class="anchor" id="histogram"></a>
Histogram</h2>
<p>The <a class="el" href="group__gfx__func__draw.htm#gafd7d94aa8f5fd37fee0662a4906a38d7" title="Renders the input array as a histogram to the window.">af::Window::hist()</a> function renders an input array as a histogram. In our example, the input array will be created with Arrayfire's <a class="el" href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a" title="C++ Interface for histogram.">histogram()</a> function, which actually counts and bins each sample. The output from <a class="el" href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a" title="C++ Interface for histogram.">histogram()</a> can directly be fed into the <a class="el" href="group__gfx__func__draw.htm#gafd7d94aa8f5fd37fee0662a4906a38d7" title="Renders the input array as a histogram to the window.">af::Window::hist()</a> rendering function.</p>
<div class="fragment"><div class="line"><span class="keyword">const</span> <span class="keywordtype">int</span> BINS = 128; SAMPLES = 9162;</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__lapack__ops__func__norm.htm#gada407977a0136ba855b8bef162dc9fcf">norm</a> = <a class="code" href="group__random__func__randn.htm#ga2e9602d5bcc87204842b634816afa8a4">randn</a>(SAMPLES);</div>
<div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> hist_arr = <a class="code" href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a">histogram</a>(<a class="code" href="group__lapack__ops__func__norm.htm#gada407977a0136ba855b8bef162dc9fcf">norm</a>, BINS);</div>
<div class="line"> </div>
<div class="line">win.hist(hist_arr, 0, BINS);</div>
</div><!-- fragment --><p>In addition to the histogram array with the number of samples in each bin, the <a class="el" href="group__gfx__func__draw.htm#gafd7d94aa8f5fd37fee0662a4906a38d7" title="Renders the input array as a histogram to the window.">af::Window::hist()</a> function takes two additional parameters &ndash; the minimum and maximum values of all datapoints in the histogram array. This effectively sets the range of the binned data. The full signature of <a class="el" href="group__gfx__func__draw.htm#gafd7d94aa8f5fd37fee0662a4906a38d7" title="Renders the input array as a histogram to the window.">af::Window::hist()</a> is: </p><blockquote class="doxtable">
<p><b>void hist(const array &amp; X, const double minval, const double maxval, const char * const title = NULL);</b> </p>
</blockquote>
<p><img src="gfx_docs_images/norm_histogram.png" alt="Forge 3d scatter plot" width="40%" class="inline"/></p>
<h2><a class="anchor" id="surface"></a>
Surface</h2>
<p>The <a class="el" href="group__gfx__func__draw.htm#ga1cdb8c3205d70d8feaddd8c30245393f" title="Renders the input arrays as a 3D surface plot to the window.">af::Window::surface()</a> function will plot af::arrays as a 3d surface. </p><div class="fragment"><div class="line"><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Z = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(21, 21);</div>
<div class="line">window.surface(Z, <span class="stringliteral">&quot;Random Surface&quot;</span>);    <span class="comment">//equal to next function call</span></div>
<div class="line"><span class="comment">//window.surface( seq(-1, 1, 0.1), seq(-1, 1, 0.1), Z, &quot;Random Surface&quot;);</span></div>
</div><!-- fragment --><p><img src="gfx_docs_images/rand_surface.png" alt="Forge random surface plot" width="30%" class="inline"/> There are two overloads for the <a class="el" href="group__gfx__func__draw.htm#ga1cdb8c3205d70d8feaddd8c30245393f" title="Renders the input arrays as a 3D surface plot to the window.">af::Window::surface()</a> function: </p><blockquote class="doxtable">
<p><b>void surface (const array &amp; S, const char * const title )</b> // Accepts a 2d matrix with the z values of the surface </p>
</blockquote>
<blockquote class="doxtable">
<p><b>void surface (const array &amp;xVals, const array &amp;yVals, const array &amp;S, const char * const title)</b> // accepts additional vectors that define the x,y coordinates for the surface points. </p>
</blockquote>
<p>The second overload has two options for the x, y coordinate vectors. Assuming a surface grid of size <b>m x n</b>:</p><ol type="1">
<li>Short vectors defining the spacing along each axis. Vectors will have sizes <b>m x 1</b> and <b>n x 1</b>.</li>
<li>Vectors containing the coordinates of each and every point. Each of the vectors will have length <b>mn x 1</b>. This can be used for completely non-uniform or parametric surfaces.</li>
</ol>
<h1><a class="anchor" id="conclusion"></a>
Conclusion</h1>
<p>There is a fairly comprehensive collection of methods to visualize data in Arrayfire. Thanks to the high-performance gpu plotting library Forge, the provided Arrayfire functions not only make visualizations as simple as possible, but keep them as robust as the rest of the Arrayfire library. </p>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__arith__func__pow_htm_ga299da8cda1458a6cb7adba9718ec613d"><div class="ttname"><a href="group__arith__func__pow.htm#ga299da8cda1458a6cb7adba9718ec613d">af::pow</a></div><div class="ttdeci">AFAPI array pow(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">C++ Interface for power.</div></div>
<div class="ttc" id="anamespaceaf_htm_a460631fd3c4d686ad85e199f2a08fe6a"><div class="ttname"><a href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a></div><div class="ttdeci">AFAPI const double Pi</div></div>
<div class="ttc" id="agroup__arith__func__exp_htm_ga9ddbaf0852fbf988400b9677705b2a00"><div class="ttname"><a href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">af::exp</a></div><div class="ttdeci">AFAPI array exp(const array &amp;in)</div><div class="ttdoc">C++ Interface for exponential of an array.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__manip__func__join_htm_ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><div class="ttname"><a href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">af::join</a></div><div class="ttdeci">AFAPI array join(const int dim, const array &amp;first, const array &amp;second)</div><div class="ttdoc">Join 2 arrays along dim.</div></div>
<div class="ttc" id="agroup__random__func__randn_htm_ga2e9602d5bcc87204842b634816afa8a4"><div class="ttname"><a href="group__random__func__randn.htm#ga2e9602d5bcc87204842b634816afa8a4">af::randn</a></div><div class="ttdeci">AFAPI array randn(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0">u8</a></div><div class="ttdeci">@ u8</div><div class="ttdoc">8-bit unsigned integral values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00218">defines.h:218</a></div></div>
<div class="ttc" id="agroup__arith__func__sin_htm_gac6fdb44f59fbbffdc55c9c4af29e08f4"><div class="ttname"><a href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">af::sin</a></div><div class="ttdeci">AFAPI array sin(const array &amp;in)</div><div class="ttdoc">C++ Interface for sin.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="agroup__lapack__ops__func__norm_htm_gada407977a0136ba855b8bef162dc9fcf"><div class="ttname"><a href="group__lapack__ops__func__norm.htm#gada407977a0136ba855b8bef162dc9fcf">af::norm</a></div><div class="ttdeci">AFAPI double norm(const array &amp;in, const normType type=AF_NORM_EUCLID, const double p=1, const double q=1)</div><div class="ttdoc">C++ Interface for norm of a matrix.</div></div>
<div class="ttc" id="agroup__arith__func__cos_htm_ga00be564e1f588df68288d2dec8578cb6"><div class="ttname"><a href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">af::cos</a></div><div class="ttdeci">AFAPI array cos(const array &amp;in)</div><div class="ttdoc">C++ Interface for cos.</div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="agroup__image__func__histogram_htm_gafb93ba76739ef18b3698e39c7768c90a"><div class="ttname"><a href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a">af::histogram</a></div><div class="ttdeci">AFAPI array histogram(const array &amp;in, const unsigned nbins, const double minval, const double maxval)</div><div class="ttdoc">C++ Interface for histogram.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
