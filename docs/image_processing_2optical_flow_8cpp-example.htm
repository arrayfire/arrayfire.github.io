<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: image_processing/optical_flow.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('image_processing_2optical_flow_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">image_processing/optical_flow.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> diffs(<a id="_a0" name="_a0"></a><a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; Ix, <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; Iy, <a class="code hl_class" href="classaf_1_1array.htm">array</a>&amp; It, <a class="code hl_class" href="classaf_1_1array.htm">array</a> I1, <a class="code hl_class" href="classaf_1_1array.htm">array</a> I2) {</div>
<div class="line">    <span class="comment">//  3x3 derivative kernels</span></div>
<div class="line">    <span class="keywordtype">float</span> dx_kernel[] = {-1.0f / 6.0f, -1.0f / 6.0f, -1.0f / 6.0f,</div>
<div class="line">                         0.0f / 6.0f,  0.0f / 6.0f,  0.0f / 6.0f,</div>
<div class="line">                         1.0f / 6.0f,  1.0f / 6.0f,  1.0f / 6.0f};</div>
<div class="line">    <span class="keywordtype">float</span> dy_kernel[] = {-1.0f / 6.0f, 0.0f / 6.0f, 1.0f / 6.0f,</div>
<div class="line">                         -1.0f / 6.0f, 0.0f / 6.0f, 1.0f / 6.0f,</div>
<div class="line">                         -1.0f / 6.0f, 0.0f / 6.0f, 1.0f / 6.0f};</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dx          = <a class="code hl_class" href="classaf_1_1array.htm">array</a>(<a id="_a1" name="_a1"></a><a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a>(3, 3), dx_kernel);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dy          = <a class="code hl_class" href="classaf_1_1array.htm">array</a>(<a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a>(3, 3), dy_kernel);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dt          = constant(1, 1, 2) / 4.0;</div>
<div class="line"> </div>
<div class="line">    Ix = convolve(I1, dx) + convolve(I2, dx);</div>
<div class="line">    Iy = convolve(I1, dy) + convolve(I2, dy);</div>
<div class="line">    It = convolve(I2, dt) - convolve(I1, dt);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> optical_flow_demo(<span class="keywordtype">bool</span> console) {</div>
<div class="line">    <a id="_a2" name="_a2"></a><a class="code hl_class" href="classaf_1_1Window.htm">af::Window</a> wnd(<span class="stringliteral">&quot;Horn-Schunck Optical Flow Demo&quot;</span>);</div>
<div class="line">    wnd.setColorMap(<a id="a3" name="a3"></a><a class="code hl_enumvalue" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea28bbb79ba2bcf2353617740b1544d0f7">AF_COLORMAP_COLORS</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">double</span> time_total = 10;  <span class="comment">// run for N seconds</span></div>
<div class="line"> </div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> h_mean_kernel[] = {1.0f / 12.0f, 2.0f / 12.0f, 1.0f / 12.0f,</div>
<div class="line">                                   2.0f / 12.0f, 0.0f,         2.0f / 12.0f,</div>
<div class="line">                                   1.0f / 12.0f, 2.0f / 12.0f, 1.1f / 12.0f};</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> mean_kernel           = <a class="code hl_class" href="classaf_1_1array.htm">array</a>(<a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a>(3, 3), h_mean_kernel, <a id="a4" name="a4"></a><a class="code hl_enumvalue" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> I1 =</div>
<div class="line">        <a class="code hl_function" href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/circle_left.ppm&quot;</span>);  <span class="comment">// grayscale</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> I2 = <a class="code hl_function" href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/circle_center.ppm&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> u = <a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(0, I1.<a id="a5" name="a5"></a><a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>()), v = <a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(0, I1.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> Ix, Iy, It;</div>
<div class="line">    diffs(Ix, Iy, It, I1, I2);</div>
<div class="line"> </div>
<div class="line">    <a id="_a6" name="_a6"></a><a class="code hl_struct" href="structaf_1_1timer.htm">timer</a> time_start, time_last;</div>
<div class="line">    time_start = time_last = timer::start();</div>
<div class="line">    <span class="keywordtype">int</span> iter = 0, iter_last = 0;</div>
<div class="line">    <span class="keywordtype">double</span> max_rate = 0;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line">        iter++;</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> u_ = <a class="code hl_function" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">convolve</a>(u, mean_kernel);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> v_ = <a class="code hl_function" href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">convolve</a>(v, mean_kernel);</div>
<div class="line"> </div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">float</span> alphasq = 0.1f;</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> num           = Ix * u_ + Iy * v_ + It;</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> den           = alphasq + Ix * Ix + Iy * Iy;</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> tmp = 0.01 * num;</div>
<div class="line">        u         = u_ - (Ix * tmp) / den;</div>
<div class="line">        v         = v_ - (Iy * tmp) / den;</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (!console) {</div>
<div class="line">            wnd.grid(2, 2);</div>
<div class="line"> </div>
<div class="line">            wnd(0, 0).image(I1, <span class="stringliteral">&quot;I1&quot;</span>);</div>
<div class="line">            wnd(1, 0).image(I2, <span class="stringliteral">&quot;I2&quot;</span>);</div>
<div class="line">            wnd(0, 1).image(u, <span class="stringliteral">&quot;u&quot;</span>);</div>
<div class="line">            wnd(1, 1).image(v, <span class="stringliteral">&quot;v&quot;</span>);</div>
<div class="line"> </div>
<div class="line">            wnd.show();</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordtype">double</span> elapsed = timer::stop(time_last);</div>
<div class="line">        <span class="keywordflow">if</span> (elapsed &gt; 1) {</div>
<div class="line">            <span class="keywordtype">double</span> rate          = (iter - iter_last) / elapsed;</div>
<div class="line">            <span class="keywordtype">double</span> total_elapsed = timer::stop(time_start);</div>
<div class="line">            time_last            = timer::start();</div>
<div class="line">            iter_last            = iter;</div>
<div class="line">            max_rate             = std::max(max_rate, rate);</div>
<div class="line">            <span class="keywordflow">if</span> (total_elapsed &gt;= time_total) { <span class="keywordflow">break</span>; }</div>
<div class="line">            <span class="keywordflow">if</span> (!console)</div>
<div class="line">                printf(<span class="stringliteral">&quot;  iterations per second: %.0f   (progress %.0f%%)\n&quot;</span>,</div>
<div class="line">                       rate, 100.0f * total_elapsed / time_total);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (console) {</div>
<div class="line">        printf(<span class="stringliteral">&quot; ### optical_flow %f iterations per second (max)\n&quot;</span>, max_rate);</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[]) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a7" name="a7"></a><a class="code hl_function" href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">af::setDevice</a>(device);</div>
<div class="line">        <a id="a8" name="a8"></a><a class="code hl_function" href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a>();</div>
<div class="line">        printf(<span class="stringliteral">&quot;Horn-Schunck optical flow\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        optical_flow_demo(console);</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a id="_a9" name="_a9"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a id="a10" name="a10"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00025">dim4.hpp:26</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="adefines_8h_htm_a553ceda8a1d8946efac3b08e642574aea28bbb79ba2bcf2353617740b1544d0f7"><div class="ttname"><a href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea28bbb79ba2bcf2353617740b1544d0f7">AF_COLORMAP_COLORS</a></div><div class="ttdeci">@ AF_COLORMAP_COLORS</div><div class="ttdoc">Colors, aka. Rainbow.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00457">defines.h:457</a></div></div>
<div class="ttc" id="adefines_8h_htm_ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba"><div class="ttname"><a href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></div><div class="ttdeci">@ afHost</div><div class="ttdoc">Host pointer.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00235">defines.h:234</a></div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga0db7363474e85542f16e4bbcf57fe842"><div class="ttname"><a href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div><div class="ttdoc">C++ Interface to generate an array with elements set to a specified value.</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga3e22b6ff6e0940bb31577bea2863ca27"><div class="ttname"><a href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gad7c36828c21e7efc06a067bbc47d8d3b"><div class="ttname"><a href="group__device__func__set.htm#gad7c36828c21e7efc06a067bbc47d8d3b">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__imageio__func__load_htm_ga5a57870c43a81ec21fcdb7a11bef20d4"><div class="ttname"><a href="group__imageio__func__load.htm#ga5a57870c43a81ec21fcdb7a11bef20d4">af::loadImage</a></div><div class="ttdeci">AFAPI array loadImage(const char *filename, const bool is_color=false)</div><div class="ttdoc">C++ Interface for loading an image.</div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_ga801b0f4a09a017ccb196fac3c0dc417b"><div class="ttname"><a href="group__signal__func__convolve.htm#ga801b0f4a09a017ccb196fac3c0dc417b">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="astructaf_1_1timer_htm"><div class="ttname"><a href="structaf_1_1timer.htm">af::timer</a></div><div class="ttdoc">Internal timer object.</div><div class="ttdef"><b>Definition:</b> <a href="timing_8h_source.htm#l00029">timing.h:29</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:54 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
