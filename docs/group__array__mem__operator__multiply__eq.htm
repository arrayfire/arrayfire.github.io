<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: operator(star)=</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__array__mem__operator__multiply__eq.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">operator(star)=<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a> &raquo; <a class="el" href="group__index__mat.htm">Assignment &amp; Indexing operation on arrays</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Multiplies and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="memitem:ga46f55e2de47cb2829c556238eaec13db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga46f55e2de47cb2829c556238eaec13db">operator*=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;val)</td></tr>
<tr class="memdesc:ga46f55e2de47cb2829c556238eaec13db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.  <br /></td></tr>
<tr class="separator:ga46f55e2de47cb2829c556238eaec13db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga227f7bf6f3afa23a92650693f131754a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga227f7bf6f3afa23a92650693f131754a">operator*=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:ga227f7bf6f3afa23a92650693f131754a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga227f7bf6f3afa23a92650693f131754a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea7f314d83410b2572eb3d844383b24e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#gaea7f314d83410b2572eb3d844383b24e">operator*=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="memdesc:gaea7f314d83410b2572eb3d844383b24e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:gaea7f314d83410b2572eb3d844383b24e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4da913d31fb2cac07c9d5931ee5e955c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga4da913d31fb2cac07c9d5931ee5e955c">operator*=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="memdesc:ga4da913d31fb2cac07c9d5931ee5e955c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga4da913d31fb2cac07c9d5931ee5e955c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5bfab395961fafa25b9d62c3e1648581"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga5bfab395961fafa25b9d62c3e1648581">operator*=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:ga5bfab395961fafa25b9d62c3e1648581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga5bfab395961fafa25b9d62c3e1648581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec4e72136d25cd8f3e803320799593ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#gaec4e72136d25cd8f3e803320799593ad">operator*=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:gaec4e72136d25cd8f3e803320799593ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:gaec4e72136d25cd8f3e803320799593ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4e9850c8e9d63fd2e7ef559b9afeb4d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#gad4e9850c8e9d63fd2e7ef559b9afeb4d">operator*=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:gad4e9850c8e9d63fd2e7ef559b9afeb4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:gad4e9850c8e9d63fd2e7ef559b9afeb4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79f816e666fb7b2fb40b0481c4a46189"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga79f816e666fb7b2fb40b0481c4a46189">operator*=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:ga79f816e666fb7b2fb40b0481c4a46189"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga79f816e666fb7b2fb40b0481c4a46189"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac9812b5c0d4090067ee5289f96f84a5a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#gac9812b5c0d4090067ee5289f96f84a5a">operator*=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:gac9812b5c0d4090067ee5289f96f84a5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:gac9812b5c0d4090067ee5289f96f84a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga765520e794448cd7262cdb5c18441fd9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga765520e794448cd7262cdb5c18441fd9">operator*=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:ga765520e794448cd7262cdb5c18441fd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga765520e794448cd7262cdb5c18441fd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga14e7f621d5891a1f52410786373f7315"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga14e7f621d5891a1f52410786373f7315">operator*=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:ga14e7f621d5891a1f52410786373f7315"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga14e7f621d5891a1f52410786373f7315"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17bffd565e636fd609374a2c78cb8a48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga17bffd565e636fd609374a2c78cb8a48">operator*=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:ga17bffd565e636fd609374a2c78cb8a48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga17bffd565e636fd609374a2c78cb8a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga570ede028fa59f35fbe4689afe4d2261"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga570ede028fa59f35fbe4689afe4d2261">operator*=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:ga570ede028fa59f35fbe4689afe4d2261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga570ede028fa59f35fbe4689afe4d2261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5bc7d64423193f240560861eb32020ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga5bc7d64423193f240560861eb32020ed">operator*=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="separator:ga5bc7d64423193f240560861eb32020ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0dbed65e42402e9b2b1d5879b9a5e551"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga0dbed65e42402e9b2b1d5879b9a5e551">operator*=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:ga0dbed65e42402e9b2b1d5879b9a5e551"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga0dbed65e42402e9b2b1d5879b9a5e551"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga141a4f0ad420741072aca5a62b156447"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga141a4f0ad420741072aca5a62b156447">operator*=</a> (const unsigned short &amp;val)</td></tr>
<tr class="separator:ga141a4f0ad420741072aca5a62b156447"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Multiplies and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. </p>
<p>Multiplies and assigns values</p>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="ga46f55e2de47cb2829c556238eaec13db" name="ga46f55e2de47cb2829c556238eaec13db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga46f55e2de47cb2829c556238eaec13db">&#9670;&#160;</a></span>operator*=() <span class="overload">[1/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga79f816e666fb7b2fb40b0481c4a46189" name="ga79f816e666fb7b2fb40b0481c4a46189"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga79f816e666fb7b2fb40b0481c4a46189">&#9670;&#160;</a></span>operator*=() <span class="overload">[2/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="gaea7f314d83410b2572eb3d844383b24e" name="gaea7f314d83410b2572eb3d844383b24e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaea7f314d83410b2572eb3d844383b24e">&#9670;&#160;</a></span>operator*=() <span class="overload">[3/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga4da913d31fb2cac07c9d5931ee5e955c" name="ga4da913d31fb2cac07c9d5931ee5e955c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4da913d31fb2cac07c9d5931ee5e955c">&#9670;&#160;</a></span>operator*=() <span class="overload">[4/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="gac9812b5c0d4090067ee5289f96f84a5a" name="gac9812b5c0d4090067ee5289f96f84a5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac9812b5c0d4090067ee5289f96f84a5a">&#9670;&#160;</a></span>operator*=() <span class="overload">[5/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga227f7bf6f3afa23a92650693f131754a" name="ga227f7bf6f3afa23a92650693f131754a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga227f7bf6f3afa23a92650693f131754a">&#9670;&#160;</a></span>operator*=() <span class="overload">[6/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga5bfab395961fafa25b9d62c3e1648581" name="ga5bfab395961fafa25b9d62c3e1648581"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5bfab395961fafa25b9d62c3e1648581">&#9670;&#160;</a></span>operator*=() <span class="overload">[7/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="gaec4e72136d25cd8f3e803320799593ad" name="gaec4e72136d25cd8f3e803320799593ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaec4e72136d25cd8f3e803320799593ad">&#9670;&#160;</a></span>operator*=() <span class="overload">[8/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga14e7f621d5891a1f52410786373f7315" name="ga14e7f621d5891a1f52410786373f7315"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga14e7f621d5891a1f52410786373f7315">&#9670;&#160;</a></span>operator*=() <span class="overload">[9/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga570ede028fa59f35fbe4689afe4d2261" name="ga570ede028fa59f35fbe4689afe4d2261"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga570ede028fa59f35fbe4689afe4d2261">&#9670;&#160;</a></span>operator*=() <span class="overload">[10/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga0dbed65e42402e9b2b1d5879b9a5e551" name="ga0dbed65e42402e9b2b1d5879b9a5e551"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0dbed65e42402e9b2b1d5879b9a5e551">&#9670;&#160;</a></span>operator*=() <span class="overload">[11/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="gad4e9850c8e9d63fd2e7ef559b9afeb4d" name="gad4e9850c8e9d63fd2e7ef559b9afeb4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad4e9850c8e9d63fd2e7ef559b9afeb4d">&#9670;&#160;</a></span>operator*=() <span class="overload">[12/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga765520e794448cd7262cdb5c18441fd9" name="ga765520e794448cd7262cdb5c18441fd9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga765520e794448cd7262cdb5c18441fd9">&#9670;&#160;</a></span>operator*=() <span class="overload">[13/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga17bffd565e636fd609374a2c78cb8a48" name="ga17bffd565e636fd609374a2c78cb8a48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga17bffd565e636fd609374a2c78cb8a48">&#9670;&#160;</a></span>operator*=() <span class="overload">[14/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga5bc7d64423193f240560861eb32020ed" name="ga5bc7d64423193f240560861eb32020ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5bc7d64423193f240560861eb32020ed">&#9670;&#160;</a></span>operator*=() <span class="overload">[15/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga141a4f0ad420741072aca5a62b156447" name="ga141a4f0ad420741072aca5a62b156447"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga141a4f0ad420741072aca5a62b156447">&#9670;&#160;</a></span>operator*=() <span class="overload">[16/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Tue Feb 14 2023 10:39:42 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
    </ul>
</div>
</body>
</html>
