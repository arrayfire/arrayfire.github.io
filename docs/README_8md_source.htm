<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>/Users/mlloreda/work/af/v3.6/arrayfire-docs-v3.6/docs/pages/README.md Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('README_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">/Users/mlloreda/work/af/v3.6/arrayfire-docs-v3.6/docs/pages/README.md</div>  </div>
</div><!--header-->
<div class="contents">
<a href="README_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Overview {#mainpage}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;========</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;[TOC]</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;## About ArrayFire</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;ArrayFire is a high performance software library for parallel computing with an easy-to-use API. Its array based function set makes parallel programming more accessible.</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;## Installing ArrayFire</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;You can install ArrayFire using either a binary installer for Windows, OSX,</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;or Linux or download it from source:</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;* [Binary installers for Windows, OSX, and Linux](\ref installing)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;* [Build from source](https://github.com/arrayfire/arrayfire)</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;## Easy to use</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;The [array](\ref construct_mat) object is beautifully simple.</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;Array-based notation effectively expresses computational algorithms in</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;readable math-resembling notation. You _do not_ need expertise in</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;parallel programming to use ArrayFire.</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;A few lines of ArrayFire code</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;accomplishes what can take 100s of complicated lines in CUDA or OpenCL</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;kernels.</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;## ArrayFire is extensive!</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;#### Support for multiple domains</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;ArrayFire contains [hundreds of functions](\ref arrayfire_func) across various domains including:</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;- [Vector Algorithms](\ref vector_mat)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;- [Image Processing](\ref image_mat)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;- [Computer Vision](\ref cv_mat)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;- [Signal Processing](\ref signal_mat)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;- [Linear Algebra](\ref linalg_mat)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;- [Statistics](\ref stats_mat)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;- and more.</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;Each function is hand-tuned by ArrayFire</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;developers with all possible low-level optimizations.</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;#### Support for various data types and sizes</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;ArrayFire operates on common [data shapes and sizes](\ref indexing),</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;including vectors, matrices, volumes, and</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;It supports common [data types](\ref gettingstarted_datatypes),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;including single and double precision floating</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;point values, complex numbers, booleans, and 32-bit signed and</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;unsigned integers.</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;#### Extending ArrayFire</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;ArrayFire can be used as a stand-alone application or integrated with</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;existing CUDA or OpenCL code. All ArrayFire `arrays` can be</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;interchanged with other CUDA or OpenCL data structures.</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;## Code once, run anywhere!</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;With support for x86, ARM, CUDA, and OpenCL devices, ArrayFire supports for a comprehensive list of devices.</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;Each ArrayFire installation comes with:</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; - a CUDA version (named &#39;libafcuda&#39;) for [NVIDIA</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; GPUs](https://developer.nvidia.com/cuda-gpus),</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; - an OpenCL version (named &#39;libafopencl&#39;) for [OpenCL devices](http://www.khronos.org/conformance/adopters/conformant-products#opencl)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; - a CPU version (named &#39;libafcpu&#39;) to fall back to when CUDA or OpenCL devices are not available.</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;## ArrayFire is highly efficient</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;#### Vectorized and Batched Operations</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;ArrayFire supports batched operations on N-dimensional arrays.</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;Batch operations in ArrayFire are run in parallel ensuring an optimal usage of your CUDA or OpenCL device.</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;You can get the best performance out of ArrayFire using [vectorization techniques](\ref vectorization).</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;ArrayFire can also execute loop iterations in parallel with</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;[the gfor function](\ref gfor).</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;#### Just in Time compilation</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;ArrayFire performs run-time analysis of your code to increase</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;arithmetic intensity and memory throughput, while avoiding unnecessary</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;temporary allocations. It has an awesome internal JIT compiler to make</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;optimizations for you.</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;Read more about how [ArrayFire JIT](http://arrayfire.com/performance-of-arrayfire-jit-code-generation/) can improve the performance in your application.</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;## Simple Example</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;Here&#39;s a live example to let you see ArrayFire code. You create [arrays](\ref construct_mat)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;which reside on CUDA or OpenCL devices. Then you can use</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;[ArrayFire functions](modules.htm) on those [arrays](\ref construct_mat).</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;// sample 40 million points on the GPU</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;array x = randu(20e6), y = randu(20e6);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;array dist = sqrt(x * x + y * y);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;// pi is ratio of how many fell in the unit circle</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;float num_inside = sum&lt;float&gt;(dist &lt; 1);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;float pi = 4.0 * num_inside / 20e6;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;af_print(pi);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;## Product Support</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;#### Free Community Options</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;* [ArrayFire mailing list](https://groups.google.com/forum/#!forum/arrayfire-users) (recommended)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;* [StackOverflow](http://stackoverflow.com/questions/tagged/arrayfire)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;#### Premium Support</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;* Phone Support - available for purchase ([request a quote](mailto:sales@arrayfire.com))</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;#### Contact Us</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;* If you need to contact us, visit our</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;[contact us page](http://arrayfire.com/company/#contact).</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;#### Email</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;* Engineering: technical@arrayfire.com</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;* Sales: sales@arrayfire.com</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;## Citations and Acknowledgements</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;If you redistribute ArrayFire, please follow the terms established in &lt;a href=&quot;https://github.com/arrayfire/arrayfire/blob/master/LICENSE&quot;&gt;the license&lt;/a&gt;.</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;If you wish to cite ArrayFire in an academic publication, please use the</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;following reference:</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;Formatted:</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    Yalamanchili, P., Arshad, U., Mohammed, Z., Garigipati, P., Entschev, P.,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    Kloppenborg, B., Malcolm, James and Melonakos, J. (2015).</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    ArrayFire - A high performance software library for parallel computing with an</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    easy-to-use API. Atlanta: AccelerEyes. Retrieved from https://github.com/arrayfire/arrayfire</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;BibTeX:</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    @misc{Yalamanchili2015,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    abstract = {ArrayFire is a high performance software library for parallel computing with an easy-to-use API. Its array based function set makes parallel programming simple. ArrayFire&#39;s multiple backends (CUDA, OpenCL and native CPU) make it platform independent and highly portable. A few lines of code in ArrayFire can replace dozens of lines of parallel computing code, saving you valuable time and lowering development costs.},</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    address = {Atlanta},</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    author = {Yalamanchili, Pavan and Arshad, Umar and Mohammed, Zakiuddin and Garigipati, Pradeep and Entschev, Peter and Kloppenborg, Brian and Malcolm, James and Melonakos, John},</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    publisher = {AccelerEyes},</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    title = {{ArrayFire - A high performance software library for parallel computing with an easy-to-use API}},</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    url = {https://github.com/arrayfire/arrayfire},</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    year = {2015}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;ArrayFire development is funded by ArrayFire LLC and several third parties, please see the list of &lt;a href=&quot;https://github.com/arrayfire/arrayfire/blob/master/ACKNOWLEDGEMENTS.md&quot;&gt;acknowledgements&lt;/a&gt;.</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
