<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: operator+=</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__array__mem__operator__plus__eq.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">operator+=<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a> &raquo; <a class="el" href="group__index__mat.htm">Assignment &amp; Indexing operation on arrays</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Adds and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="memitem:ga9ae2d9da5deeb1bd402c35972d1bab82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga9ae2d9da5deeb1bd402c35972d1bab82">operator+=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;val)</td></tr>
<tr class="memdesc:ga9ae2d9da5deeb1bd402c35972d1bab82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga9ae2d9da5deeb1bd402c35972d1bab82">More...</a><br /></td></tr>
<tr class="separator:ga9ae2d9da5deeb1bd402c35972d1bab82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga59f906b1301dc3de347f423c9e28b72a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga59f906b1301dc3de347f423c9e28b72a">operator+=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:ga59f906b1301dc3de347f423c9e28b72a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga59f906b1301dc3de347f423c9e28b72a">More...</a><br /></td></tr>
<tr class="separator:ga59f906b1301dc3de347f423c9e28b72a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5d282cacb3516f5c2285237bc27e86a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gae5d282cacb3516f5c2285237bc27e86a">operator+=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="memdesc:gae5d282cacb3516f5c2285237bc27e86a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#gae5d282cacb3516f5c2285237bc27e86a">More...</a><br /></td></tr>
<tr class="separator:gae5d282cacb3516f5c2285237bc27e86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19ad3c1a22878b447658156f642fc380"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga19ad3c1a22878b447658156f642fc380">operator+=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="memdesc:ga19ad3c1a22878b447658156f642fc380"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga19ad3c1a22878b447658156f642fc380">More...</a><br /></td></tr>
<tr class="separator:ga19ad3c1a22878b447658156f642fc380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad25fc34435b14ead3f46af3edaba879e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gad25fc34435b14ead3f46af3edaba879e">operator+=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:gad25fc34435b14ead3f46af3edaba879e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#gad25fc34435b14ead3f46af3edaba879e">More...</a><br /></td></tr>
<tr class="separator:gad25fc34435b14ead3f46af3edaba879e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e0df738c5ef385098537c87325f11d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga9e0df738c5ef385098537c87325f11d4">operator+=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:ga9e0df738c5ef385098537c87325f11d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga9e0df738c5ef385098537c87325f11d4">More...</a><br /></td></tr>
<tr class="separator:ga9e0df738c5ef385098537c87325f11d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91a0d284d67e46b1eea9bfd0b1c72f34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga91a0d284d67e46b1eea9bfd0b1c72f34">operator+=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:ga91a0d284d67e46b1eea9bfd0b1c72f34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga91a0d284d67e46b1eea9bfd0b1c72f34">More...</a><br /></td></tr>
<tr class="separator:ga91a0d284d67e46b1eea9bfd0b1c72f34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacc2396995c398ac5feb0c47a4e687740"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gacc2396995c398ac5feb0c47a4e687740">operator+=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:gacc2396995c398ac5feb0c47a4e687740"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#gacc2396995c398ac5feb0c47a4e687740">More...</a><br /></td></tr>
<tr class="separator:gacc2396995c398ac5feb0c47a4e687740"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae450772dd0b5e4cb92b2f8917cee3bee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gae450772dd0b5e4cb92b2f8917cee3bee">operator+=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:gae450772dd0b5e4cb92b2f8917cee3bee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#gae450772dd0b5e4cb92b2f8917cee3bee">More...</a><br /></td></tr>
<tr class="separator:gae450772dd0b5e4cb92b2f8917cee3bee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d595592ac6552d51ca2f2f1c3e4c6d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga5d595592ac6552d51ca2f2f1c3e4c6d8">operator+=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:ga5d595592ac6552d51ca2f2f1c3e4c6d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga5d595592ac6552d51ca2f2f1c3e4c6d8">More...</a><br /></td></tr>
<tr class="separator:ga5d595592ac6552d51ca2f2f1c3e4c6d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34a8f0a955e24b4485113374bfaac308"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga34a8f0a955e24b4485113374bfaac308">operator+=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:ga34a8f0a955e24b4485113374bfaac308"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga34a8f0a955e24b4485113374bfaac308">More...</a><br /></td></tr>
<tr class="separator:ga34a8f0a955e24b4485113374bfaac308"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1fde10027ef98aff6ac5644528cc9cb2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga1fde10027ef98aff6ac5644528cc9cb2">operator+=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:ga1fde10027ef98aff6ac5644528cc9cb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga1fde10027ef98aff6ac5644528cc9cb2">More...</a><br /></td></tr>
<tr class="separator:ga1fde10027ef98aff6ac5644528cc9cb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f667620a46eaa18ce88258c5eed232d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga2f667620a46eaa18ce88258c5eed232d">operator+=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:ga2f667620a46eaa18ce88258c5eed232d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga2f667620a46eaa18ce88258c5eed232d">More...</a><br /></td></tr>
<tr class="separator:ga2f667620a46eaa18ce88258c5eed232d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c9e74b1eb2056b71d98f6844bdef276"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga8c9e74b1eb2056b71d98f6844bdef276">operator+=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="separator:ga8c9e74b1eb2056b71d98f6844bdef276"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad68af056aa772697c2208d2f96cfb6a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gad68af056aa772697c2208d2f96cfb6a3">operator+=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:gad68af056aa772697c2208d2f96cfb6a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#gad68af056aa772697c2208d2f96cfb6a3">More...</a><br /></td></tr>
<tr class="separator:gad68af056aa772697c2208d2f96cfb6a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72f2d805cb5a891e8dc2993edf22d096"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga72f2d805cb5a891e8dc2993edf22d096">operator+=</a> (const unsigned short &amp;val)</td></tr>
<tr class="separator:ga72f2d805cb5a891e8dc2993edf22d096"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Adds and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. </p>
<p>Adds and assigns values</p>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="ga9ae2d9da5deeb1bd402c35972d1bab82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9ae2d9da5deeb1bd402c35972d1bab82">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[1/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="gacc2396995c398ac5feb0c47a4e687740"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacc2396995c398ac5feb0c47a4e687740">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[2/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="gae5d282cacb3516f5c2285237bc27e86a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae5d282cacb3516f5c2285237bc27e86a">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[3/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga19ad3c1a22878b447658156f642fc380"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga19ad3c1a22878b447658156f642fc380">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[4/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="gae450772dd0b5e4cb92b2f8917cee3bee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae450772dd0b5e4cb92b2f8917cee3bee">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[5/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga59f906b1301dc3de347f423c9e28b72a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga59f906b1301dc3de347f423c9e28b72a">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[6/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="gad25fc34435b14ead3f46af3edaba879e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad25fc34435b14ead3f46af3edaba879e">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[7/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga9e0df738c5ef385098537c87325f11d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9e0df738c5ef385098537c87325f11d4">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[8/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga34a8f0a955e24b4485113374bfaac308"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga34a8f0a955e24b4485113374bfaac308">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[9/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga2f667620a46eaa18ce88258c5eed232d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2f667620a46eaa18ce88258c5eed232d">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[10/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="gad68af056aa772697c2208d2f96cfb6a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad68af056aa772697c2208d2f96cfb6a3">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[11/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga91a0d284d67e46b1eea9bfd0b1c72f34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga91a0d284d67e46b1eea9bfd0b1c72f34">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[12/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga5d595592ac6552d51ca2f2f1c3e4c6d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5d595592ac6552d51ca2f2f1c3e4c6d8">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[13/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga1fde10027ef98aff6ac5644528cc9cb2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1fde10027ef98aff6ac5644528cc9cb2">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[14/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="ga8c9e74b1eb2056b71d98f6844bdef276"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8c9e74b1eb2056b71d98f6844bdef276">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[15/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga72f2d805cb5a891e8dc2993edf22d096"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga72f2d805cb5a891e8dc2993edf22d096">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[16/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
