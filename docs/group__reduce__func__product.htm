<!-- HTML header for doxygen 1.9.3-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: product</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
  <!--<td id="projectalign">
   <div id="projectname">ArrayFire<span id="projectnumber">&#160;3.8.1</span>
   </div>
   <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>-->
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__reduce__func__product.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">product<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__vector__mat.htm">Vector Algorithms</a> &raquo; <a class="el" href="group__reduce__mat.htm">Reduction operations</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Find the product of values in the input.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaac132e883d40243c420b4ccfa09ddaa3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gaac132e883d40243c420b4ccfa09ddaa3">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:gaac132e883d40243c420b4ccfa09ddaa3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of elements in an array.  <a href="group__reduce__func__product.htm#gaac132e883d40243c420b4ccfa09ddaa3">More...</a><br /></td></tr>
<tr class="separator:gaac132e883d40243c420b4ccfa09ddaa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga322073dc3d7eefb9403f269840d4ecff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga322073dc3d7eefb9403f269840d4ecff">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga322073dc3d7eefb9403f269840d4ecff"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of elements in an array while replacing nan values.  <a href="group__reduce__func__product.htm#ga322073dc3d7eefb9403f269840d4ecff">More...</a><br /></td></tr>
<tr class="separator:ga322073dc3d7eefb9403f269840d4ecff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1e3ecae8d63be355c41a54b0fb7b09c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gab1e3ecae8d63be355c41a54b0fb7b09c"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gab1e3ecae8d63be355c41a54b0fb7b09c">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab1e3ecae8d63be355c41a54b0fb7b09c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of all elements in an array.  <a href="group__reduce__func__product.htm#gab1e3ecae8d63be355c41a54b0fb7b09c">More...</a><br /></td></tr>
<tr class="separator:gab1e3ecae8d63be355c41a54b0fb7b09c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9d52d3862f703558a86e99db88c3de50"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga9d52d3862f703558a86e99db88c3de50"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga9d52d3862f703558a86e99db88c3de50">product</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, double nanval)</td></tr>
<tr class="memdesc:ga9d52d3862f703558a86e99db88c3de50"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for product of all elements in an array while replacing nan values.  <a href="group__reduce__func__product.htm#ga9d52d3862f703558a86e99db88c3de50">More...</a><br /></td></tr>
<tr class="separator:ga9d52d3862f703558a86e99db88c3de50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2be338d39be30ad22dddf658a4f5676e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga2be338d39be30ad22dddf658a4f5676e">af_product</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:ga2be338d39be30ad22dddf658a4f5676e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for product of elements in an array.  <a href="group__reduce__func__product.htm#ga2be338d39be30ad22dddf658a4f5676e">More...</a><br /></td></tr>
<tr class="separator:ga2be338d39be30ad22dddf658a4f5676e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d25447c16d492767ba7efa7ee72a36e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga1d25447c16d492767ba7efa7ee72a36e">af_product_nan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga1d25447c16d492767ba7efa7ee72a36e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for product of elements in an array while replacing nans.  <a href="group__reduce__func__product.htm#ga1d25447c16d492767ba7efa7ee72a36e">More...</a><br /></td></tr>
<tr class="separator:ga1d25447c16d492767ba7efa7ee72a36e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad226a6ec77c12fd16cf42e3fe3264e22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gad226a6ec77c12fd16cf42e3fe3264e22">af_product_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gad226a6ec77c12fd16cf42e3fe3264e22"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for product of all elements in an array.  <a href="group__reduce__func__product.htm#gad226a6ec77c12fd16cf42e3fe3264e22">More...</a><br /></td></tr>
<tr class="separator:gad226a6ec77c12fd16cf42e3fe3264e22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaca78d54c53a33b419bfdb5c64accbc7b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gaca78d54c53a33b419bfdb5c64accbc7b">af_product_nan_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const double nanval)</td></tr>
<tr class="memdesc:gaca78d54c53a33b419bfdb5c64accbc7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for product of all elements in an array while replacing nans.  <a href="group__reduce__func__product.htm#gaca78d54c53a33b419bfdb5c64accbc7b">More...</a><br /></td></tr>
<tr class="separator:gaca78d54c53a33b419bfdb5c64accbc7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34aef3ce04c7d24da8a55655d9ea2e23"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga34aef3ce04c7d24da8a55655d9ea2e23">mul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const int dim=-1)</td></tr>
<tr class="separator:ga34aef3ce04c7d24da8a55655d9ea2e23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga22e5cb1457aebeec1d25c348f539c6df"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga22e5cb1457aebeec1d25c348f539c6df"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga22e5cb1457aebeec1d25c348f539c6df">mul</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="separator:ga22e5cb1457aebeec1d25c348f539c6df"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Find the product of values in the input. </p>
<p >This table defines the return value types for the corresponding input types</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Input Type   </th><th class="markdownTableHeadNone">Output Type    </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">f32, f64, c32, c64   </td><td class="markdownTableBodyNone">same as input    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">s32, u32, s64, u64   </td><td class="markdownTableBodyNone">same as input    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">s16   </td><td class="markdownTableBodyNone">s32    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">u16, u8, b8   </td><td class="markdownTableBodyNone">u32   </td></tr>
</table>
<p >This function performs the operation across all batches present in the input simultaneously. </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga2be338d39be30ad22dddf658a4f5676e" name="ga2be338d39be30ad22dddf658a4f5676e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2be338d39be30ad22dddf658a4f5676e">&#9670;&nbsp;</a></span>af_product()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_product </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for product of elements in an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain the product of all values in <code>in</code> along <code>dim</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The dimension along which the multiply operation occurs </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="gad226a6ec77c12fd16cf42e3fe3264e22" name="gad226a6ec77c12fd16cf42e3fe3264e22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad226a6ec77c12fd16cf42e3fe3264e22">&#9670;&nbsp;</a></span>af_product_all()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_product_all </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>real</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>imag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for product of all elements in an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">real</td><td>will contain the real part of multiplying all elements in input <code>in</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">imag</td><td>will contain the imaginary part of multiplying all elements in input <code>in</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly</dd></dl>
<dl class="section note"><dt>Note</dt><dd><code>imag</code> is always set to 0 when <code>in</code> is real </dd></dl>

</div>
</div>
<a id="ga1d25447c16d492767ba7efa7ee72a36e" name="ga1d25447c16d492767ba7efa7ee72a36e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1d25447c16d492767ba7efa7ee72a36e">&#9670;&nbsp;</a></span>af_product_nan()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_product_nan </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>nanval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for product of elements in an array while replacing nans. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain the product of all values in <code>in</code> along <code>dim</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The dimension along which the product operation occurs </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nanval</td><td>The value that will replace the NaNs in <code>in</code> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="gaca78d54c53a33b419bfdb5c64accbc7b" name="gaca78d54c53a33b419bfdb5c64accbc7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaca78d54c53a33b419bfdb5c64accbc7b">&#9670;&nbsp;</a></span>af_product_nan_all()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_product_nan_all </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>real</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>imag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>nanval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for product of all elements in an array while replacing nans. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">real</td><td>will contain the real part of multiplication of all elements in input <code>in</code> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">imag</td><td>will contain the imaginary part of multiplication of all elements in input <code>in</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nanval</td><td>is the value which replaces nan </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly</dd></dl>
<dl class="section note"><dt>Note</dt><dd><code>imag</code> is always set to 0 when <code>in</code> is real </dd></dl>

</div>
</div>
<a id="ga22e5cb1457aebeec1d25c348f539c6df" name="ga22e5cb1457aebeec1d25c348f539c6df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga22e5cb1457aebeec1d25c348f539c6df">&#9670;&nbsp;</a></span>mul() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T af::mul </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >C++ Interface for product of all elements in an array.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the product of all values of <code>in</code> </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000018">Deprecated:</a></b></dt><dd>Use <a class="el" href="group__reduce__func__product.htm#gaac132e883d40243c420b4ccfa09ddaa3">product</a> instead </dd></dl>

</div>
</div>
<a id="ga34aef3ce04c7d24da8a55655d9ea2e23" name="ga34aef3ce04c7d24da8a55655d9ea2e23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga34aef3ce04c7d24da8a55655d9ea2e23">&#9670;&nbsp;</a></span>mul() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::mul </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >C++ Interface for product of elements in an array.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The dimension along which the multiply operation occurs </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of product all values along dimension <code>dim</code> </dd></dl>
<dl class="section note"><dt>Note</dt><dd><code>dim</code> is -1 by default. -1 denotes the first non-singleton dimension. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000017">Deprecated:</a></b></dt><dd>Use <a class="el" href="group__reduce__func__product.htm#gaac132e883d40243c420b4ccfa09ddaa3">product</a> instead </dd></dl>

</div>
</div>
<a id="gab1e3ecae8d63be355c41a54b0fb7b09c" name="gab1e3ecae8d63be355c41a54b0fb7b09c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab1e3ecae8d63be355c41a54b0fb7b09c">&#9670;&nbsp;</a></span>product() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T af::product </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for product of all elements in an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the product of all values of <code>in</code> </dd></dl>

</div>
</div>
<a id="ga322073dc3d7eefb9403f269840d4ecff" name="ga322073dc3d7eefb9403f269840d4ecff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga322073dc3d7eefb9403f269840d4ecff">&#9670;&nbsp;</a></span>product() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::product </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>nanval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for product of elements in an array while replacing nan values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The dimension along which the multiply operation occurs </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nanval</td><td>The value that will replace the NaNs in <code>in</code> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of product all values along dimension <code>dim</code> </dd></dl>

</div>
</div>
<a id="gaac132e883d40243c420b4ccfa09ddaa3" name="gaac132e883d40243c420b4ccfa09ddaa3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaac132e883d40243c420b4ccfa09ddaa3">&#9670;&nbsp;</a></span>product() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::product </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for product of elements in an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The dimension along which the multiply operation occurs </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of product all values along dimension <code>dim</code> </dd></dl>
<dl class="section note"><dt>Note</dt><dd><code>dim</code> is -1 by default. -1 denotes the first non-singleton dimension. </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="financial_2monte_carlo_options_8cpp-example.htm#a8">financial/monte_carlo_options.cpp</a>, and <a class="el" href="getting_started_2integer_8cpp-example.htm#a7">getting_started/integer.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="ga9d52d3862f703558a86e99db88c3de50" name="ga9d52d3862f703558a86e99db88c3de50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9d52d3862f703558a86e99db88c3de50">&#9670;&nbsp;</a></span>product() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T af::product </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>nanval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for product of all elements in an array while replacing nan values. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nanval</td><td>The value that will replace the NaNs in <code>in</code> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the product of all values of <code>in</code> </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Thu Feb 24 2022 14:12:33 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
    </ul>
</div>
</body>
</html>
