<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: graphics/conway_pretty.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('graphics_2conway_pretty_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">graphics/conway_pretty.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * https://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span>, <span class="keywordtype">char</span>**) {</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">float</span> h_kernel[] = {1, 1, 1, 1, 0, 1, 1, 1, 1};</div>
<div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> reset        = 500;</div>
<div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> game_w = 128, game_h = 128;</div>
<div class="line"> </div>
<div class="line">        <a name="a0"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line"> </div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;This example demonstrates the Conway&#39;s Game of Life &quot;</span></div>
<div class="line">                     <span class="stringliteral">&quot;using ArrayFire&quot;</span></div>
<div class="line">                  &lt;&lt; std::endl</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;There are 4 simple rules of Conways&#39;s Game of Life&quot;</span></div>
<div class="line">                  &lt;&lt; std::endl</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;1. Any live cell with fewer than two live neighbours &quot;</span></div>
<div class="line">                     <span class="stringliteral">&quot;dies, as if caused by under-population.&quot;</span></div>
<div class="line">                  &lt;&lt; std::endl</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;2. Any live cell with two or three live neighbours lives &quot;</span></div>
<div class="line">                     <span class="stringliteral">&quot;on to the next generation.&quot;</span></div>
<div class="line">                  &lt;&lt; std::endl</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;3. Any live cell with more than three live neighbours &quot;</span></div>
<div class="line">                     <span class="stringliteral">&quot;dies, as if by overcrowding.&quot;</span></div>
<div class="line">                  &lt;&lt; std::endl</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;4. Any dead cell with exactly three live neighbours &quot;</span></div>
<div class="line">                     <span class="stringliteral">&quot;becomes a live cell, as if by reproduction.&quot;</span></div>
<div class="line">                  &lt;&lt; std::endl</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;Each white block in the visualization represents 1 alive &quot;</span></div>
<div class="line">                     <span class="stringliteral">&quot;cell, black space represents dead cells&quot;</span></div>
<div class="line">                  &lt;&lt; std::endl</div>
<div class="line">                  &lt;&lt; std::endl;</div>
<div class="line"> </div>
<div class="line">        std::cout</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;The conway_pretty example visualizes all the states in Conway&quot;</span></div>
<div class="line">            &lt;&lt; std::endl</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;Red   : Cells that have died due to under population&quot;</span></div>
<div class="line">            &lt;&lt; std::endl</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;Yellow: Cells that continue to live from previous state&quot;</span></div>
<div class="line">            &lt;&lt; std::endl</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;Green : Cells that are new as a result of reproduction&quot;</span></div>
<div class="line">            &lt;&lt; std::endl</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;Blue  : Cells that have died due to over population&quot;</span></div>
<div class="line">            &lt;&lt; std::endl</div>
<div class="line">            &lt;&lt; std::endl;</div>
<div class="line"> </div>
<div class="line">        std::cout</div>
<div class="line">            &lt;&lt; <span class="stringliteral">&quot;This examples is throttled so as to be a better visualization&quot;</span></div>
<div class="line">            &lt;&lt; std::endl;</div>
<div class="line"> </div>
<div class="line">        <a name="_a1"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> simpleWindow(512, 512,</div>
<div class="line">                                <span class="stringliteral">&quot;Conway&#39;s Game Of Life - Current State&quot;</span>);</div>
<div class="line">        <a class="code" href="classaf_1_1Window.htm">af::Window</a> prettyWindow(512, 512,</div>
<div class="line">                                <span class="stringliteral">&quot;Conway&#39;s Game Of Life - Visualizing States&quot;</span>);</div>
<div class="line">        simpleWindow.<a name="a2"></a><a class="code" href="group__gfx__func__window.htm#ga91f824616f7dcac3265fff01a55990a9">setPos</a>(32, 32);</div>
<div class="line">        prettyWindow.<a class="code" href="group__gfx__func__window.htm#ga91f824616f7dcac3265fff01a55990a9">setPos</a>(512 + 32, 32);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordtype">int</span> frame_count = 0;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Initialize the kernel array just once</span></div>
<div class="line">        <span class="keyword">const</span> <a name="_a3"></a><a class="code" href="classaf_1_1array.htm">af::array</a> kernel(3, 3, h_kernel, <a name="a4"></a><a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> state;</div>
<div class="line">        state = (<a name="a5"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a>(game_h, game_w, <a name="a6"></a><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>) &gt; 0.4).<a name="a7"></a><a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"> </div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> display = <a name="a8"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(state, 1, 1, 3, 1);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">while</span> (!simpleWindow.<a name="a9"></a><a class="code" href="group__gfx__func__window.htm#ga46143fd6de3be9ab9951f140d3ae8c2f">close</a>() &amp;&amp; !prettyWindow.<a class="code" href="group__gfx__func__window.htm#ga46143fd6de3be9ab9951f140d3ae8c2f">close</a>()) {</div>
<div class="line">            <a name="_a10"></a><a class="code" href="structaf_1_1timer.htm">af::timer</a> delay = <a name="a11"></a><a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">timer::start</a>();</div>
<div class="line"> </div>
<div class="line">            <span class="keywordflow">if</span> (!simpleWindow.<a class="code" href="group__gfx__func__window.htm#ga46143fd6de3be9ab9951f140d3ae8c2f">close</a>()) simpleWindow.<a name="a12"></a><a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(state);</div>
<div class="line">            <span class="keywordflow">if</span> (!prettyWindow.<a class="code" href="group__gfx__func__window.htm#ga46143fd6de3be9ab9951f140d3ae8c2f">close</a>()) prettyWindow.<a class="code" href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">image</a>(display);</div>
<div class="line">            frame_count++;</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Generate a random starting state</span></div>
<div class="line">            <span class="keywordflow">if</span> (frame_count % reset == 0)</div>
<div class="line">                state = (<a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a>(game_h, game_w, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>) &gt; 0.5).<a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Convolve gets neighbors</span></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">af::array</a> nHood = <a name="a13"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(state, kernel);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Generate conditions for life</span></div>
<div class="line">            <span class="comment">// state == 1 &amp;&amp; nHood &lt; 2 -&gt;&gt; state = 0</span></div>
<div class="line">            <span class="comment">// state == 1 &amp;&amp; nHood &gt; 3 -&gt;&gt; state = 0</span></div>
<div class="line">            <span class="comment">// else if state == 1 -&gt;&gt; state = 1</span></div>
<div class="line">            <span class="comment">// state == 0 &amp;&amp; nHood == 3 -&gt;&gt; state = 1</span></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">af::array</a> C0 = (nHood == 2);</div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">af::array</a> C1 = (nHood == 3);</div>
<div class="line"> </div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> a0 = (state == 1) &amp;&amp; (nHood &lt; 2);  <span class="comment">// Die of under population</span></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> a1 = (state != 0) &amp;&amp; (C0 || C1);   <span class="comment">// Continue to live</span></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> a2 = (state == 0) &amp;&amp; C1;           <span class="comment">// Reproduction</span></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> a3 = (state == 1) &amp;&amp; (nHood &gt; 3);  <span class="comment">// Over-population</span></div>
<div class="line"> </div>
<div class="line">            display = <a name="a14"></a><a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(2, a0 + a1, a1 + a2, a3).<a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Update state</span></div>
<div class="line">            state = state * C0 + C1;</div>
<div class="line"> </div>
<div class="line">            <span class="keywordtype">double</span> fps = 30;</div>
<div class="line">            <span class="keywordflow">while</span> (<a name="a15"></a><a class="code" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">timer::stop</a>(delay) &lt; (1 / fps)) {}</div>
<div class="line">        }</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a16"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a17"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__gfx__func__draw_htm_gaed174450be6db4dfa5ef65b7baccbe57"><div class="ttname"><a href="group__gfx__func__draw.htm#gaed174450be6db4dfa5ef65b7baccbe57">af::Window::image</a></div><div class="ttdeci">void image(const array &amp;in, const char *title=NULL)</div><div class="ttdoc">Renders the input array as an image to the window.</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a5822c6bdfbf4ff01f23c4417934b924c"><div class="ttname"><a href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">af::array::as</a></div><div class="ttdeci">const array as(dtype type) const</div><div class="ttdoc">Converts the array into another type.</div></div>
<div class="ttc" id="agroup__manip__func__join_htm_ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><div class="ttname"><a href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">af::join</a></div><div class="ttdeci">AFAPI array join(const int dim, const array &amp;first, const array &amp;second)</div><div class="ttdoc">Join 2 arrays along dim.</div></div>
<div class="ttc" id="astructaf_1_1timer_htm_acde4fe9b34f26a2c99bdb52080264116"><div class="ttname"><a href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">af::timer::start</a></div><div class="ttdeci">static AFAPI timer start()</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="adefines_8h_htm_ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba"><div class="ttname"><a href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></div><div class="ttdeci">@ afHost</div><div class="ttdoc">Host pointer.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00235">defines.h:234</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="agroup__gfx__func__window_htm_ga46143fd6de3be9ab9951f140d3ae8c2f"><div class="ttname"><a href="group__gfx__func__window.htm#ga46143fd6de3be9ab9951f140d3ae8c2f">af::Window::close</a></div><div class="ttdeci">bool close()</div><div class="ttdoc">Check if window is marked for close.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:29</a></div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_ga3548059d64e0cefc7fedb4ec28321d32"><div class="ttname"><a href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="agroup__gfx__func__window_htm_ga91f824616f7dcac3265fff01a55990a9"><div class="ttname"><a href="group__gfx__func__window.htm#ga91f824616f7dcac3265fff01a55990a9">af::Window::setPos</a></div><div class="ttdeci">void setPos(const unsigned x, const unsigned y)</div><div class="ttdoc">Set the start position where the window will appear.</div></div>
<div class="ttc" id="astructaf_1_1timer_htm_adcbc49c002458a0a2370e0bb8e96c322"><div class="ttname"><a href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">af::timer::stop</a></div><div class="ttdeci">static AFAPI double stop()</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="astructaf_1_1timer_htm"><div class="ttname"><a href="structaf_1_1timer.htm">af::timer</a></div><div class="ttdoc">Internal timer object.</div><div class="ttdef"><b>Definition:</b> <a href="timing_8h_source.htm#l00036">timing.h:36</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_gae79b64c8b0d6a06309e8b67bf89cf6c9"><div class="ttname"><a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
