<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>/Users/mlloreda/work/af/v3.6/arrayfire-docs-v3.6/docs/pages/configuring_arrayfire_environment.md Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('configuring__arrayfire__environment_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">/Users/mlloreda/work/af/v3.6/arrayfire-docs-v3.6/docs/pages/configuring_arrayfire_environment.md</div>  </div>
</div><!--header-->
<div class="contents">
<a href="configuring__arrayfire__environment_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Configuring ArrayFire Environment {#configuring_environment}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;===============================================================================</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;This page lists environment and runtime configurations that will help enhance</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;your experience with ArrayFire.</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;[TOC]</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;Environment Variables{#environment_variables}</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;===============================================================================</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;The following are useful environment variable that can be used with ArrayFire.</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;AF_PATH {#af_path}</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;This is the path with ArrayFire gets installed, ie. the includes and libs are</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;present in this directory. You can use this variable to add include paths and</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;libraries to your projects.</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;AF_PRINT_ERRORS {#af_print_errors}</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;When AF_PRINT_ERRORS is set to 1, the exceptions thrown are more verbose and</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;detailed. This helps in locating the exact failure.</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;AF_PRINT_ERRORS=1 ./myprogram</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;AF_CUDA_DEFAULT_DEVICE {#af_cuda_default_device}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;Use this variable to set the default CUDA device. Valid values for this</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;variable are the device identifiers shown when af::info is run.</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;AF_CUDA_DEFAULT_DEVICE=1 ./myprogram_cuda</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;Note: af::setDevice call in the source code will take precedence over this</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;variable.</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;AF_OPENCL_DEFAULT_DEVICE {#af_opencl_default_device}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;Use this variable to set the default OpenCL device. Valid values for this</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;variable are the device identifiers shown when af::info is run.</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;AF_OPENCL_DEFAULT_DEVICE=1 ./myprogram_opencl</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;Note: af::setDevice call in the source code will take precedence over this</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;variable.</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;AF_OPENCL_DEFAULT_DEVICE_TYPE {#af_opencl_default_device_type}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;Use this variable to set the default OpenCL device type. Valid values for this</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;variable are: CPU, GPU, ACC (Accelerators).</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;When set, the first device of the specified type is chosen as default device.</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;AF_OPENCL_DEFAULT_DEVICE_TYPE=CPU ./myprogram_opencl</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;Note: `AF_OPENCL_DEFAULT_DEVICE` and af::setDevice takes precedence over this variable.</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;AF_OPENCL_DEVICE_TYPE {#af_opencl_device_type}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;Use this variable to only choose OpenCL devices of specified type. Valid values for this</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;variable are:</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;- ALL: All OpenCL devices. (Default behavior).</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;- CPU: CPU devices only.</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;- GPU: GPU devices only.</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;- ACC: Accelerator devices only.</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;When set, the remaining OpenCL device types are ignored by the OpenCL backend.</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;AF_OPENCL_DEVICE_TYPE=CPU ./myprogram_opencl</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;AF_OPENCL_CPU_OFFLOAD {#af_opencl_cpu_offload}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;When ArrayFire runs on devices with unified memory with the host (ie.</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;`CL_DEVICE_HOST_UNIFIED_MENORY` is true for the device) then certain functions</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;are offloaded to run on the CPU using mapped buffers.</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;ArrayFire takes advantage of fast libraries such as MKL while spending no time</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;copying memory from device to host. The device memory is mapped to a host</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;pointer which can be used in the offloaded functions.</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;This functionality can be disabled by using the environment variable</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;`AF_OPENCL_CPU_OFFLOAD=0`.</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;The default bevaior of this has changed in version 3.4.</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;Prior to v3.4, CPU Offload functionality was used only when the user set</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;`AF_OPENCL_CPU_OFFLOAD=1` and disabled otherwise.</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;From v3.4 onwards, CPU Offload is enabled by default and is disabled only when</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;`AF_OPENCL_CPU_OFFLOAD=0` is set.</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;AF_OPENCL_SHOW_BUILD_INFO {#af_opencl_show_build_info}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;This variable is useful when debuggin OpenCL kernel compilation failures. When</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;this variable is set to 1, and an error occurs during a OpenCL kernel</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;compilation, then the log and kernel are printed to screen.</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;AF_DISABLE_GRAPHICS {#af_disable_graphics}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;Setting this variable to 1 will disable window creation when graphics</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;functions are being called. Disabling window creation will disable all other</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;graphics calls at runtime as well.</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;This is a useful enviornment variable when running code on servers and systems</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;without displays. When graphics calls are run on such machines, they will</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;print warning about window creation failing. To suppress those calls, set this</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;variable.</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;AF_SYNCHRONOUS_CALLS {#af_synchronous_calls}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;When this environment variable is set to 1, ArrayFire will execute all</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;functions synchronously.</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;AF_SHOW_LOAD_PATH {#af_show_load_path}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;When using the Unified backend, if this variable is set to 1, it will show the</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;path where the ArrayFire backend libraries are loaded from.</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;If the libraries are loaded from system paths, such as PATH or LD_LIBRARY_PATH</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;etc, then it will print &quot;system path&quot;. If the libraries are loaded from other</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;paths, then those paths are shown in full.</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;AF_MEM_DEBUG {#af_mem_debug}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;When AF_MEM_DEBUG is set to 1 (or anything not equal to 0), the caching mechanism in the memory manager is disabled.</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;The device buffers are allocated using native functions as needed and freed when going out of scope.</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;When the environment variable is not set, it is treated to be zero.</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;AF_MEM_DEBUG=1 ./myprogram</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;AF_MAX_BUFFERS {#af_max_buffers}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;-------------------------------------------------------------------------</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;When AF_MAX_BUFFERS is set, this environment variable specifies the maximum number of buffers allocated before garbage collection kicks in.</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;Please note that the total number of buffers that can exist simultaneously can be higher than this number. This variable tells the garbage collector that it should free any available buffers immediately if the treshold is reached.</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;When not set, the default value is 1000.</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;AF_OPENCL_MAX_JIT_LEN {#af_opencl_max_jit_len}</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;When set, this environment variable specifies the maximum height of the OpenCL JIT tree after which evaluation is forced.</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;The default value, as of v3.4, is 50 on OSX, 100 everywhere else. This value was 20 for older versions.</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;AF_CUDA_MAX_JIT_LEN {#af_cuda_max_jit_len}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;When set, this environment variable specifies the maximum height of the CUDA JIT tree after which evaluation is forced.</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;The default value, as of v3.4, 100. This value was 20 for older versions.</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;AF_CPU_MAX_JIT_LEN {#af_cpu_max_jit_len}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;-------------------------------------------------------------------------------</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;When set, this environment variable specifies the maximum length of the CPU JIT tree after which evaluation is forced.</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;The default value, as of v3.4, 100. This value was 20 for older versions.</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
