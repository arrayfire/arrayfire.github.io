<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: readArray</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__stream__func__read.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">readArray<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__io__mat.htm">Input and Output functions</a> &raquo; <a class="el" href="group__dataio__mat.htm">Reading and writing arrays</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Load an array from a file.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga96a8b4909401cefdb3f9d4664b45f8c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga96a8b4909401cefdb3f9d4664b45f8c0">readArray</a> (const char *filename, const unsigned <a class="el" href="classaf_1_1index.htm">index</a>)</td></tr>
<tr class="separator:ga96a8b4909401cefdb3f9d4664b45f8c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47da900d867a0000a381bc840d3fa784"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga47da900d867a0000a381bc840d3fa784">readArray</a> (const char *filename, const char *key)</td></tr>
<tr class="separator:ga47da900d867a0000a381bc840d3fa784"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00cda45b2d6dd66daf68d5aa7d36ee81"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga00cda45b2d6dd66daf68d5aa7d36ee81">readArrayCheck</a> (const char *filename, const char *key)</td></tr>
<tr class="memdesc:ga00cda45b2d6dd66daf68d5aa7d36ee81"><td class="mdescLeft">&#160;</td><td class="mdescRight">When reading by key, it may be a good idea to run this function first to check for the key and then call the readArray using the index.  <a href="group__stream__func__read.htm#ga00cda45b2d6dd66daf68d5aa7d36ee81">More...</a><br /></td></tr>
<tr class="separator:ga00cda45b2d6dd66daf68d5aa7d36ee81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab01a9d75d67f2ecfccac53b02c900930"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#gab01a9d75d67f2ecfccac53b02c900930">af_read_array_index</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const char *filename, const unsigned index)</td></tr>
<tr class="separator:gab01a9d75d67f2ecfccac53b02c900930"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e0331b300f0b94ea9cc53606cf38278"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga8e0331b300f0b94ea9cc53606cf38278">af_read_array_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const char *filename, const char *key)</td></tr>
<tr class="separator:ga8e0331b300f0b94ea9cc53606cf38278"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga31522b71beee2b1c06d49b5aa65a5c6f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm#ga31522b71beee2b1c06d49b5aa65a5c6f">af_read_array_key_check</a> (int *index, const char *filename, const char *key)</td></tr>
<tr class="memdesc:ga31522b71beee2b1c06d49b5aa65a5c6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">When reading by key, it may be a good idea to run this function first to check for the key and then call the readArray using the index.  <a href="group__stream__func__read.htm#ga31522b71beee2b1c06d49b5aa65a5c6f">More...</a><br /></td></tr>
<tr class="separator:ga31522b71beee2b1c06d49b5aa65a5c6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Load an array from a file. </p>
<p >The readArray function lets users read arrays saved in files. Arrays can either be read using the index in the file (0-indexed), or using the key that was used along with the Array.</p>
<p >Note that if there are multiple arrays with the same key, only the first one will be read.</p>
<p >The format of the file (version 1) is as follows:</p>
<p >Header: </p><table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Description   </th><th class="markdownTableHeadNone">Data Type   </th><th class="markdownTableHeadNone">Size (Bytes)   </th><th class="markdownTableHeadNone">Detailed Desc    </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">Version   </td><td class="markdownTableBodyNone">Char   </td><td class="markdownTableBodyNone">1   </td><td class="markdownTableBodyNone">ArrayFire File Format Version for future use. Currently set to 1    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">Array Count   </td><td class="markdownTableBodyNone">Int   </td><td class="markdownTableBodyNone">4   </td><td class="markdownTableBodyNone">No. of Arrays stored in file   </td></tr>
</table>
<p >Per Array: </p><table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Description   </th><th class="markdownTableHeadNone">Data Type   </th><th class="markdownTableHeadNone">Size (Bytes)   </th><th class="markdownTableHeadNone">Detailed Desc    </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">Length of Key String   </td><td class="markdownTableBodyNone">Int   </td><td class="markdownTableBodyNone">4   </td><td class="markdownTableBodyNone">No. of characters (excluding null ending) in the key string    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">Key   </td><td class="markdownTableBodyNone">Char []   </td><td class="markdownTableBodyNone">length   </td><td class="markdownTableBodyNone">Key of the Array. Used when reading from file    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">Offset   </td><td class="markdownTableBodyNone">Int64   </td><td class="markdownTableBodyNone">8   </td><td class="markdownTableBodyNone">No of bytes between offset and start of next array    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">Array Type   </td><td class="markdownTableBodyNone">Char   </td><td class="markdownTableBodyNone">1   </td><td class="markdownTableBodyNone">Type corresponding to af_dtype enum    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">Dims (4 values)   </td><td class="markdownTableBodyNone">Int64   </td><td class="markdownTableBodyNone">4 * 8 = 32   </td><td class="markdownTableBodyNone">Dimensions of the Array    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">Data   </td><td class="markdownTableBodyNone">Type   </td><td class="markdownTableBodyNone">sizeof(Type) * dims.elements()   </td><td class="markdownTableBodyNone">Actual data of the array   </td></tr>
</table>
<p >The offset is equal to 1 byte (type) + 32 bytes (dims) + size of data.</p>
<p >An file with 2 arrays would look like (representative)</p>
<blockquote class="doxtable">
<p >&zwj;1<br  />
2<br  />
Array 1 Key Length<br  />
Array 1 Key<br  />
Array 1 Offset<br  />
Array 1 Type<br  />
Array 1 Dims<br  />
Array 1 Data<br  />
Array 2 Key Length<br  />
Array 2 Key<br  />
Array 2 Offset<br  />
Array 2 Type<br  />
Array 2 Dims<br  />
Array 2 Data<br  />
</p>
</blockquote>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="gab01a9d75d67f2ecfccac53b02c900930" name="gab01a9d75d67f2ecfccac53b02c900930"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab01a9d75d67f2ecfccac53b02c900930">&#9670;&#160;</a></span>af_read_array_index()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_read_array_index </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is the array read from index </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is the path to the location on disk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>is the 0-based sequential location of the array to be read</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function will throw an exception if the key is not found. </dd></dl>

</div>
</div>
<a id="ga8e0331b300f0b94ea9cc53606cf38278" name="ga8e0331b300f0b94ea9cc53606cf38278"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8e0331b300f0b94ea9cc53606cf38278">&#9670;&#160;</a></span>af_read_array_key()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_read_array_key </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is the array read from key </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is the path to the location on disk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>is the tag/name of the array to be read. The key needs to have an exact match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function will throw an exception if the key is not found. </dd></dl>

</div>
</div>
<a id="ga31522b71beee2b1c06d49b5aa65a5c6f" name="ga31522b71beee2b1c06d49b5aa65a5c6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga31522b71beee2b1c06d49b5aa65a5c6f">&#9670;&#160;</a></span>af_read_array_key_check()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_read_array_key_check </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>When reading by key, it may be a good idea to run this function first to check for the key and then call the readArray using the index. </p>
<p >This will avoid exceptions in case of key not found.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">index</td><td>of the array in the file if the key is found. -1 if key is not found. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is the path to the location on disk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>is the tag/name of the array to be read. The key needs to have an exact match. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga47da900d867a0000a381bc840d3fa784" name="ga47da900d867a0000a381bc840d3fa784"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga47da900d867a0000a381bc840d3fa784">&#9670;&#160;</a></span>readArray() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> readArray </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is the path to the location on disk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>is the tag/name of the array to be read. The key needs to have an exact match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>array read by key</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function will throw an exception if the key is not found. </dd></dl>

</div>
</div>
<a id="ga96a8b4909401cefdb3f9d4664b45f8c0" name="ga96a8b4909401cefdb3f9d4664b45f8c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga96a8b4909401cefdb3f9d4664b45f8c0">&#9670;&#160;</a></span>readArray() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> readArray </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is the path to the location on disk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>is the 0-based sequential location of the array to be read</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>array read from the index location</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function will throw an exception if the index is out of bounds </dd></dl>

</div>
</div>
<a id="ga00cda45b2d6dd66daf68d5aa7d36ee81" name="ga00cda45b2d6dd66daf68d5aa7d36ee81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga00cda45b2d6dd66daf68d5aa7d36ee81">&#9670;&#160;</a></span>readArrayCheck()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int readArrayCheck </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>When reading by key, it may be a good idea to run this function first to check for the key and then call the readArray using the index. </p>
<p >This will avoid exceptions in case of key not found.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is the path to the location on disk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>is the tag/name of the array to be read. The key needs to have an exact match.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>index of the array in the file if the key is found. -1 if key is not found. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Mon Sep 25 2023 12:35:30 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
