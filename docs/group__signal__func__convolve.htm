<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: convolve (Non-separable)</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__signal__func__convolve.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">convolve (Non-separable)<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__signal__mat.htm">Signal Processing</a> &raquo;  &#124; <a class="el" href="group__convolve__mat.htm">Convolutions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Convolution Integral for any(one through three) dimensional data.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a> domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution any(one through three) dimensional signals.  <a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">More...</a><br /></td></tr>
<tr class="separator:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga711d2440b2d954215a02d90ac8952af8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#ga711d2440b2d954215a02d90ac8952af8">fftConvolve</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;<a class="el" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a> mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:ga711d2440b2d954215a02d90ac8952af8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for FFT-based convolution any(one through three) dimensional signals.  <a href="group__signal__func__convolve.htm#ga711d2440b2d954215a02d90ac8952af8">More...</a><br /></td></tr>
<tr class="separator:ga711d2440b2d954215a02d90ac8952af8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Convolution Integral for any(one through three) dimensional data. </p>
<p>A convolution is a common operation between a source array, a, and a filter (or kernel) array b. The answer to the convolution is the same as computing the coefficients in polynomial multiplication, if a and b are the coefficients.</p>
<p>Another way to think about it is that the filter kernel is centered on each pixel in a, and the output for that pixel or data point is the sum of the products.</p>
<p>Depending on the size of the signal and the filter, any one of the following batch mode convolutions take place.</p>
<ul>
<li><b>No Batch</b> - Single filter applied to single input.</li>
<li><b>Filter is Batched</b> - Many filters applied on same input</li>
<li><b>Signal is Batched</b> - Single filter applied to a set of inputs.</li>
<li><b>Identical Batches</b> - A set of filters applied onto to a set of inputs in one-to-one correspondence.</li>
<li><b>Non overlapping Batches</b> - All batched filters are applied to all batched signals. The batch axis of Signal and Filter <b>should not</b> be the same.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>All non-overlapping(interleaved) convolutions default to frequency domain <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dba0a1b168b058f58bd6b092af8bd5581fd">AF_CONV_FREQ</a> irrespective of the provided convolution mode argument.</dd></dl>
<p>This version of convolution function delegates the call to respective 1D, 2D or 3D convolution functions internally.</p>
<p>Convolution dimensionality is \( \min (sd, fd) \) where sd &amp; fd are dimensionality of signal and filter respectively. This formulation only decides the dimensionality of convolution.</p>
<p>Given below are some examples on how convolution dimensionality is computed.</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadCenter">Signal Size </th><th class="markdownTableHeadCenter">Filter Size </th><th class="markdownTableHeadCenter">Input Rank </th><th class="markdownTableHeadCenter">Filter Rank </th><th class="markdownTableHeadCenter">Convolve Dimensionality  </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ 1 \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">2 </td><td class="markdownTableBodyCenter">1 </td><td class="markdownTableBodyCenter">\( min(2, 1) =&gt; \) 1D  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyCenter">\( [m \ 1 \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">1 </td><td class="markdownTableBodyCenter">2 </td><td class="markdownTableBodyCenter">\( min(1, 2) =&gt; \) 1D  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">2 </td><td class="markdownTableBodyCenter">2 </td><td class="markdownTableBodyCenter">\( min(2, 2) =&gt; \) 2D  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyCenter">\( [m \ n \ 1 \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ p \ 1] \) </td><td class="markdownTableBodyCenter">2 </td><td class="markdownTableBodyCenter">3 </td><td class="markdownTableBodyCenter">\( min(2, 3) =&gt; \) 2D  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyCenter">\( [m \ n \ 1 \ p] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ 1 \ q] \) </td><td class="markdownTableBodyCenter">4 </td><td class="markdownTableBodyCenter">4 </td><td class="markdownTableBodyCenter">3D  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyCenter">\( [m \ n \ p \ 1] \) </td><td class="markdownTableBodyCenter">\( [m \ n \ q \ 1] \) </td><td class="markdownTableBodyCenter">3 </td><td class="markdownTableBodyCenter">3 </td><td class="markdownTableBodyCenter">\( min(3, 3) =&gt; \) 3D  </td></tr>
</table>
<dl class="section note"><dt>Note</dt><dd>In the cases similar to the fifth row of the above table, signal and filter are of rank 4, the function delegates the operation to three dimensional convolution <a class="el" href="group__signal__func__convolve3.htm">convolve3</a></dd></dl>
<p>If the operation you intend to perform doesn't align with what this function does, please check the rank specific convolve functions (hyperlinked below) documentation to find out more.</p>
<ul>
<li><a class="el" href="group__signal__func__convolve1.htm">convolve1</a></li>
<li><a class="el" href="group__signal__func__convolve2.htm">convolve2</a></li>
<li><a class="el" href="group__signal__func__convolve3.htm">convolve3</a> </li>
</ul>
<h2 class="groupheader">Function Documentation</h2>
<a id="gae79b64c8b0d6a06309e8b67bf89cf6c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae79b64c8b0d6a06309e8b67bf89cf6c9">&#9670;&nbsp;</a></span>convolve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::convolve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a>&#160;</td>
          <td class="paramname"><em>mode</em> = <code><a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a>&#160;</td>
          <td class="paramname"><em>domain</em> = <code><a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for convolution any(one through three) dimensional signals. </p>
<p>Example for convolution on one dimensional signal in one to one batch mode </p><div class="fragment"><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> a = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(10);</div>
<div class="line">    <span class="comment">// af_print(a);</span></div>
<div class="line">    <span class="comment">// a [10 1 1 1] = 0.0000 0.1315 0.7556 0.4587 0.5328 0.2190 0.0470 0.6789</span></div>
<div class="line">    <span class="comment">// 0.6793 0.9347</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> b = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(4);</div>
<div class="line">    <span class="comment">// af_print(b);</span></div>
<div class="line">    <span class="comment">// b [4 1 1 1]  = 0.3835 0.5194 0.8310 0.0346</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> c = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(a, b);</div>
<div class="line">    <span class="comment">// af_print(c);</span></div>
<div class="line">    <span class="comment">// c [10 1 1 1] = 0.3581 0.6777 1.0750 0.7679 0.5903 0.4851 0.6598</span></div>
<div class="line">    <span class="comment">// 1.2770 1.0734 0.8002</span></div>
</div><!-- fragment --><p> Example for convolution on two dimensional signal in one to one batch mode </p><div class="fragment"><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> d = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0.5, 5, 5);</div>
<div class="line">    <span class="comment">// af_print(d);</span></div>
<div class="line">    <span class="comment">// d [5 5 1 1]</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> e = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, 2, 2);</div>
<div class="line">    <span class="comment">// af_print(e);</span></div>
<div class="line">    <span class="comment">// e [2 2 1 1]</span></div>
<div class="line">    <span class="comment">//     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     1.0000     1.0000</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> f = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(d, e);</div>
<div class="line">    <span class="comment">// af_print(f);</span></div>
<div class="line">    <span class="comment">// f [5 5 1 1]</span></div>
<div class="line">    <span class="comment">//     2.0000     2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     2.0000     2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     2.0000     2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     2.0000     2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     1.0000     1.0000     1.0000     1.0000     0.5000</span></div>
</div><!-- fragment --><p> Example for convolution on three dimensional signal in one to one batch mode </p><div class="fragment"><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> g = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, 4, 4, 4);</div>
<div class="line">    <span class="comment">// af_print(g);</span></div>
<div class="line">    <span class="comment">// g [4 4 4 1]</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> h = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0.5, 2, 2, 2);</div>
<div class="line">    <span class="comment">// af_print(h);</span></div>
<div class="line">    <span class="comment">// h [2 2 2 1]</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">//    0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> i = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(g, h);</div>
<div class="line">    <span class="comment">// af_print(i);</span></div>
<div class="line">    <span class="comment">// i [4 4 4 1]</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     0.5000</span></div>
</div><!-- fragment --> <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input signal </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filter</td><td>is the signal that shall be flipped for the convolution operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">domain</td><td>specifies if the convolution should be performed in frequency os spatial domain </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the convolved array</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The default parameter of <code>domain</code>, <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>, heuristically switches between frequency and spatial domain. </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="computer_vision_2harris_8cpp-example.htm#a8">computer_vision/harris.cpp</a>, <a class="el" href="getting_started_2convolve_8cpp-example.htm#a2">getting_started/convolve.cpp</a>, <a class="el" href="graphics_2conway_8cpp-example.htm#a9">graphics/conway.cpp</a>, <a class="el" href="graphics_2conway_pretty_8cpp-example.htm#a13">graphics/conway_pretty.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a26">graphics/gravity_sim.cpp</a>, <a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a9">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a19">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a3">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2deconvolution_8cpp-example.htm#a8">image_processing/deconvolution.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a1">image_processing/edge.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a12">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2gradient_diffusion_8cpp-example.htm#a3">image_processing/gradient_diffusion.cpp</a>, <a class="el" href="image_processing_2image_demo_8cpp-example.htm#a14">image_processing/image_demo.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a8">image_processing/image_editing.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a11">image_processing/morphing.cpp</a>, <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#a4">image_processing/optical_flow.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a4">image_processing/pyramids.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a11">pde/swe.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="ga711d2440b2d954215a02d90ac8952af8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga711d2440b2d954215a02d90ac8952af8">&#9670;&nbsp;</a></span>fftConvolve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::fftConvolve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a>&#160;</td>
          <td class="paramname"><em>mode</em> = <code><a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for FFT-based convolution any(one through three) dimensional signals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input signal </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filter</td><td>is the signal that shall be used for the convolution operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the convolved array </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_gae79b64c8b0d6a06309e8b67bf89cf6c9"><div class="ttname"><a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
