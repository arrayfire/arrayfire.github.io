<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>convolve</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__signal__func__convolve.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">convolve<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__signal__mat.htm">Signal Processing</a> &raquo;  &#124; <a class="el" href="group__convolve__mat.htm">Convolutions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Convolution Integral for any dimensional data.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a> (const array &amp;signal, const array &amp;filter, const convMode mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>, const convDomain domain=<a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>)</td></tr>
<tr class="memdesc:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for convolution any(one through three) dimensional signals.  <a href="#gae79b64c8b0d6a06309e8b67bf89cf6c9">More...</a><br /></td></tr>
<tr class="separator:gae79b64c8b0d6a06309e8b67bf89cf6c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5e9f278ff9b46229184ca2adc144ece"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#gae5e9f278ff9b46229184ca2adc144ece">convolve</a> (const array &amp;col_filter, const array &amp;row_filter, const array &amp;signal, const convMode mode=<a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>)</td></tr>
<tr class="memdesc:gae5e9f278ff9b46229184ca2adc144ece"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for separable convolution on two dimensional signals.  <a href="#gae5e9f278ff9b46229184ca2adc144ece">More...</a><br /></td></tr>
<tr class="separator:gae5e9f278ff9b46229184ca2adc144ece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeb6ba88155cf3ef29d93f97b147e372f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm#gaeb6ba88155cf3ef29d93f97b147e372f">af_convolve2_sep</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> col_filter, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> row_filter, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> signal, const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a> mode)</td></tr>
<tr class="memdesc:gaeb6ba88155cf3ef29d93f97b147e372f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for separable convolution on two dimensional signals.  <a href="#gaeb6ba88155cf3ef29d93f97b147e372f">More...</a><br /></td></tr>
<tr class="separator:gaeb6ba88155cf3ef29d93f97b147e372f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Convolution Integral for any dimensional data. </p>
<p>A convolution is a common operation between a source array, a, and a filter (or kernel) array b. The answer to the convolution is the same as computing the coefficients in polynomial multiplication, if a and b are the coefficients.</p>
<p>Another way to think about it is that the filter kernel is centered on each pixel in a, and the output for that pixel or data point is the sum of the products.</p>
<p>Depending on the dimensions of the input signal and the filter signal, any one of the following batch mode convolutions take place.</p>
<ul>
<li><b>No Batch</b> - Single filter applied to single input.</li>
<li><b>Filter is Batched</b> - Many filters applied on same input</li>
<li><b>Signal is Batched</b> - Single filter applied to a set of inputs.</li>
<li><b>Identical Batches</b> - A set of filters applied onto to a set of inputs in one-to-one correspondence.</li>
<li><b>Non overlapping Batches</b> - All batched filters are applied to all batched signals. The batch dimension of Signal and Filter <b>should not</b> be the same.</li>
</ul>
<p>For example, if the signal is two dimensional with m &amp; n as sizes along the 0th &amp; 1st dimensions respectively, then the possible batch operations are as follows.</p>
<table class="doxtable">
<tr>
<th align="center">Input Signal Dimensions </th><th align="center">Filter Dimensions </th><th align="center">Output Dimensions </th><th align="center">Batch Mode </th><th align="left">Explanation  </th></tr>
<tr>
<td align="center">[m n 1 1] </td><td align="center">[m n 1 1] </td><td align="center">[m n 1 1] </td><td align="center">No Batch </td><td align="left">Output will be a single convolve array </td></tr>
<tr>
<td align="center">[m n 1 1] </td><td align="center">[m n p 1] </td><td align="center">[m n p 1] </td><td align="center">Filter is Batched </td><td align="left">p filters applied to same input </td></tr>
<tr>
<td align="center">[m n p 1] </td><td align="center">[m n 1 1] </td><td align="center">[m n p 1] </td><td align="center">Signal is Batched </td><td align="left">1 filter applied to p inputs </td></tr>
<tr>
<td align="center">[m n p 1] </td><td align="center">[m n p 1] </td><td align="center">[m n p 1] </td><td align="center">Identical Batches </td><td align="left">p filters applied to p inputs in one-to-one correspondence </td></tr>
<tr>
<td align="center">[m n p 1] </td><td align="center">[m n 1 q] </td><td align="center">[m n p q] </td><td align="center">Non-overlapping batches </td><td align="left">q filters applied to p inputs in to produce p x q results </td></tr>
<tr>
<td align="center">[m n 1 p] </td><td align="center">[m n q 1] </td><td align="center">[m n q p] </td><td align="center">Non-overlapping batches </td><td align="left">q filters applied to p inputs in to produce q x p results </td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gaeb6ba88155cf3ef29d93f97b147e372f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_convolve2_sep </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>col_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>row_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">af_conv_mode</a>&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for separable convolution on two dimensional signals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is convolved array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">col_filter</td><td>is filter that has to be applied along the coloumns </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">row_filter</td><td>is filter that has to be applied along the rows </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the convolution is successful, otherwise an appropriate error code is returned.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Separable convolution only supports two(ONE-to-ONE and MANY-to-ONE) batch modes from the ones described in the detailed description section. </dd></dl>

</div>
</div>
<a class="anchor" id="gae79b64c8b0d6a06309e8b67bf89cf6c9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::convolve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a>&#160;</td>
          <td class="paramname"><em>mode</em> = <code><a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3db">convDomain</a>&#160;</td>
          <td class="paramname"><em>domain</em> = <code><a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for convolution any(one through three) dimensional signals. </p>
<p>Example for convolution on one dimensional signal in one to one batch mode </p><div class="fragment"><div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> a = <a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">randu</a>(10);</div>
<div class="line">    <span class="comment">//af_print(a);</span></div>
<div class="line">    <span class="comment">//a [10 1 1 1] = 0.0000 0.1315 0.7556 0.4587 0.5328 0.2190 0.0470 0.6789 0.6793 0.9347</span></div>
<div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> b = <a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">randu</a>(4);</div>
<div class="line">    <span class="comment">//af_print(b);</span></div>
<div class="line">    <span class="comment">//b [4 1 1 1]  = 0.3835 0.5194 0.8310 0.0346</span></div>
<div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> c = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(a, b);</div>
<div class="line">    <span class="comment">//af_print(c);</span></div>
<div class="line">    <span class="comment">//c [10 1 1 1] = 0.3581 0.6777 1.0750 0.7679 0.5903 0.4851 0.6598 1.2770 1.0734 0.8002</span></div>
</div><!-- fragment --><p> Example for convolution on two dimensional signal in one to one batch mode </p><div class="fragment"><div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> d = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0.5, 5, 5);</div>
<div class="line">    <span class="comment">//af_print(d);</span></div>
<div class="line">    <span class="comment">//d [5 5 1 1]</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000     0.5000     0.5000     0.5000</span></div>
<div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> e = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, 2, 2);</div>
<div class="line">    <span class="comment">//af_print(e);</span></div>
<div class="line">    <span class="comment">//e [2 2 1 1]</span></div>
<div class="line">    <span class="comment">//     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     1.0000     1.0000</span></div>
<div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> f = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(d, e);</div>
<div class="line">    <span class="comment">//af_print(f);</span></div>
<div class="line">    <span class="comment">//f [5 5 1 1]</span></div>
<div class="line">    <span class="comment">//     2.0000     2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     2.0000     2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     2.0000     2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     2.0000     2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//     1.0000     1.0000     1.0000     1.0000     0.5000</span></div>
</div><!-- fragment --><p> Example for convolution on three dimensional signal in one to one batch mode </p><div class="fragment"><div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> g = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, 4, 4, 4);</div>
<div class="line">    <span class="comment">//af_print(g);</span></div>
<div class="line">    <span class="comment">//g [4 4 4 1]</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     1.0000</span></div>
<div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> h = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0.5, 2, 2, 2);</div>
<div class="line">    <span class="comment">//af_print(h);</span></div>
<div class="line">    <span class="comment">//h [2 2 2 1]</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">//    0.5000     0.5000</span></div>
<div class="line">    <span class="comment">//    0.5000     0.5000</span></div>
<div class="line"></div>
<div class="line">    <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> i = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(g, h);</div>
<div class="line">    <span class="comment">//af_print(i);</span></div>
<div class="line">    <span class="comment">//i [4 4 4 1]</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    4.0000     4.0000     4.0000     2.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    2.0000     2.0000     2.0000     1.0000</span></div>
<div class="line">    <span class="comment">//    1.0000     1.0000     1.0000     0.5000</span></div>
</div><!-- fragment --> <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input signal </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filter</td><td>is the signal that shall be flipped for the convolution operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">domain</td><td>specifies if the convolution should be performed in frequency os spatial domain </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the convolved array</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The default parameter of <code>domain</code>, <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>, heuristically switches between frequency and spatial domain. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="computer_vision_2harris_8cpp-example.htm#a8">computer_vision/harris.cpp</a>, <a class="el" href="getting_started_2convolve_8cpp-example.htm#a2">getting_started/convolve.cpp</a>, <a class="el" href="graphics_2conway_8cpp-example.htm#a9">graphics/conway.cpp</a>, <a class="el" href="graphics_2conway_pretty_8cpp-example.htm#a13">graphics/conway_pretty.cpp</a>, <a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a9">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a19">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a3">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a1">image_processing/edge.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a12">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2image_demo_8cpp-example.htm#a14">image_processing/image_demo.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a7">image_processing/image_editing.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a11">image_processing/morphing.cpp</a>, <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#a4">image_processing/optical_flow.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a4">image_processing/pyramids.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a13">pde/swe.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="gae5e9f278ff9b46229184ca2adc144ece"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::convolve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>col_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>row_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdc">convMode</a>&#160;</td>
          <td class="paramname"><em>mode</em> = <code><a class="el" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for separable convolution on two dimensional signals. </p>
<div class="fragment"><div class="line">    <span class="comment">//vector&lt;dim4&gt; numDims;</span></div>
<div class="line">    <span class="comment">//vector&lt;vector&lt;float&gt; &gt; in;</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> signal(numDims[0], &amp;(in[0].front()));</div>
<div class="line">    <span class="comment">//signal dims = [3 4 2 1]</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> cFilter(numDims[1], &amp;(in[1].front()));</div>
<div class="line">    <span class="comment">//coloumn filter dims = [2 1 1 1]</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> rFilter(numDims[2], &amp;(in[2].front()));</div>
<div class="line">    <span class="comment">//row filter dims = [3 1 1 1]</span></div>
<div class="line"></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> output = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(cFilter, rFilter, signal, <a class="code" href="defines_8h.htm#ac999a96d4a0b4ff19efba40dd5894fdca35a0029690106be18b67f0f30357ab48">AF_CONV_DEFAULT</a>);</div>
<div class="line">    <span class="comment">//output signal dims = [3 4 2 1] - same as input since &#39;expand = false&#39;</span></div>
<div class="line">    <span class="comment">//notice that the input signal is 3d array, therefore</span></div>
<div class="line">    <span class="comment">//batch mode will be automatically activated.</span></div>
<div class="line">    <span class="comment">//output will be 3d array with result of each 2d array convolution(with same filter)</span></div>
<div class="line">    <span class="comment">//stacked along the 3rd dimension</span></div>
</div><!-- fragment --> <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">signal</td><td>is the input signal </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">col_filter</td><td>is the signal that shall be along coloumns </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">row_filter</td><td>is the signal that shall be along rows </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>indicates if the convolution should be expanded or not(where output size equals input) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the convolved array</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The default parameter of <code>domain</code>, <a class="el" href="defines_8h.htm#a8519ae1caafab760d2421cd6ac13a3dbae105d11695ba3a2287e32c552d3567dd">AF_CONV_AUTO</a>, heuristically switches between frequency and spatial domain.</dd>
<dd>
Separable convolution only supports two(ONE-to-ONE and MANY-to-ONE) batch modes from the ones described in the detailed description section. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
