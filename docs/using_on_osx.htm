<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>Using ArrayFire on OSX</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('using_on_osx.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Using ArrayFire on OSX </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Once you have <a class="el" href="installing.htm">installed</a> ArrayFire on your system, the next thing to do is set up your build system. On OSX, you may create ArrayFire project using almost any editor, compiler, or build system. The only requirement is that you can include the ArrayFire header directory, and link with the ArrayFire library you intend to use.</p>
<h2>The big picture</h2>
<p>By default, the ArrayFire OSX installer will place several files in your computer's <code>/usr/local</code> directory. The installer will populate this directory with files in the following sub-directories: </p><pre class="fragment">include/arrayfire.h         - Primary ArrayFire include file
include/af/*.h              - Additional include files
lib/libaf*                  - CPU, CUDA, and OpenCL libraries (.a, .so)
lib/libforge*               - Visualization library
share/ArrayFire/cmake/*     - CMake config (find) scripts
share/ArrayFire/examples/*  - All ArrayFire examples
</pre><p>Because ArrayFire follows standard installation practices, you can use basically any build system to create and compile projects that use ArrayFire. Among the many possible build systems on Linux we suggest using ArrayFire with either CMake or Makefiles with CMake being our preferred build system.</p>
<h2>XCode</h2>
<p>Although we recommend using CMake to build ArrayFire projects on OSX, you can use XCode if this is your preferred development platform. To save some time, we have created an sample XCode project in our <a href="https://github.com/arrayfire/arrayfire-project-templates">ArrayFire Project Templates repository</a>.</p>
<p>To set up a basic C/C++ project in XCode do the following:</p>
<ol type="1">
<li>Start up XCode. Choose OSX -&gt; Application, Command Line Tool for the project: <div class="image">
<img src="xcode-setup/xcode-startup.png"  alt="Create a command line too XCode Project" width="100%"/>
</div>
</li>
<li>Fill in the details for your project and choose either C or C++ for the project: <div class="image">
<img src="xcode-setup/project-options.png"  alt="Create a C/C++ project" width="100%"/>
</div>
</li>
<li>Next we need to configure the build settings. In the left-hand pane, click on the project. In the center pane, click on "Build Settings" followed by the "All" button: <div class="image">
<img src="xcode-setup/build-settings.png"  alt="Configure build settings" width="100%"/>
</div>
</li>
<li>Now search for "Header Search Paths" and add <code>/usr/local/include</code> to the list: <div class="image">
<img src="xcode-setup/header-search-paths.png"  alt="Configure build settings" width="100%"/>
</div>
</li>
<li>Then search for "Library Search Paths" and add <code>/usr/local/lib</code> to the list: <div class="image">
<img src="xcode-setup/library-search-paths.png"  alt="Configure build settings" width="100%"/>
</div>
</li>
<li>Next, we need to make sure the executable is linked with an ArrayFire library: To do this, click the "Build Phases" tab and expand the "Link with Binary Library" menu: <div class="image">
<img src="xcode-setup/build-phases.png"  alt="Configure build settings" width="100%"/>
</div>
</li>
<li>In the search dialog that pops up, choose the "Add Other" button from the lower right. Specify the <code>/usr/local/lib</code> folder: <div class="image">
<img src="xcode-setup/library-folder-path.png"  alt="Configure build settings" width="100%"/>
</div>
</li>
<li>Lastly, select the ArrayFire library with which you wish to link your program. Your options will be:</li>
</ol>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;libafcuda.*.dylib   - CUDA backend</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;libafopencl.*.dylib - OpenCL backend</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;libafcpu.*.dylib    - CPU backend</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;libaf.*.dylib       - Unified backend</div>
</div><!-- fragment --><p>In the picture below, we have elected to link with the OpenCL backend:</p>
<div class="image">
<img src="xcode-setup/pick-arrayfire-library.png"  alt="Configure build settings" width="100%"/>
</div>
<ol type="1">
<li>Lastly, lets test ArrayFire's functionality. In the left hand pane open the main.cpp` file and insert the following code:</li>
</ol>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;// Include the ArrayFire header file</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;#include &lt;arrayfire.h&gt;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;int main(int argc, const char * argv[]) {</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;    // Gather some information about the ArrayFire device</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;    af::info();</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    return 0;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
</div><!-- fragment --><p>Finally, click the build button and you should see some information about your graphics card in the lower-section of your screen:</p>
<div class="image">
<img src="xcode-setup/afinfo-result.png"  alt="Configure build settings" width="100%"/>
</div>
<h2>CMake</h2>
<p>We recommend that the CMake build system be used to create ArrayFire projects. If you are writing a new ArrayFire project in C/C++ from scratch, we suggest you grab a copy of our <a href="https://github.com/arrayfire/arrayfire-project-templates">CMake Project Example</a>; however, it is useful to read the documentation below in case you need to add ArrayFire to an existing project.</p>
<p>As <a href="#big-picture">discussed above</a>, ArrayFire ships with a series of CMake scripts to make finding and using our library easy. The scripts will automatically find all versions of the ArrayFire library and pick the most powerful of the installed backends (typically CUDA).</p>
<p>First create a file called <code>CMakeLists.txt</code> in your project directory: </p><pre class="fragment">cd your-project-directory
touch CMakeLists.txt
</pre><p>and populate it with the following code: </p><pre class="fragment">FIND_PACKAGE(ArrayFire)
INCLUDE_DIRECTORIES(${ArrayFire_INCLUDE_DIRS})

... [gather source files, etc.]

# If you intend to use OpenCL, you need to find it
FIND_PACKAGE(OpenCL)
SET(EXTRA_LIBS ${CMAKE_THREAD_LIBS_INIT} ${OpenCL_LIBRARIES})

# Or if you intend to use CUDA, you need it as well as NVVM:
FIND_PACKAGE(CUDA)
FIND_PACKAGE(NVVM) # this FIND script can be found in the ArrayFire CMake example repository
SET(EXTRA_LIBS ${CMAKE_THREAD_LIBS_INIT} ${CUDA_LIBRARIES} ${NVVM_LIB})

ADD_EXECUTABLE(my_executable [list your source files here])
TARGET_LINK_LIBRARIES(my_executable ${ArrayFire_LIBRARIES} ${EXTRA_LIBS})
</pre><p>where <code>my_executable</code> is the name of the executable you wish to create. See the <a href="https://cmake.org/documentation/">CMake documentation</a> for more information on how to use CMake. Clearly the above code snippet precludes the use of both CUDA and OpenCL, see the <a href="https://github.com/bkloppenborg/arrayfire-cmake-example">ArrayFire CMake Example</a> for an example of how to build executables for both backends from the same CMake script.</p>
<p>In the above code listing, the <code>FIND_PACKAGE</code> will find the ArrayFire include files, libraries, and define several variables including: </p><pre class="fragment">ArrayFire_INCLUDE_DIRS    - Location of ArrayFire's include directory.
ArrayFire_LIBRARIES       - Location of ArrayFire's libraries.
                            This will default to a GPU backend if one
                            is found
ArrayFire_FOUND           - True if ArrayFire has been located
</pre><p>If you wish to use a specific backend, the find script also defines these variables: </p><pre class="fragment">ArrayFire_CPU_FOUND         - True of the ArrayFire CPU library has been found.
ArrayFire_CPU_LIBRARIES     - Location of ArrayFire's CPU library, if found
ArrayFire_CUDA_FOUND        - True of the ArrayFire CUDA library has been found.
ArrayFire_CUDA_LIBRARIES    - Location of ArrayFire's CUDA library, if found
ArrayFire_OpenCL_FOUND      - True of the ArrayFire OpenCL library has been found.
ArrayFire_OpenCL_LIBRARIES  - Location of ArrayFire's OpenCL library, if found
ArrayFire_Unified_FOUND     - True of the ArrayFire Unified library has been found.
ArrayFire_Unified_LIBRARIES - Location of ArrayFire's Unified library, if found
</pre><p>Therefore, if you wish to target a specific specific backend, simply replace <code>${ArrayFire_LIBRARIES}</code> with <code>${ArrayFire_CPU}</code>, <code>${ArrayFire_OPENCL}</code>, <code>${ArrayFire_CUDA}</code>, or <code>${ArrayFire_Unified}</code> in the <code>TARGET_LINK_LIBRARIES</code> command above. If you intend on building your software to link with all of these backends, please see the <a href="https://github.com/arrayfire/arrayfire-project-templates">CMake Project Example</a> which makes use of some fairly fun CMake tricks to avoid re-compiling code whenever possible.</p>
<p>Next we need to instruct CMake to create build instructions and then compile. We suggest using CMake's out-of-source build functionality to keep your build and source files cleanly separated. To do this: </p><pre class="fragment">cd your-project-directory
mkdir build
cd build
cmake ..
make
</pre><p><em>NOTE:</em> If you have installed ArrayFire to a non-standard location, CMake can still help you out. When you execute CMake specify the path to the <code>ArrayFireConfig*</code> files that are found in the <code>share/ArrayFire/cmake</code> subdirectory of the installation folder. For example, if ArrayFire were installed locally to <code>/opt/ArrayFire</code> then you would modify the <code>cmake</code> command above to contain the following definition: </p><pre class="fragment">cmake -DArrayFire_DIR=/opt/ArrayFire/share/ArrayFire/cmake ..
</pre><p>You can also specify this information in the ccmake command-line interface.</p>
<h2>MakeFiles</h2>
<p>Building ArrayFire projects with Makefiles is fairly similar to CMake except you must specify all paths and libraries manually. As with any make project, you need to specify the include path to the directory containing <code><a class="el" href="arrayfire_8h.htm">arrayfire.h</a></code> file. This should be <code>-I /usr/local/include</code> if you followed our installation instructions. Similarly, you will need to specify the path to the ArrayFire library using the <code>-L</code> option (e.g. <code>-L/usr/local/lib</code>) followed by the specific ArrayFire library you wish to use using the <code>-l</code> option (for example <code>-lafcpu</code>, <code>-lafopencl</code>, <code>-lafcuda</code>, or <code>-laf</code> for the CPU, OpenCL, CUDA, and unified backends respectively.</p>
<p>Here is a minimial example MakeFile which uses ArrayFire's CPU backend: </p><pre class="fragment">LIBS=-lafcpu
LIB_PATHS=-L/usr/lib
INCLUDES=-I/usr/include
CC=g++ $(COMPILER_OPTIONS)
COMPILER_OPTIONS=-std=c++11 -g

all: main.cpp Makefile
    $(CC) main.cpp -o test $(INCLUDES) $(LIBS) $(LIB_PATHS)</pre> </div></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
