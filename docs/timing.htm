<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Timing ArrayFire Code</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('timing.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div><div class="header">
  <div class="headertitle"><div class="title">Timing ArrayFire Code </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p ><a class="anchor" id="md_C__Users_jmelonak_source_repos_arrayfire_arrayfire_docs_pages_timing"></a></p>
<p >In performance-sensitive applications, it is vital to profile and measure the execution time of operations. ArrayFire provides mechanisms to achieve this.</p>
<p >ArrayFire employs an asynchronous evaluation model for all of its functions. This means that operations are queued to execute but do not necessarily complete prior to function return. Hence, directly measuring the time taken for an ArrayFire function could be misleading. To accurately measure time, one must ensure the operations are evaluated and synchronize the ArrayFire stream.</p>
<p >ArrayFire also employs a lazy evaluation model for its elementwise arithmetic operations. This means operations are not queued for execution until the result is needed by downstream operations blocking until the operations are complete.</p>
<p >The following describes how to time ArrayFire code using the eval and sync functions along with the timer and timeit functions. A final note on kernel caching also provides helpful details about ArrayFire runtimes.</p>
<h1>Using ArrayFire eval and sync functions</h1>
<p >ArrayFire provides functions to force the evaluation of lazy functions and to block until all asynchoronous operations complete.</p>
<ol type="1">
<li><p class="startli">The <a class="el" href="group__data__mat.htm#gaabf89285b7036427efe452491025567d">eval</a> function:</p>
<p class="startli">Forces the evaluation of an ArrayFire array. It ensures the execution of operations queued up for a specific array.</p>
<p class="startli">It is only required for timing purposes if elementwise arithmetic functions are called on the array, since these are handled by the ArrayFire JIT.</p>
<div class="fragment"><div class="line"><a class="code hl_class" href="classaf_1_1array.htm">af::array</a> A = <a class="code hl_function" href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">af::randu</a>(1000, 1000);</div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">af::array</a> B = A + A;                 <span class="comment">// Elementwise arithmetic operation.</span></div>
<div class="line">B.<a class="code hl_function" href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a>();                            <span class="comment">// Forces evaluation of B.</span></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a6a8d7156cd3c66a9ca9f0f2688ee9f72"><div class="ttname"><a href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">af::array::eval</a></div><div class="ttdeci">void eval() const</div><div class="ttdoc">Evaluate any JIT expressions to generate data for the array.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_ga828798e84ab467f6f8568830f1c853f3"><div class="ttname"><a href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div><div class="ttdoc">C++ Interface to create an array of random numbers uniformly distributed.</div></div>
</div><!-- fragment --><p class="startli">The function initializes the evaluation of the JIT-tree for that array and may return prior to the completion of those operations. To ensure proper timing, combine with a <a class="el" href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">sync</a> function.</p>
</li>
<li><p class="startli">The <a class="el" href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">sync</a> function:</p>
<p class="startli">Synchronizes the ArrayFire stream. It waits for all the previous operations in the stream to finish. It is often used after <a class="el" href="group__data__mat.htm#gaabf89285b7036427efe452491025567d">eval</a> to ensure that operations have indeed been completed.</p>
<div class="fragment"><div class="line"><a class="code hl_function" href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">af::sync</a>();  <span class="comment">// Waits for all previous operations to complete.</span></div>
<div class="ttc" id="agroup__device__func__sync_htm_ga4e9c28bad482dc590cac930515f14bfb"><div class="ttname"><a href="group__device__func__sync.htm#ga4e9c28bad482dc590cac930515f14bfb">af::sync</a></div><div class="ttdeci">AFAPI void sync(const int device=-1)</div><div class="ttdoc">Blocks until the device is finished processing.</div></div>
</div><!-- fragment --></li>
</ol>
<h1>Using ArrayFire timer and timeit functions</h1>
<p >ArrayFire provides a simple timer functions that returns the current time in seconds.</p>
<ol type="1">
<li><p class="startli">The <a class="el" href="structaf_1_1timer.htm">timer</a> function:</p>
<p class="startli">timer() : A platform-independent timer with microsecond accuracy:</p><ul>
<li><a class="el" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">timer::start()</a> starts a timer</li>
<li><a class="el" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">timer::start()</a> seconds since last <a class="el" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">start</a></li>
<li><a class="el" href="structaf_1_1timer.htm#af7d65643afdfed17208ca667281a84dd">timer::stop(timer start)</a> seconds since 'start'</li>
</ul>
<p class="startli">Example: single timer</p>
<div class="fragment"><div class="line"><span class="comment">// start timer</span></div>
<div class="line"><span class="comment">// - be sure to use the eval and sync functions so that previous code</span></div>
<div class="line"><span class="comment">//   does not get timed as part of the execution segment being measured</span></div>
<div class="line">timer::start();</div>
<div class="line"><span class="comment">// run a code segment</span></div>
<div class="line"><span class="comment">// - be sure to use the eval and sync functions to ensure the code</span></div>
<div class="line"><span class="comment">//   segment operations have been completed</span></div>
<div class="line"><span class="comment">// stop timer</span></div>
<div class="line">printf(<span class="stringliteral">&quot;elapsed seconds: %g\n&quot;</span>, timer::stop());</div>
</div><!-- fragment --><p class="startli">Example: multiple timers</p>
<div class="fragment"><div class="line"><span class="comment">// start timers</span></div>
<div class="line"><span class="comment">// - be sure to use the eval and sync functions so that previous code</span></div>
<div class="line"><span class="comment">//   does not get timed as part of the execution segment being measured</span></div>
<div class="line">timer start1 = timer::start();</div>
<div class="line">timer start2 = timer::start();</div>
<div class="line"><span class="comment">// run a code segment</span></div>
<div class="line"><span class="comment">// - be sure to use the eval and sync functions to ensure the code</span></div>
<div class="line"><span class="comment">//   segment operations have been completed</span></div>
<div class="line"><span class="comment">// stop timer1</span></div>
<div class="line">printf(<span class="stringliteral">&quot;elapsed seconds: %g\n&quot;</span>, timer::stop(start1));</div>
<div class="line"><span class="comment">// run another code segment</span></div>
<div class="line"><span class="comment">// - be sure to use the eval and sync functions to ensure the code</span></div>
<div class="line"><span class="comment">//   segment operations have been completed</span></div>
<div class="line"><span class="comment">// stop timer2</span></div>
<div class="line">printf(<span class="stringliteral">&quot;elapsed seconds: %g\n&quot;</span>, timer::stop(start2));</div>
</div><!-- fragment --><p class="startli">Accurate and reliable measurement of performance involves several factors:</p><ul>
<li>Executing enough iterations to achieve peak performance.</li>
<li>Executing enough repetitions to amortize any overhead from system timers.</li>
</ul>
</li>
<li><p class="startli">The <a class="el" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a> function:</p>
<p class="startli">To take care of much of this boilerplate, <a class="el" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a> provides accurate and reliable estimates of both CPU or GPU code.</p>
<p class="startli">Here is a stripped down example of <a href="\ref
   benchmarks/pi.cpp">Monte-Carlo estimation of PI</a> making use of <a class="el" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a>. Notice how it expects a <code>void</code> function pointer.</p>
<div class="fragment"><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> pi_function() {</div>
<div class="line">  <span class="keywordtype">int</span> n = 20e6; <span class="comment">// 20 million random samples</span></div>
<div class="line">  <a class="code hl_class" href="classaf_1_1array.htm">array</a> x = randu(n, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>), y = randu(n, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">  <span class="comment">// how many fell inside unit circle?</span></div>
<div class="line">  <span class="keywordtype">float</span> pi = 4.0 * sum&lt;float&gt;(sqrt(x*x + y*y)) &lt; 1) / n;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main() {</div>
<div class="line">  printf(<span class="stringliteral">&quot;pi_function took %g seconds\n&quot;</span>, timeit(pi_function));</div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
</div><!-- fragment --><p class="startli">This produces: </p><pre class="fragment">pi_function took 0.007252 seconds
(test machine: Core i7 920 @ 2.67GHz with a Tesla C2070)
</pre></li>
</ol>
<h1>A note on kernel caching</h1>
<p >The first run of ArrayFire code exercises any JIT compilation in the application, automatically saving a cache of the compilation to disk. Subsequent runs load the cache from disk, executing without compilation. Therefore, it is typically best to "warm up" the code with one run to initiate the application's kernel cache. Afterwards, subsequent runs do not include the compile time and are tend to be faster than the first run.</p>
<p >Averaging the time taken is always the best approach and one reason why the <a class="el" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a> function is helpful. </p>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:55 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
