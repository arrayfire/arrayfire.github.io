<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: toString</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__print__func__tostring.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">toString<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Print the array to a string instead of the screen.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gac268e4935efa88b80d1be6ccaa6a9093"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__tostring.htm#gac268e4935efa88b80d1be6ccaa6a9093">toString</a> (char **output, const char *<a class="el" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const int precision=4, const bool <a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>=true)</td></tr>
<tr class="separator:gac268e4935efa88b80d1be6ccaa6a9093"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae254d14d45f9fd3b284df6a36c01edf1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__tostring.htm#gae254d14d45f9fd3b284df6a36c01edf1">toString</a> (const char *<a class="el" href="group__arith__func__exp.htm#ga9ddbaf0852fbf988400b9677705b2a00">exp</a>, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;arr, const int precision=4, const bool <a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>=true)</td></tr>
<tr class="separator:gae254d14d45f9fd3b284df6a36c01edf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01f32ef2420b5d4592c6e4b4964b863b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__tostring.htm#ga01f32ef2420b5d4592c6e4b4964b863b">af_array_to_string</a> (char **output, const char *exp, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr, const int precision, const bool transpose)</td></tr>
<tr class="separator:ga01f32ef2420b5d4592c6e4b4964b863b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Print the array to a string instead of the screen. </p>
<p>This function is similar to <a class="el" href="group__print__func__print.htm#ga66791369fe71d867943da676a15afe3a">af::print</a>, except that it prints to a string rather than to screen.</p>
<hr/>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga01f32ef2420b5d4592c6e4b4964b863b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga01f32ef2420b5d4592c6e4b4964b863b">&#9670;&nbsp;</a></span>af_array_to_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_array_to_string </td>
          <td>(</td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>exp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>precision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>transpose</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>is the pointer to the c-string that will hold the data. The memory for output is allocated by the function. The user is responsible for deleting the memory. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exp</td><td>is an expression, generally the name of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">precision</td><td>is the precision length for display </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transpose</td><td>determines whether or not to transpose the array before storing it in the string </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gac268e4935efa88b80d1be6ccaa6a9093"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac268e4935efa88b80d1be6ccaa6a9093">&#9670;&nbsp;</a></span>toString() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::toString </td>
          <td>(</td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>exp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>precision</em> = <code>4</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>transpose</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>is the pointer to the c-string that will hold the data. The memory for output is allocated by the function. The user is responsible for deleting the memory using <a class="el" href="group__device__func__free__host.htm#ga0cc924b1055eee26851be4cd7bedee44" title="Free memory allocated internally by ArrayFire. ">af::freeHost()</a> or <a class="el" href="group__device__func__free__host.htm#ga3f1149a837a7ebbe8002d5d2244e3370">af_free_host()</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exp</td><td>is an expression, generally the name of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">precision</td><td>is the precision length for display </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transpose</td><td>determines whether or not to transpose the array before storing it in the string </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gae254d14d45f9fd3b284df6a36c01edf1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae254d14d45f9fd3b284df6a36c01edf1">&#9670;&nbsp;</a></span>toString() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> const char* af::toString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>exp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>precision</em> = <code>4</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>transpose</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">exp</td><td>is an expression, generally the name of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">precision</td><td>is the precision length for display </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transpose</td><td>determines whether or not to transpose the array before storing it in the string</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>output is the pointer to the c-string that will hold the data. The memory for output is allocated by the function. The user is responsible for deleting the memory using <a class="el" href="group__device__func__free__host.htm#ga0cc924b1055eee26851be4cd7bedee44" title="Free memory allocated internally by ArrayFire. ">af::freeHost()</a> or <a class="el" href="group__device__func__free__host.htm#ga3f1149a837a7ebbe8002d5d2244e3370">af_free_host()</a>. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
