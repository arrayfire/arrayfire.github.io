<!-- HTML header for doxygen 1.9.3-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: machine_learning/neural_network.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
  <!--<td id="projectalign">
   <div id="projectname">ArrayFire<span id="projectnumber">&#160;3.8.1</span>
   </div>
   <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>-->
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('machine_learning_2neural_network_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">machine_learning/neural_network.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2019, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;mnist_common.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">using</span> std::vector;</div>
<div class="line"> </div>
<div class="line">std::string toStr(<span class="keyword">const</span> <a id="a0" name="a0"></a><a class="code hl_typedef" href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">dtype</a> dt) {</div>
<div class="line">    <span class="keywordflow">switch</span> (dt) {</div>
<div class="line">        <span class="keywordflow">case</span> <a id="a1" name="a1"></a><a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>: <span class="keywordflow">return</span> <span class="stringliteral">&quot;f32&quot;</span>;</div>
<div class="line">        <span class="keywordflow">case</span> <a id="a2" name="a2"></a><a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a>: <span class="keywordflow">return</span> <span class="stringliteral">&quot;f16&quot;</span>;</div>
<div class="line">        <span class="keywordflow">default</span>: <span class="keywordflow">return</span> <span class="stringliteral">&quot;N/A&quot;</span>;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">float</span> accuracy(<span class="keyword">const</span> <a id="a3" name="a3"></a><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;predicted, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;target) {</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> val, plabels, tlabels;</div>
<div class="line">    <a id="a4" name="a4"></a><a class="code hl_function" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, tlabels, target, 1);</div>
<div class="line">    <a class="code hl_function" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, plabels, predicted, 1);</div>
<div class="line">    <span class="keywordflow">return</span> 100 * count&lt;float&gt;(plabels == tlabels) / tlabels.elements();</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Derivative of the activation function</span></div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> deriv(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;out) { <span class="keywordflow">return</span> out * (1 - out); }</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Cost function</span></div>
<div class="line"><span class="keywordtype">double</span> error(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;out, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;pred) {</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> dif = (out - pred);</div>
<div class="line">    <span class="keywordflow">return</span> <a id="a5" name="a5"></a><a class="code hl_function" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>((<span class="keywordtype">double</span>)(sum&lt;float&gt;(dif * dif)));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">class </span>ann {</div>
<div class="line">   <span class="keyword">private</span>:</div>
<div class="line">    <span class="keywordtype">int</span> num_layers;</div>
<div class="line">    vector&lt;array&gt; weights;</div>
<div class="line">    <a class="code hl_typedef" href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">dtype</a> datatype;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Add bias input to the output from previous layer</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> add_bias(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;in);</div>
<div class="line"> </div>
<div class="line">    vector&lt;array&gt; forward_propagate(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;input);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">void</span> back_propagate(<span class="keyword">const</span> vector&lt;array&gt; signal, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;pred,</div>
<div class="line">                        <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;alpha);</div>
<div class="line"> </div>
<div class="line">   <span class="keyword">public</span>:</div>
<div class="line">    <span class="comment">// Create a network with given parameters</span></div>
<div class="line">    ann(vector&lt;int&gt; layers, <span class="keywordtype">double</span> <a id="a6" name="a6"></a><a class="code hl_function" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a>, <a class="code hl_typedef" href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">dtype</a> dt = <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Output after single pass of forward propagation</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> predict(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;input);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Method to train the neural net</span></div>
<div class="line">    <span class="keywordtype">double</span> train(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;input, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;target, <span class="keywordtype">double</span> alpha = 1.0,</div>
<div class="line">                 <span class="keywordtype">int</span> max_epochs = 300, <span class="keywordtype">int</span> batch_size = 100,</div>
<div class="line">                 <span class="keywordtype">double</span> maxerr = 1.0, <span class="keywordtype">bool</span> verbose = <span class="keyword">false</span>);</div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> ann::add_bias(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;in) {</div>
<div class="line">    <span class="comment">// Bias input is added on top of given input</span></div>
<div class="line">    <span class="keywordflow">return</span> <a id="a7" name="a7"></a><a class="code hl_function" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1, <a id="a8" name="a8"></a><a class="code hl_function" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, in.dims(0), 1, datatype), in);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line">vector&lt;array&gt; ann::forward_propagate(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;input) {</div>
<div class="line">    <span class="comment">// Get activations at each layer</span></div>
<div class="line">    vector&lt;array&gt; signal(num_layers);</div>
<div class="line">    signal[0] = input;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_layers - 1; i++) {</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> in      = add_bias(signal[i]);</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> out     = <a id="a9" name="a9"></a><a class="code hl_function" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(in, weights[i]);</div>
<div class="line">        signal[i + 1] = <a id="a10" name="a10"></a><a class="code hl_function" href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">sigmoid</a>(out);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> signal;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> ann::back_propagate(<span class="keyword">const</span> vector&lt;array&gt; signal, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;target,</div>
<div class="line">                         <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;alpha) {</div>
<div class="line">    <span class="comment">// Get error for output layer</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> out = signal[num_layers - 1];</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> err = (out - target);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> m = target.<a id="a11" name="a11"></a><a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = num_layers - 2; i &gt;= 0; i--) {</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> in    = add_bias(signal[i]);</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> delta = (deriv(out) * err).T();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Adjust weights</span></div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> tg   = alpha * <a class="code hl_function" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(delta, in);</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a id="a12" name="a12"></a><a class="code hl_function" href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">grad</a> = -(tg) / m;</div>
<div class="line">        weights[i] += <a class="code hl_function" href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">grad</a>.T();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Input to current layer is output of previous</span></div>
<div class="line">        out = signal[i];</div>
<div class="line"> </div>
<div class="line">        err = <a id="a13" name="a13"></a><a class="code hl_function" href="group__blas__func__matmul.htm#ga7f3e5a6f282ea2c2c32886c95694bb88">matmulTT</a>(delta, weights[i]);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Remove the error of bias and propagate backward</span></div>
<div class="line">        err = err(<a id="a14" name="a14"></a><a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, seq(1, out.dims(1)));</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line">ann::ann(vector&lt;int&gt; layers, <span class="keywordtype">double</span> <a class="code hl_function" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a>, <a class="code hl_typedef" href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">dtype</a> dt)</div>
<div class="line">    : num_layers(layers.size()), weights(layers.size() - 1), datatype(dt) {</div>
<div class="line">    std::cout</div>
<div class="line">        &lt;&lt; <span class="stringliteral">&quot;Initializing weights using a random uniformly distribution between &quot;</span></div>
<div class="line">        &lt;&lt; -<a class="code hl_function" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a> / 2 &lt;&lt; <span class="stringliteral">&quot; and &quot;</span> &lt;&lt; <a class="code hl_function" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a> / 2 &lt;&lt; <span class="stringliteral">&quot; at precision &quot;</span></div>
<div class="line">        &lt;&lt; toStr(datatype) &lt;&lt; std::endl;</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_layers - 1; i++) {</div>
<div class="line">        weights[i] = <a class="code hl_function" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a> * <a id="a15" name="a15"></a><a class="code hl_function" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(layers[i] + 1, layers[i + 1]) - <a class="code hl_function" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a> / 2;</div>
<div class="line">        <span class="keywordflow">if</span> (datatype != <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>) weights[i] = weights[i].<a id="a16" name="a16"></a><a class="code hl_function" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(datatype);</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> ann::predict(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;input) {</div>
<div class="line">    vector&lt;array&gt; signal = forward_propagate(input);</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> out            = signal[num_layers - 1];</div>
<div class="line">    <span class="keywordflow">return</span> out;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">double</span> ann::train(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;input, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;target, <span class="keywordtype">double</span> alpha,</div>
<div class="line">                  <span class="keywordtype">int</span> max_epochs, <span class="keywordtype">int</span> batch_size, <span class="keywordtype">double</span> maxerr, <span class="keywordtype">bool</span> verbose) {</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_samples = input.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches = num_samples / batch_size;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">double</span> err = 0;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Training the entire network</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; max_epochs; i++) {</div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_batches - 1; j++) {</div>
<div class="line">            <span class="keywordtype">int</span> st = j * batch_size;</div>
<div class="line">            <span class="keywordtype">int</span> en = st + batch_size - 1;</div>
<div class="line"> </div>
<div class="line">            <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> x = input(seq(st, en), <a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line">            <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> y = target(seq(st, en), <a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Propagate the inputs forward</span></div>
<div class="line">            vector&lt;array&gt; signals = forward_propagate(x);</div>
<div class="line">            <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> out             = signals[num_layers - 1];</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Propagate the error backward</span></div>
<div class="line">            back_propagate(signals, y, alpha);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Validate with last batch</span></div>
<div class="line">        <span class="keywordtype">int</span> st    = (num_batches - 1) * batch_size;</div>
<div class="line">        <span class="keywordtype">int</span> en    = num_samples - 1;</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> out = predict(input(seq(st, en), <a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>));</div>
<div class="line">        err       = error(out, target(seq(st, en), <a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>));</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Check if convergence criteria has been met</span></div>
<div class="line">        <span class="keywordflow">if</span> (err &lt; maxerr) {</div>
<div class="line">            printf(<span class="stringliteral">&quot;Converged on Epoch: %4d\n&quot;</span>, i + 1);</div>
<div class="line">            <span class="keywordflow">return</span> err;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (verbose) {</div>
<div class="line">            <span class="keywordflow">if</span> ((i + 1) % 10 == 0)</div>
<div class="line">                printf(<span class="stringliteral">&quot;Epoch: %4d, Error: %0.4f\n&quot;</span>, i + 1, err);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> err;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> ann_demo(<span class="keywordtype">bool</span> console, <span class="keywordtype">int</span> perc, <span class="keyword">const</span> <a class="code hl_typedef" href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">dtype</a> dt) {</div>
<div class="line">    printf(<span class="stringliteral">&quot;** ArrayFire ANN Demo **\n\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_images, test_images;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_target, test_target;</div>
<div class="line">    <span class="keywordtype">int</span> num_classes, num_train, num_test;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Load mnist data</span></div>
<div class="line">    <span class="keywordtype">float</span> frac = (float)(perc) / 100.0;</div>
<div class="line">    setup_mnist&lt;true&gt;(&amp;num_classes, &amp;num_train, &amp;num_test, train_images,</div>
<div class="line">                      test_images, train_target, test_target, frac);</div>
<div class="line">    <span class="keywordflow">if</span> (dt != <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>) {</div>
<div class="line">        train_images = train_images.as(dt);</div>
<div class="line">        test_images  = test_images.as(dt);</div>
<div class="line">        train_target = train_target.as(dt);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> feature_size = train_images.elements() / num_train;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Reshape images into feature vectors</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_feats = <a id="a17" name="a17"></a><a class="code hl_function" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(train_images, feature_size, num_train).<a id="a18" name="a18"></a><a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_feats  = <a class="code hl_function" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(test_images, feature_size, num_test).<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    train_target = train_target.<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    test_target  = test_target.<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Network parameters</span></div>
<div class="line">    vector&lt;int&gt; layers;</div>
<div class="line">    layers.push_back(train_feats.dims(1));</div>
<div class="line">    layers.push_back(100);</div>
<div class="line">    layers.push_back(50);</div>
<div class="line">    layers.push_back(num_classes);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create network: architecture, range, datatype</span></div>
<div class="line">    ann network(layers, 0.05, dt);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Train network</span></div>
<div class="line">    timer::start();</div>
<div class="line">    network.train(train_feats, train_target,</div>
<div class="line">                  2.0,    <span class="comment">// learning rate / alpha</span></div>
<div class="line">                  250,    <span class="comment">// max epochs</span></div>
<div class="line">                  100,    <span class="comment">// batch size</span></div>
<div class="line">                  0.5,    <span class="comment">// max error</span></div>
<div class="line">                  <span class="keyword">true</span>);  <span class="comment">// verbose</span></div>
<div class="line">    <a id="a19" name="a19"></a><a class="code hl_function" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    <span class="keywordtype">double</span> train_time = timer::stop();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Run the trained network and test accuracy.</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_output = network.predict(train_feats);</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_output  = network.predict(test_feats);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Benchmark prediction</span></div>
<div class="line">    <a class="code hl_function" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    timer::start();</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 100; i++) { network.predict(test_feats); }</div>
<div class="line">    <a class="code hl_function" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    <span class="keywordtype">double</span> test_time = timer::stop() / 100;</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTraining set:\n&quot;</span>);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on training data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(train_output, train_target));</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTest set:\n&quot;</span>);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on testing  data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(test_output, test_target));</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTraining time: %4.4lf s\n&quot;</span>, train_time);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Prediction time: %4.4lf s\n\n&quot;</span>, test_time);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line">        <span class="comment">// Get 20 random test images.</span></div>
<div class="line">        test_output = test_output.T();</div>
<div class="line">        display_results&lt;true&gt;(test_images, test_output, test_target.T(), 20);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="comment">// usage:  neural_network_xxx (device) (console on/off) (percentage</span></div>
<div class="line">    <span class="comment">// training/test set) (f32|f16)</span></div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> perc     = argc &gt; 3 ? atoi(argv[3]) : 60;</div>
<div class="line">    <span class="keywordflow">if</span> (perc &lt; 0 || perc &gt; 100) {</div>
<div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Bad perc arg: &quot;</span> &lt;&lt; perc &lt;&lt; std::endl;</div>
<div class="line">        <span class="keywordflow">return</span> EXIT_FAILURE;</div>
<div class="line">    }</div>
<div class="line">    std::string dts = argc &gt; 4 ? argv[4] : <span class="stringliteral">&quot;f32&quot;</span>;</div>
<div class="line">    <a class="code hl_typedef" href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">dtype</a> dt        = <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>;</div>
<div class="line">    <span class="keywordflow">if</span> (dts == <span class="stringliteral">&quot;f16&quot;</span>)</div>
<div class="line">        dt = <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a>;</div>
<div class="line">    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dts != <span class="stringliteral">&quot;f32&quot;</span>) {</div>
<div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Unsupported datatype &quot;</span> &lt;&lt; dts &lt;&lt; <span class="stringliteral">&quot;. Supported: f32 or f16&quot;</span></div>
<div class="line">                  &lt;&lt; std::endl;</div>
<div class="line">        <span class="keywordflow">return</span> EXIT_FAILURE;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (dts == <span class="stringliteral">&quot;f16&quot;</span> &amp;&amp; !<a id="a20" name="a20"></a><a class="code hl_function" href="group__device__func__half.htm#gacd645e9968830a2d8c0c507d1db7a5db">af::isHalfAvailable</a>(device)) {</div>
<div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Half not available for device &quot;</span> &lt;&lt; device &lt;&lt; std::endl;</div>
<div class="line">        <span class="keywordflow">return</span> EXIT_FAILURE;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a21" name="a21"></a><a class="code hl_function" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a id="a22" name="a22"></a><a class="code hl_function" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        <span class="keywordflow">return</span> ann_demo(console, perc, dt);</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a id="_a23" name="_a23"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) { std::cerr &lt;&lt; ae.<a id="a24" name="a24"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>() &lt;&lt; std::endl; }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a5822c6bdfbf4ff01f23c4417934b924c"><div class="ttname"><a href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">af::array::as</a></div><div class="ttdeci">const array as(dtype type) const</div><div class="ttdoc">Converts the array into another type.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a></div><div class="ttdeci">@ f16</div><div class="ttdoc">16-bit floating point value</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00230">defines.h:228</a></div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_ga25c678d4cd9e0702bbc93e11d7d516a8"><div class="ttname"><a href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface for square root of input.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_ga63306b6ed967bd1055086db862fe885b"><div class="ttname"><a href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">af::matmul</a></div><div class="ttdeci">AFAPI array matmul(const array &amp;lhs, const array &amp;rhs, const matProp optLhs=AF_MAT_NONE, const matProp optRhs=AF_MAT_NONE)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_ga7f3e5a6f282ea2c2c32886c95694bb88"><div class="ttname"><a href="group__blas__func__matmul.htm#ga7f3e5a6f282ea2c2c32886c95694bb88">af::matmulTT</a></div><div class="ttdeci">AFAPI array matmulTT(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__calc__func__grad_htm_ga3be29ad2f4958dcc01f9135da52753f8"><div class="ttname"><a href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">af::grad</a></div><div class="ttdeci">AFAPI void grad(array &amp;dx, array &amp;dy, const array &amp;in)</div><div class="ttdoc">C++ Interface for calculating the gradients.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__data__func__range_htm_ga3789475e962b4c31e07c1c3bdab8498b"><div class="ttname"><a href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">af::range</a></div><div class="ttdeci">AFAPI array range(const dim4 &amp;dims, const int seq_dim=-1, const dtype ty=f32)</div></div>
<div class="ttc" id="agroup__device__func__half_htm_gacd645e9968830a2d8c0c507d1db7a5db"><div class="ttname"><a href="group__device__func__half.htm#gacd645e9968830a2d8c0c507d1db7a5db">af::isHalfAvailable</a></div><div class="ttdeci">AFAPI bool isHalfAvailable(const int device)</div><div class="ttdoc">Queries the current device for half precision floating point support.</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__device__func__sync_htm_ga8c5d51841cf4f2ddbdd6a3146cf2b390"><div class="ttname"><a href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a></div><div class="ttdeci">AFAPI void sync(const int device=-1)</div><div class="ttdoc">Blocks until the device is finished processing.</div></div>
<div class="ttc" id="agroup__manip__func__join_htm_ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><div class="ttname"><a href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">af::join</a></div><div class="ttdeci">AFAPI array join(const int dim, const array &amp;first, const array &amp;second)</div><div class="ttdoc">Join 2 arrays along dim.</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga382a69ec85a6beea79e95aeaef591073"><div class="ttname"><a href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a448f59f3b863561e0fbe00f04dbeca1e"><div class="ttname"><a href="namespaceaf.htm#a448f59f3b863561e0fbe00f04dbeca1e">af::dtype</a></div><div class="ttdeci">af_dtype dtype</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00549">defines.h:549</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a83c8f1181fc87c30d649f3f1eb26a860"><div class="ttname"><a href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">af::sigmoid</a></div><div class="ttdeci">AFAPI array sigmoid(const array &amp;in)</div><div class="ttdoc">C++ Interface for calculating sigmoid function of an array.</div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Thu Feb 24 2022 14:12:32 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
    </ul>
</div>
</body>
</html>
