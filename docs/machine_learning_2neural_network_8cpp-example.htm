<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>machine_learning/neural_network.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('machine_learning_2neural_network_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">machine_learning/neural_network.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;mnist_common.h&quot;</span></div>
<div class="line"></div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">using</span> std::vector;</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">float</span> accuracy(<span class="keyword">const</span> <a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a>&amp; predicted, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; target)</div>
<div class="line">{</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> val, plabels, tlabels;</div>
<div class="line">    <a name="a1"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, tlabels, target, 1);</div>
<div class="line">    <a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, plabels, predicted, 1);</div>
<div class="line">    <span class="keywordflow">return</span> 100 * count&lt;float&gt;(plabels == tlabels) / tlabels.<a name="a2"></a><a class="code" href="group__method__mat.htm#gaf343b49d35978f4b617a65b83a7affb4">elements</a>();</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="comment">// Derivative of the activation function</span></div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> deriv(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;out)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">return</span> out * (1 - out);</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="comment">// Cost function</span></div>
<div class="line"><span class="keywordtype">double</span> error(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;out,</div>
<div class="line">             <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;pred)</div>
<div class="line">{</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dif = (out - pred);</div>
<div class="line">    <span class="keywordflow">return</span> <a name="a3"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>((<span class="keywordtype">double</span>)(sum&lt;float&gt;(dif * dif)));</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keyword">class </span>ann {</div>
<div class="line"></div>
<div class="line"><span class="keyword">private</span>:</div>
<div class="line">    <span class="keywordtype">int</span> num_layers;</div>
<div class="line">    vector&lt;array&gt; weights;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Add bias input to the output from previous layer</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> add_bias(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in);</div>
<div class="line"></div>
<div class="line">    vector&lt;array&gt; forward_propagate(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; input);</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">void</span> back_propagate(<span class="keyword">const</span> vector&lt;array&gt; signal,</div>
<div class="line">                        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;pred,</div>
<div class="line">                        <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;alpha);</div>
<div class="line"><span class="keyword">public</span>:</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create a network with given parameters</span></div>
<div class="line">    ann(vector&lt;int&gt; layers, <span class="keywordtype">double</span> <a name="a4"></a><a class="code" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a>=0.05);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Output after single pass of forward propagation</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> predict(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;input);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Method to trian the neural net</span></div>
<div class="line">    <span class="keywordtype">double</span> train(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;input, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;target,</div>
<div class="line">                 <span class="keywordtype">double</span> alpha = 1.0,</div>
<div class="line">                 <span class="keywordtype">int</span> max_epochs = 300,</div>
<div class="line">                 <span class="keywordtype">int</span> batch_size = 100,</div>
<div class="line">                 <span class="keywordtype">double</span> maxerr = 1.0,</div>
<div class="line">                 <span class="keywordtype">bool</span> verbose = <span class="keyword">false</span>);</div>
<div class="line">};</div>
<div class="line"></div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> ann::add_bias(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in)</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// Bias input is added on top of given input</span></div>
<div class="line">    <span class="keywordflow">return</span> <a name="a5"></a><a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1, <a name="a6"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, in.<a name="a7"></a><a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(0), 1), in);</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line">vector&lt;array&gt; ann::forward_propagate(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; input)</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// Get activations at each layer</span></div>
<div class="line">    vector&lt;array&gt; signal(num_layers);</div>
<div class="line">    signal[0] = input;</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_layers - 1; i++) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> in = add_bias(signal[i]);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out = <a name="a8"></a><a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(in, weights[i]);</div>
<div class="line">        signal[i + 1] = <a name="a9"></a><a class="code" href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">sigmoid</a>(out);</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> signal;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> ann::back_propagate(<span class="keyword">const</span> vector&lt;array&gt; signal,</div>
<div class="line">                         <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;target,</div>
<div class="line">                         <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;alpha)</div>
<div class="line">{</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Get error for output layer</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> out = signal[num_layers  - 1];</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> err = (out - target);</div>
<div class="line">    <span class="keywordtype">int</span> m = target.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(0);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = num_layers - 2; i &gt;= 0; i--) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> in = add_bias(signal[i]);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> delta = (deriv(out) * err).T();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Adjust weights</span></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> <a name="a10"></a><a class="code" href="group__calc__func__grad.htm#ga3be29ad2f4958dcc01f9135da52753f8">grad</a> = -(alpha * <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(delta, in)) / m;</div>
<div class="line">        weights[i] += grad.<a name="a11"></a><a class="code" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a>();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Input to current layer is output of previous</span></div>
<div class="line">        out = signal[i];</div>
<div class="line">        err = <a name="a12"></a><a class="code" href="group__blas__func__matmul.htm#ga7f3e5a6f282ea2c2c32886c95694bb88">matmulTT</a>(delta, weights[i]);</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Remove the error of bias and propagate backward</span></div>
<div class="line">        err = err(<a name="a13"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a name="_a14"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(1, out.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(1)));</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line">ann::ann(vector&lt;int&gt; layers, <span class="keywordtype">double</span> <a class="code" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a>) :</div>
<div class="line">    num_layers(layers.size()),</div>
<div class="line">    weights(layers.size() - 1)</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// Generate uniformly distributed random numbers between [-range/2,range/2]</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_layers - 1; i++) {</div>
<div class="line">        weights[i] = range * <a name="a15"></a><a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">randu</a>(layers[i] + 1, layers[i + 1]) - range/2;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> ann::predict(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;input)</div>
<div class="line">{</div>
<div class="line">    vector&lt;array&gt; signal = forward_propagate(input);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> out = signal[num_layers - 1];</div>
<div class="line">    <span class="keywordflow">return</span> out;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">double</span> ann::train(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;input, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;target,</div>
<div class="line">                  <span class="keywordtype">double</span> alpha, <span class="keywordtype">int</span> max_epochs, <span class="keywordtype">int</span> batch_size,</div>
<div class="line">                  <span class="keywordtype">double</span> maxerr, <span class="keywordtype">bool</span> verbose)</div>
<div class="line">{</div>
<div class="line"></div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_samples = input.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(0);</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches = num_samples / batch_size;</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">double</span> err = 0;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Training the entire network</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; max_epochs; i++) {</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_batches - 1; j++) {</div>
<div class="line"></div>
<div class="line">            <span class="keywordtype">int</span> st = j * batch_size;</div>
<div class="line">            <span class="keywordtype">int</span> en = st + batch_size - 1;</div>
<div class="line"></div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> x = input(<a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> y = target(<a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Propagate the inputs forward</span></div>
<div class="line">            vector&lt;array&gt; signals = forward_propagate(x);</div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> out = signals[num_layers - 1];</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">            <span class="comment">// Propagate the error backward</span></div>
<div class="line">            back_propagate(signals, y, alpha);</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Validate with last batch</span></div>
<div class="line">        <span class="keywordtype">int</span> st = (num_batches - 1) * batch_size;</div>
<div class="line">        <span class="keywordtype">int</span> en = num_samples - 1;</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out = predict(input(<a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>));</div>
<div class="line">        err = error(out, target(<a class="code" href="classaf_1_1seq.htm">seq</a>(st, en), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>));</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Check if convergence criteria has been met</span></div>
<div class="line">        <span class="keywordflow">if</span> (err &lt; maxerr) {</div>
<div class="line">            printf(<span class="stringliteral">&quot;Converged on Epoch: %4d\n&quot;</span>, i + 1);</div>
<div class="line">            <span class="keywordflow">return</span> err;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">if</span> (verbose) {</div>
<div class="line">            <span class="keywordflow">if</span> ((i + 1) % 10 == 0) printf(<span class="stringliteral">&quot;Epoch: %4d, Error: %0.4f\n&quot;</span>, i+1, err);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> err;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> ann_demo(<span class="keywordtype">bool</span> console, <span class="keywordtype">int</span> perc)</div>
<div class="line">{</div>
<div class="line">    printf(<span class="stringliteral">&quot;** ArrayFire ANN Demo **\n\n&quot;</span>);</div>
<div class="line"></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_images, test_images;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_target, test_target;</div>
<div class="line">    <span class="keywordtype">int</span> num_classes, num_train, num_test;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Load mnist data</span></div>
<div class="line">    <span class="keywordtype">float</span> frac = (float)(perc) / 100.0;</div>
<div class="line">    setup_mnist&lt;true&gt;(&amp;num_classes, &amp;num_train, &amp;num_test,</div>
<div class="line">                      train_images, test_images, train_target, test_target, frac);</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">int</span> feature_size = train_images.<a class="code" href="group__method__mat.htm#gaf343b49d35978f4b617a65b83a7affb4">elements</a>() / num_train;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Reshape images into feature vectors</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_feats = <a name="a16"></a><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(train_images, feature_size, num_train).<a class="code" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a>();</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> test_feats  = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(test_images , feature_size, num_test ).<a class="code" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a>();</div>
<div class="line"></div>
<div class="line">    train_target = train_target.<a class="code" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a>();</div>
<div class="line">    test_target  = test_target.<a class="code" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a>();</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Network parameters</span></div>
<div class="line">    vector&lt;int&gt; layers;</div>
<div class="line">    layers.push_back(train_feats.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(1));</div>
<div class="line">    layers.push_back(100);</div>
<div class="line">    layers.push_back(50);</div>
<div class="line">    layers.push_back(num_classes);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create network</span></div>
<div class="line">    ann network(layers);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Train network</span></div>
<div class="line">    timer::start();</div>
<div class="line">    network.train(train_feats, train_target,</div>
<div class="line">                  2.0, <span class="comment">// learning rate / alpha</span></div>
<div class="line">                  250, <span class="comment">// max epochs</span></div>
<div class="line">                  100, <span class="comment">// batch size</span></div>
<div class="line">                  0.5, <span class="comment">// max error</span></div>
<div class="line">                  <span class="keyword">true</span>); <span class="comment">// verbose</span></div>
<div class="line">    <a name="a17"></a><a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    <span class="keywordtype">double</span> train_time = timer::stop();</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Run the trained network and test accuracy.</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> train_output = network.predict(train_feats);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> test_output  = network.predict(test_feats );</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Benchmark prediction</span></div>
<div class="line">    <a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    timer::start();</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 100; i++) {</div>
<div class="line">        network.predict(test_feats);</div>
<div class="line">    }</div>
<div class="line">    <a class="code" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    <span class="keywordtype">double</span> test_time = timer::stop() / 100;</div>
<div class="line"></div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTraining set:\n&quot;</span>);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on training data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(train_output, train_target));</div>
<div class="line"></div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTest set:\n&quot;</span>);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on testing  data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(test_output , test_target ));</div>
<div class="line"></div>
<div class="line">    printf(<span class="stringliteral">&quot;\nTraining time: %4.4lf s\n&quot;</span>, train_time);</div>
<div class="line">    printf(<span class="stringliteral">&quot;Prediction time: %4.4lf s\n\n&quot;</span>, test_time);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line">        <span class="comment">// Get 20 random test images.</span></div>
<div class="line">        test_output = test_output.<a class="code" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a>();</div>
<div class="line">        display_results&lt;true&gt;(test_images, test_output, test_target.<a class="code" href="group__method__mat.htm#gaeadf9256b56215a58dc12f14d97312eb">T</a>(), 20);</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> perc     = argc &gt; 3 ? atoi(argv[3]) : 60;</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line"></div>
<div class="line">        <a name="a18"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a19"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        <span class="keywordflow">return</span> ann_demo(console, perc);</div>
<div class="line"></div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a20"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) {</div>
<div class="line">        std::cerr &lt;&lt; ae.<a name="a21"></a><a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>() &lt;&lt; std::endl;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
