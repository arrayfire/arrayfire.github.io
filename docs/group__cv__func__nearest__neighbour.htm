<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: nearestNeighbour</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__cv__func__nearest__neighbour.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">nearestNeighbour<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__cv__mat.htm">Computer Vision</a> &raquo;  &#124; <a class="el" href="group__featmatcher__mat.htm">Feature matchers</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Determine the nearest neighbouring points to a given set of points.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga8839ead81cbcd6b433822205713bfe79"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__nearest__neighbour.htm#ga8839ead81cbcd6b433822205713bfe79">nearestNeighbour</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;idx, <a class="el" href="classaf_1_1array.htm">array</a> &amp;dist, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;query, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;train, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dist_dim=0, const unsigned n_dist=1, const <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a> dist_type=<a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba424a4d974dc66b0dc481ee4fc4333af2">AF_SSD</a>)</td></tr>
<tr class="memdesc:ga8839ead81cbcd6b433822205713bfe79"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ interface wrapper for determining the nearest neighbouring points to a given set of points.  <a href="group__cv__func__nearest__neighbour.htm#ga8839ead81cbcd6b433822205713bfe79">More...</a><br /></td></tr>
<tr class="separator:ga8839ead81cbcd6b433822205713bfe79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf46f2c5bf1ad2e71f94b58415837ffb2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__nearest__neighbour.htm#gaf46f2c5bf1ad2e71f94b58415837ffb2">af_nearest_neighbour</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *idx, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *dist, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> query, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> train, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dist_dim, const unsigned n_dist, const <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a> dist_type)</td></tr>
<tr class="memdesc:gaf46f2c5bf1ad2e71f94b58415837ffb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ interface wrapper for determining the nearest neighbouring points to a given set of points.  <a href="#gaf46f2c5bf1ad2e71f94b58415837ffb2">More...</a><br /></td></tr>
<tr class="separator:gaf46f2c5bf1ad2e71f94b58415837ffb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Determine the nearest neighbouring points to a given set of points. </p>
<p>A "point" is simply a geometric point's coordinates in an n-dimensional space, which can be specified along the dimension specified by <code>dist_dim</code> (can be 0 or 1). A list of such points can be enumerated along the dimension other than the one specified by <code>dist_dim</code> (excluding dim2 and dim3). By default, <code>dist_dim</code> is 0, so a point's coordinates in this case must be specified along dim0, and the list of points must be enumerated along dim1. Consequently, if <code>dist_dim</code> is 1, then a point's coordinates must be specified along dim1, and the list must be enumerated along dim0.</p>
<p>The arrays <code>train</code> and <code>query</code> are both a list of points, and one must have the same data layout as the other. This function calculates which points in the <code>train</code> are nearest to each point in <code>query</code>, based on the distance metric specified by <code>dist_type:</code> <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafbac3c384561eb097c610a813629204ab9a">AF_SAD</a> (sum of absolute differences), <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba424a4d974dc66b0dc481ee4fc4333af2">AF_SSD</a> (sum of squared differences, the default option), or <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba56f06a772bc072f015bb7139d5e55e9a">AF_SHD</a> (hamming distance). The resulting <code>n_dist</code> nearest neighboring points are described in two output arrays:</p><ul>
<li><code>idx:</code> contains the index of each result that corresponds to the point in <code>train</code> </li>
<li><code>dist:</code> contains the distance from the query point to the result's corresponding point in <code>train</code> </li>
</ul>
<p>In both the output arrays <code>idx</code> and <code>dist</code>, the nearest neighbor results for a single query are enumerated along dim0, in which the \(ith\) result is the \(ith\) nearest point to the query point. The result set for each query point is placed along dim1 (columns) of <code>idx</code> and <code>dist</code>, in the order that the queries appear in <code>query</code>. Therefore, the output arrays will have a shape of <code>n_dist</code> \(\times\) the number of queries (regardless of the data layout of the input arrays, or the value of <code>dist_dim</code>).</p>
<p>For illustration, a simple example is given below for 1 query in 1-dimensional space. There are 6 points in <code>train</code>, and 3 nearest neighbors are queried for (<code>n_dist</code> is 3), so there are 3 elements in the results for this single query, enumerated along dim0. The results <code>idx</code> and <code>dist</code> contain the 3 points closest to 1.25, ordered from nearest to farthest: point 0 in <code>train</code> (1.) with an SSD distance of 0.0625 from the query, point 1 (2.) with a distance of 0.5625, and point 2 (3.) with a distance of 3.0625.</p>
<div class="fragment"><div class="line">    <span class="keywordtype">float</span> h_pts[6] = {1.f, 2.f, 3.f, 8.f, 9.f, 10.f};</div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> pts(dim4(1, 6), h_pts);</div><div class="line">    <span class="comment">//  1.   2.   3.   8.   9.   10.</span></div><div class="line"></div><div class="line">    <span class="keywordtype">float</span> h_query = 1.25f;</div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> query(dim4(1), &amp;h_query);</div><div class="line">    <span class="comment">//  1.25</span></div><div class="line"></div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> idx;</div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> dist;</div><div class="line">    <a class="code" href="group__cv__func__nearest__neighbour.htm#ga8839ead81cbcd6b433822205713bfe79">nearestNeighbour</a>(idx, dist, query, pts, 0, 3);</div><div class="line">    <span class="comment">// idx</span></div><div class="line">    <span class="comment">//  0.</span></div><div class="line">    <span class="comment">//  1.</span></div><div class="line">    <span class="comment">//  2.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// dist</span></div><div class="line">    <span class="comment">//  0.0625</span></div><div class="line">    <span class="comment">//  0.5625</span></div><div class="line">    <span class="comment">//  3.0625</span></div><div class="line"></div></div><!-- fragment --><p> A slightly more complicated example is given below. There are 2 <code>query</code> points and 6 <code>train</code> points, and they are in 3-dimensional space (each point's coordinates are specified along dim0, and the list of points is enumerated along dim1). Note that in the output arrays <code>idx</code> and <code>dist</code>, there are 2 sets of results now, one for each query. The result set located on the the first column of <code>idx</code> and <code>dist</code> correspond to the first query (the first column in <code>query</code>), and the result set on the second column of <code>idx</code> and <code>dist</code> correspond to the second query (second column in <code>query</code>). Thus, for example, the second query point is (7.5, 9., 1.), and the point closest to it in <code>train</code> is point 3, which is (8., 9., 1.), which has a SSD distance of 0.25 from the query point.</p>
<div class="fragment"><div class="line">    <span class="keywordtype">float</span> h_pts[18] = {0.f, 0.f, 0.f, 1.f, 0.f, 0.f, 0.f, 1.f, 0.f,</div><div class="line">                       8.f, 9.f, 1.f, 9.f, 8.f, 1.f, 9.f, 9.f, 1.f};</div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> pts(dim4(3, 6), h_pts);</div><div class="line">    <span class="comment">//  0.    1.    0.    8.    9.    9.</span></div><div class="line">    <span class="comment">//  0.    0.    1.    9.    8.    9.</span></div><div class="line">    <span class="comment">//  0.    0.    0.    1.    1.    1.</span></div><div class="line"></div><div class="line">    <span class="keywordtype">float</span> h_query[6] = {1.5f, 0.f, 0.f, 7.5f, 9.f, 1.f};</div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> query(dim4(3, 2), h_query);</div><div class="line">    <span class="comment">//  1.5   7.5</span></div><div class="line">    <span class="comment">//  0.    9.</span></div><div class="line">    <span class="comment">//  0.    1.</span></div><div class="line"></div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> idx;</div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> dist;</div><div class="line">    <a class="code" href="group__cv__func__nearest__neighbour.htm#ga8839ead81cbcd6b433822205713bfe79">nearestNeighbour</a>(idx, dist, query, pts, 0, 3);</div><div class="line">    <span class="comment">// idx</span></div><div class="line">    <span class="comment">//  1     3</span></div><div class="line">    <span class="comment">//  0     5</span></div><div class="line">    <span class="comment">//  2     4</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// dist</span></div><div class="line">    <span class="comment">//  0.25  0.25</span></div><div class="line">    <span class="comment">//  2.25  2.25</span></div><div class="line">    <span class="comment">//  3.25  3.25</span></div></div><!-- fragment --><p> Note that it does not make sense for the <code>train</code> and <code>query</code> array shapes to have a third and fourth dimension, because a 2-dimensional array is sufficient to describe a list of points, no matter how long the list is or how many dimensions in space do the points span. Therefore, this function requires both input arrays to be at most 2-dimensional. </p><hr/>
<h2 class="groupheader">Function Documentation</h2>
<a id="gaf46f2c5bf1ad2e71f94b58415837ffb2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf46f2c5bf1ad2e71f94b58415837ffb2">&#9670;&nbsp;</a></span>af_nearest_neighbour()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_nearest_neighbour </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>dist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>train</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dist_dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>n_dist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a>&#160;</td>
          <td class="paramname"><em>dist_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ interface wrapper for determining the nearest neighbouring points to a given set of points. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">idx</td><td>is an array of \(M \times N\) size, where \(M\) is <code>n_dist</code> and \(N\) is the number of queries. The value at position \(i,j\) is the index of the point in <code>train</code> along dim1 (if <code>dist_dim</code> is 0) or along dim 0 (if <code>dist_dim</code> is 1), with the \(ith\) smallest distance to the \(jth\) <code>query</code> point. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dist</td><td>is an array of \(M \times N\) size, where \(M\) is <code>n_dist</code> and \(N\) is the number of queries. The value at position \(i,j\) is the distance from the \(jth\) query point to the point in <code>train</code> referred to by <code>idx</code>( \(i,j\)). This distance is computed according to the <code>dist_type</code> chosen. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">query</td><td>is the array containing the points to be queried. The points must be described along dim0 and listed along dim1 if <code>dist_dim</code> is 0, or vice versa if <code>dist_dim</code> is 1. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">train</td><td>is the array containing the points used as training data. The points must be described along dim0 and listed along dim1 if <code>dist_dim</code> is 0, or vice versa if <code>dist_dim</code> is 1. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dist_dim</td><td>indicates the dimension that the distance computation will use to determine a point's coordinates. The <code>train</code> and <code>query</code> arrays must both use this dimension for describing a point's coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n_dist</td><td>is the number of nearest neighbour points to return (currently only values &lt;= 256 are supported) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dist_type</td><td>is the distance computation type. Currently <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafbac3c384561eb097c610a813629204ab9a">AF_SAD</a> (sum of absolute differences), <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba424a4d974dc66b0dc481ee4fc4333af2">AF_SSD</a> (sum of squared differences), and <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba56f06a772bc072f015bb7139d5e55e9a">AF_SHD</a> (hamming distances) are supported. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga8839ead81cbcd6b433822205713bfe79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8839ead81cbcd6b433822205713bfe79">&#9670;&nbsp;</a></span>nearestNeighbour()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::nearestNeighbour </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>dist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>train</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dist_dim</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>n_dist</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafb">af_match_type</a>&#160;</td>
          <td class="paramname"><em>dist_type</em> = <code><a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba424a4d974dc66b0dc481ee4fc4333af2">AF_SSD</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ interface wrapper for determining the nearest neighbouring points to a given set of points. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">idx</td><td>is an array of \(M \times N\) size, where \(M\) is <code>n_dist</code> and \(N\) is the number of queries. The value at position \(i,j\) is the index of the point in <code>train</code> along dim1 (if <code>dist_dim</code> is 0) or along dim 0 (if <code>dist_dim</code> is 1), with the \(ith\) smallest distance to the \(jth\) <code>query</code> point. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dist</td><td>is an array of \(M \times N\) size, where \(M\) is <code>n_dist</code> and \(N\) is the number of queries. The value at position \(i,j\) is the distance from the \(jth\) query point to the point in <code>train</code> referred to by <code>idx</code>( \(i,j\)). This distance is computed according to the <code>dist_type</code> chosen. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">query</td><td>is the array containing the points to be queried. The points must be described along dim0 and listed along dim1 if <code>dist_dim</code> is 0, or vice versa if <code>dist_dim</code> is 1. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">train</td><td>is the array containing the points used as training data. The points must be described along dim0 and listed along dim1 if <code>dist_dim</code> is 0, or vice versa if <code>dist_dim</code> is 1. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dist_dim</td><td>indicates the dimension that the distance computation will use to determine a point's coordinates. The <code>train</code> and <code>query</code> arrays must both use this dimension for describing a point's coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n_dist</td><td>is the number of nearest neighbour points to return (currently only values &lt;= 256 are supported) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dist_type</td><td>is the distance computation type. Currently <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafbac3c384561eb097c610a813629204ab9a">AF_SAD</a> (sum of absolute differences), <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba424a4d974dc66b0dc481ee4fc4333af2">AF_SSD</a> (sum of squared differences), and <a class="el" href="defines_8h.htm#a976272e4ee02c0d16ea78990c59adafba56f06a772bc072f015bb7139d5e55e9a">AF_SHD</a> (hamming distances) are supported. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
