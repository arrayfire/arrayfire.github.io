<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Indexing</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('indexing.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div><div class="header">
  <div class="headertitle"><div class="title">Indexing </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p ><a class="anchor" id="md_C__Users_jmelonak_source_repos_arrayfire_arrayfire_docs_pages_indexing"></a></p>
<p >Indexing in ArrayFire is a powerful but easy to abuse feature of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> class. This feature allows you to reference or copy subsections of a larger array and perform operations on only a subset of elements.</p>
<p >Indexing in ArrayFire can be performed using the parenthesis operator or one of the member functions of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> class. These functions allow you to reference one or a range of elements from the original array.</p>
<p >Here we will demonstrate some of the ways you can use indexing in ArrayFire and discuss ways to minimize the memory and performance impact of these operations.</p>
<p >Lets start by creating a new 4x4 matrix of floating point numbers:</p>
<div class="fragment"><div class="line">    <span class="keywordtype">float</span> data[] = {0,  1,  2,  3,</div>
<div class="line">                    4,  5,  6,  7,</div>
<div class="line">                    8,  9, 10, 11,</div>
<div class="line">                   12, 13, 14, 15};</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">af::array</a> A(4, 4, data);</div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
</div><!-- fragment --><p >ArrayFire is column-major so the resulting A array will look like this:</p>
<p class="formulaDsp">
\[
\begin{bmatrix}
    0 &amp; 4 &amp; 8 &amp; 12 \\
    1 &amp; 5 &amp; 9 &amp; 13 \\
    2 &amp; 6 &amp; 10 &amp; 14 \\
    3 &amp; 7 &amp; 11 &amp; 15
\end{bmatrix}
\]
</p>
<p >This is a two dimensional array so we can access the first element of this matrix by passing <code>0,0</code> into the parenthesis operator of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>.</p>
<div class="fragment"><div class="line">    <span class="comment">// Returns an array pointing to the first element</span></div>
<div class="line">    A(2, 3); <span class="comment">// WARN: avoid doing this. Demo only</span></div>
</div><!-- fragment --><p class="formulaDsp">
\[ A(2, 3) = [ 14 ] \]
</p>
<p >We can also access the array using linear indexing by passing in one value. Here we are accessing the fifth element of the array.</p>
<div class="fragment"><div class="line">    <span class="comment">// Returns an array pointing to the fifth element</span></div>
<div class="line">    A(5);</div>
</div><!-- fragment --><p class="formulaDsp">
\[ A(5) = [ 5 ] \]
</p>
<dl class="section note"><dt>Note</dt><dd>Normally you want to avoid accessing individual elements of the array like this for performance reasons.</dd></dl>
<p>Indexing with negative values will access from the end of the array. For example, the value negative one and negative two(-2) will return the last and second to last element of the array, respectively. ArrayFire provides the <code>end</code> alias for this which also allows you to index the last element of the array.</p>
<div class="fragment"><div class="line">    array ref0 = A(2, -1);    <span class="comment">// 14 second row last column</span></div>
<div class="line">    array ref1 = A(2, end);   <span class="comment">// 14 Same as above</span></div>
<div class="line">    array ref2 = A(2, -2);    <span class="comment">// 10 Second row, second to last(third) column</span></div>
<div class="line">    array ref3 = A(2, end-1); <span class="comment">// 10 Same as above</span></div>
</div><!-- fragment --><h1>Indexing slices and subarrays</h1>
<p >You can access regions of the array via the <a class="el" href="classaf_1_1seq.htm" title="seq is used to create sequences for indexing af::array">af::seq</a> and <a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f" title="A special value representing the entire axis of an af::array.">af::span</a> objects. The span objects allows you to select the entire set of elements across a particular dimension/axis of an array. For example, we can select the third column of the array by passing span as the first argument and 2 as the second argument to the parenthesis operator.</p>
<div class="fragment"><div class="line">    <span class="comment">// Returns an array pointing to the third column</span></div>
<div class="line">    A(span, 2);</div>
</div><!-- fragment --><p class="formulaDsp">
\[
A(span, 2) =
\begin{bmatrix}
    8 \\
    9 \\
    10 \\
    11
\end{bmatrix}
\]
</p>
<p >You can read that as saying that you want all values across the first dimension, but only from index 2 of the second dimension.</p>
<p >You can access the second row by passing (1, span) to the array</p>
<div class="fragment"><div class="line">    <span class="comment">// Returns an array pointing to the second row</span></div>
<div class="line">    A(1, span);</div>
</div><!-- fragment --><p class="formulaDsp">
\[ A(1, span) = [ 1, 5, 9, 13 ] \]
</p>
<p >You can use the <a class="el" href="classaf_1_1seq.htm" title="seq is used to create sequences for indexing af::array">af::seq</a> (short for sequence) object to define a range when indexing. For example, if you want to get the first two columns, you can access the array by passing <a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f" title="A special value representing the entire axis of an af::array.">af::span</a> for the first argument and <a class="el" href="classaf_1_1seq.htm" title="seq is used to create sequences for indexing af::array">af::seq(2)</a> as the second argument.</p>
<div class="fragment"><div class="line">    <span class="comment">// Returns an array pointing to the first two columns</span></div>
<div class="line">    A(span, seq(2));</div>
</div><!-- fragment --><p class="formulaDsp">
\[
A(span, seq(2)) =
\begin{bmatrix}
     0 &amp; 4 \\
     1 &amp; 5 \\
     2 &amp; 6 \\
     3 &amp; 7
\end{bmatrix}
\]
</p>
<p >There are three constructors for <a class="el" href="classaf_1_1seq.htm" title="seq is used to create sequences for indexing af::array">af::seq</a>.</p>
<ul>
<li><a class="el" href="classaf_1_1seq.htm" title="seq is used to create sequences for indexing af::array">af::seq(N)</a>: Defines a range between 0 and N-1</li>
<li><a class="el" href="classaf_1_1seq.htm" title="seq is used to create sequences for indexing af::array">af::seq(begin, end)</a> Defines a range between begin and end inclusive</li>
<li><a class="el" href="classaf_1_1seq.htm" title="seq is used to create sequences for indexing af::array">af::seq(begin, end, step)</a> defines a range between begin and end striding by step values</li>
</ul>
<p >The last constructor that can help create non-continuous ranges. For example, you can select the second and forth(last) rows by passing (seq(1, end, 2), span) to the indexing operator.</p>
<div class="fragment"><div class="line">    <span class="comment">// Returns an array pointing to the second and fourth rows</span></div>
<div class="line">    A(seq(1, end, 2), span);</div>
</div><!-- fragment --><p class="formulaDsp">
\[
A(seq(1, end, 2), span) =
\begin{bmatrix}
     1 &amp; 5 &amp;  9 &amp; 13 \\
     3 &amp; 7 &amp; 11 &amp; 15
\end{bmatrix}
\]
</p>
<h1>Indexing using <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a></h1>
<p >You can also index using other <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> objects. ArrayFire performs a Cartesian product of the input arrays.</p>
<div class="fragment"><div class="line">    vector&lt;int&gt; hidx = {2, 1, 3};</div>
<div class="line">    vector&lt;int&gt; hidy = {3, 1, 2};</div>
<div class="line">    array idx(3, hidx.data());</div>
<div class="line">    array idy(3, hidy.data());</div>
<div class="line"> </div>
<div class="line">    array out = A(idx, idy);</div>
</div><!-- fragment --><p class="formulaDsp">
\[
A =
\begin{bmatrix}
    0 &amp; 4 &amp; 8 &amp; 12 \\
    1 &amp; 5 &amp; 9 &amp; 13 \\
    2 &amp; 6 &amp; 10 &amp; 14 \\
    3 &amp; 7 &amp; 11 &amp; 15
\end{bmatrix}
\\
A(
\begin{bmatrix}
2 \\ 1 \\ 3
\end{bmatrix}
,
\begin{bmatrix}
3 \\ 1 \\ 2
\end{bmatrix}
) =

\begin{bmatrix}
(2,3) &amp; (2,1) &amp; (2,2) \\
(1,3) &amp; (1,1) &amp; (1,2) \\
(3,3) &amp; (3,1) &amp; (3,2)
\end{bmatrix}
=
\begin{bmatrix}
14 &amp; 6 &amp; 10 \\
13 &amp; 5 &amp;  9 \\
15 &amp; 7 &amp; 11
\end{bmatrix}
\]
</p>
<p >If you want to index an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> using coordinate arrays, you can do that using the <a class="el" href="group__signal__func__approx1.htm#gabd004f943d8a8df6d00064fd965680ee" title="C++ Interface for data interpolation on one-dimensional signals.">af::approx1</a> and <a class="el" href="group__signal__func__approx2.htm#gae1caef95088d57fda2eafbd83b41a0c0" title="C++ Interface for data interpolation on two-dimensional signals.">af::approx2</a> functions.</p>
<div class="fragment"><div class="line">    vector&lt;float&gt; hidx = {2, 1, 3};</div>
<div class="line">    vector&lt;float&gt; hidy = {3, 1, 2};</div>
<div class="line">    array idx(3, hidx.data());</div>
<div class="line">    array idy(3, hidy.data());</div>
<div class="line"> </div>
<div class="line">    array out = <a class="code hl_function" href="group__signal__func__approx2.htm#gae1caef95088d57fda2eafbd83b41a0c0">approx2</a>(A, idx, idy);</div>
<div class="ttc" id="agroup__signal__func__approx2_htm_gae1caef95088d57fda2eafbd83b41a0c0"><div class="ttname"><a href="group__signal__func__approx2.htm#gae1caef95088d57fda2eafbd83b41a0c0">af::approx2</a></div><div class="ttdeci">AFAPI array approx2(const array &amp;in, const array &amp;pos0, const array &amp;pos1, const interpType method=AF_INTERP_LINEAR, const float off_grid=0.0f)</div><div class="ttdoc">C++ Interface for data interpolation on two-dimensional signals.</div></div>
</div><!-- fragment --><p class="formulaDsp">
\[
approx2(A,
\begin{bmatrix}
2 \\ 1 \\ 3
\end{bmatrix}
,
\begin{bmatrix}
3 \\ 1 \\ 2
\end{bmatrix}
) =
\begin{bmatrix}
(2,3) \\
(1,1) \\
(3,2)
\end{bmatrix}
=
\begin{bmatrix}
14 \\
 5 \\
11
\end{bmatrix}
\]
</p>
<p >Boolean(b8) arrays can be used to index into another array. In this type of indexing the non-zero values will be selected by the boolean operation. If we want to select all values less than 5, we can pass a boolean expression into the parenthesis operator.</p>
<div class="fragment"><div class="line">    array out = A(A &lt; 5);</div>
</div><!-- fragment --><p class="formulaDsp">
\[
out =
\begin{bmatrix}
0 \\ 1 \\ 2 \\ 3 \\ 4
\end{bmatrix}
\]
</p>
<h1>References and copies</h1>
<p >All ArrayFire indexing functions return <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array(technically its an array_proxy
class)</a> objects. These objects may be new arrays or they may reference the original array depending on the type of indexing that was performed on them.</p>
<ul>
<li>If an array was indexed using another <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> or it was indexed using the af::approx functions, then a new array is created. It does not reference the original data.</li>
<li>If an array was indexed using a scalar, <a class="el" href="classaf_1_1seq.htm" title="seq is used to create sequences for indexing af::array">af::seq</a> or <a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f" title="A special value representing the entire axis of an af::array.">af::span</a>, then the resulting array will reference the original data IF the first dimension is continuous. The following lines will not allocate additional memory.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>The new arrays wither references or newly allocated arrays, are independent of the original data. Meaning that any changes to the original array will not propagate to the references. Likewise, any changes to the reference arrays will not modify the original data.</dd></dl>
<div class="fragment"><div class="line">    array reference = A(span, 1);</div>
<div class="line">    array reference2 = A(seq(3), 1);</div>
<div class="line">    array reference3 = A(seq(2), span);</div>
</div><!-- fragment --><p >The following code snippet shows some examples of indexing that will allocate new memory.</p>
<div class="fragment"><div class="line">    array copy = A(2, span);</div>
<div class="line">    array copy2 = A(seq(1, 3, 2), span);</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> hidx[] = {0, 1, 2};</div>
<div class="line">    array idx(3, hidx);</div>
<div class="line">    array copy3 = A(idx, span);</div>
</div><!-- fragment --><p >Notice that even though the copy3 array is referencing continuous memory in the original array, a new array is created because we used an array to index into the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>.</p>
<h1>Assignment</h1>
<p >An assignment on an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> will replace the array with the result of the expression on the right hand side of the equal(=) operator. This means that the type and shape of the result can be different from the array on the left had side of the equal operator. Assignments will not update the array that was previously referenced through an indexing operation. Here is an example:</p>
<div class="fragment"><div class="line">    array inputA = constant(3, 10, 10);</div>
<div class="line">    array inputB = constant(2, 10, 10);</div>
<div class="line">    array data   = constant(1, 10, 10);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Points to the second column of data. Does not allocate memory</span></div>
<div class="line">    array ref = data(span, 1);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// This call does NOT update data. Memory allocated in matmul</span></div>
<div class="line">    ref = matmul(inputA, inputB);</div>
<div class="line">    <span class="comment">// reference does not point to the same memory as the data array</span></div>
</div><!-- fragment --><p >The <code>ref</code> array is created by indexing into the data array. The initialized <code>ref</code> array points to the data array and does not allocate memory when it is created. After the matmul call, the <code>ref</code> array will not be pointing to the data array. The matmul call will not update the values of the data array.</p>
<p >You can update the contents of an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> by assigning with the operator parenthesis. For example, if you wanted to change the third column of the <code>A</code> array you can do that by assigning to <code>A(span, 2)</code>.</p>
<div class="fragment"><div class="line">    array reference = A(span, 2);</div>
<div class="line">    A(span, 2) = 3.14f;</div>
<div class="line">    assert(allTrue&lt;bool&gt;(reference != A(span, 2)));</div>
</div><!-- fragment --><p class="formulaDsp">
\[
ref =
\begin{bmatrix}
     8  \\
     9  \\
    10  \\
    11
\end{bmatrix}
A =
\begin{bmatrix}
    0 &amp; 4 &amp; 3.14 &amp; 12 \\
    1 &amp; 5 &amp; 3.14 &amp; 13 \\
    2 &amp; 6 &amp; 3.14 &amp; 14 \\
    3 &amp; 7 &amp; 3.14 &amp; 15
\end{bmatrix}
\]
</p>
<p >This will update only the array being modified. If there are arrays that are referring to this array because of an indexing operation, those values will remain unchanged.</p>
<p >Allocation will only be performed if there are other arrays referencing the data at the point of assignment. In the previous example, an allocation will be performed when assigning to the <code>A</code> array because the <code>ref</code> array is pointing to the original data. Here is another example demonstrating when an allocation will occur:</p>
<div class="fragment"><div class="line">    {</div>
<div class="line">        <span class="comment">// No allocation performed. ref points to A&#39;s memory</span></div>
<div class="line">        array ref = A(span, 2);</div>
<div class="line">    } <span class="comment">// ref goes out of scope. No one point&#39;s to A&#39;s memory</span></div>
<div class="line">    A(span, 2) = 3.14f; <span class="comment">// No allocation performed.</span></div>
</div><!-- fragment --><p >In this example, no allocation will take place because when the <code>ref</code> object is created, it is pointing to <code>A</code>'s data. Once it goes out of scope, no data points to <code>A</code>, therefore when the assignment takes place, the data is modified in place instead of being copied to a new address.</p>
<p >You can also assign to arrays using another af::arrays as an indexing array. This works in a similar way to the other types of assignment but care must be taken to assure that the indexes are unique. Non-unique indexes will result in a race condition which will cause non-deterministic values.</p>
<div class="fragment"><div class="line">    vector&lt;int&gt; hidx = {4, 3, 4, 0};</div>
<div class="line">    vector&lt;float&gt; hvals = {9.f, 8.f, 7.f, 6.f};</div>
<div class="line">    array idx(4, hidx.data());</div>
<div class="line">    array vals(4, hvals.data());</div>
<div class="line"> </div>
<div class="line">    A(idx) = vals; <span class="comment">// nondeterministic. A(4) can be 9 or 7</span></div>
</div><!-- fragment --><p class="formulaDsp">
\[
idx =
\begin{bmatrix}
     4  \\
     3  \\
     4  \\
     0
\end{bmatrix}
vals =
\begin{bmatrix}
     9  \\
     8  \\
     7  \\
     6
\end{bmatrix}
\\
A =
\begin{bmatrix}
    6 &amp; 9\ or\ 7 &amp;  8 &amp; 12 \\
    1 &amp;   5    &amp;  9 &amp; 13 \\
    2 &amp;   6    &amp; 10 &amp; 14 \\
    8 &amp;   7    &amp; 11 &amp; 15
\end{bmatrix}
\]
</p>
<h1>Member functions</h1>
<p >There are several member functions which allow you to index into an <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. These functions have similar functionality but may be easier to parse for some.</p>
<ul>
<li><a class="el" href="group__array__mem__row.htm#gab4b3d8fcff693a861c0748faf06fd65e">row(i)</a> or <a class="el" href="group__array__mem__col.htm#gae54ff0116727d4f4f5f91306c609704e">col(i)</a> specifying a single row/column</li>
<li><a class="el" href="group__array__mem__row.htm#gacb5178c8a2361d0405cc34775e20c3af">rows(first,last)</a> or <a class="el" href="group__array__mem__col.htm#gab4bddfa6cca59628b353964a71e8ec34">cols(first,last)</a> specifying multiple rows or columns</li>
<li><a class="el" href="group__array__mem__slice.htm#ga6bc9386479d36e426c205f3a761d6f0c">slice(i)</a> or <a class="el" href="group__array__mem__slice.htm#ga2164a9d0e38dd9e5b46d3763d77e5082">slices(first, last)</a> to select one or a range of slices</li>
</ul>
<h1>Additional examples</h1>
<p >See <a class="el" href="group__index__mat.htm">Assignment &amp; Indexing operation on arrays</a> for the full listing.</p>
<div class="fragment"><div class="line">    array A = array(seq(1, 9), 3, 3);</div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A);</div>
<div class="line">    <span class="comment">// 1.0000 4.0000 7.0000</span></div>
<div class="line">    <span class="comment">// 2.0000 5.0000 8.0000</span></div>
<div class="line">    <span class="comment">// 3.0000 6.0000 9.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A(0));  <span class="comment">// first element</span></div>
<div class="line">    <span class="comment">// 1.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A(0, 1));  <span class="comment">// first row, second column</span></div>
<div class="line">    <span class="comment">// 4.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A(end));  <span class="comment">// last element</span></div>
<div class="line">    <span class="comment">// 9.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A(-1));  <span class="comment">// also last element</span></div>
<div class="line">    <span class="comment">// 9.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A(end - 1));  <span class="comment">// second-to-last element</span></div>
<div class="line">    <span class="comment">// 8.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A(1, span));  <span class="comment">// second row</span></div>
<div class="line">    <span class="comment">// 2.0000     5.0000     8.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A.row(end));  <span class="comment">// last row</span></div>
<div class="line">    <span class="comment">// 3.0000     6.0000     9.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A.cols(1, end));  <span class="comment">// all but first column</span></div>
<div class="line">    <span class="comment">// 4.0000     7.0000</span></div>
<div class="line">    <span class="comment">// 5.0000     8.0000</span></div>
<div class="line">    <span class="comment">// 6.0000     9.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> b_host[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};</div>
<div class="line">    array b(10, 1, b_host);</div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(b(seq(3)));</div>
<div class="line">    <span class="comment">// 0.0000</span></div>
<div class="line">    <span class="comment">// 1.0000</span></div>
<div class="line">    <span class="comment">// 2.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(b(seq(1, 7)));</div>
<div class="line">    <span class="comment">// 1.0000</span></div>
<div class="line">    <span class="comment">// 2.0000</span></div>
<div class="line">    <span class="comment">// 3.0000</span></div>
<div class="line">    <span class="comment">// 4.0000</span></div>
<div class="line">    <span class="comment">// 5.0000</span></div>
<div class="line">    <span class="comment">// 6.0000</span></div>
<div class="line">    <span class="comment">// 7.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(b(seq(1, 7, 2)));</div>
<div class="line">    <span class="comment">// 1.0000</span></div>
<div class="line">    <span class="comment">// 3.0000</span></div>
<div class="line">    <span class="comment">// 5.0000</span></div>
<div class="line">    <span class="comment">// 7.0000</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(b(seq(0, end, 2)));</div>
<div class="line">    <span class="comment">// 0.0000</span></div>
<div class="line">    <span class="comment">// 2.0000</span></div>
<div class="line">    <span class="comment">// 4.0000</span></div>
<div class="line">    <span class="comment">// 6.0000</span></div>
<div class="line">    <span class="comment">// 8.0000</span></div>
<div class="ttc" id="autil_8h_htm_a6de8e7f9eb3914d1cea66e55e7b791d3"><div class="ttname"><a href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a></div><div class="ttdeci">#define af_print(...)</div><div class="ttdef"><b>Definition:</b> <a href="util_8h_source.htm#l00148">util.h:148</a></div></div>
</div><!-- fragment --><p >You can set values in an array:</p>
<div class="fragment"><div class="line">    array A = constant(0, 3, 3);</div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A);</div>
<div class="line">    <span class="comment">// 0.0000     0.0000     0.0000</span></div>
<div class="line">    <span class="comment">// 0.0000     0.0000     0.0000</span></div>
<div class="line">    <span class="comment">// 0.0000     0.0000     0.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// setting entries to a constant</span></div>
<div class="line">    A(span) = 4;  <span class="comment">// fill entire array</span></div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A);</div>
<div class="line">    <span class="comment">// 4.0000     4.0000     4.0000</span></div>
<div class="line">    <span class="comment">// 4.0000     4.0000     4.0000</span></div>
<div class="line">    <span class="comment">// 4.0000     4.0000     4.0000</span></div>
<div class="line"> </div>
<div class="line">    A.row(0) = -1;  <span class="comment">// first row</span></div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A);</div>
<div class="line">    <span class="comment">// -1.0000    -1.0000    -1.0000</span></div>
<div class="line">    <span class="comment">//  4.0000     4.0000     4.0000</span></div>
<div class="line">    <span class="comment">//  4.0000     4.0000     4.0000</span></div>
<div class="line"> </div>
<div class="line">    A(seq(3)) = 3.1415;  <span class="comment">// first three elements</span></div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(A);</div>
<div class="line">    <span class="comment">// 3.1415    -1.0000    -1.0000</span></div>
<div class="line">    <span class="comment">// 3.1415     4.0000     4.0000</span></div>
<div class="line">    <span class="comment">// 3.1415     4.0000     4.0000</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// copy in another matrix</span></div>
<div class="line">    array B = constant(1, 4, 4, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1">s32</a>);</div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(B);</div>
<div class="line">    <span class="comment">//          1          1          1          1</span></div>
<div class="line">    <span class="comment">//          1          1          1          1</span></div>
<div class="line">    <span class="comment">//          1          1          1          1</span></div>
<div class="line">    <span class="comment">//          1          1          1          1</span></div>
<div class="line"> </div>
<div class="line">    B.row(0) = randu(1, 4, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);  <span class="comment">// set a row to random values (also upcast)</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// The first rows are zeros because randu returns values from 0.0 - 1.0</span></div>
<div class="line">    <span class="comment">// and they were converted to the type of B which is s32</span></div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(B);</div>
<div class="line">    <span class="comment">//          0          0          0          0</span></div>
<div class="line">    <span class="comment">//          1          1          1          1</span></div>
<div class="line">    <span class="comment">//          1          1          1          1</span></div>
<div class="line">    <span class="comment">//          1          1          1          1</span></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1">s32</a></div><div class="ttdeci">@ s32</div><div class="ttdoc">32-bit signed integral values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00216">defines.h:216</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
</div><!-- fragment --><p >Use one array to reference into another.</p>
<div class="fragment"><div class="line">    <span class="keywordtype">float</span> h_inds[] = {0, 4, 2, 1};  <span class="comment">// zero-based indexing</span></div>
<div class="line">    array inds(1, 4, h_inds);</div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(inds);</div>
<div class="line">    <span class="comment">// 0.0000     4.0000     2.0000     1.0000</span></div>
<div class="line"> </div>
<div class="line">    array B = randu(1, 4);</div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(B);</div>
<div class="line">    <span class="comment">// 0.5471     0.3114     0.5535     0.3800</span></div>
<div class="line"> </div>
<div class="line">    array c = B(inds);  <span class="comment">// get</span></div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(c);</div>
<div class="line">    <span class="comment">// 0.5471     0.3800     0.5535     0.3114</span></div>
<div class="line"> </div>
<div class="line">    B(inds) = -1;              <span class="comment">// set to scalar</span></div>
<div class="line">    B(inds) = constant(0, 4);  <span class="comment">// zero indices</span></div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(B);</div>
<div class="line">    <span class="comment">// 0.0000     0.0000     0.0000     0.0000</span></div>
</div><!-- fragment --> </div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Mon Sep 25 2023 12:35:28 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
