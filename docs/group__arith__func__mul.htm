<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: mul</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__arith__func__mul.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">mul<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__mathfunc__mat.htm">Mathematical functions</a> &raquo; <a class="el" href="group__arith__mat.htm">Arithmetic operations</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Elementwise multiply.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga5f7588b2809ff7551d38b6a0bd583a02"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga5f7588b2809ff7551d38b6a0bd583a02">af_mul</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga5f7588b2809ff7551d38b6a0bd583a02"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply two arrays.  <a href="group__arith__func__mul.htm#ga5f7588b2809ff7551d38b6a0bd583a02">More...</a><br /></td></tr>
<tr class="separator:ga5f7588b2809ff7551d38b6a0bd583a02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90c245863eb9dec4930c8b0c5cb400aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga90c245863eb9dec4930c8b0c5cb400aa">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga90c245863eb9dec4930c8b0c5cb400aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.  <a href="group__arith__func__mul.htm#ga90c245863eb9dec4930c8b0c5cb400aa">More...</a><br /></td></tr>
<tr class="separator:ga90c245863eb9dec4930c8b0c5cb400aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac7a1654e00181341aac3a25ffb3689f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gaac7a1654e00181341aac3a25ffb3689f">operator*</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaac7a1654e00181341aac3a25ffb3689f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gaac7a1654e00181341aac3a25ffb3689f">More...</a><br /></td></tr>
<tr class="separator:gaac7a1654e00181341aac3a25ffb3689f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8d243b0d851a1e59fa253bce62daf92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gab8d243b0d851a1e59fa253bce62daf92">operator*</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab8d243b0d851a1e59fa253bce62daf92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gab8d243b0d851a1e59fa253bce62daf92">More...</a><br /></td></tr>
<tr class="separator:gab8d243b0d851a1e59fa253bce62daf92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d7b284fb3dee8bbc24753128015106b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga5d7b284fb3dee8bbc24753128015106b">operator*</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5d7b284fb3dee8bbc24753128015106b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga5d7b284fb3dee8bbc24753128015106b">More...</a><br /></td></tr>
<tr class="separator:ga5d7b284fb3dee8bbc24753128015106b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga93058240610343bb4e1db0e08b6e40ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga93058240610343bb4e1db0e08b6e40ac">operator*</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga93058240610343bb4e1db0e08b6e40ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga93058240610343bb4e1db0e08b6e40ac">More...</a><br /></td></tr>
<tr class="separator:ga93058240610343bb4e1db0e08b6e40ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7da5272a3d6037debcd6ff0e4360c028"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga7da5272a3d6037debcd6ff0e4360c028">operator*</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga7da5272a3d6037debcd6ff0e4360c028"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga7da5272a3d6037debcd6ff0e4360c028">More...</a><br /></td></tr>
<tr class="separator:ga7da5272a3d6037debcd6ff0e4360c028"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8797658c5673f262c6600b7008f2f347"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga8797658c5673f262c6600b7008f2f347">operator*</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga8797658c5673f262c6600b7008f2f347"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga8797658c5673f262c6600b7008f2f347">More...</a><br /></td></tr>
<tr class="separator:ga8797658c5673f262c6600b7008f2f347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc5e5b970def587606bc8de0308ee47a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gafc5e5b970def587606bc8de0308ee47a">operator*</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gafc5e5b970def587606bc8de0308ee47a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gafc5e5b970def587606bc8de0308ee47a">More...</a><br /></td></tr>
<tr class="separator:gafc5e5b970def587606bc8de0308ee47a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0a6264b28bdeeed7edbdd220e74d6d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gae0a6264b28bdeeed7edbdd220e74d6d7">operator*</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gae0a6264b28bdeeed7edbdd220e74d6d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gae0a6264b28bdeeed7edbdd220e74d6d7">More...</a><br /></td></tr>
<tr class="separator:gae0a6264b28bdeeed7edbdd220e74d6d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga051be2573d48f7bf0bb306fc63ce3b19"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga051be2573d48f7bf0bb306fc63ce3b19">operator*</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga051be2573d48f7bf0bb306fc63ce3b19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga051be2573d48f7bf0bb306fc63ce3b19">More...</a><br /></td></tr>
<tr class="separator:ga051be2573d48f7bf0bb306fc63ce3b19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5641dc5a9d13cb3641fe7609e898eec6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga5641dc5a9d13cb3641fe7609e898eec6">operator*</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5641dc5a9d13cb3641fe7609e898eec6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga5641dc5a9d13cb3641fe7609e898eec6">More...</a><br /></td></tr>
<tr class="separator:ga5641dc5a9d13cb3641fe7609e898eec6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1249b8c4c07d51c127155412f25c6f12"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga1249b8c4c07d51c127155412f25c6f12">operator*</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga1249b8c4c07d51c127155412f25c6f12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga1249b8c4c07d51c127155412f25c6f12">More...</a><br /></td></tr>
<tr class="separator:ga1249b8c4c07d51c127155412f25c6f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4aaaced148b8c9ba4839cf2ba7a7d75c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga4aaaced148b8c9ba4839cf2ba7a7d75c">operator*</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4aaaced148b8c9ba4839cf2ba7a7d75c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga4aaaced148b8c9ba4839cf2ba7a7d75c">More...</a><br /></td></tr>
<tr class="separator:ga4aaaced148b8c9ba4839cf2ba7a7d75c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7f61ec410c7a3183db5ee7ccb4ce690"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gac7f61ec410c7a3183db5ee7ccb4ce690">operator*</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac7f61ec410c7a3183db5ee7ccb4ce690"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gac7f61ec410c7a3183db5ee7ccb4ce690">More...</a><br /></td></tr>
<tr class="separator:gac7f61ec410c7a3183db5ee7ccb4ce690"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba3e044bc82f432a69275fd26e74a834"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gaba3e044bc82f432a69275fd26e74a834">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:gaba3e044bc82f432a69275fd26e74a834"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gaba3e044bc82f432a69275fd26e74a834">More...</a><br /></td></tr>
<tr class="separator:gaba3e044bc82f432a69275fd26e74a834"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc88ea10d3d1fb29c2c3b8d29736c808"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gabc88ea10d3d1fb29c2c3b8d29736c808">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:gabc88ea10d3d1fb29c2c3b8d29736c808"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gabc88ea10d3d1fb29c2c3b8d29736c808">More...</a><br /></td></tr>
<tr class="separator:gabc88ea10d3d1fb29c2c3b8d29736c808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8610b04b3541b807f8268737e396c1db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga8610b04b3541b807f8268737e396c1db">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga8610b04b3541b807f8268737e396c1db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga8610b04b3541b807f8268737e396c1db">More...</a><br /></td></tr>
<tr class="separator:ga8610b04b3541b807f8268737e396c1db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga97f49d4213f7cdc984d07e815d7cedd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga97f49d4213f7cdc984d07e815d7cedd2">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga97f49d4213f7cdc984d07e815d7cedd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga97f49d4213f7cdc984d07e815d7cedd2">More...</a><br /></td></tr>
<tr class="separator:ga97f49d4213f7cdc984d07e815d7cedd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f68bc574b1da82ec869fff588d860fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga1f68bc574b1da82ec869fff588d860fe">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:ga1f68bc574b1da82ec869fff588d860fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga1f68bc574b1da82ec869fff588d860fe">More...</a><br /></td></tr>
<tr class="separator:ga1f68bc574b1da82ec869fff588d860fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38504acedd1944e5179f3c90f7b5b174"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga38504acedd1944e5179f3c90f7b5b174">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga38504acedd1944e5179f3c90f7b5b174"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga38504acedd1944e5179f3c90f7b5b174">More...</a><br /></td></tr>
<tr class="separator:ga38504acedd1944e5179f3c90f7b5b174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f57e9ac04ed269ba5f32e8319dd9f5f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga0f57e9ac04ed269ba5f32e8319dd9f5f">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:ga0f57e9ac04ed269ba5f32e8319dd9f5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga0f57e9ac04ed269ba5f32e8319dd9f5f">More...</a><br /></td></tr>
<tr class="separator:ga0f57e9ac04ed269ba5f32e8319dd9f5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb52ece3e88e3fc597d34d06f42977e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gadb52ece3e88e3fc597d34d06f42977e2">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:gadb52ece3e88e3fc597d34d06f42977e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gadb52ece3e88e3fc597d34d06f42977e2">More...</a><br /></td></tr>
<tr class="separator:gadb52ece3e88e3fc597d34d06f42977e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae55ccde9fa4dba7dc0f3e53ff9d95961"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gae55ccde9fa4dba7dc0f3e53ff9d95961">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:gae55ccde9fa4dba7dc0f3e53ff9d95961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gae55ccde9fa4dba7dc0f3e53ff9d95961">More...</a><br /></td></tr>
<tr class="separator:gae55ccde9fa4dba7dc0f3e53ff9d95961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab7729525bd9e03ea6c795520d883b719"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gab7729525bd9e03ea6c795520d883b719">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:gab7729525bd9e03ea6c795520d883b719"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gab7729525bd9e03ea6c795520d883b719">More...</a><br /></td></tr>
<tr class="separator:gab7729525bd9e03ea6c795520d883b719"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b6489b2b7aa2f1c798e6dba42f1e283"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga4b6489b2b7aa2f1c798e6dba42f1e283">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga4b6489b2b7aa2f1c798e6dba42f1e283"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga4b6489b2b7aa2f1c798e6dba42f1e283">More...</a><br /></td></tr>
<tr class="separator:ga4b6489b2b7aa2f1c798e6dba42f1e283"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee4fe51e0d5bf012b0b275d9a0925133"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#gaee4fe51e0d5bf012b0b275d9a0925133">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaee4fe51e0d5bf012b0b275d9a0925133"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#gaee4fe51e0d5bf012b0b275d9a0925133">More...</a><br /></td></tr>
<tr class="separator:gaee4fe51e0d5bf012b0b275d9a0925133"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga591ac9049e96d529c9cbb26781eade95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga591ac9049e96d529c9cbb26781eade95">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga591ac9049e96d529c9cbb26781eade95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74f2658ff8a3780fa4e99089a23f47bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga74f2658ff8a3780fa4e99089a23f47bc">operator*</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga74f2658ff8a3780fa4e99089a23f47bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga74f2658ff8a3780fa4e99089a23f47bc">More...</a><br /></td></tr>
<tr class="separator:ga74f2658ff8a3780fa4e99089a23f47bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga747a75695ef5a017c10f6f90f6c258d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga747a75695ef5a017c10f6f90f6c258d8">operator*</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga747a75695ef5a017c10f6f90f6c258d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga747a75695ef5a017c10f6f90f6c258d8">More...</a><br /></td></tr>
<tr class="separator:ga747a75695ef5a017c10f6f90f6c258d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32d5a9dd384214e5e53d3a574ba97c76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga32d5a9dd384214e5e53d3a574ba97c76">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:ga32d5a9dd384214e5e53d3a574ba97c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies two arrays or an array and a value.   <a href="group__arith__func__mul.htm#ga32d5a9dd384214e5e53d3a574ba97c76">More...</a><br /></td></tr>
<tr class="separator:ga32d5a9dd384214e5e53d3a574ba97c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c8bdba20fe1ac44b9837833f5326ca7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm#ga8c8bdba20fe1ac44b9837833f5326ca7">operator*</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga8c8bdba20fe1ac44b9837833f5326ca7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Elementwise multiply. </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga5f7588b2809ff7551d38b6a0bd583a02" name="ga5f7588b2809ff7551d38b6a0bd583a02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5f7588b2809ff7551d38b6a0bd583a02">&#9670;&#160;</a></span>af_mul()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_mul </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>batch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface to multiply two arrays. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>* </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch</td><td>batch mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>, if function returns successfully, else an <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> code is given </dd></dl>

</div>
</div>
<a id="ga90c245863eb9dec4930c8b0c5cb400aa" name="ga90c245863eb9dec4930c8b0c5cb400aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga90c245863eb9dec4930c8b0c5cb400aa">&#9670;&#160;</a></span>operator*() <span class="overload">[1/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gaba3e044bc82f432a69275fd26e74a834" name="gaba3e044bc82f432a69275fd26e74a834"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaba3e044bc82f432a69275fd26e74a834">&#9670;&#160;</a></span>operator*() <span class="overload">[2/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga591ac9049e96d529c9cbb26781eade95" name="ga591ac9049e96d529c9cbb26781eade95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga591ac9049e96d529c9cbb26781eade95">&#9670;&#160;</a></span>operator*() <span class="overload">[3/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gaee4fe51e0d5bf012b0b275d9a0925133" name="gaee4fe51e0d5bf012b0b275d9a0925133"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaee4fe51e0d5bf012b0b275d9a0925133">&#9670;&#160;</a></span>operator*() <span class="overload">[4/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga97f49d4213f7cdc984d07e815d7cedd2" name="ga97f49d4213f7cdc984d07e815d7cedd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga97f49d4213f7cdc984d07e815d7cedd2">&#9670;&#160;</a></span>operator*() <span class="overload">[5/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="gab7729525bd9e03ea6c795520d883b719" name="gab7729525bd9e03ea6c795520d883b719"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab7729525bd9e03ea6c795520d883b719">&#9670;&#160;</a></span>operator*() <span class="overload">[6/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga4b6489b2b7aa2f1c798e6dba42f1e283" name="ga4b6489b2b7aa2f1c798e6dba42f1e283"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4b6489b2b7aa2f1c798e6dba42f1e283">&#9670;&#160;</a></span>operator*() <span class="overload">[7/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="gabc88ea10d3d1fb29c2c3b8d29736c808" name="gabc88ea10d3d1fb29c2c3b8d29736c808"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabc88ea10d3d1fb29c2c3b8d29736c808">&#9670;&#160;</a></span>operator*() <span class="overload">[8/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga38504acedd1944e5179f3c90f7b5b174" name="ga38504acedd1944e5179f3c90f7b5b174"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga38504acedd1944e5179f3c90f7b5b174">&#9670;&#160;</a></span>operator*() <span class="overload">[9/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="gadb52ece3e88e3fc597d34d06f42977e2" name="gadb52ece3e88e3fc597d34d06f42977e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadb52ece3e88e3fc597d34d06f42977e2">&#9670;&#160;</a></span>operator*() <span class="overload">[10/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga32d5a9dd384214e5e53d3a574ba97c76" name="ga32d5a9dd384214e5e53d3a574ba97c76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga32d5a9dd384214e5e53d3a574ba97c76">&#9670;&#160;</a></span>operator*() <span class="overload">[11/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga8610b04b3541b807f8268737e396c1db" name="ga8610b04b3541b807f8268737e396c1db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8610b04b3541b807f8268737e396c1db">&#9670;&#160;</a></span>operator*() <span class="overload">[12/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga1f68bc574b1da82ec869fff588d860fe" name="ga1f68bc574b1da82ec869fff588d860fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1f68bc574b1da82ec869fff588d860fe">&#9670;&#160;</a></span>operator*() <span class="overload">[13/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga0f57e9ac04ed269ba5f32e8319dd9f5f" name="ga0f57e9ac04ed269ba5f32e8319dd9f5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0f57e9ac04ed269ba5f32e8319dd9f5f">&#9670;&#160;</a></span>operator*() <span class="overload">[14/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="gae55ccde9fa4dba7dc0f3e53ff9d95961" name="gae55ccde9fa4dba7dc0f3e53ff9d95961"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae55ccde9fa4dba7dc0f3e53ff9d95961">&#9670;&#160;</a></span>operator*() <span class="overload">[15/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga8c8bdba20fe1ac44b9837833f5326ca7" name="ga8c8bdba20fe1ac44b9837833f5326ca7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8c8bdba20fe1ac44b9837833f5326ca7">&#9670;&#160;</a></span>operator*() <span class="overload">[16/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gaac7a1654e00181341aac3a25ffb3689f" name="gaac7a1654e00181341aac3a25ffb3689f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaac7a1654e00181341aac3a25ffb3689f">&#9670;&#160;</a></span>operator*() <span class="overload">[17/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="gac7f61ec410c7a3183db5ee7ccb4ce690" name="gac7f61ec410c7a3183db5ee7ccb4ce690"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac7f61ec410c7a3183db5ee7ccb4ce690">&#9670;&#160;</a></span>operator*() <span class="overload">[18/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga4aaaced148b8c9ba4839cf2ba7a7d75c" name="ga4aaaced148b8c9ba4839cf2ba7a7d75c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4aaaced148b8c9ba4839cf2ba7a7d75c">&#9670;&#160;</a></span>operator*() <span class="overload">[19/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga93058240610343bb4e1db0e08b6e40ac" name="ga93058240610343bb4e1db0e08b6e40ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga93058240610343bb4e1db0e08b6e40ac">&#9670;&#160;</a></span>operator*() <span class="overload">[20/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga5641dc5a9d13cb3641fe7609e898eec6" name="ga5641dc5a9d13cb3641fe7609e898eec6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5641dc5a9d13cb3641fe7609e898eec6">&#9670;&#160;</a></span>operator*() <span class="overload">[21/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga1249b8c4c07d51c127155412f25c6f12" name="ga1249b8c4c07d51c127155412f25c6f12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1249b8c4c07d51c127155412f25c6f12">&#9670;&#160;</a></span>operator*() <span class="overload">[22/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="gab8d243b0d851a1e59fa253bce62daf92" name="gab8d243b0d851a1e59fa253bce62daf92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab8d243b0d851a1e59fa253bce62daf92">&#9670;&#160;</a></span>operator*() <span class="overload">[23/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga8797658c5673f262c6600b7008f2f347" name="ga8797658c5673f262c6600b7008f2f347"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8797658c5673f262c6600b7008f2f347">&#9670;&#160;</a></span>operator*() <span class="overload">[24/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="gae0a6264b28bdeeed7edbdd220e74d6d7" name="gae0a6264b28bdeeed7edbdd220e74d6d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae0a6264b28bdeeed7edbdd220e74d6d7">&#9670;&#160;</a></span>operator*() <span class="overload">[25/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga74f2658ff8a3780fa4e99089a23f47bc" name="ga74f2658ff8a3780fa4e99089a23f47bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga74f2658ff8a3780fa4e99089a23f47bc">&#9670;&#160;</a></span>operator*() <span class="overload">[26/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga5d7b284fb3dee8bbc24753128015106b" name="ga5d7b284fb3dee8bbc24753128015106b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5d7b284fb3dee8bbc24753128015106b">&#9670;&#160;</a></span>operator*() <span class="overload">[27/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga7da5272a3d6037debcd6ff0e4360c028" name="ga7da5272a3d6037debcd6ff0e4360c028"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7da5272a3d6037debcd6ff0e4360c028">&#9670;&#160;</a></span>operator*() <span class="overload">[28/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="gafc5e5b970def587606bc8de0308ee47a" name="gafc5e5b970def587606bc8de0308ee47a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafc5e5b970def587606bc8de0308ee47a">&#9670;&#160;</a></span>operator*() <span class="overload">[29/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga051be2573d48f7bf0bb306fc63ce3b19" name="ga051be2573d48f7bf0bb306fc63ce3b19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga051be2573d48f7bf0bb306fc63ce3b19">&#9670;&#160;</a></span>operator*() <span class="overload">[30/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
<a id="ga747a75695ef5a017c10f6f90f6c258d8" name="ga747a75695ef5a017c10f6f90f6c258d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga747a75695ef5a017c10f6f90f6c258d8">&#9670;&#160;</a></span>operator*() <span class="overload">[31/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies two arrays or an array and a value.  </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array which is the product of the <code>lhs</code> and <code>rhs</code>   </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:57 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
