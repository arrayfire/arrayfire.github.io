<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>image_processing/pyramids.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('image_processing_2pyramids_8cpp-example.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">image_processing/pyramids.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">float</span> pyramid_kernel[] = {</div><div class="line">    1,  4,  6,  4, 1,</div><div class="line">    4, 16, 24, 16, 4,</div><div class="line">    6, 24, 36, 24, 6,</div><div class="line">    4, 16, 24, 16, 4,</div><div class="line">    1,  4,  6,  4, 1</div><div class="line">};</div><div class="line"></div><div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> pyramid(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; img, <span class="keyword">const</span> <span class="keywordtype">int</span> level, <span class="keyword">const</span> <span class="keywordtype">bool</span> sampling)</div><div class="line">{</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> pyr = img.<a name="a1"></a><a class="code" href="group__method__mat.htm#gaa859f53b411dd3ab37c8c817b4352e07">copy</a>();</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> kernel(5, 5, pyramid_kernel);</div><div class="line">    kernel = kernel / 256.f;</div><div class="line">    <span class="keywordflow">if</span>(sampling) {                              <span class="comment">//Downsample</span></div><div class="line">        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; level; i++) {</div><div class="line">            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = 0; j &lt; pyr.<a name="a2"></a><a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2); j++)</div><div class="line">                pyr(<a name="a3"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, j) = <a name="a4"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(pyr(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, j), kernel);</div><div class="line">            pyr = pyr(<a name="_a5"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(0, pyr.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0)-1, 2), <a class="code" href="classaf_1_1seq.htm">seq</a>(0, pyr.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)-1, 2), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div><div class="line">        }</div><div class="line">    } <span class="keywordflow">else</span> {                                    <span class="comment">// Up sample</span></div><div class="line">        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; level; i++) {</div><div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> tmp = <a name="a6"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, pyr.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0) * 2, pyr.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1) * 2, pyr.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2));</div><div class="line">            tmp(<a class="code" href="classaf_1_1seq.htm">seq</a>(0, 2*pyr.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0)-1, 2), <a class="code" href="classaf_1_1seq.htm">seq</a>(0, 2*pyr.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)-1, 2), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) = pyr;</div><div class="line">            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = 0; j &lt; pyr.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2); j++)</div><div class="line">                tmp(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, j) = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(tmp(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, j), kernel * 4.f);</div><div class="line">            pyr = tmp;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keywordflow">return</span> pyr;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> pyramids_demo()</div><div class="line">{</div><div class="line">    <a name="_a7"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd_rgb(<span class="stringliteral">&quot;Image Pyramids - RGB Images&quot;</span>);</div><div class="line">    <a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd_gray(<span class="stringliteral">&quot;Image Pyramids - Grayscale Images&quot;</span>);</div><div class="line">    wnd_rgb.setPos(25, 25);</div><div class="line">    wnd_gray.setPos(150, 150);</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> img_rgb = <a name="a8"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/atlantis.png&quot;</span>, <span class="keyword">true</span>) / 255.f; <span class="comment">// 3 channel RGB       [0-1]</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> img_gray = <a name="a9"></a><a class="code" href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">colorSpace</a>(img_rgb, <a name="a10"></a><a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1">AF_GRAY</a>, <a name="a11"></a><a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6">AF_RGB</a>);</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> downc1 = pyramid(img_rgb,  1, <span class="keyword">true</span>);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> downc2 = pyramid(img_rgb,  2, <span class="keyword">true</span>);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> upc1   = pyramid(img_rgb,  1, <span class="keyword">false</span>);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> upc2   = pyramid(img_rgb,  2, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> downg1 = pyramid(img_gray, 1, <span class="keyword">true</span>);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> downg2 = pyramid(img_gray, 2, <span class="keyword">true</span>);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> upg1   = pyramid(img_gray, 1, <span class="keyword">false</span>);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> upg2   = pyramid(img_gray, 2, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="keywordflow">while</span> (!wnd_rgb.close() &amp;&amp; !wnd_gray.close()) {</div><div class="line"></div><div class="line">        wnd_rgb.grid(2, 3);</div><div class="line">        wnd_rgb(0, 0).image(img_rgb, <span class="stringliteral">&quot;color image&quot;</span>);</div><div class="line">        wnd_rgb(1, 0).image(downc1, <span class="stringliteral">&quot;downsample 1 level&quot;</span>);</div><div class="line">        wnd_rgb(0, 1).image(downc2, <span class="stringliteral">&quot;downsample 2 levels&quot;</span>);</div><div class="line">        wnd_rgb(1, 1).image(upc1, <span class="stringliteral">&quot;upsample 1 level&quot;</span>);</div><div class="line">        wnd_rgb(0, 2).image(upc2, <span class="stringliteral">&quot;upsample 2 level&quot;</span>);</div><div class="line">        wnd_rgb.show();</div><div class="line"></div><div class="line"></div><div class="line">        wnd_gray.grid(2, 3);</div><div class="line">        wnd_gray(0, 0).image(img_gray, <span class="stringliteral">&quot;grayscale image&quot;</span>);</div><div class="line">        wnd_gray(1, 0).image(downg1, <span class="stringliteral">&quot;downsample 1 level&quot;</span>);</div><div class="line">        wnd_gray(0, 1).image(downg2, <span class="stringliteral">&quot;downsample 2 levels&quot;</span>);</div><div class="line">        wnd_gray(1, 1).image(upg1, <span class="stringliteral">&quot;upsample 1 level&quot;</span>);</div><div class="line">        wnd_gray(0, 2).image(upg2, <span class="stringliteral">&quot;upsample 2 level&quot;</span>);</div><div class="line">        wnd_gray.show();</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div><div class="line"></div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line">        <a name="a12"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div><div class="line">        <a name="a13"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div><div class="line">        printf(<span class="stringliteral">&quot;** ArrayFire Image Pyramids Demo **\n\n&quot;</span>);</div><div class="line">        pyramids_demo();</div><div class="line"></div><div class="line">    } <span class="keywordflow">catch</span> (<a name="_a14"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div><div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a15"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div><div class="line">        <span class="keywordflow">throw</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
