<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: array.h (2020-10-27 00:11:00 -0400, (build d99887ae)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('array_8h_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">array.h (2020-10-27 00:11:00 -0400, (build d99887ae))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="array_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*******************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2014, ArrayFire</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * All rights reserved.</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * https://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> ********************************************************/</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;af/compilers.h&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="defines_8h.htm">af/defines.h</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="device_8h.htm">af/device.h</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="dim4_8hpp.htm">af/dim4.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="exception_8h.htm">af/exception.h</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="index_8h.htm">af/index.h</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="seq_8h.htm">af/seq.h</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="traits_8hpp.htm">af/traits.hpp</a>&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 38</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#if AF_COMPILER_CXX_GENERALIZED_INITIALIZERS</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;initializer_list&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceaf.htm">af</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">class </span>dim4;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classaf_1_1array.htm">   37</a></span>&#160;    <span class="keyword">class </span><a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="classaf_1_1array.htm">array</a> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>   arr;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordtype">void</span> <span class="keyword">set</span>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> tmp);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classaf_1_1array_1_1array__proxy.htm">   56</a></span>&#160;        <span class="keyword">class </span><a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keyword">struct </span>array_proxy_impl;    <span class="comment">//forward declaration</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            array_proxy_impl *impl;     <span class="comment">// implementation</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a>(<a class="code" href="classaf_1_1array.htm">array</a>&amp; par, <a class="code" href="structaf__index__t.htm">af_index_t</a> *ssss, <span class="keywordtype">bool</span> linear = <span class="keyword">false</span>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a> &amp;other);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#if AF_COMPILER_CXX_RVALUE_REFERENCES</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a>(<a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a> &amp;&amp;other);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a> &amp; operator=(<a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a> &amp;&amp;other);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            ~<a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a>();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="comment">// Implicit conversion operators</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keyword">operator</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keyword">operator</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#define ASSIGN(OP)                                                  \</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const array_proxy &amp;a);         \</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const array &amp;a);               \</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const double &amp;a);              \</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const cdouble &amp;a);             \</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const cfloat &amp;a);              \</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const float &amp;a);               \</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const int &amp;a);                 \</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned &amp;a);            \</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const bool &amp;a);                \</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const char &amp;a);                \</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned char &amp;a);       \</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const long  &amp;a);               \</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned long &amp;a);       \</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const long long  &amp;a);          \</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned long long &amp;a);</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(=)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(+=)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(-=)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(*=)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(/=)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">#undef ASSIGN</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 32</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">#define ASSIGN(OP)                                                  \</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const short &amp;a);               \</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned short &amp;a);</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(=)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(+=)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(-=)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(*=)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(/=)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#undef ASSIGN</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">// af::array member functions. same behavior as those below</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> <span class="keyword">get</span>();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> <span class="keyword">get</span>() <span class="keyword">const</span>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> elements() <span class="keyword">const</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T* host() <span class="keyword">const</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordtype">void</span> host(<span class="keywordtype">void</span> *ptr) <span class="keyword">const</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type() <span class="keyword">const</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <a class="code" href="classaf_1_1dim4.htm">dim4</a> dims() <span class="keyword">const</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dims(<span class="keywordtype">unsigned</span> dim) <span class="keyword">const</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordtype">unsigned</span> numdims() <span class="keyword">const</span>;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordtype">size_t</span> bytes() <span class="keyword">const</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordtype">size_t</span> allocated() <span class="keyword">const</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <a class="code" href="classaf_1_1array.htm">array</a> <a class="code" href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">copy</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordtype">bool</span> isempty() <span class="keyword">const</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordtype">bool</span> isscalar() <span class="keyword">const</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordtype">bool</span> isvector() <span class="keyword">const</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordtype">bool</span> isrow() <span class="keyword">const</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordtype">bool</span> iscolumn() <span class="keyword">const</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordtype">bool</span> iscomplex() <span class="keyword">const</span>;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classaf_1_1array_1_1array__proxy.htm#ae778ca527466663084f5797f23075603">  130</a></span>&#160;            <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm#ae778ca527466663084f5797f23075603">isreal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !iscomplex(); }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordtype">bool</span> isdouble() <span class="keyword">const</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordtype">bool</span> issingle() <span class="keyword">const</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 37</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordtype">bool</span> ishalf() <span class="keyword">const</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordtype">bool</span> isrealfloating() <span class="keyword">const</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordtype">bool</span> isfloating() <span class="keyword">const</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordtype">bool</span> isinteger() <span class="keyword">const</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordtype">bool</span> isbool() <span class="keyword">const</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordtype">bool</span> issparse() <span class="keyword">const</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <a class="code" href="classaf_1_1array.htm">array</a> as(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type) <span class="keyword">const</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <a class="code" href="classaf_1_1array.htm">array</a> T() <span class="keyword">const</span>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <a class="code" href="classaf_1_1array.htm">array</a> H() <span class="keyword">const</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T scalar() <span class="keyword">const</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T* device() <span class="keyword">const</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordtype">void</span> unlock() <span class="keyword">const</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 31</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordtype">void</span> lock() <span class="keyword">const</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordtype">bool</span> isLocked() <span class="keyword">const</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> row(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> row(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> rows(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> rows(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> col(<span class="keywordtype">int</span> index);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> col(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> cols(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> cols(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slice(<span class="keywordtype">int</span> index);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slice(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slices(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slices(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        };</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 37</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#if AF_COMPILER_CXX_RVALUE_REFERENCES</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="classaf_1_1array.htm">array</a> &amp;&amp;other) AF_NOEXCEPT;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> &amp;operator=(<a class="code" href="classaf_1_1array.htm">array</a> &amp;&amp;other) AF_NOEXCEPT;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keyword">explicit</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; in);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keyword">explicit</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1dim4.htm">dim4</a>&amp; dims, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2,</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keyword">explicit</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1dim4.htm">dim4</a>&amp; dims,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 38</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="preprocessor">#if AF_COMPILER_CXX_GENERALIZED_INITIALIZERS</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(std::initializer_list&lt;T&gt; list)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        : arr(<span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;          <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> size = list.size();</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> __aferr = <a class="code" href="group__c__api__mat.htm#ga834be32357616d8ab735087c6f681858">af_create_array</a>(&amp;arr, list.begin(), 1, &amp;size,</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                              <span class="keyword">static_cast&lt;</span><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a><span class="keyword">&gt;</span>(<a class="code" href="structaf_1_1dtype__traits.htm">af::dtype_traits&lt;T&gt;::af_type</a>))) {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            <span class="keywordtype">char</span> *msg = NULL;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            <a class="code" href="exception_8h.htm#a4f0227c17954d343021313f77e695c8e">af_get_last_error</a>(&amp;msg, NULL);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <a class="code" href="classaf_1_1exception.htm">af::exception</a> ex(msg, __PRETTY_FUNCTION__, <span class="stringliteral">&quot;include/af/array.h&quot;</span>,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                             __LINE__, __aferr);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            <a class="code" href="group__device__func__free__host.htm#ga3f1149a837a7ebbe8002d5d2244e3370">af_free_host</a>(msg);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="keywordflow">throw</span> std::move(ex);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;          }</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        }</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1dim4.htm">af::dim4</a> &amp;dims, std::initializer_list&lt;T&gt; list)</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            : arr(<span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;          <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *size = dims.<a class="code" href="classaf_1_1dim4.htm#acfe9236f37131e50c17bfb81654c9efc">get</a>();</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> __aferr = <a class="code" href="group__c__api__mat.htm#ga834be32357616d8ab735087c6f681858">af_create_array</a>(</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;              &amp;arr, list.begin(), <a class="code" href="defines_8h.htm#af9b50fabd967d025fcdadffb754b90fa">AF_MAX_DIMS</a>, size,</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;              <span class="keyword">static_cast&lt;</span><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a><span class="keyword">&gt;</span>(<a class="code" href="structaf_1_1dtype__traits.htm">af::dtype_traits&lt;T&gt;::af_type</a>))) {</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keywordtype">char</span> *msg = NULL;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <a class="code" href="exception_8h.htm#a4f0227c17954d343021313f77e695c8e">af_get_last_error</a>(&amp;msg, NULL);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            <a class="code" href="classaf_1_1exception.htm">af::exception</a> ex(msg, __PRETTY_FUNCTION__, <span class="stringliteral">&quot;include/af/array.h&quot;</span>,</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                             __LINE__, __aferr);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <a class="code" href="group__device__func__free__host.htm#ga3f1149a837a7ebbe8002d5d2244e3370">af_free_host</a>(msg);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            <span class="keywordflow">throw</span> std::move(ex);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;          }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        }</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; input, <span class="keyword">const</span> <a class="code" href="classaf_1_1dim4.htm">dim4</a>&amp; dims);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(  <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; input,</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1 = 1,</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2 = 1, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3 = 1);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> <span class="keyword">get</span>();</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> <span class="keyword">get</span>() <span class="keyword">const</span>;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> elements() <span class="keyword">const</span>;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T* host() <span class="keyword">const</span>;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keywordtype">void</span> host(<span class="keywordtype">void</span> *ptr) <span class="keyword">const</span>;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keywordtype">void</span> write(<span class="keyword">const</span> T *ptr, <span class="keyword">const</span> <span class="keywordtype">size_t</span> bytes, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src = <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type() <span class="keyword">const</span>;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <a class="code" href="classaf_1_1dim4.htm">dim4</a> dims() <span class="keyword">const</span>;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dims(<span class="keywordtype">unsigned</span> dim) <span class="keyword">const</span>;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        <span class="keywordtype">unsigned</span> numdims() <span class="keyword">const</span>;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="keywordtype">size_t</span> bytes() <span class="keyword">const</span>;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keywordtype">size_t</span> allocated() <span class="keyword">const</span>;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> <a class="code" href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">copy</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <span class="keywordtype">bool</span> isempty() <span class="keyword">const</span>;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordtype">bool</span> isscalar() <span class="keyword">const</span>;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordtype">bool</span> isvector() <span class="keyword">const</span>;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        <span class="keywordtype">bool</span> isrow() <span class="keyword">const</span>;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keywordtype">bool</span> iscolumn() <span class="keyword">const</span>;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="keywordtype">bool</span> iscomplex() <span class="keyword">const</span>;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00722"></a><span class="lineno"><a class="line" href="classaf_1_1array.htm#ae778ca527466663084f5797f23075603">  722</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classaf_1_1array.htm#ae778ca527466663084f5797f23075603">isreal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !iscomplex(); }</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <span class="keywordtype">bool</span> isdouble() <span class="keyword">const</span>;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <span class="keywordtype">bool</span> issingle() <span class="keyword">const</span>;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 37</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        <span class="keywordtype">bool</span> ishalf() <span class="keyword">const</span>;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keywordtype">bool</span> isrealfloating() <span class="keyword">const</span>;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <span class="keywordtype">bool</span> isfloating() <span class="keyword">const</span>;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordtype">bool</span> isinteger() <span class="keyword">const</span>;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="keywordtype">bool</span> isbool() <span class="keyword">const</span>;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="keywordtype">bool</span> issparse() <span class="keyword">const</span>;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T scalar() <span class="keyword">const</span>;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T* device() <span class="keyword">const</span>;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <span class="comment">// INDEXING</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        <span class="comment">// Single arguments</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> operator()(<span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s0);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> operator()(<span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s0) <span class="keyword">const</span>;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> operator()(<span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s0,</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s1,</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s2 = <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>,</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s3 = <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> operator()(<span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s0,</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s1,</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s2 = <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>,</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s3 = <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> row(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> row(<span class="keywordtype">int</span> index) <span class="keyword">const</span>; </div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> rows(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> rows(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>; </div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> col(<span class="keywordtype">int</span> index);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> col(<span class="keywordtype">int</span> index) <span class="keyword">const</span>; </div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> cols(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> cols(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>; </div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slice(<span class="keywordtype">int</span> index);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slice(<span class="keywordtype">int</span> index) <span class="keyword">const</span>; </div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slices(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slices(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>; </div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> as(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type) <span class="keyword">const</span>;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        ~<a class="code" href="classaf_1_1array.htm">array</a>();</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> T() <span class="keyword">const</span>;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> H() <span class="keyword">const</span>;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;</div><div class="line"><a name="l00954"></a><span class="lineno"><a class="line" href="array_8h.htm#a3024a14587b6373c2e2a3fe65f2b8b12">  954</a></span>&#160;<span class="preprocessor">#define ASSIGN_(OP2)                                                                      \</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="preprocessor">        array&amp; OP2(const array &amp;val);                                                     \</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="preprocessor">        array&amp; OP2(const double &amp;val);               \</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="preprocessor">        array&amp; OP2(const cdouble &amp;val);              \</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="preprocessor">        array&amp; OP2(const cfloat &amp;val);               \</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="preprocessor">        array&amp; OP2(const float &amp;val);                \</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="preprocessor">        array&amp; OP2(const int &amp;val);                  \</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;<span class="preprocessor">        array&amp; OP2(const unsigned &amp;val);             \</span></div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="preprocessor">        array&amp; OP2(const bool &amp;val);                 \</span></div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="preprocessor">        array&amp; OP2(const char &amp;val);                 \</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="preprocessor">        array&amp; OP2(const unsigned char &amp;val);        \</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="preprocessor">        array&amp; OP2(const long  &amp;val);                \</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="preprocessor">        array&amp; OP2(const unsigned long &amp;val);        \</span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="preprocessor">        array&amp; OP2(const long long  &amp;val);           \</span></div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;<span class="preprocessor">        array&amp; OP2(const unsigned long long &amp;val);</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 32</span></div><div class="line"><a name="l00972"></a><span class="lineno"><a class="line" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">  972</a></span>&#160;<span class="preprocessor">#define ASSIGN(OP)                                                                        \</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="preprocessor">        ASSIGN_(OP)                                                                       \</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="preprocessor">          array&amp; OP(const short  &amp;val);               \</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="preprocessor">          array&amp; OP(const unsigned short &amp;val);</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="preprocessor">#define ASSIGN(OP) ASSIGN_(OP)</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(<span class="keyword">operator</span>=)</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(operator+=)</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(operator-=)</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(operator*=)</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(operator/=)</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="preprocessor">#undef ASSIGN</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;<span class="preprocessor">#undef ASSIGN_</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__sub.htm#gafa57cf4a71580be2bfd04a83a66d9835">operator -</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> operator !() <span class="keyword">const</span>;</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 38</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> operator ~() <span class="keyword">const</span>;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;        <span class="keywordtype">int</span> nonzeros() <span class="keyword">const</span>;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;        <span class="keywordtype">void</span> lock() <span class="keyword">const</span>;</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;        <span class="keywordtype">bool</span> isLocked() <span class="keyword">const</span>;</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;        <span class="keywordtype">void</span> unlock() <span class="keyword">const</span>;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    };</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="comment">// end of class array</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;</div><div class="line"><a name="l01104"></a><span class="lineno"><a class="line" href="array_8h.htm#a2c8e67e88a0a2815d1253276803deef4"> 1104</a></span>&#160;<span class="preprocessor">#define BIN_OP_(OP)                                                                                                      \</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const array&amp; rhs);                                                                 \</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="preprocessor">    AFAPI array OP (const bool&amp; lhs, const array&amp; rhs);                \</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="preprocessor">    AFAPI array OP (const int&amp; lhs, const array&amp; rhs);                 \</span></div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="preprocessor">    AFAPI array OP (const unsigned&amp; lhs, const array&amp; rhs);            \</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="preprocessor">    AFAPI array OP (const char&amp; lhs, const array&amp; rhs);                \</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="preprocessor">    AFAPI array OP (const unsigned char&amp; lhs, const array&amp; rhs);       \</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="preprocessor">    AFAPI array OP (const long&amp; lhs, const array&amp; rhs);                \</span></div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="preprocessor">    AFAPI array OP (const unsigned long&amp; lhs, const array&amp; rhs);       \</span></div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;<span class="preprocessor">    AFAPI array OP (const long long&amp; lhs, const array&amp; rhs);           \</span></div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;<span class="preprocessor">    AFAPI array OP (const unsigned long long&amp; lhs, const array&amp; rhs);  \</span></div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="preprocessor">    AFAPI array OP (const double&amp; lhs, const array&amp; rhs);              \</span></div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="preprocessor">    AFAPI array OP (const float&amp; lhs, const array&amp; rhs);               \</span></div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="preprocessor">    AFAPI array OP (const cfloat&amp; lhs, const array&amp; rhs);              \</span></div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="preprocessor">    AFAPI array OP (const cdouble&amp; lhs, const array&amp; rhs);             \</span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const bool&amp; rhs);                \</span></div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const int&amp; rhs);                 \</span></div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const unsigned&amp; rhs);            \</span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const char&amp; rhs);                \</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const unsigned char&amp; rhs);       \</span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const long&amp; rhs);                \</span></div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const unsigned long&amp; rhs);       \</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const long long&amp; rhs);           \</span></div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const unsigned long long&amp; rhs);  \</span></div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const double&amp; rhs);              \</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const float&amp; rhs);               \</span></div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const cfloat&amp; rhs);              \</span></div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const cdouble&amp; rhs);</span></div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 32</span></div><div class="line"><a name="l01134"></a><span class="lineno"><a class="line" href="array_8h.htm#a6d8256045dabd15534382126773e729d"> 1134</a></span>&#160;<span class="preprocessor">#define BIN_OP(OP)                                                                                                        \</span></div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;<span class="preprocessor">        BIN_OP_(OP)                                                                                                       \</span></div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="preprocessor">        AFAPI array OP (const short&amp; lhs, const array&amp; rhs);            \</span></div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;<span class="preprocessor">        AFAPI array OP (const unsigned short&amp; lhs, const array&amp; rhs);   \</span></div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;<span class="preprocessor">        AFAPI array OP (const array&amp; lhs, const short&amp; rhs);            \</span></div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;<span class="preprocessor">        AFAPI array OP (const array&amp; lhs, const unsigned short&amp; rhs);</span></div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="preprocessor">#define BIN_OP(OP) BIN_OP_(OP)</span></div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(<span class="keyword">operator</span>+ )</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator- )</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator* )</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator/ )</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator==)</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator!=)</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&lt; )</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&lt;=)</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&gt; )</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&gt;=)</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator||)</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator% )</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator| )</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator^ )</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&lt;&lt;)</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&gt;&gt;)</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;<span class="preprocessor">#undef BIN_OP</span></div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;<span class="preprocessor">#undef BIN_OP_</span></div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; rhs);</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a>&amp; rhs);</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a>&amp; rhs);</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>&amp; rhs);</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; rhs);</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; rhs);</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">int</span>&amp; rhs);</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>&amp; rhs);</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">long</span>&amp; rhs);</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">short</span>&amp; rhs);</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>&amp; rhs);</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>&amp; rhs);</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>&amp; rhs);</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>&amp; rhs);</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span>&amp; rhs);</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">double</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">int</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">long</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">short</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">operator&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; rhs);</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a>&amp; rhs);</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a>&amp; rhs);</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>&amp; rhs);</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; rhs);</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; rhs);</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">int</span>&amp; rhs);</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>&amp; rhs);</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">long</span>&amp; rhs);</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">short</span>&amp; rhs);</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>&amp; rhs);</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>&amp; rhs);</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>&amp; rhs);</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>&amp; rhs);</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">unsigned</span>&amp; rhs);</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <a class="code" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">double</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">int</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">long</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">short</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">operator&amp;&amp;</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span>&amp; lhs, <span class="keyword">const</span> <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>&amp; rhs);</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;</div><div class="line"><a name="l01431"></a><span class="lineno"><a class="line" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39"> 1431</a></span>&#160;    <span class="keyword">inline</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;<a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="classaf_1_1array.htm">array</a> &amp;a) { a.<a class="code" href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a>(); <span class="keywordflow">return</span> a; }</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<span class="keywordtype">int</span> num, <a class="code" href="classaf_1_1array.htm">array</a> **arrays);</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;</div><div class="line"><a name="l01440"></a><span class="lineno"><a class="line" href="group__data__mat.htm#ga6a17a89fab2c26be8e911c4628c4c54c"> 1440</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <a class="code" href="classaf_1_1array.htm">array</a> &amp;b)</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    {</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b};</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(2, arrays);</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;        <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a); b.eval();</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    }</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;</div><div class="line"><a name="l01450"></a><span class="lineno"><a class="line" href="group__data__mat.htm#ga932cc56a65acbe91ff2cea42e2f43bb6"> 1450</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <a class="code" href="classaf_1_1array.htm">array</a> &amp;b, <a class="code" href="classaf_1_1array.htm">array</a> &amp;c)</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    {</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c};</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(3, arrays);</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;        <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a, b); c.eval();</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    }</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;</div><div class="line"><a name="l01460"></a><span class="lineno"><a class="line" href="group__data__mat.htm#ga8d75de296c6378ef17825a3776db93e4"> 1460</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <a class="code" href="classaf_1_1array.htm">array</a> &amp;b, <a class="code" href="classaf_1_1array.htm">array</a> &amp;c, <a class="code" href="classaf_1_1array.htm">array</a> &amp;d)</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    {</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d};</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(4, arrays);</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;        <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a, b, c); d.eval();</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    }</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;</div><div class="line"><a name="l01471"></a><span class="lineno"><a class="line" href="group__data__mat.htm#gad2cfee88b0b16efb2e4c3fe5a01187ac"> 1471</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <a class="code" href="classaf_1_1array.htm">array</a> &amp;b, <a class="code" href="classaf_1_1array.htm">array</a> &amp;c, <a class="code" href="classaf_1_1array.htm">array</a> &amp;d, <a class="code" href="classaf_1_1array.htm">array</a> &amp;e)</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    {</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d, &amp;e};</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(5, arrays);</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;        <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a, b, c, d); e.eval();</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    }</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;</div><div class="line"><a name="l01481"></a><span class="lineno"><a class="line" href="group__data__mat.htm#ga0b49360b87556fcc3d256c864e72e50b"> 1481</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <a class="code" href="classaf_1_1array.htm">array</a> &amp;b, <a class="code" href="classaf_1_1array.htm">array</a> &amp;c, <a class="code" href="classaf_1_1array.htm">array</a> &amp;d, <a class="code" href="classaf_1_1array.htm">array</a> &amp;e, <a class="code" href="classaf_1_1array.htm">array</a> &amp;f)</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;    {</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f};</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(6, arrays);</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a, b, c, d, e); f.eval();</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    }</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 37</span></div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;</div><div class="line"><a name="l01494"></a><span class="lineno"><a class="line" href="group__data__mat.htm#ga45f52ad29c9ac39d7fa2efd8f2470a22"> 1494</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;<a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;a) { a.<a class="code" href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a>(); <span class="keywordflow">return</span> a; }</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;<span class="preprocessor">#if AF_COMPILER_CXX_VARIADIC_TEMPLATES</span></div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... ARRAYS&gt;</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(ARRAYS... in) {</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {<span class="keyword">const_cast&lt;</span><a class="code" href="classaf_1_1array.htm">array</a> *<span class="keyword">&gt;</span>(&amp;in)...};</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;        <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>((<span class="keywordtype">int</span>)<span class="keyword">sizeof</span>...(in), arrays);</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    }</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;</div><div class="line"><a name="l01505"></a><span class="lineno"><a class="line" href="group__data__mat.htm#ga2016101f197ce325858f706405dbb399"> 1505</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;b)</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    {</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b};</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(2, const_cast&lt;array **&gt;(arrays));</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    }</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;</div><div class="line"><a name="l01511"></a><span class="lineno"><a class="line" href="group__data__mat.htm#gab9545550ae34532581c47d2f8a616569"> 1511</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;b, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;c)</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    {</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c};</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(3, const_cast&lt;array **&gt;(arrays));</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    }</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;</div><div class="line"><a name="l01517"></a><span class="lineno"><a class="line" href="group__data__mat.htm#ga0ab6d6c52ec85bd70ee1223448958261"> 1517</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;b, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;c,</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;d)</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    {</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d};</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(4, const_cast&lt;array **&gt;(arrays));</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    }</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;</div><div class="line"><a name="l01524"></a><span class="lineno"><a class="line" href="group__data__mat.htm#gaddec0e716ad2d696f01b3359e2207e7d"> 1524</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;b, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;c,</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;d, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;e)</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    {</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d, &amp;e};</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(5, const_cast&lt;array **&gt;(arrays));</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    }</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;</div><div class="line"><a name="l01531"></a><span class="lineno"><a class="line" href="group__data__mat.htm#gaed1d77332fa65805b2a6bf1cee8a857c"> 1531</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;b, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;c,</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;d, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;e, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;f)</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    {</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> *arrays[] = {&amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f};</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(6, const_cast&lt;array **&gt;(arrays));</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    }</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;<span class="preprocessor">#endif // AF_COMPILER_CXX_VARIADIC_TEMPLATES</span></div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <span class="keywordtype">void</span> <a class="code" href="group__data__mat.htm#ga11dba1a052f2fe004665237d9670e1f5">setManualEvalFlag</a>(<span class="keywordtype">bool</span> flag);</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <span class="keywordtype">bool</span> <a class="code" href="group__data__mat.htm#ga0c2f8602994b437164ee5783cedabfa9">getManualEvalFlag</a>();</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;}</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;<span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga834be32357616d8ab735087c6f681858">af_create_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, <span class="keyword">const</span> <span class="keywordtype">void</span> * <span class="keyword">const</span> data, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> ndims, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> * <span class="keyword">const</span> dims, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type);</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga3b8f5cf6fce69aa1574544bc2d44d7d0">af_create_handle</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> ndims, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> * <span class="keyword">const</span> dims, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type);</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga0f8e4d3732b5fd4b91ad51eec634f7a2">af_copy_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in);</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gafef13633d184acc726ad9daca7a7bc99">af_write_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr, <span class="keyword">const</span> <span class="keywordtype">void</span> *data, <span class="keyword">const</span> <span class="keywordtype">size_t</span> bytes, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a> src);</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga6040dc6f0eb127402fbf62c1165f0b9d">af_get_data_ptr</a>(<span class="keywordtype">void</span> *data, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gad6c58648ed0db398e170dabf045e8309">af_release_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga7ed45b3f881c0f6c80c5cf2af886dbab">af_retain_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in);</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 31</span></div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga34d9070b94c3bac673df7f13b9c718a2">af_get_data_ref_count</a>(<span class="keywordtype">int</span> *use_count, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in);</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga9de141bfc5936741d2496f59c1bac777">af_eval</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in);</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga9e08f4cda2471a477d2fa91c2356f72c">af_eval_multiple</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> num, <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arrays);</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga869f5e9331e9e010345de2589add7bae">af_set_manual_eval_flag</a>(<span class="keywordtype">bool</span> flag);</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga890c476d90cb689f2835d2e4f74f5868">af_get_manual_eval_flag</a>(<span class="keywordtype">bool</span> *flag);</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga6845bbe4385a60a606b88f8130252c1f">af_get_elements</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *elems, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga0dda6898e1c0d9a43efb56cd6a988c9b">af_get_type</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> *type, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga8b90da50a532837d9763e301b2267348">af_get_dims</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d2, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d3,</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;                             <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gaefa019d932ff58c2a829ce87edddd2a8">af_get_numdims</a>(<span class="keywordtype">unsigned</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga19c749e95314e1c77d816ad9952fb680">af_is_empty</a>        (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gae3dfa6dc1c03c5efe7482bfc9c41266a">af_is_scalar</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gabbe3249a355293daabd5907d7df67c6a">af_is_row</a>          (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga184b5a5feb146f2a2a44fed36b35e435">af_is_column</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga00a23c7dd281fdcdec10b8395e611154">af_is_vector</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a>      (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gafaa0c1597ef34a7320ed589f80fdce10">af_is_real</a>         (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gadb499641bfc02dfa56a75be9ba237e3f">af_is_double</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;</div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga1bd444b2c78a4f4731d4523a90200175">af_is_single</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 37</span></div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga247a830d52f1cb2450369af3d8d8f2f1">af_is_half</a>(<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga6f2b3e689d07f5135dfc1ee6cf9825a3">af_is_realfloating</a> (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga5eb0d277412a2beeffe7e7a9f89b98ea">af_is_floating</a>     (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#ga768e8326a6aaa81c6543949afc781af2">af_is_integer</a>      (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gafae10fc1378b72404120572e21ff5d27">af_is_bool</a>         (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 34</span></div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;</div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gac96d3ca37a435874de22a76838a8cf54">af_is_sparse</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 35</span></div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__c__api__mat.htm#gaefe2e343a74a84bd43b588218ecc09a3">af_get_scalar</a>(<span class="keywordtype">void</span>* output_value, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;}</div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class. </div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:21</a></div></div>
<div class="ttc" id="traits_8hpp_htm"><div class="ttname"><a href="traits_8hpp.htm">traits.hpp</a></div></div>
<div class="ttc" id="structaf_1_1dtype__traits_htm"><div class="ttname"><a href="structaf_1_1dtype__traits.htm">af::dtype_traits</a></div><div class="ttdef"><b>Definition:</b> <a href="traits_8hpp_source.htm#l00021">traits.hpp:21</a></div></div>
<div class="ttc" id="classaf_1_1array_1_1array__proxy_htm_ae778ca527466663084f5797f23075603"><div class="ttname"><a href="classaf_1_1array_1_1array__proxy.htm#ae778ca527466663084f5797f23075603">af::array::array_proxy::isreal</a></div><div class="ttdeci">bool isreal() const</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00130">array.h:130</a></div></div>
<div class="ttc" id="namespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:14</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_ga00a23c7dd281fdcdec10b8395e611154"><div class="ttname"><a href="group__c__api__mat.htm#ga00a23c7dd281fdcdec10b8395e611154">af_is_vector</a></div><div class="ttdeci">AFAPI af_err af_is_vector(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is a vector. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga247a830d52f1cb2450369af3d8d8f2f1"><div class="ttname"><a href="group__c__api__mat.htm#ga247a830d52f1cb2450369af3d8d8f2f1">af_is_half</a></div><div class="ttdeci">AFAPI af_err af_is_half(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is 16 bit floating point type. </div></div>
<div class="ttc" id="seq_8h_htm"><div class="ttname"><a href="seq_8h.htm">seq.h</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_gaefa019d932ff58c2a829ce87edddd2a8"><div class="ttname"><a href="group__c__api__mat.htm#gaefa019d932ff58c2a829ce87edddd2a8">af_get_numdims</a></div><div class="ttdeci">AFAPI af_err af_get_numdims(unsigned *result, const af_array arr)</div><div class="ttdoc">Gets the number of dimensions of an array. </div></div>
<div class="ttc" id="exception_8h_htm_a4f0227c17954d343021313f77e695c8e"><div class="ttname"><a href="exception_8h.htm#a4f0227c17954d343021313f77e695c8e">af_get_last_error</a></div><div class="ttdeci">AFAPI void af_get_last_error(char **msg, dim_t *len)</div><div class="ttdoc">Returns the last error message that occurred and its error message. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga184b5a5feb146f2a2a44fed36b35e435"><div class="ttname"><a href="group__c__api__mat.htm#ga184b5a5feb146f2a2a44fed36b35e435">af_is_column</a></div><div class="ttdeci">AFAPI af_err af_is_column(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is a column vector. </div></div>
<div class="ttc" id="array_8h_htm_a96147e5f8a7b6037405defdd7e190dd8"><div class="ttname"><a href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a></div><div class="ttdeci">#define ASSIGN(OP)</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00972">array.h:972</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_gaefe2e343a74a84bd43b588218ecc09a3"><div class="ttname"><a href="group__c__api__mat.htm#gaefe2e343a74a84bd43b588218ecc09a3">af_get_scalar</a></div><div class="ttdeci">AFAPI af_err af_get_scalar(void *output_value, const af_array arr)</div><div class="ttdoc">Get first element from an array. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga0dda6898e1c0d9a43efb56cd6a988c9b"><div class="ttname"><a href="group__c__api__mat.htm#ga0dda6898e1c0d9a43efb56cd6a988c9b">af_get_type</a></div><div class="ttdeci">AFAPI af_err af_get_type(af_dtype *type, const af_array arr)</div><div class="ttdoc">Gets the type of an array. </div></div>
<div class="ttc" id="group__arith__func__and_htm_ga934307d686f9bcb5a63b48d37d63d9a1"><div class="ttname"><a href="group__arith__func__and.htm#ga934307d686f9bcb5a63b48d37d63d9a1">af::operator &amp;&amp;</a></div><div class="ttdeci">AFAPI array operator &amp;&amp;(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Performs a logical AND operation on two arrays or an array and a value. </div></div>
<div class="ttc" id="group__c__api__mat_htm_gacd8a5edf6467340d0b40341be9f677e9"><div class="ttname"><a href="group__c__api__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a></div><div class="ttdeci">AFAPI af_err af_is_complex(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is complex type. </div></div>
<div class="ttc" id="device_8h_htm"><div class="ttname"><a href="device_8h.htm">device.h</a></div></div>
<div class="ttc" id="namespaceaf_htm_a63e29e484b92e217fe817fe78abc4f5f"><div class="ttname"><a href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">af::cfloat</a></div><div class="ttdeci">af::af_cfloat cfloat</div><div class="ttdef"><b>Definition:</b> <a href="complex_8h_source.htm#l00044">complex.h:44</a></div></div>
<div class="ttc" id="exception_8h_htm"><div class="ttname"><a href="exception_8h.htm">exception.h</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_ga7ed45b3f881c0f6c80c5cf2af886dbab"><div class="ttname"><a href="group__c__api__mat.htm#ga7ed45b3f881c0f6c80c5cf2af886dbab">af_retain_array</a></div><div class="ttdeci">AFAPI af_err af_retain_array(af_array *out, const af_array in)</div><div class="ttdoc">Increments an af_array reference count. </div></div>
<div class="ttc" id="group__c__api__mat_htm_gae3dfa6dc1c03c5efe7482bfc9c41266a"><div class="ttname"><a href="group__c__api__mat.htm#gae3dfa6dc1c03c5efe7482bfc9c41266a">af_is_scalar</a></div><div class="ttdeci">AFAPI af_err af_is_scalar(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is scalar, ie. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga9de141bfc5936741d2496f59c1bac777"><div class="ttname"><a href="group__c__api__mat.htm#ga9de141bfc5936741d2496f59c1bac777">af_eval</a></div><div class="ttdeci">AFAPI af_err af_eval(af_array in)</div><div class="ttdoc">Evaluate any expressions in the Array. </div></div>
<div class="ttc" id="classaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container. </div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
<div class="ttc" id="util_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_ga768e8326a6aaa81c6543949afc781af2"><div class="ttname"><a href="group__c__api__mat.htm#ga768e8326a6aaa81c6543949afc781af2">af_is_integer</a></div><div class="ttdeci">AFAPI af_err af_is_integer(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is integer type. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga8b90da50a532837d9763e301b2267348"><div class="ttname"><a href="group__c__api__mat.htm#ga8b90da50a532837d9763e301b2267348">af_get_dims</a></div><div class="ttdeci">AFAPI af_err af_get_dims(dim_t *d0, dim_t *d1, dim_t *d2, dim_t *d3, const af_array arr)</div><div class="ttdoc">Gets the dimensions of an array. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga34d9070b94c3bac673df7f13b9c718a2"><div class="ttname"><a href="group__c__api__mat.htm#ga34d9070b94c3bac673df7f13b9c718a2">af_get_data_ref_count</a></div><div class="ttdeci">AFAPI af_err af_get_data_ref_count(int *use_count, const af_array in)</div><div class="ttdoc">Get the reference count of af_array. </div></div>
<div class="ttc" id="index_8h_htm"><div class="ttname"><a href="index_8h.htm">index.h</a></div></div>
<div class="ttc" id="dim4_8hpp_htm"><div class="ttname"><a href="dim4_8hpp.htm">dim4.hpp</a></div></div>
<div class="ttc" id="defines_8h_htm_af9b50fabd967d025fcdadffb754b90fa"><div class="ttname"><a href="defines_8h.htm#af9b50fabd967d025fcdadffb754b90fa">AF_MAX_DIMS</a></div><div class="ttdeci">#define AF_MAX_DIMS</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00237">defines.h:237</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_ga6845bbe4385a60a606b88f8130252c1f"><div class="ttname"><a href="group__c__api__mat.htm#ga6845bbe4385a60a606b88f8130252c1f">af_get_elements</a></div><div class="ttdeci">AFAPI af_err af_get_elements(dim_t *elems, const af_array arr)</div><div class="ttdoc">Get the total number of elements across all dimensions of the array. </div></div>
<div class="ttc" id="group__c__api__mat_htm_gadb499641bfc02dfa56a75be9ba237e3f"><div class="ttname"><a href="group__c__api__mat.htm#gadb499641bfc02dfa56a75be9ba237e3f">af_is_double</a></div><div class="ttdeci">AFAPI af_err af_is_double(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is double precision type. </div></div>
<div class="ttc" id="structaf__index__t_htm"><div class="ttname"><a href="structaf__index__t.htm">af_index_t</a></div><div class="ttdoc">Struct used to index an af_array. </div><div class="ttdef"><b>Definition:</b> <a href="index_8h_source.htm#l00022">index.h:22</a></div></div>
<div class="ttc" id="defines_8h_htm_a82b94dc53bbd100a0e8ca9dd356aaf4f"><div class="ttname"><a href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a></div><div class="ttdeci">af_err</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00071">defines.h:71</a></div></div>
<div class="ttc" id="namespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array. </div></div>
<div class="ttc" id="group__device__func__free__host_htm_ga3f1149a837a7ebbe8002d5d2244e3370"><div class="ttname"><a href="group__device__func__free__host.htm#ga3f1149a837a7ebbe8002d5d2244e3370">af_free_host</a></div><div class="ttdeci">AFAPI af_err af_free_host(void *ptr)</div></div>
<div class="ttc" id="defines_8h_htm_ab99909561d2b3c97b0f6a0935a6f7cc6"><div class="ttname"><a href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a></div><div class="ttdeci">af_source</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00232">defines.h:232</a></div></div>
<div class="ttc" id="defines_8h_htm"><div class="ttname"><a href="defines_8h.htm">defines.h</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_ga6040dc6f0eb127402fbf62c1165f0b9d"><div class="ttname"><a href="group__c__api__mat.htm#ga6040dc6f0eb127402fbf62c1165f0b9d">af_get_data_ptr</a></div><div class="ttdeci">AFAPI af_err af_get_data_ptr(void *data, const af_array arr)</div><div class="ttdoc">Copy data from an af_array to a C pointer. </div></div>
<div class="ttc" id="classaf_1_1dim4_htm_acfe9236f37131e50c17bfb81654c9efc"><div class="ttname"><a href="classaf_1_1dim4.htm#acfe9236f37131e50c17bfb81654c9efc">af::dim4::get</a></div><div class="ttdeci">dim_t * get()</div><div class="ttdoc">Returns the underlying pointer to the dim4 object. </div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00103">dim4.hpp:103</a></div></div>
<div class="ttc" id="defines_8h_htm_a7f026aa801b1fa6b85b0d992b414cccb"><div class="ttname"><a href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a></div><div class="ttdeci">long long dim_t</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00056">defines.h:56</a></div></div>
<div class="ttc" id="array_8h_htm_a6d8256045dabd15534382126773e729d"><div class="ttname"><a href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a></div><div class="ttdeci">#define BIN_OP(OP)</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01134">array.h:1134</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_ga890c476d90cb689f2835d2e4f74f5868"><div class="ttname"><a href="group__c__api__mat.htm#ga890c476d90cb689f2835d2e4f74f5868">af_get_manual_eval_flag</a></div><div class="ttdeci">AFAPI af_err af_get_manual_eval_flag(bool *flag)</div><div class="ttdoc">Get the manual eval flag. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga869f5e9331e9e010345de2589add7bae"><div class="ttname"><a href="group__c__api__mat.htm#ga869f5e9331e9e010345de2589add7bae">af_set_manual_eval_flag</a></div><div class="ttdeci">AFAPI af_err af_set_manual_eval_flag(bool flag)</div><div class="ttdoc">Turn the manual eval flag on or off. </div></div>
<div class="ttc" id="group__arith__func__bitand_htm_gab46e2e664e37c6514c4fd4c8fd13c3d2"><div class="ttname"><a href="group__arith__func__bitand.htm#gab46e2e664e37c6514c4fd4c8fd13c3d2">af::operator &amp;</a></div><div class="ttdeci">AFAPI array operator &amp;(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Performs an bitwise AND operation on two arrays or an array and a value. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga3b8f5cf6fce69aa1574544bc2d44d7d0"><div class="ttname"><a href="group__c__api__mat.htm#ga3b8f5cf6fce69aa1574544bc2d44d7d0">af_create_handle</a></div><div class="ttdeci">AFAPI af_err af_create_handle(af_array *arr, const unsigned ndims, const dim_t *const dims, const af_dtype type)</div><div class="ttdoc">Create af_array handle. </div></div>
<div class="ttc" id="classaf_1_1index_htm"><div class="ttname"><a href="classaf_1_1index.htm">af::index</a></div><div class="ttdoc">Wrapper for af_index. </div><div class="ttdef"><b>Definition:</b> <a href="index_8h_source.htm#l00052">index.h:52</a></div></div>
<div class="ttc" id="defines_8h_htm_ab23e67549eba2cfbaf0eb5f88f947e48"><div class="ttname"><a href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a></div><div class="ttdeci">#define AFAPI</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00038">defines.h:38</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_gabbe3249a355293daabd5907d7df67c6a"><div class="ttname"><a href="group__c__api__mat.htm#gabbe3249a355293daabd5907d7df67c6a">af_is_row</a></div><div class="ttdeci">AFAPI af_err af_is_row(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is row vector. </div></div>
<div class="ttc" id="group__index__func__index_htm_ga25f470817062b23ad3f74347ea44b17c"><div class="ttname"><a href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">af::copy</a></div><div class="ttdeci">AFAPI void copy(array &amp;dst, const array &amp;src, const index &amp;idx0, const index &amp;idx1=span, const index &amp;idx2=span, const index &amp;idx3=span)</div><div class="ttdoc">Copy the values of an input array based on index. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga1bd444b2c78a4f4731d4523a90200175"><div class="ttname"><a href="group__c__api__mat.htm#ga1bd444b2c78a4f4731d4523a90200175">af_is_single</a></div><div class="ttdeci">AFAPI af_err af_is_single(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is single precision type. </div></div>
<div class="ttc" id="group__c__api__mat_htm_gafef13633d184acc726ad9daca7a7bc99"><div class="ttname"><a href="group__c__api__mat.htm#gafef13633d184acc726ad9daca7a7bc99">af_write_array</a></div><div class="ttdeci">AFAPI af_err af_write_array(af_array arr, const void *data, const size_t bytes, af_source src)</div><div class="ttdoc">Copy data from a C pointer (host/device) to an existing array. </div></div>
<div class="ttc" id="group__data__mat_htm_ga121545fb637db409a523862cdb8ffe39"><div class="ttname"><a href="group__data__mat.htm#ga121545fb637db409a523862cdb8ffe39">af::eval</a></div><div class="ttdeci">array &amp; eval(array &amp;a)</div><div class="ttdoc">Evaluate an expression (nonblocking). </div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l01431">array.h:1431</a></div></div>
<div class="ttc" id="group__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer. </div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="group__data__mat_htm_ga11dba1a052f2fe004665237d9670e1f5"><div class="ttname"><a href="group__data__mat.htm#ga11dba1a052f2fe004665237d9670e1f5">af::setManualEvalFlag</a></div><div class="ttdeci">AFAPI void setManualEvalFlag(bool flag)</div><div class="ttdoc">Turn the manual eval flag on or off. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga9e08f4cda2471a477d2fa91c2356f72c"><div class="ttname"><a href="group__c__api__mat.htm#ga9e08f4cda2471a477d2fa91c2356f72c">af_eval_multiple</a></div><div class="ttdeci">AFAPI af_err af_eval_multiple(const int num, af_array *arrays)</div><div class="ttdoc">Evaluate multiple arrays together. </div></div>
<div class="ttc" id="namespaceaf_htm_acd654c72624253fcd7fd88fe5298aa9a"><div class="ttname"><a href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">af::cdouble</a></div><div class="ttdeci">af::af_cdouble cdouble</div><div class="ttdef"><b>Definition:</b> <a href="complex_8h_source.htm#l00045">complex.h:45</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_ga19c749e95314e1c77d816ad9952fb680"><div class="ttname"><a href="group__c__api__mat.htm#ga19c749e95314e1c77d816ad9952fb680">af_is_empty</a></div><div class="ttdeci">AFAPI af_err af_is_empty(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is empty. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga0f8e4d3732b5fd4b91ad51eec634f7a2"><div class="ttname"><a href="group__c__api__mat.htm#ga0f8e4d3732b5fd4b91ad51eec634f7a2">af_copy_array</a></div><div class="ttdeci">AFAPI af_err af_copy_array(af_array *arr, const af_array in)</div><div class="ttdoc">Deep copy an array to another. </div></div>
<div class="ttc" id="classaf_1_1array_htm_ae778ca527466663084f5797f23075603"><div class="ttname"><a href="classaf_1_1array.htm#ae778ca527466663084f5797f23075603">af::array::isreal</a></div><div class="ttdeci">bool isreal() const</div><div class="ttdoc">Returns true if the array type is neither c32 nor c64. </div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00722">array.h:722</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_ga834be32357616d8ab735087c6f681858"><div class="ttname"><a href="group__c__api__mat.htm#ga834be32357616d8ab735087c6f681858">af_create_array</a></div><div class="ttdeci">AFAPI af_err af_create_array(af_array *arr, const void *const data, const unsigned ndims, const dim_t *const dims, const af_dtype type)</div><div class="ttdoc">Create an af_array handle initialized with user defined data. </div></div>
<div class="ttc" id="defines_8h_htm_a8e45f4aa3dbea6a7aa021dbc50a4a089"><div class="ttname"><a href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a></div><div class="ttdeci">void * af_array</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00240">defines.h:240</a></div></div>
<div class="ttc" id="group__arith__func__sub_htm_gafa57cf4a71580be2bfd04a83a66d9835"><div class="ttname"><a href="group__arith__func__sub.htm#gafa57cf4a71580be2bfd04a83a66d9835">af::operator-</a></div><div class="ttdeci">AFAPI array operator-(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Subtracts two arrays or an array and a value. </div></div>
<div class="ttc" id="classaf_1_1array_htm_a6a8d7156cd3c66a9ca9f0f2688ee9f72"><div class="ttname"><a href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">af::array::eval</a></div><div class="ttdeci">void eval() const</div><div class="ttdoc">Evaluate any JIT expressions to generate data for the array. </div></div>
<div class="ttc" id="defines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdoc">32-bit floating point values </div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_gafaa0c1597ef34a7320ed589f80fdce10"><div class="ttname"><a href="group__c__api__mat.htm#gafaa0c1597ef34a7320ed589f80fdce10">af_is_real</a></div><div class="ttdeci">AFAPI af_err af_is_real(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is real type. </div></div>
<div class="ttc" id="group__c__api__mat_htm_gac96d3ca37a435874de22a76838a8cf54"><div class="ttname"><a href="group__c__api__mat.htm#gac96d3ca37a435874de22a76838a8cf54">af_is_sparse</a></div><div class="ttdeci">AFAPI af_err af_is_sparse(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is sparse. </div></div>
<div class="ttc" id="classaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape. </div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00025">dim4.hpp:25</a></div></div>
<div class="ttc" id="classaf_1_1array_1_1array__proxy_htm"><div class="ttname"><a href="classaf_1_1array_1_1array__proxy.htm">af::array::array_proxy</a></div><div class="ttdoc">Intermediate data class. </div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00056">array.h:56</a></div></div>
<div class="ttc" id="defines_8h_htm_ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba"><div class="ttname"><a href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></div><div class="ttdoc">Host pointer. </div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00234">defines.h:234</a></div></div>
<div class="ttc" id="defines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a></div><div class="ttdeci">af_dtype</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00210">defines.h:210</a></div></div>
<div class="ttc" id="group__c__api__mat_htm_gafae10fc1378b72404120572e21ff5d27"><div class="ttname"><a href="group__c__api__mat.htm#gafae10fc1378b72404120572e21ff5d27">af_is_bool</a></div><div class="ttdeci">AFAPI af_err af_is_bool(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is bool type. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga5eb0d277412a2beeffe7e7a9f89b98ea"><div class="ttname"><a href="group__c__api__mat.htm#ga5eb0d277412a2beeffe7e7a9f89b98ea">af_is_floating</a></div><div class="ttdeci">AFAPI af_err af_is_floating(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is floating precision type. </div></div>
<div class="ttc" id="group__c__api__mat_htm_ga6f2b3e689d07f5135dfc1ee6cf9825a3"><div class="ttname"><a href="group__c__api__mat.htm#ga6f2b3e689d07f5135dfc1ee6cf9825a3">af_is_realfloating</a></div><div class="ttdeci">AFAPI af_err af_is_realfloating(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is real floating point type. </div></div>
<div class="ttc" id="group__data__mat_htm_ga0c2f8602994b437164ee5783cedabfa9"><div class="ttname"><a href="group__data__mat.htm#ga0c2f8602994b437164ee5783cedabfa9">af::getManualEvalFlag</a></div><div class="ttdeci">AFAPI bool getManualEvalFlag()</div><div class="ttdoc">Get the manual eval flag. </div></div>
<div class="ttc" id="group__c__api__mat_htm_gad6c58648ed0db398e170dabf045e8309"><div class="ttname"><a href="group__c__api__mat.htm#gad6c58648ed0db398e170dabf045e8309">af_release_array</a></div><div class="ttdeci">AFAPI af_err af_release_array(af_array arr)</div><div class="ttdoc">Reduce the reference count of the af_array. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
