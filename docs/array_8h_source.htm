<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>array.h (2016-03-16 20:05:50 -0400, (build f53efc3)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('array_8h_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">array.h (2016-03-16 20:05:50 -0400, (build f53efc3))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="array_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*******************************************************</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> ********************************************************/</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="defines_8h.htm">af/defines.h</a>&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="seq_8h.htm">af/seq.h</a>&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="index_8h.htm">af/index.h</a>&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="traits_8hpp.htm">af/traits.hpp</a>&gt;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceaf.htm">af</a></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">class </span>dim4;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classaf_1_1array.htm">   27</a></span>&#160;    <span class="keyword">class </span><a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="classaf_1_1array.htm">array</a> {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>   arr;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordtype">void</span> set(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> tmp);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classaf_1_1array_1_1array__proxy.htm">   45</a></span>&#160;        <span class="keyword">class </span><a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keyword">struct </span>array_proxy_impl;    <span class="comment">//forward declaration</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            array_proxy_impl *impl;     <span class="comment">// implementation</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a>(<a class="code" href="classaf_1_1array.htm">array</a>&amp; par, <a class="code" href="structaf__index__t.htm">af_index_t</a> *ssss, <span class="keywordtype">bool</span> linear = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a> &amp;other);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#if __cplusplus &gt; 199711L</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a>(<a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a> &amp;&amp;other);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a> &amp; operator=(<a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a> &amp;&amp;other);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            ~<a class="code" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a>();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="comment">// Implicit conversion operators</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">operator</span> <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keyword">operator</span> <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>();</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">#define ASSIGN(OP)                                                  \</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const array_proxy &amp;a);         \</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const array &amp;a);               \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const double &amp;a);              \</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const cdouble &amp;a);             \</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const cfloat &amp;a);              \</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const float &amp;a);               \</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const int &amp;a);                 \</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned &amp;a);            \</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const bool &amp;a);                \</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const char &amp;a);                \</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned char &amp;a);       \</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const long  &amp;a);               \</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned long &amp;a);       \</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const long long  &amp;a);          \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned long long &amp;a);  \</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(=)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(+=)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(-=)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(*=)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(/=)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#undef ASSIGN</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 32</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#define ASSIGN(OP)                                                  \</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const short &amp;a);               \</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">            array_proxy&amp; operator OP(const unsigned short &amp;a);      \</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(=)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(+=)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(-=)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(*=)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(/=)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#undef ASSIGN</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">// af::array member functions. same behavior as those below</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> <span class="keyword">get</span>();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> <span class="keyword">get</span>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> elements() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T* host() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordtype">void</span> host(<span class="keywordtype">void</span> *ptr) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <a class="code" href="classaf_1_1dim4.htm">dim4</a> dims() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dims(<span class="keywordtype">unsigned</span> dim) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordtype">unsigned</span> numdims() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordtype">size_t</span> bytes() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <a class="code" href="classaf_1_1array.htm">array</a> <a class="code" href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">copy</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordtype">bool</span> isempty() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordtype">bool</span> isscalar() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordtype">bool</span> isvector() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordtype">bool</span> isrow() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordtype">bool</span> iscolumn() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordtype">bool</span> iscomplex() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classaf_1_1array_1_1array__proxy.htm#abddfbe553d7a512bdcfb064f1ca65c79">  118</a></span>&#160;            <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm#abddfbe553d7a512bdcfb064f1ca65c79">isreal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !iscomplex(); }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordtype">bool</span> isdouble() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordtype">bool</span> issingle() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordtype">bool</span> isrealfloating() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordtype">bool</span> isfloating() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordtype">bool</span> isinteger() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordtype">bool</span> isbool() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <a class="code" href="classaf_1_1array.htm">array</a> as(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <a class="code" href="classaf_1_1array.htm">array</a> T() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <a class="code" href="classaf_1_1array.htm">array</a> H() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T scalar() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T* device() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordtype">void</span> unlock() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 31</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordtype">void</span> lock() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> row(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> row(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> rows(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> rows(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> col(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> col(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> cols(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> cols(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slice(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slice(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                  <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slices(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slices(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        };</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">//array(af_array in, const array *par, af_index_t seqs[4]);</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"></span>        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">explicit</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; in);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keyword">explicit</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1dim4.htm">dim4</a>&amp; dims, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty = <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1,</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2,</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3,</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keyword">explicit</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1dim4.htm">dim4</a>&amp; dims,</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;              <span class="keyword">const</span> T *pointer, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; input, <span class="keyword">const</span> <a class="code" href="classaf_1_1dim4.htm">dim4</a>&amp; dims);</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a>(  <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; input,</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1 = 1,</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2 = 1, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3 = 1);</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> <span class="keyword">get</span>();</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> <span class="keyword">get</span>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> elements() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T* host() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="keywordtype">void</span> host(<span class="keywordtype">void</span> *ptr) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keywordtype">void</span> write(<span class="keyword">const</span> T *ptr, <span class="keyword">const</span> <span class="keywordtype">size_t</span> bytes, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src = <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <a class="code" href="classaf_1_1dim4.htm">dim4</a> dims() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dims(<span class="keywordtype">unsigned</span> dim) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        <span class="keywordtype">unsigned</span> numdims() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        <span class="keywordtype">size_t</span> bytes() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> <a class="code" href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">copy</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="keywordtype">bool</span> isempty() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <span class="keywordtype">bool</span> isscalar() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordtype">bool</span> isvector() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        <span class="keywordtype">bool</span> isrow() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordtype">bool</span> iscolumn() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <span class="keywordtype">bool</span> iscomplex() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div>
<div class="line"><a name="l00620"></a><span class="lineno"><a class="line" href="group__method__mat.htm#gabddfbe553d7a512bdcfb064f1ca65c79">  620</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="group__method__mat.htm#gabddfbe553d7a512bdcfb064f1ca65c79">isreal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !iscomplex(); }</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keywordtype">bool</span> isdouble() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keywordtype">bool</span> issingle() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <span class="keywordtype">bool</span> isrealfloating() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        <span class="keywordtype">bool</span> isfloating() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keywordtype">bool</span> isinteger() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="keywordtype">bool</span> isbool() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T scalar() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T* device() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        <span class="comment">// INDEXING</span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <span class="comment">// Single arguments</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> operator()(<span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s0);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> operator()(<span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> operator()(<span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s0,</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s1,</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s2 = <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>,</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s3 = <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> operator()(<span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s0,</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s1,</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s2 = <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>,</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classaf_1_1index.htm">index</a> &amp;s3 = <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> row(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>);</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> row(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>) <span class="keyword">const</span>; </div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> rows(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> rows(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>; </div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> col(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>);</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> col(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>) <span class="keyword">const</span>; </div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> cols(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> cols(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>; </div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slice(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slice(<span class="keywordtype">int</span> <a class="code" href="classaf_1_1index.htm">index</a>) <span class="keyword">const</span>; </div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;              <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slices(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last);</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a> slices(<span class="keywordtype">int</span> first, <span class="keywordtype">int</span> last) <span class="keyword">const</span>; </div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> as(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        ~<a class="code" href="classaf_1_1array.htm">array</a>();</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> T() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <a class="code" href="classaf_1_1array.htm">array</a> H() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;</div>
<div class="line"><a name="l00849"></a><span class="lineno"><a class="line" href="array_8h.htm#acb0880937255dff0ba9968e7fc4a0e44">  849</a></span>&#160;<span class="preprocessor">#define ASSIGN_(OP)                                                                     \</span></div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="preprocessor">        array&amp; OP(const array &amp;val);                                                    \</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="preprocessor">        array&amp; OP(const double &amp;val);                \</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="preprocessor">        array&amp; OP(const cdouble &amp;val);               \</span></div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="preprocessor">        array&amp; OP(const cfloat &amp;val);                \</span></div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="preprocessor">        array&amp; OP(const float &amp;val);                 \</span></div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="preprocessor">        array&amp; OP(const int &amp;val);                   \</span></div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="preprocessor">        array&amp; OP(const unsigned &amp;val);              \</span></div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="preprocessor">        array&amp; OP(const bool &amp;val);                  \</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="preprocessor">        array&amp; OP(const char &amp;val);                  \</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="preprocessor">        array&amp; OP(const unsigned char &amp;val);         \</span></div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="preprocessor">        array&amp; OP(const long  &amp;val);                 \</span></div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="preprocessor">        array&amp; OP(const unsigned long &amp;val);         \</span></div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="preprocessor">        array&amp; OP(const long long  &amp;val);            \</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="preprocessor">        array&amp; OP(const unsigned long long &amp;val);    \</span></div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 32</span></div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="preprocessor">#define ASSIGN(OP)                                                                      \</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="preprocessor">        ASSIGN_(OP)                                                                     \</span></div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="preprocessor">        array&amp; OP(const short  &amp;val);                \</span></div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="preprocessor">        array&amp; OP(const unsigned short &amp;val);        \</span></div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="preprocessor">#define ASSIGN(OP) ASSIGN_(OP)</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(<span class="keyword">operator</span>=)</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(operator+=)</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(operator-=)</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(operator*=)</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        <a class="code" href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a>(operator/=)</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="preprocessor">#undef ASSIGN</span></div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="preprocessor">#undef ASSIGN_</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__arith__func__sub.htm#gafa57cf4a71580be2bfd04a83a66d9835">operator -</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;        <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> operator !() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        <span class="keywordtype">int</span> nonzeros() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        <span class="keywordtype">void</span> lock() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;        <span class="keywordtype">void</span> unlock() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    };</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <span class="comment">// end of class array</span></div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="preprocessor">#define BIN_OP_(OP)                                                                                                      \</span></div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const array&amp; rhs);                                                                 \</span></div>
<div class="line"><a name="l00980"></a><span class="lineno"><a class="line" href="array_8h.htm#a2c8e67e88a0a2815d1253276803deef4">  980</a></span>&#160;<span class="preprocessor">    AFAPI array OP (const bool&amp; lhs, const array&amp; rhs);                  \</span></div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="preprocessor">    AFAPI array OP (const int&amp; lhs, const array&amp; rhs);                   \</span></div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="preprocessor">    AFAPI array OP (const unsigned&amp; lhs, const array&amp; rhs);              \</span></div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="preprocessor">    AFAPI array OP (const char&amp; lhs, const array&amp; rhs);                  \</span></div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<span class="preprocessor">    AFAPI array OP (const unsigned char&amp; lhs, const array&amp; rhs);         \</span></div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="preprocessor">    AFAPI array OP (const long&amp; lhs, const array&amp; rhs);                  \</span></div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;<span class="preprocessor">    AFAPI array OP (const unsigned long&amp; lhs, const array&amp; rhs);         \</span></div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="preprocessor">    AFAPI array OP (const long long&amp; lhs, const array&amp; rhs);             \</span></div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="preprocessor">    AFAPI array OP (const unsigned long long&amp; lhs, const array&amp; rhs);    \</span></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="preprocessor">    AFAPI array OP (const double&amp; lhs, const array&amp; rhs);                \</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="preprocessor">    AFAPI array OP (const float&amp; lhs, const array&amp; rhs);                 \</span></div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="preprocessor">    AFAPI array OP (const cfloat&amp; lhs, const array&amp; rhs);                \</span></div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;<span class="preprocessor">    AFAPI array OP (const cdouble&amp; lhs, const array&amp; rhs);               \</span></div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const bool&amp; rhs);                  \</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const int&amp; rhs);                   \</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const unsigned&amp; rhs);              \</span></div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const char&amp; rhs);                  \</span></div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const unsigned char&amp; rhs);         \</span></div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const long&amp; rhs);                  \</span></div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const unsigned long&amp; rhs);         \</span></div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const long long&amp; rhs);             \</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const unsigned long long&amp; rhs);    \</span></div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const double&amp; rhs);                \</span></div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const float&amp; rhs);                 \</span></div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const cfloat&amp; rhs);                \</span></div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="preprocessor">    AFAPI array OP (const array&amp; lhs, const cdouble&amp; rhs);               \</span></div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 32</span></div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="preprocessor">#define BIN_OP(OP)                                                                                                       \</span></div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="preprocessor">        BIN_OP_(OP)                                                                                                      \</span></div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="preprocessor">        AFAPI array OP (const short&amp; lhs, const array&amp; rhs);             \</span></div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="preprocessor">        AFAPI array OP (const unsigned short&amp; lhs, const array&amp; rhs);    \</span></div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="preprocessor">        AFAPI array OP (const array&amp; lhs, const short&amp; rhs);             \</span></div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="preprocessor">        AFAPI array OP (const array&amp; lhs, const unsigned short&amp; rhs);    \</span></div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="preprocessor">#define BIN_OP(OP) BIN_OP_(OP)</span></div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(<span class="keyword">operator</span>+ )</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator- )</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator* )</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator/ )</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator==)</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator!=)</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&lt; )</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&lt;=)</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&gt; )</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&gt;=)</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&amp;&amp;)</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator||)</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator% )</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&amp; )</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator| )</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator^ )</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&lt;&lt;)</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <a class="code" href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a>(operator&gt;&gt;)</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;<span class="preprocessor">#undef BIN_OP</span></div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<span class="preprocessor">#undef BIN_OP_</span></div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <span class="keyword">inline</span> <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;<a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;a) { a.<a class="code" href="group__method__mat.htm#ga01195c59132e1b0af7655075ba770581">eval</a>(); <span class="keywordflow">return</span> a; }</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;a, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;b) { <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a); b.eval(); }</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;a, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;b, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;c) { <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a, b); c.eval(); }</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;a, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;b, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;c, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;d) { <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a, b, c); d.eval(); }</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;a, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;b, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;c, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;d, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;e) { <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a, b, c, d); e.eval(); }</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(<a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;a, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;b, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;c, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;d, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;e, <a class="code" href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">array</a> &amp;f) { <a class="code" href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">eval</a>(a, b, c, d, e); f.eval(); }</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;}</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;<span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__construct__mat.htm#ga834be32357616d8ab735087c6f681858">af_create_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, <span class="keyword">const</span> <span class="keywordtype">void</span> * <span class="keyword">const</span> data, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> ndims, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> * <span class="keyword">const</span> dims, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type);</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__construct__mat.htm#ga3b8f5cf6fce69aa1574544bc2d44d7d0">af_create_handle</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> ndims, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> * <span class="keyword">const</span> dims, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type);</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga0f8e4d3732b5fd4b91ad51eec634f7a2">af_copy_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *arr, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in);</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gafef13633d184acc726ad9daca7a7bc99">af_write_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr, <span class="keyword">const</span> <span class="keywordtype">void</span> *data, <span class="keyword">const</span> <span class="keywordtype">size_t</span> bytes, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a> src);</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga6040dc6f0eb127402fbf62c1165f0b9d">af_get_data_ptr</a>(<span class="keywordtype">void</span> *data, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gad6c58648ed0db398e170dabf045e8309">af_release_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga7ed45b3f881c0f6c80c5cf2af886dbab">af_retain_array</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in);</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;<span class="preprocessor">#if AF_API_VERSION &gt;= 31</span></div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga34d9070b94c3bac673df7f13b9c718a2">af_get_data_ref_count</a>(<span class="keywordtype">int</span> *use_count, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in);</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga9de141bfc5936741d2496f59c1bac777">af_eval</a>(<a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in);</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga6845bbe4385a60a606b88f8130252c1f">af_get_elements</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *elems, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga0dda6898e1c0d9a43efb56cd6a988c9b">af_get_type</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> *type, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga8b90da50a532837d9763e301b2267348">af_get_dims</a>(<a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d0, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d1, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d2, <a class="code" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *d3,</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;                             <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gaefa019d932ff58c2a829ce87edddd2a8">af_get_numdims</a>(<span class="keywordtype">unsigned</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga19c749e95314e1c77d816ad9952fb680">af_is_empty</a>        (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gae3dfa6dc1c03c5efe7482bfc9c41266a">af_is_scalar</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gabbe3249a355293daabd5907d7df67c6a">af_is_row</a>          (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga184b5a5feb146f2a2a44fed36b35e435">af_is_column</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga00a23c7dd281fdcdec10b8395e611154">af_is_vector</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a>      (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gafaa0c1597ef34a7320ed589f80fdce10">af_is_real</a>         (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gadb499641bfc02dfa56a75be9ba237e3f">af_is_double</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga1bd444b2c78a4f4731d4523a90200175">af_is_single</a>       (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga6f2b3e689d07f5135dfc1ee6cf9825a3">af_is_realfloating</a> (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga5eb0d277412a2beeffe7e7a9f89b98ea">af_is_floating</a>     (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#ga768e8326a6aaa81c6543949afc781af2">af_is_integer</a>      (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    <a class="code" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="code" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> <a class="code" href="group__method__mat.htm#gafae10fc1378b72404120572e21ff5d27">af_is_bool</a>         (<span class="keywordtype">bool</span> *result, <span class="keyword">const</span> <a class="code" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr);</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;}</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="traits_8hpp_htm"><div class="ttname"><a href="traits_8hpp.htm">traits.hpp</a></div></div>
<div class="ttc" id="group__method__mat_htm_gabbe3249a355293daabd5907d7df67c6a"><div class="ttname"><a href="group__method__mat.htm#gabbe3249a355293daabd5907d7df67c6a">af_is_row</a></div><div class="ttdeci">AFAPI af_err af_is_row(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is row vector. </div></div>
<div class="ttc" id="group__method__mat_htm_gafaa0c1597ef34a7320ed589f80fdce10"><div class="ttname"><a href="group__method__mat.htm#gafaa0c1597ef34a7320ed589f80fdce10">af_is_real</a></div><div class="ttdeci">AFAPI af_err af_is_real(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is real type. </div></div>
<div class="ttc" id="namespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> algorithm.h:14</div></div>
<div class="ttc" id="group__method__mat_htm_ga6f2b3e689d07f5135dfc1ee6cf9825a3"><div class="ttname"><a href="group__method__mat.htm#ga6f2b3e689d07f5135dfc1ee6cf9825a3">af_is_realfloating</a></div><div class="ttdeci">AFAPI af_err af_is_realfloating(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is real floating point type. </div></div>
<div class="ttc" id="group__method__mat_htm_ga0f8e4d3732b5fd4b91ad51eec634f7a2"><div class="ttname"><a href="group__method__mat.htm#ga0f8e4d3732b5fd4b91ad51eec634f7a2">af_copy_array</a></div><div class="ttdeci">AFAPI af_err af_copy_array(af_array *arr, const af_array in)</div><div class="ttdoc">Deep copy an array to another. </div></div>
<div class="ttc" id="seq_8h_htm"><div class="ttname"><a href="seq_8h.htm">seq.h</a></div></div>
<div class="ttc" id="group__method__mat_htm_ga6040dc6f0eb127402fbf62c1165f0b9d"><div class="ttname"><a href="group__method__mat.htm#ga6040dc6f0eb127402fbf62c1165f0b9d">af_get_data_ptr</a></div><div class="ttdeci">AFAPI af_err af_get_data_ptr(void *data, const af_array arr)</div><div class="ttdoc">Copy data from an af_array to a C pointer. </div></div>
<div class="ttc" id="array_8h_htm_a96147e5f8a7b6037405defdd7e190dd8"><div class="ttname"><a href="array_8h.htm#a96147e5f8a7b6037405defdd7e190dd8">ASSIGN</a></div><div class="ttdeci">#define ASSIGN(OP)</div><div class="ttdoc">(const array &) </div><div class="ttdef"><b>Definition:</b> array.h:882</div></div>
<div class="ttc" id="group__method__mat_htm_gacd8a5edf6467340d0b40341be9f677e9"><div class="ttname"><a href="group__method__mat.htm#gacd8a5edf6467340d0b40341be9f677e9">af_is_complex</a></div><div class="ttdeci">AFAPI af_err af_is_complex(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is complex type. </div></div>
<div class="ttc" id="group__method__mat_htm_ga01195c59132e1b0af7655075ba770581"><div class="ttname"><a href="group__method__mat.htm#ga01195c59132e1b0af7655075ba770581">af::array::eval</a></div><div class="ttdeci">void eval() const </div><div class="ttdoc">Evaluate any JIT expressions to generate data for the array. </div></div>
<div class="ttc" id="classaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container. </div><div class="ttdef"><b>Definition:</b> array.h:27</div></div>
<div class="ttc" id="util_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
<div class="ttc" id="group__method__mat_htm_gafae10fc1378b72404120572e21ff5d27"><div class="ttname"><a href="group__method__mat.htm#gafae10fc1378b72404120572e21ff5d27">af_is_bool</a></div><div class="ttdeci">AFAPI af_err af_is_bool(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is bool type. </div></div>
<div class="ttc" id="group__method__mat_htm_gadb499641bfc02dfa56a75be9ba237e3f"><div class="ttname"><a href="group__method__mat.htm#gadb499641bfc02dfa56a75be9ba237e3f">af_is_double</a></div><div class="ttdeci">AFAPI af_err af_is_double(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is double precision type. </div></div>
<div class="ttc" id="group__method__mat_htm_ga00a23c7dd281fdcdec10b8395e611154"><div class="ttname"><a href="group__method__mat.htm#ga00a23c7dd281fdcdec10b8395e611154">af_is_vector</a></div><div class="ttdeci">AFAPI af_err af_is_vector(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is a vector. </div></div>
<div class="ttc" id="group__method__mat_htm_ga768e8326a6aaa81c6543949afc781af2"><div class="ttname"><a href="group__method__mat.htm#ga768e8326a6aaa81c6543949afc781af2">af_is_integer</a></div><div class="ttdeci">AFAPI af_err af_is_integer(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is integer type. </div></div>
<div class="ttc" id="namespaceafcl_htm_a5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="namespaceafcl.htm#a5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer. </div><div class="ttdef"><b>Definition:</b> opencl.h:337</div></div>
<div class="ttc" id="index_8h_htm"><div class="ttname"><a href="index_8h.htm">index.h</a></div></div>
<div class="ttc" id="group__method__mat_htm_ga121545fb637db409a523862cdb8ffe39"><div class="ttname"><a href="group__method__mat.htm#ga121545fb637db409a523862cdb8ffe39">af::eval</a></div><div class="ttdeci">array &amp; eval(array &amp;a)</div><div class="ttdoc">Evaluate an expression (nonblocking). </div><div class="ttdef"><b>Definition:</b> array.h:1283</div></div>
<div class="ttc" id="structaf__index__t_htm"><div class="ttname"><a href="structaf__index__t.htm">af_index_t</a></div><div class="ttdoc">Struct used while indexing af_array. </div><div class="ttdef"><b>Definition:</b> index.h:23</div></div>
<div class="ttc" id="defines_8h_htm_a82b94dc53bbd100a0e8ca9dd356aaf4f"><div class="ttname"><a href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a></div><div class="ttdeci">af_err</div><div class="ttdef"><b>Definition:</b> defines.h:67</div></div>
<div class="ttc" id="namespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div></div>
<div class="ttc" id="group__method__mat_htm_gabddfbe553d7a512bdcfb064f1ca65c79"><div class="ttname"><a href="group__method__mat.htm#gabddfbe553d7a512bdcfb064f1ca65c79">af::array::isreal</a></div><div class="ttdeci">bool isreal() const </div><div class="ttdoc">Returns true if the array type is neither c32 nor c64. </div><div class="ttdef"><b>Definition:</b> array.h:620</div></div>
<div class="ttc" id="defines_8h_htm_ab99909561d2b3c97b0f6a0935a6f7cc6"><div class="ttname"><a href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a></div><div class="ttdeci">af_source</div><div class="ttdef"><b>Definition:</b> defines.h:218</div></div>
<div class="ttc" id="defines_8h_htm"><div class="ttname"><a href="defines_8h.htm">defines.h</a></div></div>
<div class="ttc" id="group__method__mat_htm_ga0dda6898e1c0d9a43efb56cd6a988c9b"><div class="ttname"><a href="group__method__mat.htm#ga0dda6898e1c0d9a43efb56cd6a988c9b">af_get_type</a></div><div class="ttdeci">AFAPI af_err af_get_type(af_dtype *type, const af_array arr)</div><div class="ttdoc">Gets the type of an array. </div></div>
<div class="ttc" id="defines_8h_htm_a7f026aa801b1fa6b85b0d992b414cccb"><div class="ttname"><a href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a></div><div class="ttdeci">long long dim_t</div><div class="ttdef"><b>Definition:</b> defines.h:50</div></div>
<div class="ttc" id="array_8h_htm_a6d8256045dabd15534382126773e729d"><div class="ttname"><a href="array_8h.htm#a6d8256045dabd15534382126773e729d">BIN_OP</a></div><div class="ttdeci">#define BIN_OP(OP)</div><div class="ttdoc">(const array&, const array&) </div><div class="ttdef"><b>Definition:</b> array.h:1039</div></div>
<div class="ttc" id="classaf_1_1array_1_1array__proxy_htm_abddfbe553d7a512bdcfb064f1ca65c79"><div class="ttname"><a href="classaf_1_1array_1_1array__proxy.htm#abddfbe553d7a512bdcfb064f1ca65c79">af::array::array_proxy::isreal</a></div><div class="ttdeci">bool isreal() const </div><div class="ttdef"><b>Definition:</b> array.h:118</div></div>
<div class="ttc" id="group__method__mat_htm_ga1bd444b2c78a4f4731d4523a90200175"><div class="ttname"><a href="group__method__mat.htm#ga1bd444b2c78a4f4731d4523a90200175">af_is_single</a></div><div class="ttdeci">AFAPI af_err af_is_single(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is single precision type. </div></div>
<div class="ttc" id="group__method__mat_htm_ga8b90da50a532837d9763e301b2267348"><div class="ttname"><a href="group__method__mat.htm#ga8b90da50a532837d9763e301b2267348">af_get_dims</a></div><div class="ttdeci">AFAPI af_err af_get_dims(dim_t *d0, dim_t *d1, dim_t *d2, dim_t *d3, const af_array arr)</div><div class="ttdoc">Gets the dimseions of an array. </div></div>
<div class="ttc" id="classaf_1_1index_htm"><div class="ttname"><a href="classaf_1_1index.htm">af::index</a></div><div class="ttdoc">Wrapper for af_index. </div><div class="ttdef"><b>Definition:</b> index.h:52</div></div>
<div class="ttc" id="defines_8h_htm_ab23e67549eba2cfbaf0eb5f88f947e48"><div class="ttname"><a href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a></div><div class="ttdeci">#define AFAPI</div><div class="ttdef"><b>Definition:</b> defines.h:31</div></div>
<div class="ttc" id="group__method__mat_htm_gae3dfa6dc1c03c5efe7482bfc9c41266a"><div class="ttname"><a href="group__method__mat.htm#gae3dfa6dc1c03c5efe7482bfc9c41266a">af_is_scalar</a></div><div class="ttdeci">AFAPI af_err af_is_scalar(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is scalar, ie. </div></div>
<div class="ttc" id="group__method__mat_htm_ga6845bbe4385a60a606b88f8130252c1f"><div class="ttname"><a href="group__method__mat.htm#ga6845bbe4385a60a606b88f8130252c1f">af_get_elements</a></div><div class="ttdeci">AFAPI af_err af_get_elements(dim_t *elems, const af_array arr)</div><div class="ttdoc">Gets the number of elements in an array. </div></div>
<div class="ttc" id="group__index__func__index_htm_ga25f470817062b23ad3f74347ea44b17c"><div class="ttname"><a href="group__index__func__index.htm#ga25f470817062b23ad3f74347ea44b17c">af::copy</a></div><div class="ttdeci">AFAPI void copy(array &amp;dst, const array &amp;src, const index &amp;idx0, const index &amp;idx1=span, const index &amp;idx2=span, const index &amp;idx3=span)</div><div class="ttdoc">Copy the values of an input array based on index. </div></div>
<div class="ttc" id="group__method__mat_htm_gaefa019d932ff58c2a829ce87edddd2a8"><div class="ttname"><a href="group__method__mat.htm#gaefa019d932ff58c2a829ce87edddd2a8">af_get_numdims</a></div><div class="ttdeci">AFAPI af_err af_get_numdims(unsigned *result, const af_array arr)</div><div class="ttdoc">Gets the number of dimensions of an array. </div></div>
<div class="ttc" id="group__method__mat_htm_ga19c749e95314e1c77d816ad9952fb680"><div class="ttname"><a href="group__method__mat.htm#ga19c749e95314e1c77d816ad9952fb680">af_is_empty</a></div><div class="ttdeci">AFAPI af_err af_is_empty(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is empty. </div></div>
<div class="ttc" id="group__method__mat_htm_gad6c58648ed0db398e170dabf045e8309"><div class="ttname"><a href="group__method__mat.htm#gad6c58648ed0db398e170dabf045e8309">af_release_array</a></div><div class="ttdeci">AFAPI af_err af_release_array(af_array arr)</div><div class="ttdoc">Reduce the reference count of the af_array. </div></div>
<div class="ttc" id="group__construct__mat_htm_ga834be32357616d8ab735087c6f681858"><div class="ttname"><a href="group__construct__mat.htm#ga834be32357616d8ab735087c6f681858">af_create_array</a></div><div class="ttdeci">AFAPI af_err af_create_array(af_array *arr, const void *const data, const unsigned ndims, const dim_t *const dims, const af_dtype type)</div><div class="ttdoc">Create an af_array handle initialized with user defined data. </div></div>
<div class="ttc" id="group__method__mat_htm_ga184b5a5feb146f2a2a44fed36b35e435"><div class="ttname"><a href="group__method__mat.htm#ga184b5a5feb146f2a2a44fed36b35e435">af_is_column</a></div><div class="ttdeci">AFAPI af_err af_is_column(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is a column vector. </div></div>
<div class="ttc" id="group__method__mat_htm_ga7ed45b3f881c0f6c80c5cf2af886dbab"><div class="ttname"><a href="group__method__mat.htm#ga7ed45b3f881c0f6c80c5cf2af886dbab">af_retain_array</a></div><div class="ttdeci">AFAPI af_err af_retain_array(af_array *out, const af_array in)</div><div class="ttdoc">Increments an af_array reference count. </div></div>
<div class="ttc" id="defines_8h_htm_a8e45f4aa3dbea6a7aa021dbc50a4a089"><div class="ttname"><a href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a></div><div class="ttdeci">void * af_array</div><div class="ttdef"><b>Definition:</b> defines.h:226</div></div>
<div class="ttc" id="group__arith__func__sub_htm_gafa57cf4a71580be2bfd04a83a66d9835"><div class="ttname"><a href="group__arith__func__sub.htm#gafa57cf4a71580be2bfd04a83a66d9835">af::operator-</a></div><div class="ttdeci">AFAPI array operator-(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Subtracts two arrays or an array and a value. </div></div>
<div class="ttc" id="group__method__mat_htm_gafef13633d184acc726ad9daca7a7bc99"><div class="ttname"><a href="group__method__mat.htm#gafef13633d184acc726ad9daca7a7bc99">af_write_array</a></div><div class="ttdeci">AFAPI af_err af_write_array(af_array arr, const void *data, const size_t bytes, af_source src)</div><div class="ttdoc">Copy data from a C pointer (host/device) to an existing array. </div></div>
<div class="ttc" id="group__construct__mat_htm_ga3b8f5cf6fce69aa1574544bc2d44d7d0"><div class="ttname"><a href="group__construct__mat.htm#ga3b8f5cf6fce69aa1574544bc2d44d7d0">af_create_handle</a></div><div class="ttdeci">AFAPI af_err af_create_handle(af_array *arr, const unsigned ndims, const dim_t *const dims, const af_dtype type)</div><div class="ttdoc">Create af_array handle. </div></div>
<div class="ttc" id="defines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdoc">32-bit floating point values </div><div class="ttdef"><b>Definition:</b> defines.h:200</div></div>
<div class="ttc" id="classaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdef"><b>Definition:</b> dim4.hpp:26</div></div>
<div class="ttc" id="group__method__mat_htm_ga34d9070b94c3bac673df7f13b9c718a2"><div class="ttname"><a href="group__method__mat.htm#ga34d9070b94c3bac673df7f13b9c718a2">af_get_data_ref_count</a></div><div class="ttdeci">AFAPI af_err af_get_data_ref_count(int *use_count, const af_array in)</div><div class="ttdoc">Get the use count of af_array </div></div>
<div class="ttc" id="classaf_1_1array_1_1array__proxy_htm"><div class="ttname"><a href="classaf_1_1array_1_1array__proxy.htm">af::array::array_proxy</a></div><div class="ttdoc">Intermediate data class. </div><div class="ttdef"><b>Definition:</b> array.h:45</div></div>
<div class="ttc" id="defines_8h_htm_ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba"><div class="ttname"><a href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></div><div class="ttdoc">Host pointer. </div><div class="ttdef"><b>Definition:</b> defines.h:220</div></div>
<div class="ttc" id="group__method__mat_htm_ga5eb0d277412a2beeffe7e7a9f89b98ea"><div class="ttname"><a href="group__method__mat.htm#ga5eb0d277412a2beeffe7e7a9f89b98ea">af_is_floating</a></div><div class="ttdeci">AFAPI af_err af_is_floating(bool *result, const af_array arr)</div><div class="ttdoc">Check if an array is floating precision type. </div></div>
<div class="ttc" id="defines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a></div><div class="ttdeci">af_dtype</div><div class="ttdef"><b>Definition:</b> defines.h:199</div></div>
<div class="ttc" id="group__method__mat_htm_ga9de141bfc5936741d2496f59c1bac777"><div class="ttname"><a href="group__method__mat.htm#ga9de141bfc5936741d2496f59c1bac777">af_eval</a></div><div class="ttdeci">AFAPI af_err af_eval(af_array in)</div><div class="ttdoc">Evaluate any expressions in the Array. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
