<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: sparse</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__sparse__func__create.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">sparse<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__linalg__mat.htm">Linear Algebra</a> &raquo;  &#124; <a class="el" href="group__sparse__func.htm">Sparse functions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Create a sparse array.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gae9a843c7e93b05e6b090ca32b271ebe9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">sparse</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="classaf_1_1array.htm">array</a> values, const <a class="el" href="classaf_1_1array.htm">array</a> rowIdx, const <a class="el" href="classaf_1_1array.htm">array</a> colIdx, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>)</td></tr>
<tr class="memdesc:gae9a843c7e93b05e6b090ca32b271ebe9"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array.  <a href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">More...</a><br /></td></tr>
<tr class="separator:gae9a843c7e93b05e6b090ca32b271ebe9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae4621e58bfaf6d80668309824fde86c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gae4621e58bfaf6d80668309824fde86c0">sparse</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nNZ, const void *const values, const int *const rowIdx, const int *const colIdx, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>, const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:gae4621e58bfaf6d80668309824fde86c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts host or device arrays of values, row indices and column indices into a sparse array on the device.  <a href="group__sparse__func__create.htm#gae4621e58bfaf6d80668309824fde86c0">More...</a><br /></td></tr>
<tr class="separator:gae4621e58bfaf6d80668309824fde86c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0d367d8c9daf27b36a6981bbfcdb970"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gac0d367d8c9daf27b36a6981bbfcdb970">sparse</a> (const <a class="el" href="classaf_1_1array.htm">array</a> <a class="el" href="group__sparse__func__dense.htm#ga1f39a8de17f18750bfe1ec8812a743a8">dense</a>, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>)</td></tr>
<tr class="memdesc:gac0d367d8c9daf27b36a6981bbfcdb970"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts a dense <a class="el" href="classaf_1_1array.htm">af::array</a> into a sparse array.  <a href="group__sparse__func__create.htm#gac0d367d8c9daf27b36a6981bbfcdb970">More...</a><br /></td></tr>
<tr class="separator:gac0d367d8c9daf27b36a6981bbfcdb970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga42c5cf729a232c1cbbcfe0f664f3b986"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#ga42c5cf729a232c1cbbcfe0f664f3b986">af_create_sparse_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> values, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rowIdx, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> colIdx, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a> stype)</td></tr>
<tr class="memdesc:ga42c5cf729a232c1cbbcfe0f664f3b986"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array.  <a href="group__sparse__func__create.htm#ga42c5cf729a232c1cbbcfe0f664f3b986">More...</a><br /></td></tr>
<tr class="separator:ga42c5cf729a232c1cbbcfe0f664f3b986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a0ae91eea18203041d9f9131dbb99cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#ga9a0ae91eea18203041d9f9131dbb99cc">af_create_sparse_array_from_ptr</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nNZ, const void *const values, const int *const rowIdx, const int *const colIdx, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a> stype, const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a> src)</td></tr>
<tr class="memdesc:ga9a0ae91eea18203041d9f9131dbb99cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts host or device arrays of values, row indices and column indices into a sparse array on the device.  <a href="group__sparse__func__create.htm#ga9a0ae91eea18203041d9f9131dbb99cc">More...</a><br /></td></tr>
<tr class="separator:ga9a0ae91eea18203041d9f9131dbb99cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga52e3b2895cf9e9d697a06b4b44190d92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#ga52e3b2895cf9e9d697a06b4b44190d92">af_create_sparse_array_from_dense</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> dense, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a> stype)</td></tr>
<tr class="memdesc:ga52e3b2895cf9e9d697a06b4b44190d92"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts a dense <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> into a sparse array.  <a href="group__sparse__func__create.htm#ga52e3b2895cf9e9d697a06b4b44190d92">More...</a><br /></td></tr>
<tr class="separator:ga52e3b2895cf9e9d697a06b4b44190d92"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Create a sparse array. </p>
<p>The sparse creation function has 3 different types of inputs it can accept.</p><ol type="1">
<li>Independent <a class="el" href="classaf_1_1array.htm">af::array</a> for values, row indices and column indices.</li>
<li>Independent host or device native arrays for values, row indices and column indices.</li>
<li>A dense <a class="el" href="classaf_1_1array.htm">af::array</a>.</li>
</ol>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="ga42c5cf729a232c1cbbcfe0f664f3b986"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga42c5cf729a232c1cbbcfe0f664f3b986">&#9670;&nbsp;</a></span>af_create_sparse_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_sparse_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>colIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a>&#160;</td>
          <td class="paramname"><em>stype</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array. </p>
<dl class="section note"><dt>Note</dt><dd>This function only create references of these arrays into the sparse data structure and does not do deep copies.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nRows</td><td>is the number of rows in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nCols</td><td>is the number of columns in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>is the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> containing the non-zero elements of the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rowIdx</td><td>is the row indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">colIdx</td><td>is the column indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="ga52e3b2895cf9e9d697a06b4b44190d92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga52e3b2895cf9e9d697a06b4b44190d92">&#9670;&nbsp;</a></span>af_create_sparse_array_from_dense()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_sparse_array_from_dense </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>dense</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a>&#160;</td>
          <td class="paramname"><em>stype</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts a dense <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> into a sparse array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> for the sparse array with the given storage type </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dense</td><td>is the source dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="ga9a0ae91eea18203041d9f9131dbb99cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9a0ae91eea18203041d9f9131dbb99cc">&#9670;&nbsp;</a></span>af_create_sparse_array_from_ptr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_sparse_array_from_ptr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nNZ</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int *const&#160;</td>
          <td class="paramname"><em>rowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int *const&#160;</td>
          <td class="paramname"><em>colIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a>&#160;</td>
          <td class="paramname"><em>stype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a>&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts host or device arrays of values, row indices and column indices into a sparse array on the device. </p>
<dl class="section note"><dt>Note</dt><dd>The rules for deep copy/shallow copy/reference are the same as for creating a regular <a class="el" href="classaf_1_1array.htm">af::array</a>.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nRows</td><td>is the number of rows in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nCols</td><td>is the number of columns in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nNZ</td><td>is the number of non zero elements in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>is the host array containing the non-zero elements of the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rowIdx</td><td>is the row indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">colIdx</td><td>is the column indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>is the data type for the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a> if inputs are host arrays and <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a> if the arrays are device arrays.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="gac0d367d8c9daf27b36a6981bbfcdb970"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac0d367d8c9daf27b36a6981bbfcdb970">&#9670;&nbsp;</a></span>sparse() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::sparse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td>
          <td class="paramname"><em>dense</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a>&#160;</td>
          <td class="paramname"><em>stype</em> = <code><a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts a dense <a class="el" href="classaf_1_1array.htm">af::array</a> into a sparse array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dense</td><td>is the source dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array with the given storage type</dd></dl>
<div class="fragment"><div class="line"> </div>
<div class="line">    <span class="comment">// dense</span></div>
<div class="line">    <span class="comment">//     0     0     0     0</span></div>
<div class="line">    <span class="comment">//     5     8     0     0</span></div>
<div class="line">    <span class="comment">//     0     0     3     0</span></div>
<div class="line">    <span class="comment">//     0     6     0     0</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Convert dense af::array to its sparse (CSR) representation.</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">sparse</a> = <a class="code" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">af::sparse</a>(<a class="code" href="group__sparse__func__dense.htm#ga1f39a8de17f18750bfe1ec8812a743a8">dense</a>, <a class="code" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// sparse</span></div>
<div class="line">    <span class="comment">//     values:  [ 5.0, 8.0, 3.0, 6.0 ]</span></div>
<div class="line">    <span class="comment">//     row_ptr: [ 0, 0, 2, 3, 4 ]</span></div>
<div class="line">    <span class="comment">//     col_idx: [ 0, 1, 2, 1 ]</span></div>
<div class="line"> </div>
</div><!-- fragment -->
</div>
</div>
<a id="gae9a843c7e93b05e6b090ca32b271ebe9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae9a843c7e93b05e6b090ca32b271ebe9">&#9670;&nbsp;</a></span>sparse() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::sparse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td>
          <td class="paramname"><em>rowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td>
          <td class="paramname"><em>colIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a>&#160;</td>
          <td class="paramname"><em>stype</em> = <code><a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array. </p>
<dl class="section note"><dt>Note</dt><dd>This function only create references of these arrays into the sparse data structure and does not do deep copies.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nRows</td><td>is the number of rows in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nCols</td><td>is the number of columns in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>is the <a class="el" href="classaf_1_1array.htm">af::array</a> containing the non-zero elements of the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rowIdx</td><td>is the row indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">colIdx</td><td>is the column indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array</dd></dl>
<div class="fragment"><div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> v[] = { 5, 8, 3, 6 };</div>
<div class="line">    <span class="keywordtype">int</span>   r[] = { 0, 0, 2, 3, 4 };</div>
<div class="line">    <span class="keywordtype">int</span>   c[] = { 0, 1, 2, 1 };</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> M = 4, N = 4, nnz = 4;</div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>    vals = <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(dim4(nnz), v);</div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> row_ptr = <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(dim4(M+1), r);</div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> col_idx = <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(dim4(nnz), c);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create sparse array (CSR) from af::arrays containing values,</span></div>
<div class="line">    <span class="comment">// row pointers, and column indices.</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">sparse</a> = <a class="code" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">af::sparse</a>(M, N, vals, row_ptr, col_idx, <a class="code" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// sparse</span></div>
<div class="line">    <span class="comment">//     values:  [ 5.0, 8.0, 3.0, 6.0 ]</span></div>
<div class="line">    <span class="comment">//     row_ptr: [ 0, 0, 2, 3, 4 ]</span></div>
<div class="line">    <span class="comment">//     col_idx: [ 0, 1, 2, 1 ]</span></div>
<div class="line"> </div>
</div><!-- fragment --><dl class="section examples"><dt>Examples</dt><dd><a class="el" href="benchmarks_2cg_8cpp-example.htm#a7">benchmarks/cg.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="gae4621e58bfaf6d80668309824fde86c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae4621e58bfaf6d80668309824fde86c0">&#9670;&nbsp;</a></span>sparse() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::sparse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nNZ</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int *const&#160;</td>
          <td class="paramname"><em>rowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int *const&#160;</td>
          <td class="paramname"><em>colIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a>&#160;</td>
          <td class="paramname"><em>stype</em> = <code><a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts host or device arrays of values, row indices and column indices into a sparse array on the device. </p>
<dl class="section note"><dt>Note</dt><dd>The rules for deep copy/shallow copy/reference are the same as for creating a regular <a class="el" href="classaf_1_1array.htm">af::array</a>.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nRows</td><td>is the number of rows in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nCols</td><td>is the number of columns in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nNZ</td><td>is the number of non zero elements in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>is the host array containing the non-zero elements of the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rowIdx</td><td>is the row indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">colIdx</td><td>is the column indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>is the data type for the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a> if inputs are host arrays and <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a> if the arrays are device arrays. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array</dd></dl>
<div class="fragment"><div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span>  vals[] = { 5, 8, 3, 6 };</div>
<div class="line">    <span class="keywordtype">int</span> row_ptr[] = { 0, 0, 2, 3, 4 };</div>
<div class="line">    <span class="keywordtype">int</span> col_idx[] = { 0, 1, 2, 1 };</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> M = 4, N = 4, nnz = 4;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create sparse array (CSR) from host pointers to values, row</span></div>
<div class="line">    <span class="comment">// pointers, and column indices.</span></div>
<div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> <a class="code" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">sparse</a> = <a class="code" href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">af::sparse</a>(M, N, nnz, vals, row_ptr, col_idx, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="code" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>, <a class="code" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// sparse</span></div>
<div class="line">    <span class="comment">//     values:  [ 5.0, 8.0, 3.0, 6.0 ]</span></div>
<div class="line">    <span class="comment">//     row_ptr: [ 0, 0, 2, 3, 4 ]</span></div>
<div class="line">    <span class="comment">//     col_idx: [ 0, 1, 2, 1 ]</span></div>
<div class="line"> </div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="adefines_8h_htm_ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba"><div class="ttname"><a href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></div><div class="ttdeci">@ afHost</div><div class="ttdoc">Host pointer.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00234">defines.h:234</a></div></div>
<div class="ttc" id="agroup__sparse__func__create_htm_gae9a843c7e93b05e6b090ca32b271ebe9"><div class="ttname"><a href="group__sparse__func__create.htm#gae9a843c7e93b05e6b090ca32b271ebe9">af::sparse</a></div><div class="ttdeci">AFAPI array sparse(const dim_t nRows, const dim_t nCols, const array values, const array rowIdx, const array colIdx, const af::storage stype=AF_STORAGE_CSR)</div><div class="ttdoc">This function converts af::array of values, row indices and column indices into a sparse array.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="adefines_8h_htm_a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b"><div class="ttname"><a href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a></div><div class="ttdeci">@ AF_STORAGE_CSR</div><div class="ttdoc">Storage type is CSR.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00491">defines.h:491</a></div></div>
<div class="ttc" id="agroup__sparse__func__dense_htm_ga1f39a8de17f18750bfe1ec8812a743a8"><div class="ttname"><a href="group__sparse__func__dense.htm#ga1f39a8de17f18750bfe1ec8812a743a8">af::dense</a></div><div class="ttdeci">AFAPI array dense(const array sparse)</div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
