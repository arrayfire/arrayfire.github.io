<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: sparse</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__sparse__func__create.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">sparse<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__linalg__mat.htm">Linear Algebra</a> &raquo; <a class="el" href="group__sparse__func.htm">Sparse functions</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Create a sparse array.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gad804ab05ba8ecadf15104e5a1e3d3d09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">sparse</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="classaf_1_1array.htm">array</a> values, const <a class="el" href="classaf_1_1array.htm">array</a> rowIdx, const <a class="el" href="classaf_1_1array.htm">array</a> colIdx, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>)</td></tr>
<tr class="memdesc:gad804ab05ba8ecadf15104e5a1e3d3d09"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array.  <a href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">More...</a><br /></td></tr>
<tr class="separator:gad804ab05ba8ecadf15104e5a1e3d3d09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga181b7d4904864f42876867cf19219c98"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#ga181b7d4904864f42876867cf19219c98">sparse</a> (const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nNZ, const void *const values, const int *const rowIdx, const int *const colIdx, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>, const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:ga181b7d4904864f42876867cf19219c98"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts host or device arrays of values, row indices and column indices into a sparse array on the device.  <a href="group__sparse__func__create.htm#ga181b7d4904864f42876867cf19219c98">More...</a><br /></td></tr>
<tr class="separator:ga181b7d4904864f42876867cf19219c98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf99b5c24ee2a3ab06f9ee201e3f943fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#gaf99b5c24ee2a3ab06f9ee201e3f943fb">sparse</a> (const <a class="el" href="classaf_1_1array.htm">array</a> <a class="el" href="group__sparse__func__dense.htm#ga613b7c7af7fb5bb7ae792cb056b7bd6d">dense</a>, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a> stype=<a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>)</td></tr>
<tr class="memdesc:gaf99b5c24ee2a3ab06f9ee201e3f943fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts a dense <a class="el" href="classaf_1_1array.htm">af::array</a> into a sparse array.  <a href="group__sparse__func__create.htm#gaf99b5c24ee2a3ab06f9ee201e3f943fb">More...</a><br /></td></tr>
<tr class="separator:gaf99b5c24ee2a3ab06f9ee201e3f943fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga42c5cf729a232c1cbbcfe0f664f3b986"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#ga42c5cf729a232c1cbbcfe0f664f3b986">af_create_sparse_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> values, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rowIdx, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> colIdx, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a> stype)</td></tr>
<tr class="memdesc:ga42c5cf729a232c1cbbcfe0f664f3b986"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array.  <a href="group__sparse__func__create.htm#ga42c5cf729a232c1cbbcfe0f664f3b986">More...</a><br /></td></tr>
<tr class="separator:ga42c5cf729a232c1cbbcfe0f664f3b986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a0ae91eea18203041d9f9131dbb99cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#ga9a0ae91eea18203041d9f9131dbb99cc">af_create_sparse_array_from_ptr</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nRows, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nCols, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> nNZ, const void *const values, const int *const rowIdx, const int *const colIdx, const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a> type, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a> stype, const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a> src)</td></tr>
<tr class="memdesc:ga9a0ae91eea18203041d9f9131dbb99cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts host or device arrays of values, row indices and column indices into a sparse array on the device.  <a href="group__sparse__func__create.htm#ga9a0ae91eea18203041d9f9131dbb99cc">More...</a><br /></td></tr>
<tr class="separator:ga9a0ae91eea18203041d9f9131dbb99cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga52e3b2895cf9e9d697a06b4b44190d92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm#ga52e3b2895cf9e9d697a06b4b44190d92">af_create_sparse_array_from_dense</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> dense, const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a> stype)</td></tr>
<tr class="memdesc:ga52e3b2895cf9e9d697a06b4b44190d92"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function converts a dense <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> into a sparse array.  <a href="group__sparse__func__create.htm#ga52e3b2895cf9e9d697a06b4b44190d92">More...</a><br /></td></tr>
<tr class="separator:ga52e3b2895cf9e9d697a06b4b44190d92"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Create a sparse array. </p>
<p >The sparse creation function has 3 different types of inputs it can accept.</p><ol type="1">
<li>Independent <a class="el" href="classaf_1_1array.htm">af::array</a> for values, row indices and column indices.</li>
<li>Independent host or device native arrays for values, row indices and column indices.</li>
<li>A dense <a class="el" href="classaf_1_1array.htm">af::array</a>.</li>
</ol>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="ga42c5cf729a232c1cbbcfe0f664f3b986" name="ga42c5cf729a232c1cbbcfe0f664f3b986"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga42c5cf729a232c1cbbcfe0f664f3b986">&#9670;&#160;</a></span>af_create_sparse_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_sparse_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>colIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a>&#160;</td>
          <td class="paramname"><em>stype</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array. </p>
<dl class="section note"><dt>Note</dt><dd>This function only create references of these arrays into the sparse data structure and does not do deep copies.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nRows</td><td>is the number of rows in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nCols</td><td>is the number of columns in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>is the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> containing the non-zero elements of the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rowIdx</td><td>is the row indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">colIdx</td><td>is the column indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="ga52e3b2895cf9e9d697a06b4b44190d92" name="ga52e3b2895cf9e9d697a06b4b44190d92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga52e3b2895cf9e9d697a06b4b44190d92">&#9670;&#160;</a></span>af_create_sparse_array_from_dense()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_sparse_array_from_dense </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>dense</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a>&#160;</td>
          <td class="paramname"><em>stype</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts a dense <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> into a sparse array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> for the sparse array with the given storage type </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dense</td><td>is the source dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="ga9a0ae91eea18203041d9f9131dbb99cc" name="ga9a0ae91eea18203041d9f9131dbb99cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9a0ae91eea18203041d9f9131dbb99cc">&#9670;&#160;</a></span>af_create_sparse_array_from_ptr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_create_sparse_array_from_ptr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nNZ</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int *const&#160;</td>
          <td class="paramname"><em>rowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int *const&#160;</td>
          <td class="paramname"><em>colIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">af_dtype</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af_storage</a>&#160;</td>
          <td class="paramname"><em>stype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af_source</a>&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts host or device arrays of values, row indices and column indices into a sparse array on the device. </p>
<dl class="section note"><dt>Note</dt><dd>The rules for deep copy/shallow copy/reference are the same as for creating a regular <a class="el" href="classaf_1_1array.htm">af::array</a>.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nRows</td><td>is the number of rows in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nCols</td><td>is the number of columns in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nNZ</td><td>is the number of non zero elements in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>is the host array containing the non-zero elements of the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rowIdx</td><td>is the row indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">colIdx</td><td>is the column indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>is the data type for the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a> if inputs are host arrays and <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a> if the arrays are device arrays.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="gaf99b5c24ee2a3ab06f9ee201e3f943fb" name="gaf99b5c24ee2a3ab06f9ee201e3f943fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf99b5c24ee2a3ab06f9ee201e3f943fb">&#9670;&#160;</a></span>sparse() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> sparse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td>
          <td class="paramname"><em>dense</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a>&#160;</td>
          <td class="paramname"><em>stype</em> = <code><a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts a dense <a class="el" href="classaf_1_1array.htm">af::array</a> into a sparse array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dense</td><td>is the source dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array with the given storage type</dd></dl>
<div class="fragment"><div class="line"> </div>
<div class="line">    <span class="comment">// dense</span></div>
<div class="line">    <span class="comment">//     0     0     0     0</span></div>
<div class="line">    <span class="comment">//     5     8     0     0</span></div>
<div class="line">    <span class="comment">//     0     0     3     0</span></div>
<div class="line">    <span class="comment">//     0     6     0     0</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Convert dense af::array to its sparse (CSR) representation.</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> <a class="code hl_function" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">sparse</a> = <a class="code hl_function" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">af::sparse</a>(<a class="code hl_function" href="group__sparse__func__dense.htm#ga613b7c7af7fb5bb7ae792cb056b7bd6d">dense</a>, <a class="code hl_enumvalue" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// sparse</span></div>
<div class="line">    <span class="comment">//     values:  [ 5.0, 8.0, 3.0, 6.0 ]</span></div>
<div class="line">    <span class="comment">//     row_ptr: [ 0, 0, 2, 3, 4 ]</span></div>
<div class="line">    <span class="comment">//     col_idx: [ 0, 1, 2, 1 ]</span></div>
<div class="line"> </div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
<div class="ttc" id="adefines_8h_htm_a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b"><div class="ttname"><a href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a></div><div class="ttdeci">@ AF_STORAGE_CSR</div><div class="ttdoc">Storage type is CSR.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00492">defines.h:492</a></div></div>
<div class="ttc" id="agroup__sparse__func__create_htm_gad804ab05ba8ecadf15104e5a1e3d3d09"><div class="ttname"><a href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">af::sparse</a></div><div class="ttdeci">AFAPI array sparse(const dim_t nRows, const dim_t nCols, const array values, const array rowIdx, const array colIdx, const af::storage stype=AF_STORAGE_CSR)</div><div class="ttdoc">This function converts af::array of values, row indices and column indices into a sparse array.</div></div>
<div class="ttc" id="agroup__sparse__func__dense_htm_ga613b7c7af7fb5bb7ae792cb056b7bd6d"><div class="ttname"><a href="group__sparse__func__dense.htm#ga613b7c7af7fb5bb7ae792cb056b7bd6d">af::dense</a></div><div class="ttdeci">AFAPI array dense(const array sparse)</div></div>
</div><!-- fragment --> 
</div>
</div>
<a id="gad804ab05ba8ecadf15104e5a1e3d3d09" name="gad804ab05ba8ecadf15104e5a1e3d3d09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad804ab05ba8ecadf15104e5a1e3d3d09">&#9670;&#160;</a></span>sparse() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> sparse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td>
          <td class="paramname"><em>rowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td>
          <td class="paramname"><em>colIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a>&#160;</td>
          <td class="paramname"><em>stype</em> = <code><a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts <a class="el" href="classaf_1_1array.htm">af::array</a> of values, row indices and column indices into a sparse array. </p>
<dl class="section note"><dt>Note</dt><dd>This function only create references of these arrays into the sparse data structure and does not do deep copies.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nRows</td><td>is the number of rows in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nCols</td><td>is the number of columns in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>is the <a class="el" href="classaf_1_1array.htm">af::array</a> containing the non-zero elements of the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rowIdx</td><td>is the row indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">colIdx</td><td>is the column indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array</dd></dl>
<div class="fragment"><div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> v[]   = {5, 8, 3, 6};</div>
<div class="line">    <span class="keywordtype">int</span> r[]     = {0, 0, 2, 3, 4};</div>
<div class="line">    <span class="keywordtype">int</span> c[]     = {0, 1, 2, 1};</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> M = 4, N = 4, nnz = 4;</div>
<div class="line">    array vals    = array(dim4(nnz), v);</div>
<div class="line">    array row_ptr = array(dim4(M + 1), r);</div>
<div class="line">    array col_idx = array(dim4(nnz), c);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create sparse array (CSR) from af::arrays containing values,</span></div>
<div class="line">    <span class="comment">// row pointers, and column indices.</span></div>
<div class="line">    array <a class="code hl_function" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">sparse</a> = <a class="code hl_function" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">af::sparse</a>(M, N, vals, row_ptr, col_idx, <a class="code hl_enumvalue" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// sparse</span></div>
<div class="line">    <span class="comment">//     values:  [ 5.0, 8.0, 3.0, 6.0 ]</span></div>
<div class="line">    <span class="comment">//     row_ptr: [ 0, 0, 2, 3, 4 ]</span></div>
<div class="line">    <span class="comment">//     col_idx: [ 0, 1, 2, 1 ]</span></div>
<div class="line"> </div>
</div><!-- fragment --> 
</div>
</div>
<a id="ga181b7d4904864f42876867cf19219c98" name="ga181b7d4904864f42876867cf19219c98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga181b7d4904864f42876867cf19219c98">&#9670;&#160;</a></span>sparse() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> sparse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>nNZ</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int *const&#160;</td>
          <td class="paramname"><em>rowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int *const&#160;</td>
          <td class="paramname"><em>colIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600f">af::storage</a>&#160;</td>
          <td class="paramname"><em>stype</em> = <code><a class="el" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function converts host or device arrays of values, row indices and column indices into a sparse array on the device. </p>
<dl class="section note"><dt>Note</dt><dd>The rules for deep copy/shallow copy/reference are the same as for creating a regular <a class="el" href="classaf_1_1array.htm">af::array</a>.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nRows</td><td>is the number of rows in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nCols</td><td>is the number of columns in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nNZ</td><td>is the number of non zero elements in the dense matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>is the host array containing the non-zero elements of the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rowIdx</td><td>is the row indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">colIdx</td><td>is the column indices for the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>is the data type for the matrix </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stype</td><td>is the storage format of the sparse array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a> if inputs are host arrays and <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a> if the arrays are device arrays. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classaf_1_1array.htm">af::array</a> for the sparse array</dd></dl>
<div class="fragment"><div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> vals[]  = {5, 8, 3, 6};</div>
<div class="line">    <span class="keywordtype">int</span> row_ptr[] = {0, 0, 2, 3, 4};</div>
<div class="line">    <span class="keywordtype">int</span> col_idx[] = {0, 1, 2, 1};</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> M = 4, N = 4, nnz = 4;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Create sparse array (CSR) from host pointers to values, row</span></div>
<div class="line">    <span class="comment">// pointers, and column indices.</span></div>
<div class="line">    array <a class="code hl_function" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">sparse</a> = <a class="code hl_function" href="group__sparse__func__create.htm#gad804ab05ba8ecadf15104e5a1e3d3d09">af::sparse</a>(M, N, nnz, vals, row_ptr, col_idx, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>,</div>
<div class="line">                              <a class="code hl_enumvalue" href="defines_8h.htm#a75e1422a62a43dc1ce727ccfb850600fa33553814922263702c5a95695c988d8b">AF_STORAGE_CSR</a>, <a class="code hl_enumvalue" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// sparse</span></div>
<div class="line">    <span class="comment">//     values:  [ 5.0, 8.0, 3.0, 6.0 ]</span></div>
<div class="line">    <span class="comment">//     row_ptr: [ 0, 0, 2, 3, 4 ]</span></div>
<div class="line">    <span class="comment">//     col_idx: [ 0, 1, 2, 1 ]</span></div>
<div class="line"> </div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
<div class="ttc" id="adefines_8h_htm_ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba"><div class="ttname"><a href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></div><div class="ttdeci">@ afHost</div><div class="ttdoc">Host pointer.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00235">defines.h:234</a></div></div>
</div><!-- fragment --> 
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:58 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
