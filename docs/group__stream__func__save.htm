<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>saveArray</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__stream__func__save.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">saveArray<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__io__mat.htm">Input and Output functions</a> &raquo;  &#124; <a class="el" href="group__dataio__mat.htm">Reading and writing arrays</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Save an array to a binary file.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaf0d3dfb49f4f2aaac7a46222817ed48f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__save.htm#gaf0d3dfb49f4f2aaac7a46222817ed48f">saveArray</a> (const char *key, const array &amp;arr, const char *filename, const bool append=false)</td></tr>
<tr class="separator:gaf0d3dfb49f4f2aaac7a46222817ed48f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3cb2f467e3f00b619cb2b4c727f1200b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__save.htm#ga3cb2f467e3f00b619cb2b4c727f1200b">af_save_array</a> (int *index, const char *key, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr, const char *filename, const bool append)</td></tr>
<tr class="separator:ga3cb2f467e3f00b619cb2b4c727f1200b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Save an array to a binary file. </p>
<p>The saveArray and readArray functions are designed to provide store and read access to arrays using files written to disk.</p>
<p>The format of the file (version 1) is as follows:</p>
<p>Header: </p><table class="doxtable">
<tr>
<th>Description </th><th>Data Type </th><th>Size (Bytes) </th><th>Detailed Desc  </th></tr>
<tr>
<td>Version </td><td>Char </td><td>1 </td><td>ArrayFire File Format Version for future use. Currently set to 1 </td></tr>
<tr>
<td>Array Count </td><td>Int </td><td>4 </td><td>No. of Arrays stored in file </td></tr>
</table>
<p>Per Array: </p><table class="doxtable">
<tr>
<th>Description </th><th>Data Type </th><th>Size (Bytes) </th><th>Detailed Desc  </th></tr>
<tr>
<td>Length of Key String </td><td>Int </td><td>4 </td><td>No. of characters (excluding null ending) in the key string </td></tr>
<tr>
<td>Key </td><td>Char [] </td><td>length </td><td>Key of the Array. Used when reading from file </td></tr>
<tr>
<td>Offset </td><td>Int64 </td><td>8 </td><td>No of bytes between offset and start of next array </td></tr>
<tr>
<td>Array Type </td><td>Char </td><td>1 </td><td>Type corresponding to af_dtype enum </td></tr>
<tr>
<td>Dims (4 values) </td><td>Int64 </td><td>4 * 8 = 32 </td><td>Dimensions of the Array </td></tr>
<tr>
<td>Data </td><td>Type </td><td>sizeof(Type) * dims.elements() </td><td>Actual data of the array </td></tr>
</table>
<p>The offset is equal to 1 byte (type) + 32 bytes (dims) + size of data.</p>
<p>An file with 2 arrays would look like (representative)</p>
<blockquote class="doxtable">
<p>1<br />
2<br />
Array 1 Key Length<br />
Array 1 Key<br />
Array 1 Offset<br />
Array 1 Type<br />
Array 1 Dims<br />
Array 1 Data<br />
Array 2 Key Length<br />
Array 2 Key<br />
Array 2 Offset<br />
Array 2 Type<br />
Array 2 Dims<br />
Array 2 Data<br />
</p>
</blockquote>
<p>Save array allows you to append any number of Arrays to the same file using the append argument. If the append argument is false, then the contents of the file are discarded and new array is written anew.</p>
<p>On each append, the array counter in the header is incremented and the new array is written to the end of the file. This function does not check if the tag is unique or not.</p>
<hr/>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga3cb2f467e3f00b619cb2b4c727f1200b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_save_array </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>append</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">index</td><td>is the index location of the array in the file </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>is an expression used as tag/key for the array during <a class="el" href="group__stream__func__read.htm#gaf78aa8f367fbd6f408e90f0851e0557a">readArray()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the array to be written </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is the path to the location on disk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">append</td><td>is used to append to an existing file when true and create or overwrite an existing file when false </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf0d3dfb49f4f2aaac7a46222817ed48f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> int af::saveArray </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>append</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>is an expression used as tag/key for the array during <a class="el" href="group__stream__func__read.htm#gaf78aa8f367fbd6f408e90f0851e0557a">readArray</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">arr</td><td>is the array to be written </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is the path to the location on disk </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">append</td><td>is used to append to an existing file when true and create or overwrite an existing file when false</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>index of the saved array in the file </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
