<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>arrayfire-docs-3.6.2/docs/pages/timing.md (2018-11-19 17:22:56 +0530, (build dc38ef13)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('timing_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">arrayfire-docs-3.6.2/docs/pages/timing.md (2018-11-19 17:22:56 +0530, (build dc38ef13))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="timing_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Timing Your Code {#timing}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;================</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;timer() : A platform-independent timer with microsecond accuracy:</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;* [timer::start()](\ref af::timer::start) starts a timer</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;* [timer::start()](\ref af::timer::stop) seconds since last \ref af::timer::start &quot;start&quot;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;* \ref af::timer::stop(af::timer start) &quot;timer::start(timer start)&quot; seconds since &#39;start&#39;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;Example: single timer</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;   // start timer</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;   timer::start();</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;   // run your code</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;   printf(&quot;elapsed seconds: %g\n&quot;, timer::stop());</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;Example: multiple timers</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;   // start timers</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;   timer start1 = timer::start();</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;   timer start2 = timer::start();</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;   // run some code</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;   printf(&quot;elapsed seconds: %g\n&quot;, timer::stop(start1));</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;   // run more code</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;   printf(&quot;elapsed seconds: %g\n&quot;, timer::stop(start2));</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;Accurate and reliable measurement of performance involves several factors:</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;* Executing enough iterations to achieve peak performance.</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;* Executing enough repetitions to amortize any overhead from system timers.</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;To take care of much of this boilerplate, [timeit](\ref af::timeit) provides</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;accurate and reliable estimates of both CPU or GPU code.</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;Here`s a stripped down example of</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;[Monte-Carlo estimation of PI](\ref benchmarks/pi.cpp) making use</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;of [timeit](\ref af::timeit).  Notice how it expects a `void` function pointer.</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;#include &lt;stdio.h&gt;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;#include &lt;arrayfire.h&gt;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;using namespace af;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;void pi_function() {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  int n = 20e6; // 20 million random samples</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  array x = randu(n,f32), y = randu(n,f32);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  // how many fell inside unit circle?</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  float pi = 4.0 * sum&lt;float&gt;(sqrt(x*x + y*y)) &lt; 1) / n;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;int main() {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  printf(&quot;pi_function took %g seconds\n&quot;, timeit(pi_function));</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  return 0;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;This produces:</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    pi_function took 0.007252 seconds</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    (test machine: Core i7 920 @ 2.67GHz with a Tesla C2070)</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
