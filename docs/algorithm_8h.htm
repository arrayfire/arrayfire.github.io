<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: algorithm.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('algorithm_8h.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">algorithm.h File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="defines_8h_source.htm">af/defines.h</a>&gt;</code><br />
</div>
<p><a href="algorithm_8h_source.htm">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="namespaces" name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceaf"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm">af</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga5eb9a966c94aa56af61707c91637e8df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">sum</a> (const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga5eb9a966c94aa56af61707c91637e8df"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over a given dimension.  <a href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">More...</a><br /></td></tr>
<tr class="separator:ga5eb9a966c94aa56af61707c91637e8df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b86f360dbdc7c10855170543a0973fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga7b86f360dbdc7c10855170543a0973fa">sum</a> (const array &amp;in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga7b86f360dbdc7c10855170543a0973fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over a given dimension, replacing any NaNs with a specified value.  <a href="group__reduce__func__sum.htm#ga7b86f360dbdc7c10855170543a0973fa">More...</a><br /></td></tr>
<tr class="separator:ga7b86f360dbdc7c10855170543a0973fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf824416b15f9ac38eb7ae82f8b107dd4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm#gaf824416b15f9ac38eb7ae82f8b107dd4">sumByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:gaf824416b15f9ac38eb7ae82f8b107dd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over a given dimension, according to an array of keys.  <a href="group__reduce__func__sum__by__key.htm#gaf824416b15f9ac38eb7ae82f8b107dd4">More...</a><br /></td></tr>
<tr class="separator:gaf824416b15f9ac38eb7ae82f8b107dd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7760781f95bbcab67067432e22ad2ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm#gae7760781f95bbcab67067432e22ad2ee">sumByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim, const double nanval)</td></tr>
<tr class="memdesc:gae7760781f95bbcab67067432e22ad2ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over a given dimension, replacing any NaNs with a specified value, according to an array of keys.  <a href="group__reduce__func__sum__by__key.htm#gae7760781f95bbcab67067432e22ad2ee">More...</a><br /></td></tr>
<tr class="separator:gae7760781f95bbcab67067432e22ad2ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90e43292bac747efc222a38bdccf34b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga90e43292bac747efc222a38bdccf34b2">product</a> (const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga90e43292bac747efc222a38bdccf34b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over a given dimension.  <a href="group__reduce__func__product.htm#ga90e43292bac747efc222a38bdccf34b2">More...</a><br /></td></tr>
<tr class="separator:ga90e43292bac747efc222a38bdccf34b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb69f6a3502483e593c52c081c81e096"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gafb69f6a3502483e593c52c081c81e096">product</a> (const array &amp;in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:gafb69f6a3502483e593c52c081c81e096"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over a given dimension, replacing any NaNs with a specified value.  <a href="group__reduce__func__product.htm#gafb69f6a3502483e593c52c081c81e096">More...</a><br /></td></tr>
<tr class="separator:gafb69f6a3502483e593c52c081c81e096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8226a1e3167531bfa487f608048c4367"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm#ga8226a1e3167531bfa487f608048c4367">productByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga8226a1e3167531bfa487f608048c4367"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over a given dimension, according to an array of keys.  <a href="group__reduce__func__product__by__key.htm#ga8226a1e3167531bfa487f608048c4367">More...</a><br /></td></tr>
<tr class="separator:ga8226a1e3167531bfa487f608048c4367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf480670f14e63ee1842bb44395c53aad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm#gaf480670f14e63ee1842bb44395c53aad">productByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim, const double nanval)</td></tr>
<tr class="memdesc:gaf480670f14e63ee1842bb44395c53aad"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over a given dimension, replacing any NaNs with a specified value, according to an array of keys.  <a href="group__reduce__func__product__by__key.htm#gaf480670f14e63ee1842bb44395c53aad">More...</a><br /></td></tr>
<tr class="separator:gaf480670f14e63ee1842bb44395c53aad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c4c0c89dbc59ae5e20fb7e5438ceca5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga5c4c0c89dbc59ae5e20fb7e5438ceca5">min</a> (const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga5c4c0c89dbc59ae5e20fb7e5438ceca5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum along a given dimension.  <a href="group__reduce__func__min.htm#ga5c4c0c89dbc59ae5e20fb7e5438ceca5">More...</a><br /></td></tr>
<tr class="separator:ga5c4c0c89dbc59ae5e20fb7e5438ceca5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9551f9cadf477be72f1491dfb720ddb7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min__by__key.htm#ga9551f9cadf477be72f1491dfb720ddb7">minByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga9551f9cadf477be72f1491dfb720ddb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum along a given dimension, according to an array of keys.  <a href="group__reduce__func__min__by__key.htm#ga9551f9cadf477be72f1491dfb720ddb7">More...</a><br /></td></tr>
<tr class="separator:ga9551f9cadf477be72f1491dfb720ddb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8487a88bf44e0c88af44fec99cc205b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga8487a88bf44e0c88af44fec99cc205b1">max</a> (const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga8487a88bf44e0c88af44fec99cc205b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum along a given dimension.  <a href="group__reduce__func__max.htm#ga8487a88bf44e0c88af44fec99cc205b1">More...</a><br /></td></tr>
<tr class="separator:ga8487a88bf44e0c88af44fec99cc205b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b0803c5e3c0041a9aa538423be4492a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max__by__key.htm#ga6b0803c5e3c0041a9aa538423be4492a">maxByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga6b0803c5e3c0041a9aa538423be4492a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum along a given dimension, according to an array of keys.  <a href="group__reduce__func__max__by__key.htm#ga6b0803c5e3c0041a9aa538423be4492a">More...</a><br /></td></tr>
<tr class="separator:ga6b0803c5e3c0041a9aa538423be4492a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae06bb92d6971c28cf3458f2d652f09f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#gae06bb92d6971c28cf3458f2d652f09f1">max</a> (array &amp;val, array &amp;idx, const array &amp;in, const array &amp;ragged_len, const int dim)</td></tr>
<tr class="memdesc:gae06bb92d6971c28cf3458f2d652f09f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the ragged maximum along a given dimension.  <a href="group__reduce__func__max.htm#gae06bb92d6971c28cf3458f2d652f09f1">More...</a><br /></td></tr>
<tr class="separator:gae06bb92d6971c28cf3458f2d652f09f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac84565e66f5f7b6e7ba8f044d5ed3359"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gac84565e66f5f7b6e7ba8f044d5ed3359">allTrue</a> (const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:gac84565e66f5f7b6e7ba8f044d5ed3359"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if all values along a given dimension are true.  <a href="group__reduce__func__all__true.htm#gac84565e66f5f7b6e7ba8f044d5ed3359">More...</a><br /></td></tr>
<tr class="separator:gac84565e66f5f7b6e7ba8f044d5ed3359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf56b0c3cd607d1678b8356a49952d89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceaf.htm#adf56b0c3cd607d1678b8356a49952d89">allTrueByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:adf56b0c3cd607d1678b8356a49952d89"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if all values along a given dimension are true, according to an array of keys.  <a href="namespaceaf.htm#adf56b0c3cd607d1678b8356a49952d89">More...</a><br /></td></tr>
<tr class="separator:adf56b0c3cd607d1678b8356a49952d89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17fa69942f503dadf6f83b75528d89e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga17fa69942f503dadf6f83b75528d89e5">anyTrue</a> (const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga17fa69942f503dadf6f83b75528d89e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if any values along a given dimension are true.  <a href="group__reduce__func__any__true.htm#ga17fa69942f503dadf6f83b75528d89e5">More...</a><br /></td></tr>
<tr class="separator:ga17fa69942f503dadf6f83b75528d89e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2314bdafee79d2a062ce435e512c8ed2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__anytrue__by__key.htm#ga2314bdafee79d2a062ce435e512c8ed2">anyTrueByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga2314bdafee79d2a062ce435e512c8ed2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if any values along a given dimension are true, according to an array of keys.  <a href="group__reduce__func__anytrue__by__key.htm#ga2314bdafee79d2a062ce435e512c8ed2">More...</a><br /></td></tr>
<tr class="separator:ga2314bdafee79d2a062ce435e512c8ed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga93235c9215589d1a6448e8cda3903b92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#ga93235c9215589d1a6448e8cda3903b92">count</a> (const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga93235c9215589d1a6448e8cda3903b92"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to count non-zero values in an array along a given dimension.  <a href="group__reduce__func__count.htm#ga93235c9215589d1a6448e8cda3903b92">More...</a><br /></td></tr>
<tr class="separator:ga93235c9215589d1a6448e8cda3903b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b29c56e8ab7b0bbc6220001a941e167"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count__by__key.htm#ga5b29c56e8ab7b0bbc6220001a941e167">countByKey</a> (array &amp;keys_out, array &amp;vals_out, const array &amp;keys, const array &amp;vals, const int dim=-1)</td></tr>
<tr class="memdesc:ga5b29c56e8ab7b0bbc6220001a941e167"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to count non-zero values in an array, according to an array of keys.  <a href="group__reduce__func__count__by__key.htm#ga5b29c56e8ab7b0bbc6220001a941e167">More...</a><br /></td></tr>
<tr class="separator:ga5b29c56e8ab7b0bbc6220001a941e167"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37626f6fd496af2bac2ea5791f201c48"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga37626f6fd496af2bac2ea5791f201c48"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga37626f6fd496af2bac2ea5791f201c48">sum</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga37626f6fd496af2bac2ea5791f201c48"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over all dimensions.  <a href="group__reduce__func__sum.htm#ga37626f6fd496af2bac2ea5791f201c48">More...</a><br /></td></tr>
<tr class="separator:ga37626f6fd496af2bac2ea5791f201c48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0a61f0efaf87941e373e1c59814fd52"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac0a61f0efaf87941e373e1c59814fd52"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#gac0a61f0efaf87941e373e1c59814fd52">sum</a> (const array &amp;in, double nanval)</td></tr>
<tr class="memdesc:gac0a61f0efaf87941e373e1c59814fd52"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sum array elements over all dimensions, replacing any NaNs with a specified value.  <a href="group__reduce__func__sum.htm#gac0a61f0efaf87941e373e1c59814fd52">More...</a><br /></td></tr>
<tr class="separator:gac0a61f0efaf87941e373e1c59814fd52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga681e83804fcd068877eb3eb2c446c312"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga681e83804fcd068877eb3eb2c446c312"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga681e83804fcd068877eb3eb2c446c312">product</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga681e83804fcd068877eb3eb2c446c312"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over the first non-singleton dimension.  <a href="group__reduce__func__product.htm#ga681e83804fcd068877eb3eb2c446c312">More...</a><br /></td></tr>
<tr class="separator:ga681e83804fcd068877eb3eb2c446c312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec2cbbfd730bf3008e93a261849ac5d2"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaec2cbbfd730bf3008e93a261849ac5d2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gaec2cbbfd730bf3008e93a261849ac5d2">product</a> (const array &amp;in, double nanval)</td></tr>
<tr class="memdesc:gaec2cbbfd730bf3008e93a261849ac5d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to multiply array elements over the first non-singleton dimension, replacing any NaNs with a specified value.  <a href="group__reduce__func__product.htm#gaec2cbbfd730bf3008e93a261849ac5d2">More...</a><br /></td></tr>
<tr class="separator:gaec2cbbfd730bf3008e93a261849ac5d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf09dd005f0a9f451b1bca3ffac70e7ab"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gaf09dd005f0a9f451b1bca3ffac70e7ab"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#gaf09dd005f0a9f451b1bca3ffac70e7ab">min</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gaf09dd005f0a9f451b1bca3ffac70e7ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum along the first non-singleton dimension.  <a href="group__reduce__func__min.htm#gaf09dd005f0a9f451b1bca3ffac70e7ab">More...</a><br /></td></tr>
<tr class="separator:gaf09dd005f0a9f451b1bca3ffac70e7ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac40e9fa0a64ec009dde1297427f120aa"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gac40e9fa0a64ec009dde1297427f120aa"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#gac40e9fa0a64ec009dde1297427f120aa">max</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gac40e9fa0a64ec009dde1297427f120aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum along the first non-singleton dimension.  <a href="group__reduce__func__max.htm#gac40e9fa0a64ec009dde1297427f120aa">More...</a><br /></td></tr>
<tr class="separator:gac40e9fa0a64ec009dde1297427f120aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb9655ba7cd3745065799ce9f7e8d28a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:gabb9655ba7cd3745065799ce9f7e8d28a"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#gabb9655ba7cd3745065799ce9f7e8d28a">allTrue</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gabb9655ba7cd3745065799ce9f7e8d28a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if all values along the first non-singleton dimension are true.  <a href="group__reduce__func__all__true.htm#gabb9655ba7cd3745065799ce9f7e8d28a">More...</a><br /></td></tr>
<tr class="separator:gabb9655ba7cd3745065799ce9f7e8d28a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga312a2f8f6f7e28613c77bd9bfc35e8cc"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga312a2f8f6f7e28613c77bd9bfc35e8cc"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga312a2f8f6f7e28613c77bd9bfc35e8cc">anyTrue</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga312a2f8f6f7e28613c77bd9bfc35e8cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to check if any values along the first non-singleton dimension are true.  <a href="group__reduce__func__any__true.htm#ga312a2f8f6f7e28613c77bd9bfc35e8cc">More...</a><br /></td></tr>
<tr class="separator:ga312a2f8f6f7e28613c77bd9bfc35e8cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ae8d49cb27ef8db55ce5515a2ac13be"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga7ae8d49cb27ef8db55ce5515a2ac13be"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#ga7ae8d49cb27ef8db55ce5515a2ac13be">count</a> (const array &amp;in)</td></tr>
<tr class="memdesc:ga7ae8d49cb27ef8db55ce5515a2ac13be"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to count non-zero values along the first non-singleton dimension.  <a href="group__reduce__func__count.htm#ga7ae8d49cb27ef8db55ce5515a2ac13be">More...</a><br /></td></tr>
<tr class="separator:ga7ae8d49cb27ef8db55ce5515a2ac13be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04e9dbdf3a13496f57f20d34293ac287"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga04e9dbdf3a13496f57f20d34293ac287">min</a> (array &amp;val, array &amp;idx, const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga04e9dbdf3a13496f57f20d34293ac287"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum and its location along a given dimension.  <a href="group__reduce__func__min.htm#ga04e9dbdf3a13496f57f20d34293ac287">More...</a><br /></td></tr>
<tr class="separator:ga04e9dbdf3a13496f57f20d34293ac287"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6232d3cd68325c2a605e39e749e31b7d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga6232d3cd68325c2a605e39e749e31b7d">max</a> (array &amp;val, array &amp;idx, const array &amp;in, const int dim=-1)</td></tr>
<tr class="memdesc:ga6232d3cd68325c2a605e39e749e31b7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum and its location along a given dimension.  <a href="group__reduce__func__max.htm#ga6232d3cd68325c2a605e39e749e31b7d">More...</a><br /></td></tr>
<tr class="separator:ga6232d3cd68325c2a605e39e749e31b7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74007ed6e8218671421447bd01e3330d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga74007ed6e8218671421447bd01e3330d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga74007ed6e8218671421447bd01e3330d">min</a> (T *val, unsigned *idx, const array &amp;in)</td></tr>
<tr class="memdesc:ga74007ed6e8218671421447bd01e3330d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the minimum and its location over all dimensions.  <a href="group__reduce__func__min.htm#ga74007ed6e8218671421447bd01e3330d">More...</a><br /></td></tr>
<tr class="separator:ga74007ed6e8218671421447bd01e3330d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4327ca06c9ce994c2fea59282b9abc32"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ga4327ca06c9ce994c2fea59282b9abc32"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga4327ca06c9ce994c2fea59282b9abc32">max</a> (T *val, unsigned *idx, const array &amp;in)</td></tr>
<tr class="memdesc:ga4327ca06c9ce994c2fea59282b9abc32"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the maximum and its location over all dimensions.  <a href="group__reduce__func__max.htm#ga4327ca06c9ce994c2fea59282b9abc32">More...</a><br /></td></tr>
<tr class="separator:ga4327ca06c9ce994c2fea59282b9abc32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83c2f9661d07b4bfce62be839991a343"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__accum.htm#ga83c2f9661d07b4bfce62be839991a343">accum</a> (const array &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:ga83c2f9661d07b4bfce62be839991a343"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the cumulative sum (inclusive) along a given dimension.  <a href="group__scan__func__accum.htm#ga83c2f9661d07b4bfce62be839991a343">More...</a><br /></td></tr>
<tr class="separator:ga83c2f9661d07b4bfce62be839991a343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f3d7f394334cb40cbd94e13310ce67b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scan.htm#ga1f3d7f394334cb40cbd94e13310ce67b">scan</a> (const array &amp;in, const int dim=0, binaryOp op=<a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6ca335c219d88e113349f6ce08e830314a1">AF_BINARY_ADD</a>, bool inclusive_scan=true)</td></tr>
<tr class="memdesc:ga1f3d7f394334cb40cbd94e13310ce67b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to scan an array (generalized) over a given dimension.  <a href="group__scan__func__scan.htm#ga1f3d7f394334cb40cbd94e13310ce67b">More...</a><br /></td></tr>
<tr class="separator:ga1f3d7f394334cb40cbd94e13310ce67b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga48d35dd5d7aeeb3c36d417100f456c6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scanbykey.htm#ga48d35dd5d7aeeb3c36d417100f456c6d">scanByKey</a> (const array &amp;key, const array &amp;in, const int dim=0, binaryOp op=<a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6ca335c219d88e113349f6ce08e830314a1">AF_BINARY_ADD</a>, bool inclusive_scan=true)</td></tr>
<tr class="memdesc:ga48d35dd5d7aeeb3c36d417100f456c6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to scan an array (generalized) over a given dimension, according to an array of keys.  <a href="group__scan__func__scanbykey.htm#ga48d35dd5d7aeeb3c36d417100f456c6d">More...</a><br /></td></tr>
<tr class="separator:ga48d35dd5d7aeeb3c36d417100f456c6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab18ab26e00f633d0e088ae0489e02d15"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__where.htm#gab18ab26e00f633d0e088ae0489e02d15">where</a> (const array &amp;in)</td></tr>
<tr class="memdesc:gab18ab26e00f633d0e088ae0489e02d15"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to locate the indices of the non-zero values in an array.  <a href="group__scan__func__where.htm#gab18ab26e00f633d0e088ae0489e02d15">More...</a><br /></td></tr>
<tr class="separator:gab18ab26e00f633d0e088ae0489e02d15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3a3a95b7a45a84d94eeda1b1d605f7b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff1.htm#ga3a3a95b7a45a84d94eeda1b1d605f7b3">diff1</a> (const array &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:ga3a3a95b7a45a84d94eeda1b1d605f7b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the first order difference in an array over a given dimension.  <a href="group__calc__func__diff1.htm#ga3a3a95b7a45a84d94eeda1b1d605f7b3">More...</a><br /></td></tr>
<tr class="separator:ga3a3a95b7a45a84d94eeda1b1d605f7b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaddf45b7b4bf48c01ba9564c0873bc98a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff2.htm#gaddf45b7b4bf48c01ba9564c0873bc98a">diff2</a> (const array &amp;in, const int dim=0)</td></tr>
<tr class="memdesc:gaddf45b7b4bf48c01ba9564c0873bc98a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to calculate the second order difference in an array over a given dimension.  <a href="group__calc__func__diff2.htm#gaddf45b7b4bf48c01ba9564c0873bc98a">More...</a><br /></td></tr>
<tr class="separator:gaddf45b7b4bf48c01ba9564c0873bc98a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f74f8a10ffa77dd348676e2366e2c5e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort.htm#ga2f74f8a10ffa77dd348676e2366e2c5e">sort</a> (const array &amp;in, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:ga2f74f8a10ffa77dd348676e2366e2c5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sort an array over a given dimension.  <a href="group__sort__func__sort.htm#ga2f74f8a10ffa77dd348676e2366e2c5e">More...</a><br /></td></tr>
<tr class="separator:ga2f74f8a10ffa77dd348676e2366e2c5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5e79c62e5b42fc36b20dcd484e9d1c1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__index.htm#gad5e79c62e5b42fc36b20dcd484e9d1c1">sort</a> (array &amp;out, array &amp;indices, const array &amp;in, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:gad5e79c62e5b42fc36b20dcd484e9d1c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sort an array over a given dimension and to return the original indices.  <a href="group__sort__func__sort__index.htm#gad5e79c62e5b42fc36b20dcd484e9d1c1">More...</a><br /></td></tr>
<tr class="separator:gad5e79c62e5b42fc36b20dcd484e9d1c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdb089c49951cb1a3c6cb9c2193ac750"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__keys.htm#gabdb089c49951cb1a3c6cb9c2193ac750">sort</a> (array &amp;out_keys, array &amp;out_values, const array &amp;keys, const array &amp;values, const unsigned dim=0, const bool isAscending=true)</td></tr>
<tr class="memdesc:gabdb089c49951cb1a3c6cb9c2193ac750"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to sort an array over a given dimension, according to an array of keys.  <a href="group__sort__func__sort__keys.htm#gabdb089c49951cb1a3c6cb9c2193ac750">More...</a><br /></td></tr>
<tr class="separator:gabdb089c49951cb1a3c6cb9c2193ac750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf09723158ed9d22aba6dd63c2f33c88c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__unique.htm#gaf09723158ed9d22aba6dd63c2f33c88c">setUnique</a> (const array &amp;in, const bool is_sorted=false)</td></tr>
<tr class="memdesc:gaf09723158ed9d22aba6dd63c2f33c88c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to return the unique values in an array.  <a href="group__set__func__unique.htm#gaf09723158ed9d22aba6dd63c2f33c88c">More...</a><br /></td></tr>
<tr class="separator:gaf09723158ed9d22aba6dd63c2f33c88c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ff9b187c331b6961b03060f3af9ccff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__union.htm#ga4ff9b187c331b6961b03060f3af9ccff">setUnion</a> (const array &amp;first, const array &amp;second, const bool is_unique=false)</td></tr>
<tr class="memdesc:ga4ff9b187c331b6961b03060f3af9ccff"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the union of two arrays.  <a href="group__set__func__union.htm#ga4ff9b187c331b6961b03060f3af9ccff">More...</a><br /></td></tr>
<tr class="separator:ga4ff9b187c331b6961b03060f3af9ccff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e3116fd981e45f3267bbc404d6487cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__intersect.htm#ga4e3116fd981e45f3267bbc404d6487cc">setIntersect</a> (const array &amp;first, const array &amp;second, const bool is_unique=false)</td></tr>
<tr class="memdesc:ga4e3116fd981e45f3267bbc404d6487cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface to evaluate the intersection of two arrays.  <a href="group__set__func__intersect.htm#ga4e3116fd981e45f3267bbc404d6487cc">More...</a><br /></td></tr>
<tr class="separator:ga4e3116fd981e45f3267bbc404d6487cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd4917c2e916870ebdf54afc2f61d533"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#gacd4917c2e916870ebdf54afc2f61d533">af_sum</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:gacd4917c2e916870ebdf54afc2f61d533"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sum array elements over a given dimension.  <a href="group__reduce__func__sum.htm#gacd4917c2e916870ebdf54afc2f61d533">More...</a><br /></td></tr>
<tr class="separator:gacd4917c2e916870ebdf54afc2f61d533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1b8ee7806b9440edd860bea2d16daaf5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga1b8ee7806b9440edd860bea2d16daaf5">af_sum_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga1b8ee7806b9440edd860bea2d16daaf5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sum array elements over all dimensions.  <a href="group__reduce__func__sum.htm#ga1b8ee7806b9440edd860bea2d16daaf5">More...</a><br /></td></tr>
<tr class="separator:ga1b8ee7806b9440edd860bea2d16daaf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga52461231e2d9995f689b7f23eea0e798"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga52461231e2d9995f689b7f23eea0e798">af_sum_nan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga52461231e2d9995f689b7f23eea0e798"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sum array elements over a given dimension, replacing any NaNs with a specified value.  <a href="group__reduce__func__sum.htm#ga52461231e2d9995f689b7f23eea0e798">More...</a><br /></td></tr>
<tr class="separator:ga52461231e2d9995f689b7f23eea0e798"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54d902d15621b390e2ea6ca2ac2e0441"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga54d902d15621b390e2ea6ca2ac2e0441">af_sum_nan_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const double nanval)</td></tr>
<tr class="memdesc:ga54d902d15621b390e2ea6ca2ac2e0441"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sum array elements over all dimensions, replacing any NaNs with a specified value.  <a href="group__reduce__func__sum.htm#ga54d902d15621b390e2ea6ca2ac2e0441">More...</a><br /></td></tr>
<tr class="separator:ga54d902d15621b390e2ea6ca2ac2e0441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a1fdb7417aa59287db593159c19ed2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm#ga2a1fdb7417aa59287db593159c19ed2d">af_sum_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim)</td></tr>
<tr class="memdesc:ga2a1fdb7417aa59287db593159c19ed2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sum array elements over a given dimension, according to an array of keys.  <a href="group__reduce__func__sum__by__key.htm#ga2a1fdb7417aa59287db593159c19ed2d">More...</a><br /></td></tr>
<tr class="separator:ga2a1fdb7417aa59287db593159c19ed2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa695edde00c43ac638ca7d9961938f4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm#gafa695edde00c43ac638ca7d9961938f4">af_sum_by_key_nan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim, const double nanval)</td></tr>
<tr class="memdesc:gafa695edde00c43ac638ca7d9961938f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sum array elements over a given dimension, replacing any NaNs with a specified value, according to an array of keys.  <a href="group__reduce__func__sum__by__key.htm#gafa695edde00c43ac638ca7d9961938f4">More...</a><br /></td></tr>
<tr class="separator:gafa695edde00c43ac638ca7d9961938f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2be338d39be30ad22dddf658a4f5676e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga2be338d39be30ad22dddf658a4f5676e">af_product</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:ga2be338d39be30ad22dddf658a4f5676e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply array elements over a given dimension.  <a href="group__reduce__func__product.htm#ga2be338d39be30ad22dddf658a4f5676e">More...</a><br /></td></tr>
<tr class="separator:ga2be338d39be30ad22dddf658a4f5676e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f4e998e8cfcf211e152374e17f093b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga2f4e998e8cfcf211e152374e17f093b7">af_product_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga2f4e998e8cfcf211e152374e17f093b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply array elements over all dimensions.  <a href="group__reduce__func__product.htm#ga2f4e998e8cfcf211e152374e17f093b7">More...</a><br /></td></tr>
<tr class="separator:ga2f4e998e8cfcf211e152374e17f093b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d25447c16d492767ba7efa7ee72a36e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#ga1d25447c16d492767ba7efa7ee72a36e">af_product_nan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim, const double nanval)</td></tr>
<tr class="memdesc:ga1d25447c16d492767ba7efa7ee72a36e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply array elements over a given dimension, replacing any NaNs with a specified value.  <a href="group__reduce__func__product.htm#ga1d25447c16d492767ba7efa7ee72a36e">More...</a><br /></td></tr>
<tr class="separator:ga1d25447c16d492767ba7efa7ee72a36e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf81ece122488f7b32b8b46cac45a72a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gaf81ece122488f7b32b8b46cac45a72a0">af_product_nan_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const double nanval)</td></tr>
<tr class="memdesc:gaf81ece122488f7b32b8b46cac45a72a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply array elements over all dimensions, replacing any NaNs with a specified value.  <a href="group__reduce__func__product.htm#gaf81ece122488f7b32b8b46cac45a72a0">More...</a><br /></td></tr>
<tr class="separator:gaf81ece122488f7b32b8b46cac45a72a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga098382fc8f79446d6e2af1473fac4350"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm#ga098382fc8f79446d6e2af1473fac4350">af_product_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim)</td></tr>
<tr class="memdesc:ga098382fc8f79446d6e2af1473fac4350"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply array elements over a given dimension, according to an array of keys.  <a href="group__reduce__func__product__by__key.htm#ga098382fc8f79446d6e2af1473fac4350">More...</a><br /></td></tr>
<tr class="separator:ga098382fc8f79446d6e2af1473fac4350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaff3459e70525e5e472591231037351e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm#gaff3459e70525e5e472591231037351e0">af_product_by_key_nan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim, const double nanval)</td></tr>
<tr class="memdesc:gaff3459e70525e5e472591231037351e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply array elements over a given dimension, replacing any NaNs with a specified value, according to an array of keys.  <a href="group__reduce__func__product__by__key.htm#gaff3459e70525e5e472591231037351e0">More...</a><br /></td></tr>
<tr class="separator:gaff3459e70525e5e472591231037351e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ac4c8d9ba613dbc9bfec0bee7be8eb8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga2ac4c8d9ba613dbc9bfec0bee7be8eb8">af_min</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:ga2ac4c8d9ba613dbc9bfec0bee7be8eb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the minimum along a given dimension.  <a href="group__reduce__func__min.htm#ga2ac4c8d9ba613dbc9bfec0bee7be8eb8">More...</a><br /></td></tr>
<tr class="separator:ga2ac4c8d9ba613dbc9bfec0bee7be8eb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24037db6a2a5c117f2ade85b0412f548"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min__by__key.htm#ga24037db6a2a5c117f2ade85b0412f548">af_min_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim)</td></tr>
<tr class="memdesc:ga24037db6a2a5c117f2ade85b0412f548"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the minimum along a given dimension, according to an array of keys.  <a href="group__reduce__func__min__by__key.htm#ga24037db6a2a5c117f2ade85b0412f548">More...</a><br /></td></tr>
<tr class="separator:ga24037db6a2a5c117f2ade85b0412f548"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga267f32b8dbb1b508e8738e3748d8dc3f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga267f32b8dbb1b508e8738e3748d8dc3f">af_max</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:ga267f32b8dbb1b508e8738e3748d8dc3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the maximum along a given dimension.  <a href="group__reduce__func__max.htm#ga267f32b8dbb1b508e8738e3748d8dc3f">More...</a><br /></td></tr>
<tr class="separator:ga267f32b8dbb1b508e8738e3748d8dc3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga002d03c0ebd674644c8a6831ebb775e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max__by__key.htm#ga002d03c0ebd674644c8a6831ebb775e2">af_max_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim)</td></tr>
<tr class="memdesc:ga002d03c0ebd674644c8a6831ebb775e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the maximum along a given dimension, according to an array of keys.  <a href="group__reduce__func__max__by__key.htm#ga002d03c0ebd674644c8a6831ebb775e2">More...</a><br /></td></tr>
<tr class="separator:ga002d03c0ebd674644c8a6831ebb775e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga564bbeca8e4c243355979a6cb5dc4970"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga564bbeca8e4c243355979a6cb5dc4970">af_max_ragged</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *val, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *idx, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> ragged_len, const int dim)</td></tr>
<tr class="memdesc:ga564bbeca8e4c243355979a6cb5dc4970"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the ragged maximum over a given dimension.  <a href="group__reduce__func__max.htm#ga564bbeca8e4c243355979a6cb5dc4970">More...</a><br /></td></tr>
<tr class="separator:ga564bbeca8e4c243355979a6cb5dc4970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga068708be5177a0aa3788af140bb5ebd6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#ga068708be5177a0aa3788af140bb5ebd6">af_all_true</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:ga068708be5177a0aa3788af140bb5ebd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if all values along a given dimension are true.  <a href="group__reduce__func__all__true.htm#ga068708be5177a0aa3788af140bb5ebd6">More...</a><br /></td></tr>
<tr class="separator:ga068708be5177a0aa3788af140bb5ebd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65fa5577c81a2c2fcf7406bf48cc014a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="algorithm_8h.htm#a65fa5577c81a2c2fcf7406bf48cc014a">af_all_true_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim)</td></tr>
<tr class="memdesc:a65fa5577c81a2c2fcf7406bf48cc014a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if all values along a given dimension are true, according to an array of keys.  <a href="algorithm_8h.htm#a65fa5577c81a2c2fcf7406bf48cc014a">More...</a><br /></td></tr>
<tr class="separator:a65fa5577c81a2c2fcf7406bf48cc014a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c275cda2cfc8eb0bd20ea86472ca0d5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga7c275cda2cfc8eb0bd20ea86472ca0d5">af_any_true</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:ga7c275cda2cfc8eb0bd20ea86472ca0d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if any values along a given dimension are true.  <a href="group__reduce__func__any__true.htm#ga7c275cda2cfc8eb0bd20ea86472ca0d5">More...</a><br /></td></tr>
<tr class="separator:ga7c275cda2cfc8eb0bd20ea86472ca0d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga973fd650f8a57533f675cfd7ad6f0718"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__anytrue__by__key.htm#ga973fd650f8a57533f675cfd7ad6f0718">af_any_true_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim)</td></tr>
<tr class="memdesc:ga973fd650f8a57533f675cfd7ad6f0718"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if any values along a given dimension are true.  <a href="group__reduce__func__anytrue__by__key.htm#ga973fd650f8a57533f675cfd7ad6f0718">More...</a><br /></td></tr>
<tr class="separator:ga973fd650f8a57533f675cfd7ad6f0718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2664c25ee6ca30aa3f5aa77db789f95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#gaf2664c25ee6ca30aa3f5aa77db789f95">af_count</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:gaf2664c25ee6ca30aa3f5aa77db789f95"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to count non-zero values in an array along a given dimension.  <a href="group__reduce__func__count.htm#gaf2664c25ee6ca30aa3f5aa77db789f95">More...</a><br /></td></tr>
<tr class="separator:gaf2664c25ee6ca30aa3f5aa77db789f95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga96b01fd7375b3a3cb065ba860885e723"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count__by__key.htm#ga96b01fd7375b3a3cb065ba860885e723">af_count_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *keys_out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vals_out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> vals, const int dim)</td></tr>
<tr class="memdesc:ga96b01fd7375b3a3cb065ba860885e723"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to count non-zero values in an array, according to an array of keys.  <a href="group__reduce__func__count__by__key.htm#ga96b01fd7375b3a3cb065ba860885e723">More...</a><br /></td></tr>
<tr class="separator:ga96b01fd7375b3a3cb065ba860885e723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabc009d04df0faf29ba1e381c7badde58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#gabc009d04df0faf29ba1e381c7badde58">af_sum_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gabc009d04df0faf29ba1e381c7badde58"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sum array elements over all dimensions.  <a href="group__reduce__func__sum.htm#gabc009d04df0faf29ba1e381c7badde58">More...</a><br /></td></tr>
<tr class="separator:gabc009d04df0faf29ba1e381c7badde58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga65bb08cd2644d5828d72fc42b2eb8abc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm#ga65bb08cd2644d5828d72fc42b2eb8abc">af_sum_nan_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const double nanval)</td></tr>
<tr class="memdesc:ga65bb08cd2644d5828d72fc42b2eb8abc"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sum array elements over all dimensions, replacing any NaNs with a specified value.  <a href="group__reduce__func__sum.htm#ga65bb08cd2644d5828d72fc42b2eb8abc">More...</a><br /></td></tr>
<tr class="separator:ga65bb08cd2644d5828d72fc42b2eb8abc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad226a6ec77c12fd16cf42e3fe3264e22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gad226a6ec77c12fd16cf42e3fe3264e22">af_product_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gad226a6ec77c12fd16cf42e3fe3264e22"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply array elements over all dimensions.  <a href="group__reduce__func__product.htm#gad226a6ec77c12fd16cf42e3fe3264e22">More...</a><br /></td></tr>
<tr class="separator:gad226a6ec77c12fd16cf42e3fe3264e22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaca78d54c53a33b419bfdb5c64accbc7b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm#gaca78d54c53a33b419bfdb5c64accbc7b">af_product_nan_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const double nanval)</td></tr>
<tr class="memdesc:gaca78d54c53a33b419bfdb5c64accbc7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to multiply array elements over all dimensions, replacing any NaNs with a specified value.  <a href="group__reduce__func__product.htm#gaca78d54c53a33b419bfdb5c64accbc7b">More...</a><br /></td></tr>
<tr class="separator:gaca78d54c53a33b419bfdb5c64accbc7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab10198ae7ead1dc10f220d576f118104"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#gab10198ae7ead1dc10f220d576f118104">af_min_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gab10198ae7ead1dc10f220d576f118104"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the minimum over all dimensions.  <a href="group__reduce__func__min.htm#gab10198ae7ead1dc10f220d576f118104">More...</a><br /></td></tr>
<tr class="separator:gab10198ae7ead1dc10f220d576f118104"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga898d56046b15225226e17b4bf2f92dc2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga898d56046b15225226e17b4bf2f92dc2">af_min_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga898d56046b15225226e17b4bf2f92dc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the minimum over all dimensions.  <a href="group__reduce__func__min.htm#ga898d56046b15225226e17b4bf2f92dc2">More...</a><br /></td></tr>
<tr class="separator:ga898d56046b15225226e17b4bf2f92dc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5f71ab6056943723149585d2aebade7c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga5f71ab6056943723149585d2aebade7c">af_max_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga5f71ab6056943723149585d2aebade7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the maximum over all dimensions.  <a href="group__reduce__func__max.htm#ga5f71ab6056943723149585d2aebade7c">More...</a><br /></td></tr>
<tr class="separator:ga5f71ab6056943723149585d2aebade7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9d9eee46c49a9bc89c3165d63696fbc2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#ga9d9eee46c49a9bc89c3165d63696fbc2">af_max_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga9d9eee46c49a9bc89c3165d63696fbc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the maximum over all dimensions.  <a href="group__reduce__func__max.htm#ga9d9eee46c49a9bc89c3165d63696fbc2">More...</a><br /></td></tr>
<tr class="separator:ga9d9eee46c49a9bc89c3165d63696fbc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b50d4adffe3050c3d21bbbbb3d2e434"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#ga9b50d4adffe3050c3d21bbbbb3d2e434">af_all_true_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga9b50d4adffe3050c3d21bbbbb3d2e434"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if all values over all dimensions are true.  <a href="group__reduce__func__all__true.htm#ga9b50d4adffe3050c3d21bbbbb3d2e434">More...</a><br /></td></tr>
<tr class="separator:ga9b50d4adffe3050c3d21bbbbb3d2e434"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4464a493e75f5d90afdadce3346a502b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm#ga4464a493e75f5d90afdadce3346a502b">af_all_true_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga4464a493e75f5d90afdadce3346a502b"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if all values over all dimensions are true.  <a href="group__reduce__func__all__true.htm#ga4464a493e75f5d90afdadce3346a502b">More...</a><br /></td></tr>
<tr class="separator:ga4464a493e75f5d90afdadce3346a502b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga47d991276bb5bf8cdba8340e8751e536"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga47d991276bb5bf8cdba8340e8751e536">af_any_true_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga47d991276bb5bf8cdba8340e8751e536"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if any values over all dimensions are true.  <a href="group__reduce__func__any__true.htm#ga47d991276bb5bf8cdba8340e8751e536">More...</a><br /></td></tr>
<tr class="separator:ga47d991276bb5bf8cdba8340e8751e536"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga03e551de5a1d79100188bdd65f6e1ef4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm#ga03e551de5a1d79100188bdd65f6e1ef4">af_any_true_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga03e551de5a1d79100188bdd65f6e1ef4"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to check if any values over all dimensions are true.  <a href="group__reduce__func__any__true.htm#ga03e551de5a1d79100188bdd65f6e1ef4">More...</a><br /></td></tr>
<tr class="separator:ga03e551de5a1d79100188bdd65f6e1ef4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38699c5ce172c15e9850a9eda6050da5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#ga38699c5ce172c15e9850a9eda6050da5">af_count_all</a> (double *real, double *imag, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga38699c5ce172c15e9850a9eda6050da5"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to count non-zero values over all dimensions.  <a href="group__reduce__func__count.htm#ga38699c5ce172c15e9850a9eda6050da5">More...</a><br /></td></tr>
<tr class="separator:ga38699c5ce172c15e9850a9eda6050da5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga412b946a7f80a0af736bc131f2703366"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm#ga412b946a7f80a0af736bc131f2703366">af_count_all_array</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga412b946a7f80a0af736bc131f2703366"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to count non-zero values over all dimensions.  <a href="group__reduce__func__count.htm#ga412b946a7f80a0af736bc131f2703366">More...</a><br /></td></tr>
<tr class="separator:ga412b946a7f80a0af736bc131f2703366"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f65943090e0c2317bd682c25594b901"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#ga2f65943090e0c2317bd682c25594b901">af_imin</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *idx, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:ga2f65943090e0c2317bd682c25594b901"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the minimum and its location along a given dimension.  <a href="group__reduce__func__min.htm#ga2f65943090e0c2317bd682c25594b901">More...</a><br /></td></tr>
<tr class="separator:ga2f65943090e0c2317bd682c25594b901"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf0e6a523e2e435d5409d5d8cb843d8a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#gaf0e6a523e2e435d5409d5d8cb843d8a2">af_imax</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *idx, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:gaf0e6a523e2e435d5409d5d8cb843d8a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the maximum and its location along a given dimension.  <a href="group__reduce__func__max.htm#gaf0e6a523e2e435d5409d5d8cb843d8a2">More...</a><br /></td></tr>
<tr class="separator:gaf0e6a523e2e435d5409d5d8cb843d8a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae75785af0fdfcbb1f4c34461235f5206"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm#gae75785af0fdfcbb1f4c34461235f5206">af_imin_all</a> (double *real, double *imag, unsigned *idx, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gae75785af0fdfcbb1f4c34461235f5206"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the minimum and its location over all dimensions.  <a href="group__reduce__func__min.htm#gae75785af0fdfcbb1f4c34461235f5206">More...</a><br /></td></tr>
<tr class="separator:gae75785af0fdfcbb1f4c34461235f5206"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea009bd51145be2fcc688b2390725401"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm#gaea009bd51145be2fcc688b2390725401">af_imax_all</a> (double *real, double *imag, unsigned *idx, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gaea009bd51145be2fcc688b2390725401"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the maximum and its location over all dimensions.  <a href="group__reduce__func__max.htm#gaea009bd51145be2fcc688b2390725401">More...</a><br /></td></tr>
<tr class="separator:gaea009bd51145be2fcc688b2390725401"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50d499e844e0b63e338cb3ea50439629"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__accum.htm#ga50d499e844e0b63e338cb3ea50439629">af_accum</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:ga50d499e844e0b63e338cb3ea50439629"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the cumulative sum (inclusive) along a given dimension.  <a href="group__scan__func__accum.htm#ga50d499e844e0b63e338cb3ea50439629">More...</a><br /></td></tr>
<tr class="separator:ga50d499e844e0b63e338cb3ea50439629"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c864e22826f61bec2e9b6c61aa93fce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scan.htm#ga1c864e22826f61bec2e9b6c61aa93fce">af_scan</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim, <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">af_binary_op</a> op, bool inclusive_scan)</td></tr>
<tr class="memdesc:ga1c864e22826f61bec2e9b6c61aa93fce"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to scan an array (generalized) over a given dimension.  <a href="group__scan__func__scan.htm#ga1c864e22826f61bec2e9b6c61aa93fce">More...</a><br /></td></tr>
<tr class="separator:ga1c864e22826f61bec2e9b6c61aa93fce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaae150e0f197782782f45340d137b027"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scanbykey.htm#gaaae150e0f197782782f45340d137b027">af_scan_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> key, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim, <a class="el" href="defines_8h.htm#a4de0054ea1c296a55a79691c21f19c6c">af_binary_op</a> op, bool inclusive_scan)</td></tr>
<tr class="memdesc:gaaae150e0f197782782f45340d137b027"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to scan an array (generalized) over a given dimension, according to an array of keys.  <a href="group__scan__func__scanbykey.htm#gaaae150e0f197782782f45340d137b027">More...</a><br /></td></tr>
<tr class="separator:gaaae150e0f197782782f45340d137b027"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafda59a3d25d35238592dd09907be9d07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__where.htm#gafda59a3d25d35238592dd09907be9d07">af_where</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *idx, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gafda59a3d25d35238592dd09907be9d07"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to locate the indices of the non-zero values in an array.  <a href="group__scan__func__where.htm#gafda59a3d25d35238592dd09907be9d07">More...</a><br /></td></tr>
<tr class="separator:gafda59a3d25d35238592dd09907be9d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad3be33ce8114f65c188645e958fce171"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff1.htm#gad3be33ce8114f65c188645e958fce171">af_diff1</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:gad3be33ce8114f65c188645e958fce171"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the first order difference in an array over a given dimension.  <a href="group__calc__func__diff1.htm#gad3be33ce8114f65c188645e958fce171">More...</a><br /></td></tr>
<tr class="separator:gad3be33ce8114f65c188645e958fce171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafc7b2d05e4e85aeb3e8b3239f598f70c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff2.htm#gafc7b2d05e4e85aeb3e8b3239f598f70c">af_diff2</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const int dim)</td></tr>
<tr class="memdesc:gafc7b2d05e4e85aeb3e8b3239f598f70c"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to calculate the second order difference in an array over a given dimension.  <a href="group__calc__func__diff2.htm#gafc7b2d05e4e85aeb3e8b3239f598f70c">More...</a><br /></td></tr>
<tr class="separator:gafc7b2d05e4e85aeb3e8b3239f598f70c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac4460d605452515d07ee8432f906aa8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort.htm#gac4460d605452515d07ee8432f906aa8e">af_sort</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const unsigned dim, const bool isAscending)</td></tr>
<tr class="memdesc:gac4460d605452515d07ee8432f906aa8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sort an array over a given dimension.  <a href="group__sort__func__sort.htm#gac4460d605452515d07ee8432f906aa8e">More...</a><br /></td></tr>
<tr class="separator:gac4460d605452515d07ee8432f906aa8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga55675cd825c320db87398b1010b6ae41"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__index.htm#ga55675cd825c320db87398b1010b6ae41">af_sort_index</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *indices, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const unsigned dim, const bool isAscending)</td></tr>
<tr class="memdesc:ga55675cd825c320db87398b1010b6ae41"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sort an array over a given dimension and to return the original indices.  <a href="group__sort__func__sort__index.htm#ga55675cd825c320db87398b1010b6ae41">More...</a><br /></td></tr>
<tr class="separator:ga55675cd825c320db87398b1010b6ae41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7d4fcaf229ece5fbbe30a638d9a60b8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__keys.htm#ga7d4fcaf229ece5fbbe30a638d9a60b8a">af_sort_by_key</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out_keys, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out_values, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> keys, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> values, const unsigned dim, const bool isAscending)</td></tr>
<tr class="memdesc:ga7d4fcaf229ece5fbbe30a638d9a60b8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to sort an array over a given dimension, according to an array of keys.  <a href="group__sort__func__sort__keys.htm#ga7d4fcaf229ece5fbbe30a638d9a60b8a">More...</a><br /></td></tr>
<tr class="separator:ga7d4fcaf229ece5fbbe30a638d9a60b8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6afa1de48cbbc4b2df530c2530087943"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__unique.htm#ga6afa1de48cbbc4b2df530c2530087943">af_set_unique</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const bool is_sorted)</td></tr>
<tr class="memdesc:ga6afa1de48cbbc4b2df530c2530087943"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to return the unique values in an array.  <a href="group__set__func__unique.htm#ga6afa1de48cbbc4b2df530c2530087943">More...</a><br /></td></tr>
<tr class="separator:ga6afa1de48cbbc4b2df530c2530087943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabeead0c0dc360db9398e9703dbb273f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__union.htm#gaabeead0c0dc360db9398e9703dbb273f">af_set_union</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> first, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> second, const bool is_unique)</td></tr>
<tr class="memdesc:gaabeead0c0dc360db9398e9703dbb273f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the union of two arrays.  <a href="group__set__func__union.htm#gaabeead0c0dc360db9398e9703dbb273f">More...</a><br /></td></tr>
<tr class="separator:gaabeead0c0dc360db9398e9703dbb273f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga985f9332c5f858eec66c717881ef2607"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__intersect.htm#ga985f9332c5f858eec66c717881ef2607">af_set_intersect</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> first, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> second, const bool is_unique)</td></tr>
<tr class="memdesc:ga985f9332c5f858eec66c717881ef2607"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface to evaluate the intersection of two arrays.  <a href="group__set__func__intersect.htm#ga985f9332c5f858eec66c717881ef2607">More...</a><br /></td></tr>
<tr class="separator:ga985f9332c5f858eec66c717881ef2607"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a65fa5577c81a2c2fcf7406bf48cc014a" name="a65fa5577c81a2c2fcf7406bf48cc014a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65fa5577c81a2c2fcf7406bf48cc014a">&#9670;&#160;</a></span>af_all_true_by_key()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_all_true_by_key </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>keys_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>vals_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface to check if all values along a given dimension are true, according to an array of keys. </p>
<p >NaN values are ignored.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">keys_out</td><td>reduced keys </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vals_out</td><td>array containing 1's if all true; 0's otherwise </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">keys</td><td>keys array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">vals</td><td>input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>dimension along which the check occurs </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a>, if function returns successfully, else an <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> code is given </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="navelem"><a class="el" href="algorithm_8h.htm">algorithm.h</a></li>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:55 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
