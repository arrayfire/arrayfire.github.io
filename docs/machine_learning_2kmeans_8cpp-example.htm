<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>machine_learning/kmeans.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('machine_learning_2kmeans_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">machine_learning/kmeans.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"></div>
<div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> distance(<a class="code" href="classaf_1_1array.htm">array</a> data, <a class="code" href="classaf_1_1array.htm">array</a> means)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">int</span> n = data.<a name="a1"></a><a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(0); <span class="comment">// Number of features</span></div>
<div class="line">    <span class="keywordtype">int</span> k = means.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(1); <span class="comment">// Number of means</span></div>
<div class="line"></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> data2  = <a name="a2"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(data , 1, k, 1);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means2 = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(means, n, 1, 1);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Currently using manhattan distance</span></div>
<div class="line">    <span class="comment">// Can be replaced with other distance measures</span></div>
<div class="line">    <span class="keywordflow">return</span> <a name="a3"></a><a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(<a name="a4"></a><a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(data2 - means2), 2);</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="comment">// Get cluster id of each location in data</span></div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> clusterize(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> data, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> means)</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// Get manhattan distance</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dists = distance(data, means);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// get the locations of minimum distance</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> idx, val;</div>
<div class="line">    <a name="a5"></a><a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(val, idx, dists, 1);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Return cluster IDs</span></div>
<div class="line">    <span class="keywordflow">return</span> idx;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> new_means(<a class="code" href="classaf_1_1array.htm">array</a> data, <a class="code" href="classaf_1_1array.htm">array</a> clusters, <span class="keywordtype">int</span> k)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">int</span> d = data.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(2);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means = <a name="a6"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, 1, k, d);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> clustersd = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(clusters, 1, 1, d);</div>
<div class="line"></div>
<div class="line">    <a name="a7"></a><a class="code" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (<a name="_a8"></a><a class="code" href="classaf_1_1seq.htm">seq</a> ii, k) {</div>
<div class="line">        means(<a name="a9"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) = <a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(data * (clustersd == ii)) / (<a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(clusters == ii) + 1e-5);</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> means;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="comment">// kmeans(means, clusters, data, k)</span></div>
<div class="line"><span class="comment">// data:  input,  1D or 2D (range &gt; [0-1])</span></div>
<div class="line"><span class="comment">// k:     input,  # desired means (k &gt; 1)</span></div>
<div class="line"><span class="comment">// means: output, vector of means</span></div>
<div class="line"><span class="keywordtype">void</span> kmeans(<a class="code" href="classaf_1_1array.htm">array</a> &amp;means, <a class="code" href="classaf_1_1array.htm">array</a> &amp;clusters, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> in, <span class="keywordtype">int</span> k, <span class="keywordtype">int</span> iter=100)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">unsigned</span> n = in.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(0); <span class="comment">// Num features</span></div>
<div class="line">    <span class="keywordtype">unsigned</span> d = in.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(2); <span class="comment">// feature length</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">// reshape input</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> data = in * 0;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// re-center and scale down data to [0, 1]</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> minimum = <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(in);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> maximum = <a name="a10"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(in);</div>
<div class="line"></div>
<div class="line">    <a class="code" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a>(<a class="code" href="classaf_1_1seq.htm">seq</a> ii, d) {</div>
<div class="line">        data(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) = (in(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) - minimum(ii)) / maximum(ii);</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Initial guess of means</span></div>
<div class="line">    means = <a name="a11"></a><a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">randu</a>(1, k, d);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> curr_clusters = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, data.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(0)) - 1;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> prev_clusters;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Stop updating after specified number of iterations</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; iter; i++) {</div>
<div class="line">        <span class="comment">// Store previous cluster ids</span></div>
<div class="line">        prev_clusters = curr_clusters;</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Get cluster ids for current means</span></div>
<div class="line">        curr_clusters = clusterize(data, means);</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Break early if clusters not changing</span></div>
<div class="line">        <span class="keywordtype">unsigned</span> num_changed = count&lt;unsigned&gt;(prev_clusters != curr_clusters);</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">if</span> (num_changed &lt; (n/1000) + 1) <span class="keywordflow">break</span>;</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Update current means for new clusters</span></div>
<div class="line">        means = new_means(data, curr_clusters, k);</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Scale up means</span></div>
<div class="line">    <a class="code" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a>(<a class="code" href="classaf_1_1seq.htm">seq</a> ii, d) {</div>
<div class="line">        means(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) = maximum(ii) * means(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) + minimum(ii);</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    clusters = prev_clusters;</div>
<div class="line"></div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="comment">// K-Means image recoloring.</span></div>
<div class="line"><span class="comment">// Shifts the hues of an image to the k mean hues.</span></div>
<div class="line"><span class="keywordtype">int</span> kmeans_demo(<span class="keywordtype">int</span> k, <span class="keywordtype">bool</span> console)</div>
<div class="line">{</div>
<div class="line">    printf(<span class="stringliteral">&quot;** ArrayFire K-Means Demo (k = %d) **\n\n&quot;</span>, k);</div>
<div class="line"></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> img = <a name="a12"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR<span class="stringliteral">&quot;/examples/images/lena.ppm&quot;</span>, <span class="keyword">true</span>) / 255; <span class="comment">// [0-255]</span></div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">int</span> w = img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(0), h = img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(1), c = img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(2);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> vec = <a name="a13"></a><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(img, w * h, 1, c);</div>
<div class="line"></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means_full, clusters_full;</div>
<div class="line">    kmeans(means_full, clusters_full, vec, k);</div>
<div class="line"></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means_half, clusters_half;</div>
<div class="line">    kmeans(means_half, clusters_half, vec, k / 2);</div>
<div class="line"></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means_dbl, clusters_dbl;</div>
<div class="line">    kmeans(means_dbl, clusters_dbl, vec, k * 2);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line"><span class="preprocessor">#if 0</span></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out_full = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_full(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, clusters_full, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>), img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>());</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out_half = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_half(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, clusters_half, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>), img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>());</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out_dbl  = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_dbl (<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, clusters_dbl , <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>), img.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>());</div>
<div class="line"></div>
<div class="line">        <span class="keywordtype">char</span> str_full[32], str_half[32], str_dbl[32];</div>
<div class="line">        sprintf(str_full, <span class="stringliteral">&quot;%2d clusters&quot;</span>, k);</div>
<div class="line">        sprintf(str_half, <span class="stringliteral">&quot;%2d clusters&quot;</span>, k/2);</div>
<div class="line">        sprintf(str_dbl , <span class="stringliteral">&quot;%2d clusters&quot;</span>, k*2);</div>
<div class="line"></div>
<div class="line">        fig(<span class="stringliteral">&quot;color&quot;</span>,<span class="stringliteral">&quot;default&quot;</span>);</div>
<div class="line">        fig(<span class="stringliteral">&quot;sub&quot;</span>,2,2,1); image(img); fig(<span class="stringliteral">&quot;title&quot;</span>,<span class="stringliteral">&quot;input&quot;</span>);</div>
<div class="line">        fig(<span class="stringliteral">&quot;sub&quot;</span>,2,2,2); image(out_full); fig(<span class="stringliteral">&quot;title&quot;</span>, str_full);</div>
<div class="line">        fig(<span class="stringliteral">&quot;sub&quot;</span>,2,2,3); image(out_half); fig(<span class="stringliteral">&quot;title&quot;</span>, str_half);</div>
<div class="line">        fig(<span class="stringliteral">&quot;sub&quot;</span>,2,2,4); image(out_dbl ); fig(<span class="stringliteral">&quot;title&quot;</span>, str_dbl );</div>
<div class="line">        printf(<span class="stringliteral">&quot;Hit enter to finish\n&quot;</span>);</div>
<div class="line">        getchar();</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line">        printf(<span class="stringliteral">&quot;Graphics not implemented yet\n&quot;</span>);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        means_full = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_full, means_full.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(1), means_full.<a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>(2));</div>
<div class="line">        means_half = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_half, means_half.dims(1), means_half.dims(2));</div>
<div class="line">        means_dbl  = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_dbl , means_dbl.dims(1) , means_dbl.dims(2) );</div>
<div class="line"></div>
<div class="line">        <a name="a14"></a><a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(means_full);</div>
<div class="line">        <a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(means_half);</div>
<div class="line">        <a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(means_dbl );</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">    <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> k = argc &gt; 3 ? atoi(argv[3]) : 16;</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line"></div>
<div class="line">        <a name="a15"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a16"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        <span class="keywordflow">return</span> kmeans_demo(k, console);</div>
<div class="line"></div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a17"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) {</div>
<div class="line">        std::cerr &lt;&lt; ae.<a name="a18"></a><a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>() &lt;&lt; std::endl;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
