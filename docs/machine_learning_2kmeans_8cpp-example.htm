<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: machine_learning/kmeans.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('machine_learning_2kmeans_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">machine_learning/kmeans.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> distance(<a class="code" href="classaf_1_1array.htm">array</a> data, <a class="code" href="classaf_1_1array.htm">array</a> means) {</div>
<div class="line">    <span class="keywordtype">int</span> n = data.<a name="a1"></a><a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);   <span class="comment">// Number of features</span></div>
<div class="line">    <span class="keywordtype">int</span> k = means.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);  <span class="comment">// Number of means</span></div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> data2  = <a name="a2"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(data, 1, k, 1);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means2 = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(means, n, 1, 1);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Currently using manhattan distance</span></div>
<div class="line">    <span class="comment">// Can be replaced with other distance measures</span></div>
<div class="line">    <span class="keywordflow">return</span> <a name="a3"></a><a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(<a name="a4"></a><a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(data2 - means2), 2);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Get cluster id of each location in data</span></div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> clusterize(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> data, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> means) {</div>
<div class="line">    <span class="comment">// Get manhattan distance</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dists = distance(data, means);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// get the locations of minimum distance</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> idx, val;</div>
<div class="line">    <a name="a5"></a><a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(val, idx, dists, 1);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Return cluster IDs</span></div>
<div class="line">    <span class="keywordflow">return</span> idx;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> new_means(<a class="code" href="classaf_1_1array.htm">array</a> data, <a class="code" href="classaf_1_1array.htm">array</a> clusters, <span class="keywordtype">int</span> k) {</div>
<div class="line">    <span class="keywordtype">int</span> d           = data.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means     = <a name="a6"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, 1, k, d);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> clustersd = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(clusters, 1, 1, d);</div>
<div class="line"> </div>
<div class="line">    <a name="a7"></a><a class="code" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a>(<a name="_a8"></a><a class="code" href="classaf_1_1seq.htm">seq</a> ii, k) {</div>
<div class="line">        means(<a name="a9"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) =</div>
<div class="line">            <a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(data * (clustersd == ii)) / (<a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(clusters == ii) + 1e-5);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> means;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// kmeans(means, clusters, data, k)</span></div>
<div class="line"><span class="comment">// data:  input,  1D or 2D (range &gt; [0-1])</span></div>
<div class="line"><span class="comment">// k:     input,  # desired means (k &gt; 1)</span></div>
<div class="line"><span class="comment">// means: output, vector of means</span></div>
<div class="line"><span class="keywordtype">void</span> kmeans(<a class="code" href="classaf_1_1array.htm">array</a> &amp;means, <a class="code" href="classaf_1_1array.htm">array</a> &amp;clusters, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> in, <span class="keywordtype">int</span> k,</div>
<div class="line">            <span class="keywordtype">int</span> iter = 100) {</div>
<div class="line">    <span class="keywordtype">unsigned</span> n = in.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);  <span class="comment">// Num features</span></div>
<div class="line">    <span class="keywordtype">unsigned</span> d = in.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2);  <span class="comment">// feature length</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// reshape input</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> data = in * 0;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// re-center and scale down data to [0, 1]</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> minimum = <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(in);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> maximum = <a name="a10"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(in);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a>(<a class="code" href="classaf_1_1seq.htm">seq</a> ii, d) {</div>
<div class="line">        data(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) =</div>
<div class="line">            (in(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) - minimum(ii).<a name="a11"></a><a class="code" href="group__method__mat.htm#ga048d77db849d74f18a13dabfd43ce55d">scalar</a>&lt;<span class="keywordtype">float</span>&gt;()) /</div>
<div class="line">            maximum(ii).<a class="code" href="group__method__mat.htm#ga048d77db849d74f18a13dabfd43ce55d">scalar</a>&lt;<span class="keywordtype">float</span>&gt;();</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Initial guess of means</span></div>
<div class="line">    means               = <a name="a12"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(1, k, d);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> curr_clusters = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, data.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0)) - 1;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> prev_clusters;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Stop updating after specified number of iterations</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; iter; i++) {</div>
<div class="line">        <span class="comment">// Store previous cluster ids</span></div>
<div class="line">        prev_clusters = curr_clusters;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Get cluster ids for current means</span></div>
<div class="line">        curr_clusters = clusterize(data, means);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Break early if clusters not changing</span></div>
<div class="line">        <span class="keywordtype">unsigned</span> num_changed = count&lt;unsigned&gt;(prev_clusters != curr_clusters);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (num_changed &lt; (n / 1000) + 1) <span class="keywordflow">break</span>;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Update current means for new clusters</span></div>
<div class="line">        means = new_means(data, curr_clusters, k);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Scale up means</span></div>
<div class="line">    <a class="code" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a>(<a class="code" href="classaf_1_1seq.htm">seq</a> ii, d) {</div>
<div class="line">        means(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) =</div>
<div class="line">            maximum(ii) * means(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii) + minimum(ii);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    clusters = prev_clusters;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// K-Means image recoloring.</span></div>
<div class="line"><span class="comment">// Shifts the hues of an image to the k mean hues.</span></div>
<div class="line"><span class="keywordtype">int</span> kmeans_demo(<span class="keywordtype">int</span> k, <span class="keywordtype">bool</span> console) {</div>
<div class="line">    printf(<span class="stringliteral">&quot;** ArrayFire K-Means Demo (k = %d) **\n\n&quot;</span>, k);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> img =</div>
<div class="line">        <a name="a13"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/spider.jpg&quot;</span>) / 255;  <span class="comment">// [0-255]</span></div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> w = img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), h = img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), c = img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> vec = <a name="a14"></a><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(img, w * h, 1, c);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means_full, clusters_full;</div>
<div class="line">    kmeans(means_full, clusters_full, vec, k);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means_half, clusters_half;</div>
<div class="line">    kmeans(means_half, clusters_half, vec, k / 2);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> means_dbl, clusters_dbl;</div>
<div class="line">    kmeans(means_dbl, clusters_dbl, vec, k * 2);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out_full =</div>
<div class="line">            <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_full(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, clusters_full, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>), img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out_half =</div>
<div class="line">            <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_half(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, clusters_half, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>), img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> out_dbl =</div>
<div class="line">            <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_dbl(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, clusters_dbl, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>), img.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line"> </div>
<div class="line">        <a name="_a15"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd(800, 800, <span class="stringliteral">&quot;ArrayFire K-Means Demo&quot;</span>);</div>
<div class="line">        wnd.grid(2, 2);</div>
<div class="line">        std::stringstream out_full_caption, out_half_caption, out_dbl_caption;</div>
<div class="line">        out_full_caption &lt;&lt; <span class="stringliteral">&quot;k = &quot;</span> &lt;&lt; k;</div>
<div class="line">        out_half_caption &lt;&lt; <span class="stringliteral">&quot;k = &quot;</span> &lt;&lt; k / 2;</div>
<div class="line">        out_dbl_caption &lt;&lt; <span class="stringliteral">&quot;k = &quot;</span> &lt;&lt; k * 2;</div>
<div class="line">        <span class="keywordflow">while</span> (!wnd.close()) {</div>
<div class="line">            wnd(0, 0).image(img, <span class="stringliteral">&quot;Input Image&quot;</span>);</div>
<div class="line">            wnd(0, 1).image(out_full, out_full_caption.str().c_str());</div>
<div class="line">            wnd(1, 0).image(out_half, out_half_caption.str().c_str());</div>
<div class="line">            wnd(1, 1).image(out_dbl, out_dbl_caption.str().c_str());</div>
<div class="line">            wnd.show();</div>
<div class="line">        }</div>
<div class="line">    } <span class="keywordflow">else</span> {</div>
<div class="line">        means_full =</div>
<div class="line">            <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_full, means_full.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), means_full.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2));</div>
<div class="line">        means_half =</div>
<div class="line">            <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_half, means_half.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), means_half.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2));</div>
<div class="line">        means_dbl = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(means_dbl, means_dbl.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), means_dbl.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(2));</div>
<div class="line"> </div>
<div class="line">        <a name="a16"></a><a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(means_full);</div>
<div class="line">        <a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(means_half);</div>
<div class="line">        <a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(means_dbl);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> k        = argc &gt; 3 ? atoi(argv[3]) : 8;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a name="a17"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a18"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        <span class="keywordflow">return</span> kmeans_demo(k, console);</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a19"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) { std::cerr &lt;&lt; ae.<a name="a20"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>() &lt;&lt; std::endl; }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:45</a></div></div>
<div class="ttc" id="agfor_8h_htm_a6d6cd11d53daad217fd0b92f5a7ceec6"><div class="ttname"><a href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a></div><div class="ttdeci">#define gfor(var,...)</div><div class="ttdef"><b>Definition:</b> <a href="gfor_8h_source.htm#l00033">gfor.h:33</a></div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga382a69ec85a6beea79e95aeaef591073"><div class="ttname"><a href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga23aa8c28a5ffa9368cc92abb143f5eaa"><div class="ttname"><a href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface for absolute value.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:14</a></div></div>
<div class="ttc" id="autil_8h_htm_a6de8e7f9eb3914d1cea66e55e7b791d3"><div class="ttname"><a href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a></div><div class="ttdeci">#define af_print(...)</div><div class="ttdef"><b>Definition:</b> <a href="util_8h_source.htm#l00148">util.h:148</a></div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="agroup__method__mat_htm_ga10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:28</a></div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_ga3548059d64e0cefc7fedb4ec28321d32"><div class="ttname"><a href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="agroup__method__mat_htm_ga048d77db849d74f18a13dabfd43ce55d"><div class="ttname"><a href="group__method__mat.htm#ga048d77db849d74f18a13dabfd43ce55d">af::array::scalar</a></div><div class="ttdeci">T scalar() const</div><div class="ttdoc">Get the first element of the array as a scalar.</div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="agroup__imageio__func__load_htm_ga8bcf01ffa60bc513856d98b8a63bb12a"><div class="ttname"><a href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">af::loadImage</a></div><div class="ttdeci">AFAPI array loadImage(const char *filename, const bool is_color=false)</div><div class="ttdoc">C++ Interface for loading an image.</div></div>
<div class="ttc" id="agroup__reduce__func__sum_htm_ga964a8e7e78dd6d8f4d20c17edf82dbf5"><div class="ttname"><a href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">af::sum</a></div><div class="ttdeci">AFAPI array sum(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for sum of elements in an array.</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="agroup__reduce__func__min_htm_ga2b1287d1babb569d28bc6ee1c8e8e1ea"><div class="ttname"><a href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">af::min</a></div><div class="ttdeci">AFAPI array min(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for minimum values in an array.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
