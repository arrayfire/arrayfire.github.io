<!-- HTML header for doxygen 1.9.3-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: mod</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
  <!--<td id="projectalign">
   <div id="projectname">ArrayFire<span id="projectnumber">&#160;3.8.1</span>
   </div>
   <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>-->
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__arith__func__mod.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">mod<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__mathfunc__mat.htm">Mathematical functions</a> &raquo; <a class="el" href="group__numeric__mat.htm">Numeric functions</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Compute \(x - n * y\) where n is quotient of \(x / y\).  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga01924d1b59d8886e46fabd2dc9b27e0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga01924d1b59d8886e46fabd2dc9b27e0f">af_mod</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> lhs, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> rhs, const bool batch)</td></tr>
<tr class="memdesc:ga01924d1b59d8886e46fabd2dc9b27e0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for modulus.  <a href="group__arith__func__mod.htm#ga01924d1b59d8886e46fabd2dc9b27e0f">More...</a><br /></td></tr>
<tr class="separator:ga01924d1b59d8886e46fabd2dc9b27e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee3c7dcd1147fcf28cc379fb23911a7a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gaee3c7dcd1147fcf28cc379fb23911a7a">mod</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gaee3c7dcd1147fcf28cc379fb23911a7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for modulus when dividend and divisor are arrays or one of them is scalar.  <a href="group__arith__func__mod.htm#gaee3c7dcd1147fcf28cc379fb23911a7a">More...</a><br /></td></tr>
<tr class="separator:gaee3c7dcd1147fcf28cc379fb23911a7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6f66d50a2bea9c47adf37820e3811646"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga6f66d50a2bea9c47adf37820e3811646">mod</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double rhs)</td></tr>
<tr class="memdesc:ga6f66d50a2bea9c47adf37820e3811646"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for modulus when dividend and divisor are arrays or one of them is scalar.  <a href="group__arith__func__mod.htm#ga6f66d50a2bea9c47adf37820e3811646">More...</a><br /></td></tr>
<tr class="separator:ga6f66d50a2bea9c47adf37820e3811646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacb221ae62ca12b7d8d3c3a417832ca14"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gacb221ae62ca12b7d8d3c3a417832ca14">mod</a> (const double lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gacb221ae62ca12b7d8d3c3a417832ca14"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for modulus when dividend and divisor are arrays or one of them is scalar.  <a href="group__arith__func__mod.htm#gacb221ae62ca12b7d8d3c3a417832ca14">More...</a><br /></td></tr>
<tr class="separator:gacb221ae62ca12b7d8d3c3a417832ca14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d7b2765f4b08919b5329c18ab6be5a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga5d7b2765f4b08919b5329c18ab6be5a1">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga5d7b2765f4b08919b5329c18ab6be5a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga5d7b2765f4b08919b5329c18ab6be5a1">More...</a><br /></td></tr>
<tr class="separator:ga5d7b2765f4b08919b5329c18ab6be5a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34e8020b614980167ad9a698681556ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga34e8020b614980167ad9a698681556ff">operator%</a> (const bool &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga34e8020b614980167ad9a698681556ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga34e8020b614980167ad9a698681556ff">More...</a><br /></td></tr>
<tr class="separator:ga34e8020b614980167ad9a698681556ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8fb5f43d510bef80bf8c35c526a1cd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gab8fb5f43d510bef80bf8c35c526a1cd2">operator%</a> (const int &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gab8fb5f43d510bef80bf8c35c526a1cd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gab8fb5f43d510bef80bf8c35c526a1cd2">More...</a><br /></td></tr>
<tr class="separator:gab8fb5f43d510bef80bf8c35c526a1cd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga033c4e72bb77f1538a25dd815a616166"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga033c4e72bb77f1538a25dd815a616166">operator%</a> (const unsigned &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga033c4e72bb77f1538a25dd815a616166"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga033c4e72bb77f1538a25dd815a616166">More...</a><br /></td></tr>
<tr class="separator:ga033c4e72bb77f1538a25dd815a616166"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe985103a1e4cbac52b7930a4d57fd81"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gabe985103a1e4cbac52b7930a4d57fd81">operator%</a> (const char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gabe985103a1e4cbac52b7930a4d57fd81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gabe985103a1e4cbac52b7930a4d57fd81">More...</a><br /></td></tr>
<tr class="separator:gabe985103a1e4cbac52b7930a4d57fd81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b5ec05d400762b7da2a752e37dff859"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga4b5ec05d400762b7da2a752e37dff859">operator%</a> (const unsigned char &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4b5ec05d400762b7da2a752e37dff859"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga4b5ec05d400762b7da2a752e37dff859">More...</a><br /></td></tr>
<tr class="separator:ga4b5ec05d400762b7da2a752e37dff859"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga485a775d6c564150b78fb9e75f88dd16"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga485a775d6c564150b78fb9e75f88dd16">operator%</a> (const long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga485a775d6c564150b78fb9e75f88dd16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga485a775d6c564150b78fb9e75f88dd16">More...</a><br /></td></tr>
<tr class="separator:ga485a775d6c564150b78fb9e75f88dd16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac22e53f2ce9aac324bbd1e3dc6b95043"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gac22e53f2ce9aac324bbd1e3dc6b95043">operator%</a> (const unsigned long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gac22e53f2ce9aac324bbd1e3dc6b95043"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gac22e53f2ce9aac324bbd1e3dc6b95043">More...</a><br /></td></tr>
<tr class="separator:gac22e53f2ce9aac324bbd1e3dc6b95043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga25303731dbeb3918b506c5cf4a2d7044"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga25303731dbeb3918b506c5cf4a2d7044">operator%</a> (const long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga25303731dbeb3918b506c5cf4a2d7044"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga25303731dbeb3918b506c5cf4a2d7044">More...</a><br /></td></tr>
<tr class="separator:ga25303731dbeb3918b506c5cf4a2d7044"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6bcb6d5e9f2167c6d78d9447a2cf8381"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga6bcb6d5e9f2167c6d78d9447a2cf8381">operator%</a> (const unsigned long long &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6bcb6d5e9f2167c6d78d9447a2cf8381"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga6bcb6d5e9f2167c6d78d9447a2cf8381">More...</a><br /></td></tr>
<tr class="separator:ga6bcb6d5e9f2167c6d78d9447a2cf8381"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4aab986ad83e47cf9f05dafc782d5af9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga4aab986ad83e47cf9f05dafc782d5af9">operator%</a> (const double &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4aab986ad83e47cf9f05dafc782d5af9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga4aab986ad83e47cf9f05dafc782d5af9">More...</a><br /></td></tr>
<tr class="separator:ga4aab986ad83e47cf9f05dafc782d5af9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga313a4fe5b9dff44af5330696d13327d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga313a4fe5b9dff44af5330696d13327d3">operator%</a> (const float &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga313a4fe5b9dff44af5330696d13327d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga313a4fe5b9dff44af5330696d13327d3">More...</a><br /></td></tr>
<tr class="separator:ga313a4fe5b9dff44af5330696d13327d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f63e1f0bfbd5525de14de9106da0947"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga9f63e1f0bfbd5525de14de9106da0947">operator%</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9f63e1f0bfbd5525de14de9106da0947"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga9f63e1f0bfbd5525de14de9106da0947">More...</a><br /></td></tr>
<tr class="separator:ga9f63e1f0bfbd5525de14de9106da0947"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacaf1272e2b5e57b58ee1130b40655124"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gacaf1272e2b5e57b58ee1130b40655124">operator%</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:gacaf1272e2b5e57b58ee1130b40655124"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gacaf1272e2b5e57b58ee1130b40655124">More...</a><br /></td></tr>
<tr class="separator:gacaf1272e2b5e57b58ee1130b40655124"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a25aca6bb245f59df020d5302025495"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga2a25aca6bb245f59df020d5302025495">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const bool &amp;rhs)</td></tr>
<tr class="memdesc:ga2a25aca6bb245f59df020d5302025495"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga2a25aca6bb245f59df020d5302025495">More...</a><br /></td></tr>
<tr class="separator:ga2a25aca6bb245f59df020d5302025495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8501c6a2c23c744ad1029326ac6db09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gab8501c6a2c23c744ad1029326ac6db09">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const int &amp;rhs)</td></tr>
<tr class="memdesc:gab8501c6a2c23c744ad1029326ac6db09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gab8501c6a2c23c744ad1029326ac6db09">More...</a><br /></td></tr>
<tr class="separator:gab8501c6a2c23c744ad1029326ac6db09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68136d2e155228d2dc2a1505b1b8ea8d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga68136d2e155228d2dc2a1505b1b8ea8d">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned &amp;rhs)</td></tr>
<tr class="memdesc:ga68136d2e155228d2dc2a1505b1b8ea8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga68136d2e155228d2dc2a1505b1b8ea8d">More...</a><br /></td></tr>
<tr class="separator:ga68136d2e155228d2dc2a1505b1b8ea8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7b8f4701a28124ab6b08c38d1b615493"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga7b8f4701a28124ab6b08c38d1b615493">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const char &amp;rhs)</td></tr>
<tr class="memdesc:ga7b8f4701a28124ab6b08c38d1b615493"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga7b8f4701a28124ab6b08c38d1b615493">More...</a><br /></td></tr>
<tr class="separator:ga7b8f4701a28124ab6b08c38d1b615493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac9c3aa591a589f46ff5c99c0965418d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gac9c3aa591a589f46ff5c99c0965418d9">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned char &amp;rhs)</td></tr>
<tr class="memdesc:gac9c3aa591a589f46ff5c99c0965418d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gac9c3aa591a589f46ff5c99c0965418d9">More...</a><br /></td></tr>
<tr class="separator:gac9c3aa591a589f46ff5c99c0965418d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga242cc64e5ef76c8a11b98e552fb6bded"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga242cc64e5ef76c8a11b98e552fb6bded">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long &amp;rhs)</td></tr>
<tr class="memdesc:ga242cc64e5ef76c8a11b98e552fb6bded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga242cc64e5ef76c8a11b98e552fb6bded">More...</a><br /></td></tr>
<tr class="separator:ga242cc64e5ef76c8a11b98e552fb6bded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb5658ccce4d8170d64397e98c8d2f01"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gafb5658ccce4d8170d64397e98c8d2f01">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long &amp;rhs)</td></tr>
<tr class="memdesc:gafb5658ccce4d8170d64397e98c8d2f01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gafb5658ccce4d8170d64397e98c8d2f01">More...</a><br /></td></tr>
<tr class="separator:gafb5658ccce4d8170d64397e98c8d2f01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga928a076ddbe170812779e4c5be54b0cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga928a076ddbe170812779e4c5be54b0cc">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const long long &amp;rhs)</td></tr>
<tr class="memdesc:ga928a076ddbe170812779e4c5be54b0cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga928a076ddbe170812779e4c5be54b0cc">More...</a><br /></td></tr>
<tr class="separator:ga928a076ddbe170812779e4c5be54b0cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga594d80e7dc5d489dbe8531daf4a903eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga594d80e7dc5d489dbe8531daf4a903eb">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned long long &amp;rhs)</td></tr>
<tr class="memdesc:ga594d80e7dc5d489dbe8531daf4a903eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga594d80e7dc5d489dbe8531daf4a903eb">More...</a><br /></td></tr>
<tr class="separator:ga594d80e7dc5d489dbe8531daf4a903eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga03242dff9f96a81161813f29570e32ce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga03242dff9f96a81161813f29570e32ce">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="memdesc:ga03242dff9f96a81161813f29570e32ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga03242dff9f96a81161813f29570e32ce">More...</a><br /></td></tr>
<tr class="separator:ga03242dff9f96a81161813f29570e32ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1521fc58c14a72d46a2c96c1328b324b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga1521fc58c14a72d46a2c96c1328b324b">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const float &amp;rhs)</td></tr>
<tr class="memdesc:ga1521fc58c14a72d46a2c96c1328b324b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga1521fc58c14a72d46a2c96c1328b324b">More...</a><br /></td></tr>
<tr class="separator:ga1521fc58c14a72d46a2c96c1328b324b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4bfe12c32ba003c51cff1b8ae09be48f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga4bfe12c32ba003c51cff1b8ae09be48f">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga4bfe12c32ba003c51cff1b8ae09be48f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga4bfe12c32ba003c51cff1b8ae09be48f">More...</a><br /></td></tr>
<tr class="separator:ga4bfe12c32ba003c51cff1b8ae09be48f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9456140ec7d5e9f9a33efa2bf9b3b5f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga9456140ec7d5e9f9a33efa2bf9b3b5f0">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;rhs)</td></tr>
<tr class="separator:ga9456140ec7d5e9f9a33efa2bf9b3b5f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9ed9cd1b0d23cbc92443bb212da90281"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga9ed9cd1b0d23cbc92443bb212da90281">operator%</a> (const short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga9ed9cd1b0d23cbc92443bb212da90281"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga9ed9cd1b0d23cbc92443bb212da90281">More...</a><br /></td></tr>
<tr class="separator:ga9ed9cd1b0d23cbc92443bb212da90281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6815b34119be0a13de311c956a65e468"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga6815b34119be0a13de311c956a65e468">operator%</a> (const unsigned short &amp;lhs, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;rhs)</td></tr>
<tr class="memdesc:ga6815b34119be0a13de311c956a65e468"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#ga6815b34119be0a13de311c956a65e468">More...</a><br /></td></tr>
<tr class="separator:ga6815b34119be0a13de311c956a65e468"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5c6882d28d3e894a598bad824b19c4e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#gae5c6882d28d3e894a598bad824b19c4e">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const short &amp;rhs)</td></tr>
<tr class="memdesc:gae5c6882d28d3e894a598bad824b19c4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs an modulo operation on two arrays or an array and a value.  <a href="group__arith__func__mod.htm#gae5c6882d28d3e894a598bad824b19c4e">More...</a><br /></td></tr>
<tr class="separator:gae5c6882d28d3e894a598bad824b19c4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62ac57c63041d66547276d01df9aaeec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm#ga62ac57c63041d66547276d01df9aaeec">operator%</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;lhs, const unsigned short &amp;rhs)</td></tr>
<tr class="separator:ga62ac57c63041d66547276d01df9aaeec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Compute \(x - n * y\) where n is quotient of \(x / y\). </p>
<dl class="section note"><dt>Note</dt><dd>This function supports real inputs only. Complex inputs are not yet supported. </dd></dl>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga01924d1b59d8886e46fabd2dc9b27e0f" name="ga01924d1b59d8886e46fabd2dc9b27e0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga01924d1b59d8886e46fabd2dc9b27e0f">&#9670;&nbsp;</a></span>af_mod()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_mod </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>batch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for modulus. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain the output of <code>lhs</code> modulo <code>rhs</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>is dividend </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>is divisor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">batch</td><td>specifies if operations need to be performed in batch mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="gaee3c7dcd1147fcf28cc379fb23911a7a" name="gaee3c7dcd1147fcf28cc379fb23911a7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaee3c7dcd1147fcf28cc379fb23911a7a">&#9670;&nbsp;</a></span>mod() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::mod </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for modulus when dividend and divisor are arrays or one of them is scalar. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>is dividend </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>is divisor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>lhs</code> modulo <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga6f66d50a2bea9c47adf37820e3811646" name="ga6f66d50a2bea9c47adf37820e3811646"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6f66d50a2bea9c47adf37820e3811646">&#9670;&nbsp;</a></span>mod() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::mod </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for modulus when dividend and divisor are arrays or one of them is scalar. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>is dividend </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>is divisor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>lhs</code> modulo <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gacb221ae62ca12b7d8d3c3a417832ca14" name="gacb221ae62ca12b7d8d3c3a417832ca14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacb221ae62ca12b7d8d3c3a417832ca14">&#9670;&nbsp;</a></span>mod() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::mod </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for modulus when dividend and divisor are arrays or one of them is scalar. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>is dividend </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>is divisor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><code>lhs</code> modulo <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga5d7b2765f4b08919b5329c18ab6be5a1" name="ga5d7b2765f4b08919b5329c18ab6be5a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5d7b2765f4b08919b5329c18ab6be5a1">&#9670;&nbsp;</a></span>operator%() <span class="overload">[1/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga2a25aca6bb245f59df020d5302025495" name="ga2a25aca6bb245f59df020d5302025495"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2a25aca6bb245f59df020d5302025495">&#9670;&nbsp;</a></span>operator%() <span class="overload">[2/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga9456140ec7d5e9f9a33efa2bf9b3b5f0" name="ga9456140ec7d5e9f9a33efa2bf9b3b5f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9456140ec7d5e9f9a33efa2bf9b3b5f0">&#9670;&nbsp;</a></span>operator%() <span class="overload">[3/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga4bfe12c32ba003c51cff1b8ae09be48f" name="ga4bfe12c32ba003c51cff1b8ae09be48f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4bfe12c32ba003c51cff1b8ae09be48f">&#9670;&nbsp;</a></span>operator%() <span class="overload">[4/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga7b8f4701a28124ab6b08c38d1b615493" name="ga7b8f4701a28124ab6b08c38d1b615493"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7b8f4701a28124ab6b08c38d1b615493">&#9670;&nbsp;</a></span>operator%() <span class="overload">[5/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga03242dff9f96a81161813f29570e32ce" name="ga03242dff9f96a81161813f29570e32ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga03242dff9f96a81161813f29570e32ce">&#9670;&nbsp;</a></span>operator%() <span class="overload">[6/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga1521fc58c14a72d46a2c96c1328b324b" name="ga1521fc58c14a72d46a2c96c1328b324b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1521fc58c14a72d46a2c96c1328b324b">&#9670;&nbsp;</a></span>operator%() <span class="overload">[7/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gab8501c6a2c23c744ad1029326ac6db09" name="gab8501c6a2c23c744ad1029326ac6db09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab8501c6a2c23c744ad1029326ac6db09">&#9670;&nbsp;</a></span>operator%() <span class="overload">[8/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga242cc64e5ef76c8a11b98e552fb6bded" name="ga242cc64e5ef76c8a11b98e552fb6bded"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga242cc64e5ef76c8a11b98e552fb6bded">&#9670;&nbsp;</a></span>operator%() <span class="overload">[9/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga928a076ddbe170812779e4c5be54b0cc" name="ga928a076ddbe170812779e4c5be54b0cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga928a076ddbe170812779e4c5be54b0cc">&#9670;&nbsp;</a></span>operator%() <span class="overload">[10/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gae5c6882d28d3e894a598bad824b19c4e" name="gae5c6882d28d3e894a598bad824b19c4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae5c6882d28d3e894a598bad824b19c4e">&#9670;&nbsp;</a></span>operator%() <span class="overload">[11/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga68136d2e155228d2dc2a1505b1b8ea8d" name="ga68136d2e155228d2dc2a1505b1b8ea8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga68136d2e155228d2dc2a1505b1b8ea8d">&#9670;&nbsp;</a></span>operator%() <span class="overload">[12/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gac9c3aa591a589f46ff5c99c0965418d9" name="gac9c3aa591a589f46ff5c99c0965418d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac9c3aa591a589f46ff5c99c0965418d9">&#9670;&nbsp;</a></span>operator%() <span class="overload">[13/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gafb5658ccce4d8170d64397e98c8d2f01" name="gafb5658ccce4d8170d64397e98c8d2f01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafb5658ccce4d8170d64397e98c8d2f01">&#9670;&nbsp;</a></span>operator%() <span class="overload">[14/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga594d80e7dc5d489dbe8531daf4a903eb" name="ga594d80e7dc5d489dbe8531daf4a903eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga594d80e7dc5d489dbe8531daf4a903eb">&#9670;&nbsp;</a></span>operator%() <span class="overload">[15/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga62ac57c63041d66547276d01df9aaeec" name="ga62ac57c63041d66547276d01df9aaeec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga62ac57c63041d66547276d01df9aaeec">&#9670;&nbsp;</a></span>operator%() <span class="overload">[16/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga34e8020b614980167ad9a698681556ff" name="ga34e8020b614980167ad9a698681556ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga34e8020b614980167ad9a698681556ff">&#9670;&nbsp;</a></span>operator%() <span class="overload">[17/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gacaf1272e2b5e57b58ee1130b40655124" name="gacaf1272e2b5e57b58ee1130b40655124"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacaf1272e2b5e57b58ee1130b40655124">&#9670;&nbsp;</a></span>operator%() <span class="overload">[18/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga9f63e1f0bfbd5525de14de9106da0947" name="ga9f63e1f0bfbd5525de14de9106da0947"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9f63e1f0bfbd5525de14de9106da0947">&#9670;&nbsp;</a></span>operator%() <span class="overload">[19/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gabe985103a1e4cbac52b7930a4d57fd81" name="gabe985103a1e4cbac52b7930a4d57fd81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabe985103a1e4cbac52b7930a4d57fd81">&#9670;&nbsp;</a></span>operator%() <span class="overload">[20/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga4aab986ad83e47cf9f05dafc782d5af9" name="ga4aab986ad83e47cf9f05dafc782d5af9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4aab986ad83e47cf9f05dafc782d5af9">&#9670;&nbsp;</a></span>operator%() <span class="overload">[21/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga313a4fe5b9dff44af5330696d13327d3" name="ga313a4fe5b9dff44af5330696d13327d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga313a4fe5b9dff44af5330696d13327d3">&#9670;&nbsp;</a></span>operator%() <span class="overload">[22/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gab8fb5f43d510bef80bf8c35c526a1cd2" name="gab8fb5f43d510bef80bf8c35c526a1cd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab8fb5f43d510bef80bf8c35c526a1cd2">&#9670;&nbsp;</a></span>operator%() <span class="overload">[23/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga485a775d6c564150b78fb9e75f88dd16" name="ga485a775d6c564150b78fb9e75f88dd16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga485a775d6c564150b78fb9e75f88dd16">&#9670;&nbsp;</a></span>operator%() <span class="overload">[24/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga25303731dbeb3918b506c5cf4a2d7044" name="ga25303731dbeb3918b506c5cf4a2d7044"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga25303731dbeb3918b506c5cf4a2d7044">&#9670;&nbsp;</a></span>operator%() <span class="overload">[25/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga9ed9cd1b0d23cbc92443bb212da90281" name="ga9ed9cd1b0d23cbc92443bb212da90281"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9ed9cd1b0d23cbc92443bb212da90281">&#9670;&nbsp;</a></span>operator%() <span class="overload">[26/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga033c4e72bb77f1538a25dd815a616166" name="ga033c4e72bb77f1538a25dd815a616166"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga033c4e72bb77f1538a25dd815a616166">&#9670;&nbsp;</a></span>operator%() <span class="overload">[27/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga4b5ec05d400762b7da2a752e37dff859" name="ga4b5ec05d400762b7da2a752e37dff859"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4b5ec05d400762b7da2a752e37dff859">&#9670;&nbsp;</a></span>operator%() <span class="overload">[28/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="gac22e53f2ce9aac324bbd1e3dc6b95043" name="gac22e53f2ce9aac324bbd1e3dc6b95043"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac22e53f2ce9aac324bbd1e3dc6b95043">&#9670;&nbsp;</a></span>operator%() <span class="overload">[29/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga6bcb6d5e9f2167c6d78d9447a2cf8381" name="ga6bcb6d5e9f2167c6d78d9447a2cf8381"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6bcb6d5e9f2167c6d78d9447a2cf8381">&#9670;&nbsp;</a></span>operator%() <span class="overload">[30/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
<a id="ga6815b34119be0a13de311c956a65e468" name="ga6815b34119be0a13de311c956a65e468"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6815b34119be0a13de311c956a65e468">&#9670;&nbsp;</a></span>operator%() <span class="overload">[31/31]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::operator% </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Performs an modulo operation on two arrays or an array and a value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>the left hand side value of the operand </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>the right hand side value of the operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with a modulo operation performed on each element of <code>lhs</code> and <code>rhs</code> </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Thu Feb 24 2022 14:12:33 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
    </ul>
</div>
</body>
</html>
