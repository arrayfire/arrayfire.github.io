<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>arrayfire-docs-3.6.2/docs/pages/getting_started.md (2018-11-19 17:22:56 +0530, (build dc38ef13)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('getting__started_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">arrayfire-docs-3.6.2/docs/pages/getting_started.md (2018-11-19 17:22:56 +0530, (build dc38ef13))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="getting__started_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Getting Started {#gettingstarted}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;===============</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;[TOC]</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;# Introduction</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;ArrayFire is a high performance software library for parallel computing with</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;an easy-to-use API. ArrayFire abstracts away much of the details of</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;programming parallel architectures by providing a high-level container object,</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;the [array](\ref af::array), that represents data stored on a CPU, GPU, FPGA,</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;or other type of accelerator. This abstraction permits developers to write</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;massively parallel applications in a high-level language where they need</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;not be concerned about low-level optimizations that are frequently required to</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;achieve high throughput on most parallel architectures.</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;# Supported data types {#gettingstarted_datatypes}</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;ArrayFire provides one generic container object, the [array](\ref af::array)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;on which functions and mathematical operations are performed. The `array`</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;can represent one of many different [basic data types](\ref af::af_dtype):</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;* [f32](\ref f32) real single-precision (`float`)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;* [c32](\ref c32) complex single-precision (`cfloat`)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;* [f64](\ref f64) real double-precision (`double`)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;* [c64](\ref c64) complex double-precision (`cdouble`)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;* [b8](\ref b8) 8-bit boolean values (`bool`)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;* [s32](\ref s32) 32-bit signed integer (`int`)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;* [u32](\ref u32) 32-bit unsigned integer (`unsigned`)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;* [u8](\ref u8) 8-bit unsigned values (`unsigned char`)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;* [s64](\ref s64) 64-bit signed integer (`intl`)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;* [u64](\ref u64) 64-bit unsigned integer (`uintl`)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;* [s16](\ref s16) 16-bit signed integer (`short`)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;* [u16](\ref u16) 16-bit unsigned integer (`unsigned short`)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;Most of these data types are supported on all modern GPUs; however, some</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;older devices may lack support for double precision arrays. In this case,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;a runtime error will be generated when the array is constructed.</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;If not specified otherwise, `array`s are created as single precision floating</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;point numbers (`f32`).</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;# Creating and populating an ArrayFire array {#getting_started_af_arrays}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;ArrayFire [array](\ref af::array)s represent memory stored on the device.</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;As such, creation and population of an array will consume memory on the device</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;which cannot freed until the `array` object goes out of scope. As device memory</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;allocation can be expensive, ArrayFire also includes a memory manager which</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;will re-use device memory whenever possible.</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;Arrays can be created using one of the [array constructors](\ref #construct_mat).</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;Below we show how to create 1D, 2D, and 3D arrays with uninitialized values:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;\snippet test/getting_started.cpp ex_getting_started_constructors</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;However, uninitialized memory is likely not useful in your application.</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;ArrayFire provides several convenient functions for creating arrays that contain</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;pre-populated values including constants, uniform random numbers, uniform</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;normally distributed numbers, and the identity matrix:</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;\snippet test/getting_started.cpp ex_getting_started_gen</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;A complete list of ArrayFire functions that automatically generate data</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;on the device may be found on the [functions to create arrays](\ref data_mat)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;page. As stated above, the default data type for arrays is [f32](\ref f32) (a</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;32-bit floating point number) unless specified otherwise.</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;ArrayFire `array`s may also be populated from data found on the host.</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;For example:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;\snippet test/getting_started.cpp ex_getting_started_init</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;ArrayFire also supports array initialization from memory already on the GPU.</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;For example, with CUDA one can populate an `array` directly using a call</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;to `cudaMemcpy`:</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;\snippet test/getting_started.cpp ex_getting_started_dev_ptr</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;Similar functionality exists for OpenCL too. If you wish to intermingle</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;ArrayFire with CUDA or OpenCL code, we suggest you consult the</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;[CUDA interoperability](\ref interop_cuda) or</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;[OpenCL interoperability](\ref interop_opencl) pages for detailed instructions.</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;# ArrayFire array contents, dimensions, and properties {#getting_started_array_properties}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;ArrayFire provides several functions to determine various aspects of arrays.</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;This includes functions to print the contents, query the dimensions, and</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;determine various other aspects of arrays.</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;The [af_print](\ref af::af_print) function can be used to print arrays that</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;have already been generated or any expression involving arrays:</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;\snippet test/getting_started.cpp ex_getting_started_print</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;The dimensions of an array may be determined using either a</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;[dim4](\ref af::dim4) object or by accessing the dimensions directly using the</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;[dims()](\ref af::array::dims) and [numdims()](\ref af::array::numdims)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;functions:</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;\snippet test/getting_started.cpp ex_getting_started_dims</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;In addition to dimensions, arrays also carry several properties including</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;methods to determine the underlying type and size (in bytes). You can even</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;determine whether the array is empty, real/complex, a row/column, or a scalar</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;or a vector:</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;\snippet test/getting_started.cpp ex_getting_started_prop</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;For further information on these capabilities, we suggest you consult the</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;full documentation on the [array](\ref af::array).</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;# Writing mathematical expressions in ArrayFire {#getting_started_writing_math}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;ArrayFire features an intelligent Just-In-Time (JIT) compilation engine that</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;converts expressions using arrays into the smallest number of CUDA/OpenCL</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;kernels. For most operations on arrays, ArrayFire functions like a vector library.</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;That means that an element-wise operation, like `c[i] = a[i] + b[i]` in C,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;would be written more concisely without indexing, like `c = a + b`.</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;When there are multiple expressions involving arrays, ArrayFire&#39;s JIT engine</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;will merge them together. This &quot;kernel fusion&quot; technology not only decreases</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;the number of kernel calls, but, more importantly, avoids extraneous global</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;memory operations.</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;Our JIT functionality extends across C/C++ function boundaries and only ends</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;when a non-JIT function is encountered or a synchronization operation is</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;explicitly called by the code.</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;ArrayFire provides [hundreds of functions](\ref arith_mat) for element-wise</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;operations. All of the standard operators (e.g. +,-,\*,/) are supported</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;as are most transcendental functions (sin, cos, log, sqrt, etc.).</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;Here are a few examples:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;\snippet test/getting_started.cpp ex_getting_started_arith</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;To see the complete list of functions please consult the documentation on</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;[mathematical](\ref mathfunc_mat), [linear algebra](\ref linalg_mat),</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;[signal processing](\ref signal_mat), and [statistics](\ref stats_mat).</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;# Mathematical constants {#getting_started_constants}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;ArrayFire contains several platform-independent constants, like</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;[Pi](\ref af::Pi), [NaN](\ref af::NaN), and [Inf](\ref af::Inf).</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;If ArrayFire does not have a constant you need, you can create your own</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;using the [af::constant](\ref af::constant) array constructor.</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;Constants can be used in all of ArrayFire&#39;s functions. Below we demonstrate</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;their use in element selection and a mathematical expression:</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;\snippet test/getting_started.cpp ex_getting_started_constants</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;Please note that our constants may, at times, conflict with macro definitions</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;in standard header files. When this occurs, please refer to our constants</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;using the `af::` namespace.</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;# Indexing {#getting_started_indexing}</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;Like all functions in ArrayFire, indexing is also executed in parallel on</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;the OpenCL/CUDA device.</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;Because of this, indexing becomes part of a JIT operation and is accomplished</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;using parentheses instead of square brackets (i.e. as `A(0)` instead of `A[0]`).</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;To index `af::array`s you may use one or a combination of the following functions:</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;* integer scalars</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;* [seq()](\ref af::seq) representing a linear sequence</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;* [end](\ref af::end) representing the last element of a dimension</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;* [span](\ref af::span) representing the entire dimension</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;* [row(i)](\ref af::array::row) or [col(i)](\ref af::array::col) specifying a single row/column</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;* [rows(first,last)](\ref af::array::rows) or [cols(first,last)](\ref af::array::cols)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; specifying a span of rows or columns</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;Please see the [indexing page](\ref indexing) for several examples of how to</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;use these functions.</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;# Getting access to ArrayFire array memory on the host and device {#getting_started_memory_access}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;Memory in `af::array`s may be accessed using the [host()](\ref af::array::host)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;and [device()](\ref af::array::device) functions.</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;The `host` function *copies* the data from the device and makes it available</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;in a C-style array on the host. As such, it is up to the developer to manage</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;any memory returned by `host`.</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;The `device` function returns a pointer/reference to device memory for</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;interoperability with external CUDA/OpenCL kernels. As this memory belongs to</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;ArrayFire, the programmer should not attempt to free/deallocate the pointer.</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;For example, here is how we can interact with both OpenCL and CUDA:</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;\snippet test/getting_started.cpp ex_getting_started_ptr</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;ArrayFire also provides several helper functions for creating `af::array`s from</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;OpenCL `cl_mem` references and `cl::Buffer` objects. See the `include/af/opencl.h`</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;file for further information.</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;Lastly, if you want only the first value from an `af::array` you can use</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;get it using the [scalar()](\ref af::array::scalar) function:</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;\snippet test/getting_started.cpp ex_getting_started_scalar</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;# Bitwise operators {#getting_started_bitwise_operators}</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;In addition to supporting standard mathematical functions, arrays</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;that contain integer data types also support bitwise operators including</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;and, or, and shift:</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;\snippet test/getting_started.cpp ex_getting_started_bit</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;# Using the ArrayFire API in C and C++ {#gettingstarted_api_usage}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;The ArrayFire API is wrapped into a unified C/C++ header. To use the library</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;simply include the `arrayfire.h` header file and start coding!</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;## Sample using the C API</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    #include &lt;arrayfire.h&gt;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    // Generate random data and sum and print the result</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    int main(void)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        // generate random values</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        int n = 10000;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        af_array a;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        af_randu(&amp;a, n);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        // sum all the values</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        float result;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        af_sum_all(&amp;result, a, 0);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        printf(&quot;sum: %g\n&quot;, sum);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        return 0;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;## Sample using the C++ API</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cpp}</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    #include &lt;arrayfire.h&gt;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    // Generate random data, sum and print the result.</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    int main(void)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        // Generate 10,000 random values</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        af::array a = af::randu(10000);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        // Sum the values and copy the result to the CPU:</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        double sum = af::sum&lt;float&gt;(a);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        printf(&quot;sum: %g\n&quot;, sum);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        return 0;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;# What to read next? {#getting_started_next_steps}</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;Now that you have a general introduction to ArrayFire, where do you go from</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;here? In particular you might find these documents useful</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;* [Building an ArrayFire program on Linux](\ref using_on_linux)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;* [Building an Arrayfire program on Windows](\ref using_on_windows)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;* [Timing ArrayFire code](\ref timing)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;# Where to go for help? {#getting_started_help}</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;* Google Groups: https://groups.google.com/forum/#!forum/arrayfire-users</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;* ArrayFire Services:  [Consulting](http://arrayfire.com/consulting/)  |  [Support](http://arrayfire.com/support/)   |  [Training](http://arrayfire.com/training/)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;* ArrayFire Blogs: http://arrayfire.com/blog/</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;* Email: &lt;mailto:technical@arrayfire.com&gt;</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
