<!-- HTML header for doxygen 1.9.3-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: machine_learning/bagging.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
  <!--<td id="projectalign">
   <div id="projectname">ArrayFire<span id="projectnumber">&#160;3.8.1</span>
   </div>
   <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>-->
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('machine_learning_2bagging_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">machine_learning/bagging.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;mnist_common.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Get accuracy of the predicted results</span></div>
<div class="line"><span class="keywordtype">float</span> accuracy(<span class="keyword">const</span> <a id="a0" name="a0"></a><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;predicted, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;target) {</div>
<div class="line">    <span class="keywordflow">return</span> 100 * count&lt;float&gt;(predicted == target) / target.elements();</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Calculate all the distances from testing set to training set</span></div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> distance(<a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train, <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test) {</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> feat_len  = train.<a id="a1" name="a1"></a><a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_train = train.<a id="a2" name="a2"></a><a class="code hl_variable" href="classaf_1_1dim4.htm#a5893a5aaf803937c81622366906c920e">dims</a>(0);</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> num_test  = test.dims(0);</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> dist          = <a id="a3" name="a3"></a><a class="code hl_function" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, num_train, num_test);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Iterate over each attribute</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; feat_len; ii++) {</div>
<div class="line">        <span class="comment">// Get a attribute vectors</span></div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_i = train(<a id="a4" name="a4"></a><a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii);</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_i  = test(<a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii).<a id="a5" name="a5"></a><a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Tile the vectors to generate matrices</span></div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_tiled = <a id="a6" name="a6"></a><a class="code hl_function" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(train_i, 1, num_test);</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_tiled  = <a class="code hl_function" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(test_i, num_train, 1);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Add the distance for this attribute</span></div>
<div class="line">        dist = dist + <a id="a7" name="a7"></a><a class="code hl_function" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(train_tiled - test_tiled);</div>
<div class="line">        dist.eval();  <span class="comment">// Necessary to free up train_i, test_i</span></div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> dist;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> knn(<a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;train_feats, <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;test_feats, <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;train_labels) {</div>
<div class="line">    <span class="comment">// Find distances between training and testing sets</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> dist = distance(train_feats, test_feats);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Find the neighbor producing the minimum distance</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> val, idx;</div>
<div class="line">    <a id="a8" name="a8"></a><a class="code hl_function" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(val, idx, dist);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Return the labels</span></div>
<div class="line">    <span class="keywordflow">return</span> train_labels(idx);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> bagging(<a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;train_feats, <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;test_feats, <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;train_labels,</div>
<div class="line">              <span class="keywordtype">int</span> num_classes, <span class="keywordtype">int</span> num_models, <span class="keywordtype">int</span> sample_size) {</div>
<div class="line">    <span class="keywordtype">int</span> num_train = train_feats.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">    <span class="keywordtype">int</span> num_test  = test_feats.<a class="code hl_variable" href="classaf_1_1dim4.htm#a5893a5aaf803937c81622366906c920e">dims</a>(0);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> idx        = <a id="a9" name="a9"></a><a class="code hl_function" href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">floor</a>(<a id="a10" name="a10"></a><a class="code hl_function" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(sample_size, num_models) * num_train);</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> labels_all = <a class="code hl_function" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, num_test, num_classes);</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> off        = seq(num_test);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_models; i++) {</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> ii = idx(<a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, i);</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_feats_ii  = <a id="a11" name="a11"></a><a class="code hl_function" href="group__index__func__lookup.htm#gac7bb6cefab347540526b1ac2584d006e">lookup</a>(train_feats, ii, 0);</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_labels_ii = train_labels(ii);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Get the predicted results</span></div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> labels_ii = knn(train_feats_ii, test_feats, train_labels_ii);</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> lidx      = labels_ii * num_test + off;</div>
<div class="line"> </div>
<div class="line">        labels_all(lidx) = labels_all(lidx) + 1;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> val, labels;</div>
<div class="line">    <a id="a12" name="a12"></a><a class="code hl_function" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, labels, labels_all, 1);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> labels;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> bagging_demo(<span class="keywordtype">bool</span> console, <span class="keywordtype">int</span> perc) {</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_images, train_labels;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_images, test_labels;</div>
<div class="line">    <span class="keywordtype">int</span> num_train, num_test, num_classes;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Load mnist data</span></div>
<div class="line">    <span class="keywordtype">float</span> frac = (float)(perc) / 100.0;</div>
<div class="line">    setup_mnist&lt;false&gt;(&amp;num_classes, &amp;num_train, &amp;num_test, train_images,</div>
<div class="line">                       test_images, train_labels, test_labels, frac);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> feature_length = train_images.elements() / num_train;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_feats  = <a id="a13" name="a13"></a><a class="code hl_function" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(train_images, feature_length, num_train).<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_feats   = <a class="code hl_function" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(test_images, feature_length, num_test).<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">int</span> num_models  = 10;</div>
<div class="line">    <span class="keywordtype">int</span> sample_size = 1000;</div>
<div class="line"> </div>
<div class="line">    timer::start();</div>
<div class="line">    <span class="comment">// Get the predicted results</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> res_labels = bagging(train_feats, test_feats, train_labels,</div>
<div class="line">                               num_classes, num_models, sample_size);</div>
<div class="line">    <span class="keywordtype">double</span> test_time = timer::stop();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Results</span></div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on testing  data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(res_labels, test_labels));</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;Prediction time: %4.4f\n&quot;</span>, test_time);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (<span class="keyword">false</span> &amp;&amp; !console) {</div>
<div class="line">        display_results&lt;false&gt;(test_images, res_labels, test_labels.T(), 20);</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> perc     = argc &gt; 3 ? atoi(argv[3]) : 60;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a14" name="a14"></a><a class="code hl_function" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">setDevice</a>(device);</div>
<div class="line">        <a id="a15" name="a15"></a><a class="code hl_function" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        bagging_demo(console, perc);</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a id="_a16" name="_a16"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) { std::cerr &lt;&lt; ae.<a id="a17" name="a17"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>() &lt;&lt; std::endl; }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm_a5893a5aaf803937c81622366906c920e"><div class="ttname"><a href="classaf_1_1dim4.htm#a5893a5aaf803937c81622366906c920e">af::dim4::dims</a></div><div class="ttdeci">dim_t dims[4]</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00028">dim4.hpp:28</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga23aa8c28a5ffa9368cc92abb143f5eaa"><div class="ttname"><a href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface for absolute value.</div></div>
<div class="ttc" id="agroup__arith__func__floor_htm_ga3e75b4b34f55a6ce68cfa762eff995a6"><div class="ttname"><a href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">af::floor</a></div><div class="ttdeci">AFAPI array floor(const array &amp;in)</div><div class="ttdoc">C++ Interface for flooring an array of numbers.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__index__func__lookup_htm_gac7bb6cefab347540526b1ac2584d006e"><div class="ttname"><a href="group__index__func__lookup.htm#gac7bb6cefab347540526b1ac2584d006e">af::lookup</a></div><div class="ttdeci">AFAPI array lookup(const array &amp;in, const array &amp;idx, const int dim=-1)</div><div class="ttdoc">Lookup the values of an input array by indexing with another array.</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga382a69ec85a6beea79e95aeaef591073"><div class="ttname"><a href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_ga3548059d64e0cefc7fedb4ec28321d32"><div class="ttname"><a href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="agroup__reduce__func__min_htm_ga2b1287d1babb569d28bc6ee1c8e8e1ea"><div class="ttname"><a href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">af::min</a></div><div class="ttdeci">AFAPI array min(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for minimum values in an array.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Thu Feb 24 2022 14:12:32 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
    </ul>
</div>
</body>
</html>
