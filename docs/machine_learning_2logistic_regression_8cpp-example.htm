<!-- HTML header for doxygen 1.9.3-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: machine_learning/logistic_regression.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
  <!--<td id="projectalign">
   <div id="projectname">ArrayFire<span id="projectnumber">&#160;3.8.1</span>
   </div>
   <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>-->
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('machine_learning_2logistic_regression_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">machine_learning/logistic_regression.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;mnist_common.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">float</span> accuracy(<span class="keyword">const</span> <a id="a0" name="a0"></a><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;predicted, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;target) {</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> val, plabels, tlabels;</div>
<div class="line">    <a id="a1" name="a1"></a><a class="code hl_function" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, tlabels, target, 1);</div>
<div class="line">    <a class="code hl_function" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(val, plabels, predicted, 1);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 100 * count&lt;float&gt;(plabels == tlabels) / tlabels.elements();</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">float</span> abserr(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;predicted, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;target) {</div>
<div class="line">    <span class="keywordflow">return</span> 100 * sum&lt;float&gt;(<a id="a2" name="a2"></a><a class="code hl_function" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(predicted - target)) / predicted.elements();</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Predict based on given parameters</span></div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> predict(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;X, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;Weights) {</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Z = <a id="a3" name="a3"></a><a class="code hl_function" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(X, Weights);</div>
<div class="line">    <span class="keywordflow">return</span> <a id="a4" name="a4"></a><a class="code hl_function" href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">sigmoid</a>(Z);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> cost(<a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;J, <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;dJ, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;Weights, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;X,</div>
<div class="line">          <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;Y, <span class="keywordtype">double</span> lambda = 1.0) {</div>
<div class="line">    <span class="comment">// Number of samples</span></div>
<div class="line">    <span class="keywordtype">int</span> m = Y.dims(0);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Make the lambda corresponding to Weights(0) == 0</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> lambdat = <a id="a5" name="a5"></a><a class="code hl_function" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(lambda, Weights.dims());</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// No regularization for bias weights</span></div>
<div class="line">    lambdat(0, <a id="a6" name="a6"></a><a class="code hl_variable" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) = 0;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Get the prediction</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> H = predict(X, Weights);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Cost of misprediction</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Jerr = -<a id="a7" name="a7"></a><a class="code hl_function" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(Y * <a id="a8" name="a8"></a><a class="code hl_function" href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">log</a>(H) + (1 - Y) * <a class="code hl_function" href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">log</a>(1 - H));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Regularization cost</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Jreg = 0.5 * <a class="code hl_function" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(lambdat * Weights * Weights);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Total cost</span></div>
<div class="line">    J = (Jerr + Jreg) / m;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Find the gradient of cost</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> D = (H - Y);</div>
<div class="line">    dJ      = (<a id="a9" name="a9"></a><a class="code hl_function" href="group__blas__func__matmul.htm#ga6655d7913b35d7e59f7c8560a5368fbc">matmulTN</a>(X, D) + lambdat * Weights) / m;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;X, <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;Y, <span class="keywordtype">double</span> alpha = 0.1,</div>
<div class="line">            <span class="keywordtype">double</span> lambda = 1.0, <span class="keywordtype">double</span> maxerr = 0.01, <span class="keywordtype">int</span> maxiter = 1000,</div>
<div class="line">            <span class="keywordtype">bool</span> verbose = <span class="keyword">false</span>) {</div>
<div class="line">    <span class="comment">// Initialize parameters to 0</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Weights = <a class="code hl_function" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, X.dims(1), Y.dims(1));</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> J, dJ;</div>
<div class="line">    <span class="keywordtype">float</span> err = 0;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; maxiter; i++) {</div>
<div class="line">        <span class="comment">// Get the cost and gradient</span></div>
<div class="line">        cost(J, dJ, Weights, X, Y, lambda);</div>
<div class="line"> </div>
<div class="line">        err = max&lt;float&gt;(<a class="code hl_function" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(J));</div>
<div class="line">        <span class="keywordflow">if</span> (err &lt; maxerr) {</div>
<div class="line">            printf(<span class="stringliteral">&quot;Iteration %4d Err: %.4f\n&quot;</span>, i + 1, err);</div>
<div class="line">            printf(<span class="stringliteral">&quot;Training converged\n&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span> Weights;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (verbose &amp;&amp; ((i + 1) % 10 == 0)) {</div>
<div class="line">            printf(<span class="stringliteral">&quot;Iteration %4d Err: %.4f\n&quot;</span>, i + 1, err);</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Update the parameters via gradient descent</span></div>
<div class="line">        Weights = Weights - alpha * dJ;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;Training stopped after %d iterations\n&quot;</span>, maxiter);</div>
<div class="line">    <span class="keywordflow">return</span> Weights;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> benchmark_logistic_regression(<span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;train_feats,</div>
<div class="line">                                   <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> &amp;train_targets,</div>
<div class="line">                                   <span class="keyword">const</span> <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_feats) {</div>
<div class="line">    timer::start();</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Weights = train(train_feats, train_targets, 0.1, 1.0, 0.01, 1000);</div>
<div class="line">    <a id="a10" name="a10"></a><a class="code hl_function" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    printf(<span class="stringliteral">&quot;Training time: %4.4lf s\n&quot;</span>, timer::stop());</div>
<div class="line"> </div>
<div class="line">    timer::start();</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> iter = 100;</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; iter; i++) {</div>
<div class="line">        <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_outputs = predict(test_feats, Weights);</div>
<div class="line">        test_outputs.eval();</div>
<div class="line">    }</div>
<div class="line">    <a class="code hl_function" href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a>();</div>
<div class="line">    printf(<span class="stringliteral">&quot;Prediction time: %4.4lf s\n&quot;</span>, timer::stop() / iter);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Demo of one vs all logistic regression</span></div>
<div class="line"><span class="keywordtype">int</span> logit_demo(<span class="keywordtype">bool</span> console, <span class="keywordtype">int</span> perc) {</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_images, train_targets;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_images, test_targets;</div>
<div class="line">    <span class="keywordtype">int</span> num_train, num_test, num_classes;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Load mnist data</span></div>
<div class="line">    <span class="keywordtype">float</span> frac = (float)(perc) / 100.0;</div>
<div class="line">    setup_mnist&lt;true&gt;(&amp;num_classes, &amp;num_train, &amp;num_test, train_images,</div>
<div class="line">                      test_images, train_targets, test_targets, frac);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Reshape images into feature vectors</span></div>
<div class="line">    <span class="keywordtype">int</span> feature_length = train_images.elements() / num_train;</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_feats  = <a id="a11" name="a11"></a><a class="code hl_function" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(train_images, feature_length, num_train).<a id="a12" name="a12"></a><a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_feats   = <a class="code hl_function" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(test_images, feature_length, num_test).<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    train_targets = train_targets.<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    test_targets  = test_targets.<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Add a bias that is always 1</span></div>
<div class="line">    train_feats = <a id="a13" name="a13"></a><a class="code hl_function" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1, <a class="code hl_function" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, num_train, 1), train_feats);</div>
<div class="line">    test_feats  = <a class="code hl_function" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1, <a class="code hl_function" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(1, num_test, 1), test_feats);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Train logistic regression parameters</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> Weights =</div>
<div class="line">        train(train_feats, train_targets,</div>
<div class="line">              0.1,    <span class="comment">// learning rate (aka alpha)</span></div>
<div class="line">              1.0,    <span class="comment">// regularization constant (aka weight decay, aka lamdba)</span></div>
<div class="line">              0.01,   <span class="comment">// maximum error</span></div>
<div class="line">              1000,   <span class="comment">// maximum iterations</span></div>
<div class="line">              <span class="keyword">true</span>);  <span class="comment">// verbose</span></div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Predict the results</span></div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> train_outputs = predict(train_feats, Weights);</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> test_outputs  = predict(test_feats, Weights);</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on training data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(train_outputs, train_targets));</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;Accuracy on testing data: %2.2f\n&quot;</span>,</div>
<div class="line">           accuracy(test_outputs, test_targets));</div>
<div class="line"> </div>
<div class="line">    printf(<span class="stringliteral">&quot;Maximum error on testing data: %2.2f\n&quot;</span>,</div>
<div class="line">           abserr(test_outputs, test_targets));</div>
<div class="line"> </div>
<div class="line">    benchmark_logistic_regression(train_feats, train_targets, test_feats);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (!console) {</div>
<div class="line">        test_outputs = test_outputs.T();</div>
<div class="line">        <span class="comment">// Get 20 random test images.</span></div>
<div class="line">        display_results&lt;true&gt;(test_images, test_outputs, test_targets.T(), 20);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordtype">int</span> device   = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">    <span class="keywordtype">bool</span> console = argc &gt; 2 ? argv[2][0] == <span class="charliteral">&#39;-&#39;</span> : <span class="keyword">false</span>;</div>
<div class="line">    <span class="keywordtype">int</span> perc     = argc &gt; 3 ? atoi(argv[3]) : 60;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a14" name="a14"></a><a class="code hl_function" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a id="a15" name="a15"></a><a class="code hl_function" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line">        <span class="keywordflow">return</span> logit_demo(console, perc);</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a id="_a16" name="_a16"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a> &amp;ae) { std::cerr &lt;&lt; ae.<a id="a17" name="a17"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>() &lt;&lt; std::endl; }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga23aa8c28a5ffa9368cc92abb143f5eaa"><div class="ttname"><a href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface for absolute value.</div></div>
<div class="ttc" id="agroup__arith__func__log_htm_gaf15f1af67e62541e0322f4c94acd0293"><div class="ttname"><a href="group__arith__func__log.htm#gaf15f1af67e62541e0322f4c94acd0293">af::log</a></div><div class="ttdeci">AFAPI array log(const array &amp;in)</div><div class="ttdoc">C++ Interface for natural logarithm.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_ga63306b6ed967bd1055086db862fe885b"><div class="ttname"><a href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">af::matmul</a></div><div class="ttdeci">AFAPI array matmul(const array &amp;lhs, const array &amp;rhs, const matProp optLhs=AF_MAT_NONE, const matProp optRhs=AF_MAT_NONE)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_ga6655d7913b35d7e59f7c8560a5368fbc"><div class="ttname"><a href="group__blas__func__matmul.htm#ga6655d7913b35d7e59f7c8560a5368fbc">af::matmulTN</a></div><div class="ttdeci">AFAPI array matmulTN(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__device__func__sync_htm_ga8c5d51841cf4f2ddbdd6a3146cf2b390"><div class="ttname"><a href="group__device__func__sync.htm#ga8c5d51841cf4f2ddbdd6a3146cf2b390">af::sync</a></div><div class="ttdeci">AFAPI void sync(const int device=-1)</div><div class="ttdoc">Blocks until the device is finished processing.</div></div>
<div class="ttc" id="agroup__manip__func__join_htm_ga9f30f3f556ae3165d3b7b6ec6ca43dc6"><div class="ttname"><a href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">af::join</a></div><div class="ttdeci">AFAPI array join(const int dim, const array &amp;first, const array &amp;second)</div><div class="ttdoc">Join 2 arrays along dim.</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga382a69ec85a6beea79e95aeaef591073"><div class="ttname"><a href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="agroup__reduce__func__sum_htm_ga964a8e7e78dd6d8f4d20c17edf82dbf5"><div class="ttname"><a href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">af::sum</a></div><div class="ttdeci">AFAPI array sum(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for sum of elements in an array.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a83c8f1181fc87c30d649f3f1eb26a860"><div class="ttname"><a href="namespaceaf.htm#a83c8f1181fc87c30d649f3f1eb26a860">af::sigmoid</a></div><div class="ttdeci">AFAPI array sigmoid(const array &amp;in)</div><div class="ttdoc">C++ Interface for calculating sigmoid function of an array.</div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Thu Feb 24 2022 14:12:32 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
    </ul>
</div>
</body>
</html>
