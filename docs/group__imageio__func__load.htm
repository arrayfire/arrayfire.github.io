<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: loadImage</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__imageio__func__load.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">loadImage<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__io__mat.htm">Input and Output functions</a> &raquo;  &#124; <a class="el" href="group__imageio__mat.htm">Reading and writing images</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga188e0daa67545fea545fc7bc3feea875"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga188e0daa67545fea545fc7bc3feea875">loadimage</a> (const char *filename, const bool is_color=false)</td></tr>
<tr class="memdesc:ga188e0daa67545fea545fc7bc3feea875"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image.  <a href="group__imageio__func__load.htm#ga188e0daa67545fea545fc7bc3feea875">More...</a><br /></td></tr>
<tr class="separator:ga188e0daa67545fea545fc7bc3feea875"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8bcf01ffa60bc513856d98b8a63bb12a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a> (const char *filename, const bool is_color=false)</td></tr>
<tr class="memdesc:ga8bcf01ffa60bc513856d98b8a63bb12a"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image.  <a href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">More...</a><br /></td></tr>
<tr class="separator:ga8bcf01ffa60bc513856d98b8a63bb12a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga006c246a48ff0a8b707264713890069e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga006c246a48ff0a8b707264713890069e">loadImageNative</a> (const char *filename)</td></tr>
<tr class="memdesc:ga006c246a48ff0a8b707264713890069e"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for loading an image as its original type.  <a href="group__imageio__func__load.htm#ga006c246a48ff0a8b707264713890069e">More...</a><br /></td></tr>
<tr class="separator:ga006c246a48ff0a8b707264713890069e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c505bba21cd2d5aa277ad1e6f0ffb5f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#ga9c505bba21cd2d5aa277ad1e6f0ffb5f">af_load_image</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const char *filename, const bool isColor)</td></tr>
<tr class="memdesc:ga9c505bba21cd2d5aa277ad1e6f0ffb5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for loading an image.  <a href="group__imageio__func__load.htm#ga9c505bba21cd2d5aa277ad1e6f0ffb5f">More...</a><br /></td></tr>
<tr class="separator:ga9c505bba21cd2d5aa277ad1e6f0ffb5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf8ccff53540bcc78ab814864f3c74ded"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm#gaf8ccff53540bcc78ab814864f3c74ded">af_load_image_native</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const char *filename)</td></tr>
<tr class="memdesc:gaf8ccff53540bcc78ab814864f3c74ded"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for loading an image as is original type.  <a href="group__imageio__func__load.htm#gaf8ccff53540bcc78ab814864f3c74ded">More...</a><br /></td></tr>
<tr class="separator:gaf8ccff53540bcc78ab814864f3c74ded"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Load an image from disk to an array</p>
<p>Supported formats include JPG, PNG, PPM and other formats supported by freeimage </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga9c505bba21cd2d5aa277ad1e6f0ffb5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9c505bba21cd2d5aa277ad1e6f0ffb5f">&#9670;&nbsp;</a></span>af_load_image()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_load_image </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>isColor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for loading an image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>will contain the image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is name of file to be loaded </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isColor</td><td>boolean denoting if the image should be loaded as 1 channel or 3 channel </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the color transformation is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="gaf8ccff53540bcc78ab814864f3c74ded"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf8ccff53540bcc78ab814864f3c74ded">&#9670;&nbsp;</a></span>af_load_image_native()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_load_image_native </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for loading an image as is original type. </p>
<p>This load image function allows you to load images as u8, u16 or f32 depending on the type of input image as shown by the table below.</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Bits per Color (Gray/RGB/RGBA Bits Per Pixel) </th><th class="markdownTableHeadNone">Array Type </th><th class="markdownTableHeadNone">Range  </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">8 ( 8/24/32 BPP) </td><td class="markdownTableBodyNone">u8 </td><td class="markdownTableBodyNone">0 - 255  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">16 (16/48/64 BPP) </td><td class="markdownTableBodyNone">u16 </td><td class="markdownTableBodyNone">0 - 65535  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">32 (32/96/128 BPP) </td><td class="markdownTableBodyNone">f32 </td><td class="markdownTableBodyNone">0 - 1  </td></tr>
</table>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>contains them image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is name of file to be loaded </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if successful </dd></dl>

</div>
</div>
<a id="ga8bcf01ffa60bc513856d98b8a63bb12a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8bcf01ffa60bc513856d98b8a63bb12a">&#9670;&nbsp;</a></span>loadImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::loadImage </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_color</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for loading an image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is name of file to be loaded </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_color</td><td>boolean denoting if the image should be loaded as 1 channel or 3 channel </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>image loaded as <a class="el" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">af::array()</a> </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="computer_vision_2fast_8cpp-example.htm#a1">computer_vision/fast.cpp</a>, <a class="el" href="computer_vision_2harris_8cpp-example.htm#a2">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2matching_8cpp-example.htm#a2">computer_vision/matching.cpp</a>, <a class="el" href="computer_vision_2susan_8cpp-example.htm#a1">computer_vision/susan.cpp</a>, <a class="el" href="graphics_2histogram_8cpp-example.htm#a3">graphics/histogram.cpp</a>, <a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a15">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a17">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a16">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2confidence_connected_components_8cpp-example.htm#a1">image_processing/confidence_connected_components.cpp</a>, <a class="el" href="image_processing_2deconvolution_8cpp-example.htm#a6">image_processing/deconvolution.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a13">image_processing/edge.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a31">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2gradient_diffusion_8cpp-example.htm#a10">image_processing/gradient_diffusion.cpp</a>, <a class="el" href="image_processing_2image_demo_8cpp-example.htm#a4">image_processing/image_demo.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a17">image_processing/image_editing.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a13">image_processing/morphing.cpp</a>, <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#a8">image_processing/optical_flow.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a8">image_processing/pyramids.cpp</a>, and <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#a13">machine_learning/kmeans.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="ga188e0daa67545fea545fc7bc3feea875"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga188e0daa67545fea545fc7bc3feea875">&#9670;&nbsp;</a></span>loadimage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::loadimage </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_color</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for loading an image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is name of file to be loaded </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_color</td><td>boolean denoting if the image should be loaded as 1 channel or 3 channel </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>image loaded as <a class="el" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">af::array()</a> </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.htm#_deprecated000004">Deprecated:</a></b></dt><dd>Use <a class="el" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a> instead </dd></dl>

</div>
</div>
<a id="ga006c246a48ff0a8b707264713890069e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga006c246a48ff0a8b707264713890069e">&#9670;&nbsp;</a></span>loadImageNative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::loadImageNative </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for loading an image as its original type. </p>
<p>This load image function allows you to load images as u8, u16 or f32 depending on the type of input image as shown by the table below.</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Bits per Color (Gray/RGB/RGBA Bits Per Pixel) </th><th class="markdownTableHeadNone">Array Type </th><th class="markdownTableHeadNone">Range  </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">8 ( 8/24/32 BPP) </td><td class="markdownTableBodyNone">u8 </td><td class="markdownTableBodyNone">0 - 255  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">16 (16/48/64 BPP) </td><td class="markdownTableBodyNone">u16 </td><td class="markdownTableBodyNone">0 - 65535  </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">32 (32/96/128 BPP) </td><td class="markdownTableBodyNone">f32 </td><td class="markdownTableBodyNone">0 - 1  </td></tr>
</table>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>is name of file to be loaded </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>image loaded as <a class="el" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">af::array()</a> </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
