<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: graphics/gravity_sim.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('graphics_2gravity_sim_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">graphics/gravity_sim.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * https://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include &quot;gravity_sim_init.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">using namespace </span>std;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> is3D           = <span class="keyword">true</span>;</div>
<div class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">int</span> total_particles = 4000;</div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> reset           = 3000;</div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">float</span> min_dist      = 3;</div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> width = 768, height = 768, depth = 768;</div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> gravity_constant = 20000;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">float</span> mass_range = 0;</div>
<div class="line"><span class="keywordtype">float</span> min_mass   = 0;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> initial_conditions_rand(<a name="_a0"></a><a class="code" href="classaf_1_1array.htm">af::array</a> &amp;mass, vector&lt;af::array&gt; &amp;pos,</div>
<div class="line">                             vector&lt;af::array&gt; &amp;vels,</div>
<div class="line">                             vector&lt;af::array&gt; &amp;forces) {</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (int)pos.size(); ++i) {</div>
<div class="line">        pos[i]    = <a name="a1"></a><a class="code" href="group__random__func__randn.htm#ga2e9602d5bcc87204842b634816afa8a4">af::randn</a>(total_particles) * width + width;</div>
<div class="line">        vels[i]   = 0 * <a name="a2"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a>(total_particles) - 0.5;</div>
<div class="line">        forces[i] = <a name="a3"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(0, total_particles);</div>
<div class="line">    }</div>
<div class="line">    mass = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(gravity_constant, total_particles);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> initial_conditions_galaxy(<a class="code" href="classaf_1_1array.htm">af::array</a> &amp;mass, vector&lt;af::array&gt; &amp;pos,</div>
<div class="line">                               vector&lt;af::array&gt; &amp;vels,</div>
<div class="line">                               vector&lt;af::array&gt; &amp;forces) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> initial_cond_consts(<a name="_a4"></a><a class="code" href="classaf_1_1dim4.htm">af::dim4</a>(7, total_particles), hbd);</div>
<div class="line">    initial_cond_consts = initial_cond_consts.T();</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (int)pos.size(); ++i) {</div>
<div class="line">        pos[i]    = <a class="code" href="group__random__func__randn.htm#ga2e9602d5bcc87204842b634816afa8a4">af::randn</a>(total_particles) * width + width;</div>
<div class="line">        vels[i]   = 0 * (<a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a>(total_particles) - 0.5);</div>
<div class="line">        forces[i] = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(0, total_particles);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    mass    = initial_cond_consts(<a name="a5"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 0);</div>
<div class="line">    pos[0]  = (initial_cond_consts(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 1) / 32 + 0.6) * width;</div>
<div class="line">    pos[1]  = (initial_cond_consts(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 2) / 32 + 0.3) * height;</div>
<div class="line">    pos[2]  = (initial_cond_consts(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 3) / 32 + 0.5) * depth;</div>
<div class="line">    vels[0] = (initial_cond_consts(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 4) / 32) * width;</div>
<div class="line">    vels[1] = (initial_cond_consts(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 5) / 32) * height;</div>
<div class="line">    vels[2] = (initial_cond_consts(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 6) / 32) * depth;</div>
<div class="line"> </div>
<div class="line">    pos[0](<a name="_a6"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(0, pos[0].dims(0) - 1, 2)) -= 0.4 * width;</div>
<div class="line">    pos[1](<a class="code" href="classaf_1_1seq.htm">seq</a>(0, pos[0].dims(0) - 1, 2)) += 0.4 * height;</div>
<div class="line">    vels[0](<a class="code" href="classaf_1_1seq.htm">seq</a>(0, pos[0].dims(0) - 1, 2)) += 4;</div>
<div class="line"> </div>
<div class="line">    min_mass   = min&lt;float&gt;(mass);</div>
<div class="line">    mass_range = max&lt;float&gt;(mass) - min&lt;float&gt;(mass);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">af::array</a> ids_from_pos(vector&lt;af::array&gt; &amp;pos) {</div>
<div class="line">    <span class="keywordflow">return</span> (pos[0].as(<a name="a7"></a><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) * height) + pos[1].<a name="a8"></a><a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">af::array</a> ids_from_3D(vector&lt;af::array&gt; &amp;pos, <span class="keywordtype">float</span> Rx, <span class="keywordtype">float</span> Ry, <span class="keywordtype">float</span> Rz) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> x0 = (pos[0] - width / 2);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> y0 =</div>
<div class="line">        (pos[1] - height / 2) * <a name="a9"></a><a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Rx) + (pos[2] - depth / 2) * <a name="a10"></a><a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Rx);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> z0 =</div>
<div class="line">        (pos[2] - depth / 2) * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Rx) - (pos[2] - depth / 2) * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Rx);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> x1 = x0 * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Ry) - z0 * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Ry);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> y1 = y0;</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> x2 = x1 * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Rz) + y1 * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Rz);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> y2 = y1 * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Rz) - x1 * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Rz);</div>
<div class="line"> </div>
<div class="line">    x2 += width / 2;</div>
<div class="line">    y2 += height / 2;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> (x2.<a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) * height) + y2.<a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">af::array</a> ids_from_3D(vector&lt;af::array&gt; &amp;pos, <span class="keywordtype">float</span> Rx, <span class="keywordtype">float</span> Ry, <span class="keywordtype">float</span> Rz,</div>
<div class="line">                      <a class="code" href="classaf_1_1array.htm">af::array</a> <a name="a11"></a><a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> x0 = (pos[0](<a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>) - width / 2);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> y0 = (pos[1](<a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>) - height / 2) * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Rx) +</div>
<div class="line">                   (pos[2](<a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>) - depth / 2) * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Rx);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> z0 = (pos[2](<a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>) - depth / 2) * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Rx) -</div>
<div class="line">                   (pos[2](<a class="code" href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">filter</a>) - depth / 2) * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Rx);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> x1 = x0 * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Ry) - z0 * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Ry);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> y1 = y0;</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> x2 = x1 * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Rz) + y1 * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Rz);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> y2 = y1 * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(Rz) - x1 * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(Rz);</div>
<div class="line"> </div>
<div class="line">    x2 += width / 2;</div>
<div class="line">    y2 += height / 2;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> (x2.<a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) * height) + y2.<a class="code" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> simulate(<a class="code" href="classaf_1_1array.htm">af::array</a> &amp;mass, vector&lt;af::array&gt; &amp;pos, vector&lt;af::array&gt; &amp;vels,</div>
<div class="line">              vector&lt;af::array&gt; &amp;forces, <span class="keywordtype">float</span> dt) {</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (int)pos.size(); ++i) {</div>
<div class="line">        pos[i] += vels[i] * dt;</div>
<div class="line">        pos[i].<a name="a12"></a><a class="code" href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a>();</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// calculate forces to each particle</span></div>
<div class="line">    vector&lt;af::array&gt; diff(pos.size());</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> dist = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(0, pos[0].dims(0), pos[0].dims(0));</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (int)pos.size(); ++i) {</div>
<div class="line">        diff[i] = <a name="a13"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(pos[i], 1, pos[i].dims(0)) -</div>
<div class="line">                  <a name="a14"></a><a class="code" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>(<a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(pos[i], 1, pos[i].dims(0)));</div>
<div class="line">        dist += (diff[i] * diff[i]);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    dist = <a name="a15"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(dist);</div>
<div class="line">    dist = <a name="a16"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a>(min_dist, dist);</div>
<div class="line">    dist *= dist * dist;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (int)pos.size(); ++i) {</div>
<div class="line">        <span class="comment">// calculate force vectors</span></div>
<div class="line">        forces[i] = diff[i] / dist;</div>
<div class="line">        forces[i].<a class="code" href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a>();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// af::array idx = af::where(af::isNaN(forces[i]));</span></div>
<div class="line">        <span class="comment">// if(idx.elements() &gt; 0)</span></div>
<div class="line">        <span class="comment">//    forces[i](idx) = 0;</span></div>
<div class="line">        <span class="comment">// forces[i] = sum(forces[i]).T();</span></div>
<div class="line">        forces[i] = <a name="a17"></a><a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(forces[i].T(), mass);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// update force scaled to time, magnitude constant</span></div>
<div class="line">        forces[i] *= (gravity_constant);</div>
<div class="line">        forces[i].eval();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// update velocities from forces</span></div>
<div class="line">        vels[i] += forces[i] * dt;</div>
<div class="line">        vels[i].eval();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// noise</span></div>
<div class="line">        <span class="comment">// forces[i] += 0.1 * af::randn(forces[i].dims(0));</span></div>
<div class="line"> </div>
<div class="line">        <span class="comment">// dampening</span></div>
<div class="line">        <span class="comment">// vels[i] *= 1 - (0.005*dt);</span></div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> collisions(vector&lt;af::array&gt; &amp;pos, vector&lt;af::array&gt; &amp;vels, <span class="keywordtype">bool</span> is3D) {</div>
<div class="line">    <span class="comment">// clamp particles inside screen border</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> invalid_x = -2 * (pos[0] &gt; width - 1 || pos[0] &lt; 0) + 1;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> invalid_y = -2 * (pos[1] &gt; height - 1 || pos[1] &lt; 0) + 1;</div>
<div class="line">    <span class="comment">// af::array invalid_x = (pos[0] &lt; width-1 || pos[0] &gt; 0);</span></div>
<div class="line">    <span class="comment">// af::array invalid_y = (pos[1] &lt; height-1 || pos[1] &gt; 0);</span></div>
<div class="line">    vels[0] = invalid_x * vels[0];</div>
<div class="line">    vels[1] = invalid_y * vels[1];</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> projected_px = <a name="a18"></a><a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(width - 1, <a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(0, pos[0]));</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> projected_py = <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(height - 1, <a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(0, pos[1]));</div>
<div class="line">    pos[0]                 = projected_px;</div>
<div class="line">    pos[1]                 = projected_py;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span> (is3D) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> invalid_z    = -2 * (pos[2] &gt; depth - 1 || pos[2] &lt; 0) + 1;</div>
<div class="line">        vels[2]                = invalid_z * vels[2];</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> projected_pz = <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(depth - 1, <a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(0, pos[2]));</div>
<div class="line">        pos[2]                 = projected_pz;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span>, <span class="keywordtype">char</span> **) {</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a name="a19"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line"> </div>
<div class="line">        <a name="_a20"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> myWindow(width, height,</div>
<div class="line">                            <span class="stringliteral">&quot;Gravity Simulation using ArrayFire&quot;</span>);</div>
<div class="line">        myWindow.setColorMap(<a name="a21"></a><a class="code" href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea7ba7bc2d6f5ed939f4dda88a7baa0399">AF_COLORMAP_HEAT</a>);</div>
<div class="line"> </div>
<div class="line">        <span class="keywordtype">int</span> frame_count = 0;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Initialize the kernel array just once</span></div>
<div class="line">        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">af::array</a> draw_kernel = <a name="a22"></a><a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(7, 7);</div>
<div class="line"> </div>
<div class="line">        <span class="keyword">const</span> <span class="keywordtype">int</span> dims = (is3D) ? 3 : 2;</div>
<div class="line"> </div>
<div class="line">        vector&lt;af::array&gt; pos(dims);</div>
<div class="line">        vector&lt;af::array&gt; vels(dims);</div>
<div class="line">        vector&lt;af::array&gt; forces(dims);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> mass;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Generate a random starting state</span></div>
<div class="line">        initial_conditions_galaxy(mass, pos, vels, forces);</div>
<div class="line"> </div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> image = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(0, width, height);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> ids(total_particles, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>);</div>
<div class="line"> </div>
<div class="line">        <a name="_a23"></a><a class="code" href="structaf_1_1timer.htm">af::timer</a> <a class="code" href="structaf_1_1timer.htm">timer</a> = <a name="a24"></a><a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">af::timer::start</a>();</div>
<div class="line">        <span class="keywordflow">while</span> (!myWindow.close()) {</div>
<div class="line">            <span class="keywordtype">float</span> dt = <a name="a25"></a><a class="code" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">af::timer::stop</a>(<a class="code" href="structaf_1_1timer.htm">timer</a>);</div>
<div class="line">            <a class="code" href="structaf_1_1timer.htm">timer</a>    = <a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">af::timer::start</a>();</div>
<div class="line"> </div>
<div class="line">            <a class="code" href="classaf_1_1array.htm">af::array</a> mid = mass(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) &gt; (min_mass + mass_range / 3);</div>
<div class="line">            ids = (is3D) ? ids_from_3D(pos, 0, 0 + frame_count / 150.f, 0, mid)</div>
<div class="line">                         : ids_from_pos(pos);</div>
<div class="line">            <span class="comment">// ids = (is3D)? ids_from_3D(pos, 0, 0, 0, mid) : ids_from_pos(pos);</span></div>
<div class="line">            <span class="comment">// //uncomment for no 3d rotation</span></div>
<div class="line">            image(ids) += 4.f;</div>
<div class="line"> </div>
<div class="line">            mid = mass(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) &gt; (min_mass + 2 * mass_range / 3);</div>
<div class="line">            ids = (is3D) ? ids_from_3D(pos, 0, 0 + frame_count / 150.f, 0, mid)</div>
<div class="line">                         : ids_from_pos(pos);</div>
<div class="line">            <span class="comment">// ids = (is3D)? ids_from_3D(pos, 0, 0, 0, mid) : ids_from_pos(pos);</span></div>
<div class="line">            <span class="comment">// //uncomment for no 3d rotation</span></div>
<div class="line">            image(ids) += 4.f;</div>
<div class="line"> </div>
<div class="line">            ids = (is3D) ? ids_from_3D(pos, 0, 0 + frame_count / 150.f, 0)</div>
<div class="line">                         : ids_from_pos(pos);</div>
<div class="line">            <span class="comment">// ids = (is3D)? ids_from_3D(pos, 0, 0, 0) :  ids_from_pos(pos);</span></div>
<div class="line">            <span class="comment">// //uncomment for no 3d rotation</span></div>
<div class="line">            image(ids) += 4.f;</div>
<div class="line"> </div>
<div class="line">            image = <a name="a26"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(image, draw_kernel);</div>
<div class="line">            myWindow.image(image);</div>
<div class="line">            image = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(0, image.<a name="a27"></a><a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line"> </div>
<div class="line">            frame_count++;</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Generate a random starting state</span></div>
<div class="line">            <span class="keywordflow">if</span> (frame_count % reset == 0) {</div>
<div class="line">                initial_conditions_galaxy(mass, pos, vels, forces);</div>
<div class="line">            }</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// simulate</span></div>
<div class="line">            simulate(mass, pos, vels, forces, dt);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// check for collisions and adjust positions/velocities accordingly</span></div>
<div class="line">            collisions(pos, vels, is3D);</div>
<div class="line">        }</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a28"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a29"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00032">dim4.hpp:33</a></div></div>
<div class="ttc" id="agroup__blas__func__matmul_htm_ga63306b6ed967bd1055086db862fe885b"><div class="ttname"><a href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">af::matmul</a></div><div class="ttdeci">AFAPI array matmul(const array &amp;lhs, const array &amp;rhs, const matProp optLhs=AF_MAT_NONE, const matProp optRhs=AF_MAT_NONE)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:46</a></div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a5822c6bdfbf4ff01f23c4417934b924c"><div class="ttname"><a href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">af::array::as</a></div><div class="ttdeci">const array as(dtype type) const</div><div class="ttdoc">Converts the array into another type.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="adefines_8h_htm_a553ceda8a1d8946efac3b08e642574aea7ba7bc2d6f5ed939f4dda88a7baa0399"><div class="ttname"><a href="defines_8h.htm#a553ceda8a1d8946efac3b08e642574aea7ba7bc2d6f5ed939f4dda88a7baa0399">AF_COLORMAP_HEAT</a></div><div class="ttdeci">@ AF_COLORMAP_HEAT</div><div class="ttdoc">Heat map.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00459">defines.h:459</a></div></div>
<div class="ttc" id="astructaf_1_1timer_htm_acde4fe9b34f26a2c99bdb52080264116"><div class="ttname"><a href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">af::timer::start</a></div><div class="ttdeci">static AFAPI timer start()</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="agroup__image__func__gauss_htm_gaa5de1866bc1bf50bf5fe3cb26d4e410d"><div class="ttname"><a href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">af::gaussianKernel</a></div><div class="ttdeci">AFAPI array gaussianKernel(const int rows, const int cols, const double sig_r=0, const double sig_c=0)</div><div class="ttdoc">C++ Interface for generating gausian kernels.</div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="agroup__random__func__randn_htm_ga2e9602d5bcc87204842b634816afa8a4"><div class="ttname"><a href="group__random__func__randn.htm#ga2e9602d5bcc87204842b634816afa8a4">af::randn</a></div><div class="ttdeci">AFAPI array randn(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a6a8d7156cd3c66a9ca9f0f2688ee9f72"><div class="ttname"><a href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">af::array::eval</a></div><div class="ttdeci">void eval() const</div><div class="ttdoc">Evaluate any JIT expressions to generate data for the array.</div></div>
<div class="ttc" id="agroup__arith__func__sin_htm_gac6fdb44f59fbbffdc55c9c4af29e08f4"><div class="ttname"><a href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">af::sin</a></div><div class="ttdeci">AFAPI array sin(const array &amp;in)</div><div class="ttdoc">C++ Interface for sin.</div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_ga25c678d4cd9e0702bbc93e11d7d516a8"><div class="ttname"><a href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface for square root of input.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:29</a></div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_ga3548059d64e0cefc7fedb4ec28321d32"><div class="ttname"><a href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="anamespaceaf_htm_a53c4f9a4b5440458bffe355803514c90"><div class="ttname"><a href="namespaceaf.htm#a53c4f9a4b5440458bffe355803514c90">af::filter</a></div><div class="ttdeci">AFAPI array filter(const array &amp;image, const array &amp;kernel)</div><div class="ttdoc">Image Filtering.</div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a></div><div class="ttdeci">@ u32</div><div class="ttdoc">32-bit unsigned integral values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00217">defines.h:217</a></div></div>
<div class="ttc" id="astructaf_1_1timer_htm_adcbc49c002458a0a2370e0bb8e96c322"><div class="ttname"><a href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">af::timer::stop</a></div><div class="ttdeci">static AFAPI double stop()</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="astructaf_1_1timer_htm"><div class="ttname"><a href="structaf_1_1timer.htm">af::timer</a></div><div class="ttdoc">Internal timer object.</div><div class="ttdef"><b>Definition:</b> <a href="timing_8h_source.htm#l00036">timing.h:36</a></div></div>
<div class="ttc" id="agroup__arith__func__cos_htm_ga00be564e1f588df68288d2dec8578cb6"><div class="ttname"><a href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">af::cos</a></div><div class="ttdeci">AFAPI array cos(const array &amp;in)</div><div class="ttdoc">C++ Interface for cos.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_gae79b64c8b0d6a06309e8b67bf89cf6c9"><div class="ttname"><a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="agroup__reduce__func__min_htm_ga2b1287d1babb569d28bc6ee1c8e8e1ea"><div class="ttname"><a href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">af::min</a></div><div class="ttdeci">AFAPI array min(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for minimum values in an array.</div></div>
<div class="ttc" id="agroup__blas__func__transpose_htm_ga63a8e47707874b9d2ba9b9af0b159591"><div class="ttname"><a href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">af::transpose</a></div><div class="ttdeci">AFAPI array transpose(const array &amp;in, const bool conjugate=false)</div><div class="ttdoc">Transposes a matrix.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
