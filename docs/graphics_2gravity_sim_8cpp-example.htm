<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>graphics/gravity_sim.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('graphics_2gravity_sim_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">graphics/gravity_sim.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"><span class="keyword">using namespace </span>std;</div>
<div class="line"></div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> width = 512, height = 512;</div>
<div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> pixels_per_unit = 20;</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> simulate(<a name="_a0"></a><a class="code" href="classaf_1_1array.htm">af::array</a> *pos, <a class="code" href="classaf_1_1array.htm">af::array</a> *vels, <a class="code" href="classaf_1_1array.htm">af::array</a> *forces, <span class="keywordtype">float</span> dt){</div>
<div class="line">    pos[0] += vels[0] * pixels_per_unit * dt;</div>
<div class="line">    pos[1] += vels[1] * pixels_per_unit * dt;</div>
<div class="line"></div>
<div class="line">    <span class="comment">//calculate distance to center</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> diff_x = pos[0] - width/2;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> diff_y = pos[1] - height/2;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> dist = <a name="a1"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>( diff_x*diff_x + diff_y*diff_y );</div>
<div class="line"></div>
<div class="line">    <span class="comment">//calculate normalised force vectors</span></div>
<div class="line">    forces[0] = -1 * diff_x / dist;</div>
<div class="line">    forces[1] = -1 * diff_y / dist;</div>
<div class="line">    <span class="comment">//update force scaled to time and magnitude constant</span></div>
<div class="line">    forces[0] *= pixels_per_unit * dt;</div>
<div class="line">    forces[1] *= pixels_per_unit * dt;</div>
<div class="line"></div>
<div class="line">    <span class="comment">//dampening</span></div>
<div class="line">    vels[0] *= 1 - (0.005*dt);</div>
<div class="line">    vels[1] *= 1 - (0.005*dt);</div>
<div class="line"></div>
<div class="line">    <span class="comment">//update velocities from forces</span></div>
<div class="line">    vels[0] += forces[0];</div>
<div class="line">    vels[1] += forces[1];</div>
<div class="line"></div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> collisions(<a class="code" href="classaf_1_1array.htm">af::array</a> *pos, <a class="code" href="classaf_1_1array.htm">af::array</a> *vels){</div>
<div class="line">    <span class="comment">//clamp particles inside screen border</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> projected_px = <a name="a2"></a><a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(width, <a name="a3"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(0, pos[0]));</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> projected_py = <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>(height - 1, <a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>(0, pos[1]));</div>
<div class="line"></div>
<div class="line">    <span class="comment">//calculate distance to center</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> diff_x = projected_px - width/2;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> diff_y = projected_py - height/2;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> dist = <a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>( diff_x*diff_x + diff_y*diff_y );</div>
<div class="line"></div>
<div class="line">    <span class="comment">//collide with center sphere</span></div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> radius = 50;</div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">float</span> elastic_constant = 0.91f;</div>
<div class="line">    <span class="keywordflow">if</span>(sum&lt;int&gt;(dist&lt;radius) &gt; 0) {</div>
<div class="line">        vels[0](dist&lt;radius) = -elastic_constant * vels[0](dist&lt;radius);</div>
<div class="line">        vels[1](dist&lt;radius) = -elastic_constant * vels[1](dist&lt;radius);</div>
<div class="line"></div>
<div class="line">        <span class="comment">//normalize diff vector</span></div>
<div class="line">        diff_x /= dist;</div>
<div class="line">        diff_y /= dist;</div>
<div class="line">        <span class="comment">//place all particle colliding with sphere on surface</span></div>
<div class="line">        pos[0](dist&lt;radius) = width/2 + diff_x(dist&lt;radius) * radius;</div>
<div class="line">        pos[1](dist&lt;radius) = height/2 +  diff_y(dist&lt;radius) * radius;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">int</span> total_particles = 1000;</div>
<div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> reset = 500;</div>
<div class="line"></div>
<div class="line">        <a name="a4"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line"></div>
<div class="line">        <a name="_a5"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> myWindow(width, height, <span class="stringliteral">&quot;Gravity Simulation using ArrayFire&quot;</span>);</div>
<div class="line"></div>
<div class="line">        <span class="keywordtype">int</span> frame_count = 0;</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Initialize the kernel array just once</span></div>
<div class="line">        <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">af::array</a> draw_kernel = <a name="a6"></a><a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(3, 3);</div>
<div class="line"></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> pos[2];</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> vels[2];</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> forces[2];</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Generate a random starting state</span></div>
<div class="line">        pos[0] = <a name="a7"></a><a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">af::randu</a>(total_particles) * width;</div>
<div class="line">        pos[1] = <a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">af::randu</a>(total_particles) * height;</div>
<div class="line"></div>
<div class="line">        vels[0] = <a name="a8"></a><a class="code" href="group__data__func__randn.htm#gae8aa1f5ec310aeb9e4cbd19d63998349">af::randn</a>(total_particles);</div>
<div class="line">        vels[1] = <a class="code" href="group__data__func__randn.htm#gae8aa1f5ec310aeb9e4cbd19d63998349">af::randn</a>(total_particles);</div>
<div class="line"></div>
<div class="line">        forces[0] = <a class="code" href="group__data__func__randn.htm#gae8aa1f5ec310aeb9e4cbd19d63998349">af::randn</a>(total_particles);</div>
<div class="line">        forces[1] = <a class="code" href="group__data__func__randn.htm#gae8aa1f5ec310aeb9e4cbd19d63998349">af::randn</a>(total_particles);</div>
<div class="line"></div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> image = <a name="a9"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(0, width, height);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">af::array</a> ids(total_particles, <a name="a10"></a><a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>);</div>
<div class="line"></div>
<div class="line">        <a name="_a11"></a><a class="code" href="structaf_1_1timer.htm">af::timer</a> <a class="code" href="structaf_1_1timer.htm">timer</a> = <a name="a12"></a><a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">af::timer::start</a>();</div>
<div class="line">        <span class="keywordflow">while</span>(!myWindow.close()) {</div>
<div class="line">            <span class="keywordtype">float</span> dt = <a name="a13"></a><a class="code" href="structaf_1_1timer.htm#adcbc49c002458a0a2370e0bb8e96c322">af::timer::stop</a>(timer);</div>
<div class="line">            timer = <a class="code" href="structaf_1_1timer.htm#acde4fe9b34f26a2c99bdb52080264116">af::timer::start</a>();</div>
<div class="line"></div>
<div class="line">            ids = (pos[0].<a name="a14"></a><a class="code" href="group__method__mat.htm#ga28967fdd5fff8001f4ef6181d9b186fb">as</a>(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>) * height) + pos[1].as(<a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>);</div>
<div class="line">            image(ids) += 255;</div>
<div class="line">            image = <a name="a15"></a><a class="code" href="group__signal__func__convolve2.htm#ga0aec29b4d4c9cf4412420b91c96ffe6c">convolve2</a>(image, draw_kernel);</div>
<div class="line">            myWindow.image(image);</div>
<div class="line">            image = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a>(0, image.<a name="a16"></a><a class="code" href="group__method__mat.htm#gaf056729e3ff924f5c1d41e0a8db3ce1b">dims</a>());</div>
<div class="line">            frame_count++;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Generate a random starting state</span></div>
<div class="line">            <span class="keywordflow">if</span>(frame_count % reset == 0) {</div>
<div class="line">                pos[0] = <a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">af::randu</a>(total_particles) * width;</div>
<div class="line">                pos[1] = <a class="code" href="group__data__func__randu.htm#ga15a5110a447509cab9589b2ad56c5e55">af::randu</a>(total_particles) * height;</div>
<div class="line"></div>
<div class="line">                vels[0] = <a class="code" href="group__data__func__randn.htm#gae8aa1f5ec310aeb9e4cbd19d63998349">af::randn</a>(total_particles);</div>
<div class="line">                vels[1] = <a class="code" href="group__data__func__randn.htm#gae8aa1f5ec310aeb9e4cbd19d63998349">af::randn</a>(total_particles);</div>
<div class="line">            }</div>
<div class="line"></div>
<div class="line">            <span class="comment">//check for collisions and adjust positions/velocities accordingly</span></div>
<div class="line">            collisions(pos, vels);</div>
<div class="line"></div>
<div class="line">            <span class="comment">//run force simulation and update particles</span></div>
<div class="line">            simulate(pos, vels, forces, dt);</div>
<div class="line"></div>
<div class="line">        }</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a17"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a18"></a><a class="code" href="classaf_1_1exception.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
