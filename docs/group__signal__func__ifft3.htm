<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: ifft3</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__signal__func__ifft3.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">ifft3<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__signal__mat.htm">Signal Processing</a> &raquo; <a class="el" href="group__fft__mat.htm">Fast Fourier Transforms</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Fast Fourier Transform.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga372a8550836fcb1dcc86339a2e494ace"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#ga372a8550836fcb1dcc86339a2e494ace">ifft3Norm</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:ga372a8550836fcb1dcc86339a2e494ace"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#ga372a8550836fcb1dcc86339a2e494ace">More...</a><br /></td></tr>
<tr class="separator:ga372a8550836fcb1dcc86339a2e494ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga788e530c135fe44102aa1cfd50e9b709"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#ga788e530c135fe44102aa1cfd50e9b709">ifft3InPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const double norm_factor=1.0)</td></tr>
<tr class="memdesc:ga788e530c135fe44102aa1cfd50e9b709"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#ga788e530c135fe44102aa1cfd50e9b709">More...</a><br /></td></tr>
<tr class="separator:ga788e530c135fe44102aa1cfd50e9b709"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga912e3a8448d02178c48dc8769e0a9f8d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#ga912e3a8448d02178c48dc8769e0a9f8d">ifft3</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2=0)</td></tr>
<tr class="memdesc:ga912e3a8448d02178c48dc8769e0a9f8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for inverse fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#ga912e3a8448d02178c48dc8769e0a9f8d">More...</a><br /></td></tr>
<tr class="separator:ga912e3a8448d02178c48dc8769e0a9f8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafdabcf20f793430134550e37f7a71bbd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#gafdabcf20f793430134550e37f7a71bbd">af_ifft3</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const double norm_factor, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> odim2)</td></tr>
<tr class="memdesc:gafdabcf20f793430134550e37f7a71bbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for inverse fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#gafdabcf20f793430134550e37f7a71bbd">More...</a><br /></td></tr>
<tr class="separator:gafdabcf20f793430134550e37f7a71bbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga439a7a49723bc6cf77cf4fe7f8dfe334"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm#ga439a7a49723bc6cf77cf4fe7f8dfe334">af_ifft3_inplace</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const double norm_factor)</td></tr>
<tr class="memdesc:ga439a7a49723bc6cf77cf4fe7f8dfe334"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for fast fourier transform on three dimensional signals.  <a href="group__signal__func__ifft3.htm#ga439a7a49723bc6cf77cf4fe7f8dfe334">More...</a><br /></td></tr>
<tr class="separator:ga439a7a49723bc6cf77cf4fe7f8dfe334"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Fast Fourier Transform. </p>
<p >The Fast Fourier Transform (FFT) is an efficient algorithm to compute the discrete Fourier transform (DFT) of a signal or array. This is most commonly used to convert data in the time (or space) domain to the frequency domain, Then, the inverse FFT (iFFT) is used to return the data to the original domain.</p>
<p >There are numerous algorithms to compute the FFT of an array, and the specifics of the algorithm depend on the target hardware. Most algorithms, however, use a Cooley-Tukey scheme in a divide-and-conquer approach.</p>
<dl class="section note"><dt>Note</dt><dd>There are some convenience functions provided for fft where normalization factor is not required as input paramter. In such cases, the normalization factor is calculated internally based on the input data provided.  </dd></dl>
<h2 class="groupheader">Function Documentation</h2>
<a id="gafdabcf20f793430134550e37f7a71bbd" name="gafdabcf20f793430134550e37f7a71bbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafdabcf20f793430134550e37f7a71bbd">&#9670;&#160;</a></span>af_ifft3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_ifft3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>norm_factor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for inverse fast fourier transform on three dimensional signals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is the transformed array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">norm_factor</td><td>is the normalization factor with which the input is scaled after the transformation is applied </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim0</td><td>is the length of output signals along first dimension - used to either truncate/pad the input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim1</td><td>is the length of output signals along second dimension - used to either truncate/pad the input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim2</td><td>is the length of output signals along third dimension - used to either truncate/pad the input </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the fft transform is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a id="ga439a7a49723bc6cf77cf4fe7f8dfe334" name="ga439a7a49723bc6cf77cf4fe7f8dfe334"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga439a7a49723bc6cf77cf4fe7f8dfe334">&#9670;&#160;</a></span>af_ifft3_inplace()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_ifft3_inplace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>norm_factor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for fast fourier transform on three dimensional signals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">in</td><td>is the input array on entry and the output of 3D inverse fourier transform on exit </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">norm_factor</td><td>is the normalization factor with which the input is scaled after the transformation is applied </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the ifft transform is successful, otherwise an appropriate error code is returned.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The input <code>must</code> be a complex array </dd></dl>

</div>
</div>
<a id="ga912e3a8448d02178c48dc8769e0a9f8d" name="ga912e3a8448d02178c48dc8769e0a9f8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga912e3a8448d02178c48dc8769e0a9f8d">&#9670;&#160;</a></span>ifft3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> ifft3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim0</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim1</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim2</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for inverse fast fourier transform on three dimensional signals. </p>
<p >This version of fft function uses a default norm_factor parameter that is calculated internally based on the input signals.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim0</td><td>is the length of output signals along first dimension - used to either truncate/pad the input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim1</td><td>is the length of output signals along second dimension - used to either truncate/pad the input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim2</td><td>is the length of output signals along third dimension - used to either truncate/pad the input </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the transformed array </dd></dl>

</div>
</div>
<a id="ga788e530c135fe44102aa1cfd50e9b709" name="ga788e530c135fe44102aa1cfd50e9b709"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga788e530c135fe44102aa1cfd50e9b709">&#9670;&#160;</a></span>ifft3InPlace()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void ifft3InPlace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>norm_factor</em> = <code>1.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for fast fourier transform on three dimensional signals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">in</td><td>is the input array on entry and the output of 3D inverse fourier transform on exit </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">norm_factor</td><td>is the normalization factor with which the input is scaled after the transformation is applied</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The input <code>in</code> must be complex </dd></dl>

</div>
</div>
<a id="ga372a8550836fcb1dcc86339a2e494ace" name="ga372a8550836fcb1dcc86339a2e494ace"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga372a8550836fcb1dcc86339a2e494ace">&#9670;&#160;</a></span>ifft3Norm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> ifft3Norm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>norm_factor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim0</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim1</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>odim2</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for inverse fast fourier transform on three dimensional signals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">norm_factor</td><td>is the normalization factor with which the input is scaled after the transformation is applied </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim0</td><td>is the length of output signals along first dimension - used to either truncate/pad the input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim1</td><td>is the length of output signals along second dimension - used to either truncate/pad the input </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">odim2</td><td>is the length of output signals along third dimension - used to either truncate/pad the input </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the transformed array </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:57 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
