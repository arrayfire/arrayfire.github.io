<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>arrayfire-docs-3.6.2/docs/pages/using_on_linux.md (2018-11-19 17:22:56 +0530, (build dc38ef13)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('using__on__linux_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">arrayfire-docs-3.6.2/docs/pages/using_on_linux.md (2018-11-19 17:22:56 +0530, (build dc38ef13))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="using__on__linux_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Using ArrayFire on Linux {#using_on_linux}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;=====</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;Once you have [installed](\ref installing) ArrayFire on your system, the next</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;thing to do is set up your build system. On Linux, you can create ArrayFire</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;projects using almost any editor, compiler, or build system. The only</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;requirements are that you include the ArrayFire header directories and link with</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;the ArrayFire library you intend to use i.e. CUDA, OpenCL, CPU, or Unified</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;backends.</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;## &lt;a name=&quot;big-picture&quot;/&gt; The big picture</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;On Linux, we recommend installing ArrayFire to `/opt/arrayfire` directory. The</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;installer will populate files in the following sub-directories:</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    include/arrayfire.h         - Primary ArrayFire include file</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    include/af/*.h              - Additional include files</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    lib/libaf*                  - CPU, CUDA, and OpenCL libraries (.a, .so)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    lib/libforge*               - Visualization library</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    lib/libcu*                  - CUDA backend dependencies</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    lib/libOpenCL.so            - OpenCL ICD Loader library</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    lib/libglbinding*           - OpenGL graphics dependencies</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    share/ArrayFire/cmake/*     - CMake config (find) scripts</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    share/ArrayFire/examples/*  - All ArrayFire examples</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;Because ArrayFire follows standard installation practices, you can use basically</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;any build system to create and compile projects that use ArrayFire. Among the</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;many possible build systems on Linux we suggest using ArrayFire with either</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;CMake or Makefiles with CMake being our preferred build system.</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;## Prerequisite software</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;To build ArrayFire projects you will need a compiler</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;#### Fedora, Centos and Redhat</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;Install EPEL repo (not required for Fedora)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;```</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;yum install epel-release</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;yum update</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;```</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;Install build dependencies</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;```</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;yum install gcc gcc-c++ cmake3 make</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;```</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;#### Debian and its derivatives</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;Install common dependencies</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;```</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;apt install build-essential cmake cmake-curses-gui</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;```</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;## CMake</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;We recommend that the CMake build system be used to create ArrayFire projects.</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;As [discussed above](#big-picture), ArrayFire ships with a series of CMake</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;scripts to make finding and using our library easy.</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;First create a file called `CMakeLists.txt` in your project directory:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    cd your-project-directory</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    touch CMakeLists.txt</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;and populate it with the following code:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    find_package(ArrayFire)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    add_executable(&lt;my_executable&gt; [list your source files here])</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    # To use Unified backend, do the following.</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    # Unified backend lets you choose the backend at runtime</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    target_link_libraries(&lt;my_executable&gt; ArrayFire::af)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;where `my_executable` is the name of the executable you wish to create. See the</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;[CMake documentation](https://cmake.org/documentation/) for more information on</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;how to use CMake. To link with a specific backend directly, replace the</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;`ArrayFire::af` with the following for their respective backends.</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;* `ArrayFire::afcpu` for CPU backend.</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;* `ArrayFire::afcuda` for CUDA backend.</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;* `ArrayFire::afopencl` for OpenCL backend.</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;Next we need to instruct CMake to create build instructions and then compile. We</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;suggest using CMake&#39;s out-of-source build functionality to keep your build and</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;source files cleanly separated. To do this open the CMake GUI.</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    cd your-project-directory</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    mkdir build</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    cd build</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    cmake ..</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    make</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;*NOTE:* If you have installed ArrayFire to a non-standard location, CMake can</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;still help you out. When you execute CMake specify the path to ArrayFire</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;installation root as `ArrayFire_DIR` variable.</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;For example, if ArrayFire were installed locally to `/home/user/ArrayFire` then</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;you would modify the `cmake` command above to contain the following definition:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    cmake -DArrayFire_DIR=/home/user/ArrayFire ..</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;You can also specify this information in the `ccmake` command-line interface.</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;## Makefiles</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;Building ArrayFire projects with Makefiles is fairly similar to CMake except you</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;must specify all paths and libraries manually.</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;As with any `make` project, you need to specify the include path to the</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;directory containing `arrayfire.h` file. This should be `-I</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;/opt/arrayfire/include` if you followed our installation instructions.</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;Similarly, you will need to specify the path to the ArrayFire library using the</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;`-L` option (e.g. `-L/opt/arrayfire/lib`) followed by the specific ArrayFire</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;library you wish to use using the `-l` option (for example `-lafcpu`,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;`-lafopencl`, `-lafcuda`, or `-laf` for the CPU, OpenCL, CUDA, and unified</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;backends, respectively.</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;Here is a minimal example Makefile which uses ArrayFire&#39;s CPU backend:</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    LIBS=-lafcpu</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    LIB_PATHS=-L/opt/arrayfire/lib</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    INCLUDES=-I/opt/arrayfire/include</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    CC=g++ $(COMPILER_OPTIONS)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    COMPILER_OPTIONS=-std=c++11 -g</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    all: main.cpp Makefile</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        $(CC) main.cpp -o test $(INCLUDES) $(LIBS) $(LIB_PATHS)</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
