<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: array Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classaf_1_1array.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle"><div class="title">array Class Reference<div class="ingroups"><a class="el" href="group__arrayfire__class.htm">ArrayFire Classes</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>A multi dimensional data container.  
 <a href="classaf_1_1array.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="array_8h_source.htm">array.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array_proxy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Intermediate data class.  <a href="classaf_1_1array_1_1array__proxy.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a45b3c2ad4eb3f366485b7408367c56b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a45b3c2ad4eb3f366485b7408367c56b5">set</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> tmp)</td></tr>
<tr class="memdesc:a45b3c2ad4eb3f366485b7408367c56b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the internal <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> object.  <a href="classaf_1_1array.htm#a45b3c2ad4eb3f366485b7408367c56b5">More...</a><br /></td></tr>
<tr class="separator:a45b3c2ad4eb3f366485b7408367c56b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cbcfcbf0173e1edaf4094bb36b34b31"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a9cbcfcbf0173e1edaf4094bb36b34b31">array</a> ()</td></tr>
<tr class="memdesc:a9cbcfcbf0173e1edaf4094bb36b34b31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialized array (no data, undefined size)  <a href="classaf_1_1array.htm#a9cbcfcbf0173e1edaf4094bb36b34b31">More...</a><br /></td></tr>
<tr class="separator:a9cbcfcbf0173e1edaf4094bb36b34b31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34fcf3e619cabf1cd107f72c571f091"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#ad34fcf3e619cabf1cd107f72c571f091">array</a> (const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle)</td></tr>
<tr class="memdesc:ad34fcf3e619cabf1cd107f72c571f091"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an array from an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle.  <a href="classaf_1_1array.htm#ad34fcf3e619cabf1cd107f72c571f091">More...</a><br /></td></tr>
<tr class="separator:ad34fcf3e619cabf1cd107f72c571f091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfba46b754d8e3e5371d9bc78e7ba766"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#acfba46b754d8e3e5371d9bc78e7ba766">array</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:acfba46b754d8e3e5371d9bc78e7ba766"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a copy to the <code>in</code> array.  <a href="classaf_1_1array.htm#acfba46b754d8e3e5371d9bc78e7ba766">More...</a><br /></td></tr>
<tr class="separator:acfba46b754d8e3e5371d9bc78e7ba766"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73cb9e2360cecbc511b87abf76b6d631"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a73cb9e2360cecbc511b87abf76b6d631">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:a73cb9e2360cecbc511b87abf76b6d631"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a one-dimensional array of a specified size with undefined contents.  <a href="classaf_1_1array.htm#a73cb9e2360cecbc511b87abf76b6d631">More...</a><br /></td></tr>
<tr class="separator:a73cb9e2360cecbc511b87abf76b6d631"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f0b51e20111680c7fe3c74d54c982dd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a1f0b51e20111680c7fe3c74d54c982dd">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:a1f0b51e20111680c7fe3c74d54c982dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a two-dimensional array of a specified size with undefined contents.  <a href="classaf_1_1array.htm#a1f0b51e20111680c7fe3c74d54c982dd">More...</a><br /></td></tr>
<tr class="separator:a1f0b51e20111680c7fe3c74d54c982dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69c9fa684e0b0beaf657ac1dc03afa56"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a69c9fa684e0b0beaf657ac1dc03afa56">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:a69c9fa684e0b0beaf657ac1dc03afa56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a three-dimensional (3D) array of a specified size with undefined contents.  <a href="classaf_1_1array.htm#a69c9fa684e0b0beaf657ac1dc03afa56">More...</a><br /></td></tr>
<tr class="separator:a69c9fa684e0b0beaf657ac1dc03afa56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bc7bac9bb52349c198fa0861b5004b7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a6bc7bac9bb52349c198fa0861b5004b7">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:a6bc7bac9bb52349c198fa0861b5004b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a four-dimensional (4D) array of a specified size with undefined contents.  <a href="classaf_1_1array.htm#a6bc7bac9bb52349c198fa0861b5004b7">More...</a><br /></td></tr>
<tr class="separator:a6bc7bac9bb52349c198fa0861b5004b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5686344bf8a49be5286892998d309619"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a5686344bf8a49be5286892998d309619">array</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;<a class="el" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> ty=<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>)</td></tr>
<tr class="memdesc:a5686344bf8a49be5286892998d309619"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate an array of a specified size with undefined contents.  <a href="classaf_1_1array.htm#a5686344bf8a49be5286892998d309619">More...</a><br /></td></tr>
<tr class="separator:a5686344bf8a49be5286892998d309619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c330c41d6e06b0dea9377ef02762c6f"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:a8c330c41d6e06b0dea9377ef02762c6f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a8c330c41d6e06b0dea9377ef02762c6f">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:a8c330c41d6e06b0dea9377ef02762c6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a column vector on the device using a host/device pointer.  <a href="classaf_1_1array.htm#a8c330c41d6e06b0dea9377ef02762c6f">More...</a><br /></td></tr>
<tr class="separator:a8c330c41d6e06b0dea9377ef02762c6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ebe6a7b991fbe6231321138e79121c"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:aa2ebe6a7b991fbe6231321138e79121c"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#aa2ebe6a7b991fbe6231321138e79121c">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:aa2ebe6a7b991fbe6231321138e79121c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a 2D array on the device using a host/device pointer.  <a href="classaf_1_1array.htm#aa2ebe6a7b991fbe6231321138e79121c">More...</a><br /></td></tr>
<tr class="separator:aa2ebe6a7b991fbe6231321138e79121c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd3d95b130bdb2d7e713414687e6b15a"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:abd3d95b130bdb2d7e713414687e6b15a"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#abd3d95b130bdb2d7e713414687e6b15a">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:abd3d95b130bdb2d7e713414687e6b15a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a 3D array on the device using a host/device pointer.  <a href="classaf_1_1array.htm#abd3d95b130bdb2d7e713414687e6b15a">More...</a><br /></td></tr>
<tr class="separator:abd3d95b130bdb2d7e713414687e6b15a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa8fab98447367bc4eaf3d7bc61d8ff5"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:aaa8fab98447367bc4eaf3d7bc61d8ff5"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#aaa8fab98447367bc4eaf3d7bc61d8ff5">array</a> (<a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2, <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3, const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:aaa8fab98447367bc4eaf3d7bc61d8ff5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a 4D array on the device using a host/device pointer.  <a href="classaf_1_1array.htm#aaa8fab98447367bc4eaf3d7bc61d8ff5">More...</a><br /></td></tr>
<tr class="separator:aaa8fab98447367bc4eaf3d7bc61d8ff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1144078b1596e7d29f57b1a0a1c9b1a8"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:a1144078b1596e7d29f57b1a0a1c9b1a8"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a1144078b1596e7d29f57b1a0a1c9b1a8">array</a> (const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;<a class="el" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>, const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *pointer, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:a1144078b1596e7d29f57b1a0a1c9b1a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an array of specified size on the device using a host/device pointer.  <a href="classaf_1_1array.htm#a1144078b1596e7d29f57b1a0a1c9b1a8">More...</a><br /></td></tr>
<tr class="separator:a1144078b1596e7d29f57b1a0a1c9b1a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab65f7a320bb53cb1f25de25c685ec0a0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#ab65f7a320bb53cb1f25de25c685ec0a0">array</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;input, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;<a class="el" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>)</td></tr>
<tr class="memdesc:ab65f7a320bb53cb1f25de25c685ec0a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust the dimensions of an N-D array (fast).  <a href="classaf_1_1array.htm#ab65f7a320bb53cb1f25de25c685ec0a0">More...</a><br /></td></tr>
<tr class="separator:ab65f7a320bb53cb1f25de25c685ec0a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4866e95e473b71b99ad842608744ac4f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a4866e95e473b71b99ad842608744ac4f">array</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;input, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim1=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim2=1, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dim3=1)</td></tr>
<tr class="memdesc:a4866e95e473b71b99ad842608744ac4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust the dimensions of an N-D array (fast).  <a href="classaf_1_1array.htm#a4866e95e473b71b99ad842608744ac4f">More...</a><br /></td></tr>
<tr class="separator:a4866e95e473b71b99ad842608744ac4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac57222501ff47f5d795503ac47c87e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#aac57222501ff47f5d795503ac47c87e3">get</a> ()</td></tr>
<tr class="memdesc:aac57222501ff47f5d795503ac47c87e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle  <a href="classaf_1_1array.htm#aac57222501ff47f5d795503ac47c87e3">More...</a><br /></td></tr>
<tr class="separator:aac57222501ff47f5d795503ac47c87e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2b564347156aa7fd3908617a84ba3cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#ae2b564347156aa7fd3908617a84ba3cc">get</a> () const</td></tr>
<tr class="memdesc:ae2b564347156aa7fd3908617a84ba3cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle  <a href="classaf_1_1array.htm#ae2b564347156aa7fd3908617a84ba3cc">More...</a><br /></td></tr>
<tr class="separator:ae2b564347156aa7fd3908617a84ba3cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89f91cdf327a8b304589916db5bde3c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">elements</a> () const</td></tr>
<tr class="memdesc:a89f91cdf327a8b304589916db5bde3c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total number of elements across all dimensions of the array.  <a href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">More...</a><br /></td></tr>
<tr class="separator:a89f91cdf327a8b304589916db5bde3c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44a7a503b21a96e6bb16636227ae5e35"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:a44a7a503b21a96e6bb16636227ae5e35"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a44a7a503b21a96e6bb16636227ae5e35">host</a> () const</td></tr>
<tr class="memdesc:a44a7a503b21a96e6bb16636227ae5e35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy array data to host and return host pointer.  <a href="classaf_1_1array.htm#a44a7a503b21a96e6bb16636227ae5e35">More...</a><br /></td></tr>
<tr class="separator:a44a7a503b21a96e6bb16636227ae5e35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cc0f3c2307de6b82ede47c9b26da2d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a5cc0f3c2307de6b82ede47c9b26da2d0">host</a> (void *ptr) const</td></tr>
<tr class="memdesc:a5cc0f3c2307de6b82ede47c9b26da2d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy array data to existing host pointer.  <a href="classaf_1_1array.htm#a5cc0f3c2307de6b82ede47c9b26da2d0">More...</a><br /></td></tr>
<tr class="separator:a5cc0f3c2307de6b82ede47c9b26da2d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa70b253da2d32394c521a815f7627116"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:aa70b253da2d32394c521a815f7627116"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#aa70b253da2d32394c521a815f7627116">write</a> (const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *ptr, const size_t <a class="el" href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541">bytes</a>, <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a> src=<a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>)</td></tr>
<tr class="memdesc:aa70b253da2d32394c521a815f7627116"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform deep copy from host/device pointer to an existing array.  <a href="classaf_1_1array.htm#aa70b253da2d32394c521a815f7627116">More...</a><br /></td></tr>
<tr class="separator:aa70b253da2d32394c521a815f7627116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a122667ba97054fbee7b1ff885bb3bfe4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a122667ba97054fbee7b1ff885bb3bfe4">type</a> () const</td></tr>
<tr class="memdesc:a122667ba97054fbee7b1ff885bb3bfe4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get array data type.  <a href="classaf_1_1array.htm#a122667ba97054fbee7b1ff885bb3bfe4">More...</a><br /></td></tr>
<tr class="separator:a122667ba97054fbee7b1ff885bb3bfe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10d14b019693bc98f672ad7c4ac60bac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a> () const</td></tr>
<tr class="memdesc:a10d14b019693bc98f672ad7c4ac60bac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get dimensions of the array.  <a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">More...</a><br /></td></tr>
<tr class="separator:a10d14b019693bc98f672ad7c4ac60bac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83301f0006c5cb2de7b92b596b40b97b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a83301f0006c5cb2de7b92b596b40b97b">dims</a> (unsigned dim) const</td></tr>
<tr class="memdesc:a83301f0006c5cb2de7b92b596b40b97b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get dimensions of the array.  <a href="classaf_1_1array.htm#a83301f0006c5cb2de7b92b596b40b97b">More...</a><br /></td></tr>
<tr class="separator:a83301f0006c5cb2de7b92b596b40b97b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af44710cddd99a7992a890b6096265041"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#af44710cddd99a7992a890b6096265041">numdims</a> () const</td></tr>
<tr class="memdesc:af44710cddd99a7992a890b6096265041"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of dimensions of the array.  <a href="classaf_1_1array.htm#af44710cddd99a7992a890b6096265041">More...</a><br /></td></tr>
<tr class="separator:af44710cddd99a7992a890b6096265041"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b73c6479b9490ad49b8156e14473541"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541">bytes</a> () const</td></tr>
<tr class="memdesc:a3b73c6479b9490ad49b8156e14473541"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the array in bytes.  <a href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541">More...</a><br /></td></tr>
<tr class="separator:a3b73c6479b9490ad49b8156e14473541"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bc3e142a14a07815b29e230cefacd3e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a8bc3e142a14a07815b29e230cefacd3e">allocated</a> () const</td></tr>
<tr class="memdesc:a8bc3e142a14a07815b29e230cefacd3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the array in memory.  <a href="classaf_1_1array.htm#a8bc3e142a14a07815b29e230cefacd3e">More...</a><br /></td></tr>
<tr class="separator:a8bc3e142a14a07815b29e230cefacd3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa859f53b411dd3ab37c8c817b4352e07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#aa859f53b411dd3ab37c8c817b4352e07">copy</a> () const</td></tr>
<tr class="memdesc:aa859f53b411dd3ab37c8c817b4352e07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform deep copy of the array.  <a href="classaf_1_1array.htm#aa859f53b411dd3ab37c8c817b4352e07">More...</a><br /></td></tr>
<tr class="separator:aa859f53b411dd3ab37c8c817b4352e07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02af51409898c251bb31665e41596057"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a02af51409898c251bb31665e41596057">isempty</a> () const</td></tr>
<tr class="memdesc:a02af51409898c251bb31665e41596057"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true of the array is empty.  <a href="classaf_1_1array.htm#a02af51409898c251bb31665e41596057">More...</a><br /></td></tr>
<tr class="separator:a02af51409898c251bb31665e41596057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41966eaad67492044dc4757b843dbbac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a41966eaad67492044dc4757b843dbbac">isscalar</a> () const</td></tr>
<tr class="memdesc:a41966eaad67492044dc4757b843dbbac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true of the array contains only one value.  <a href="classaf_1_1array.htm#a41966eaad67492044dc4757b843dbbac">More...</a><br /></td></tr>
<tr class="separator:a41966eaad67492044dc4757b843dbbac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a237bd79e8bf4cb8ad0c6eb1f0a9aa3d9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a237bd79e8bf4cb8ad0c6eb1f0a9aa3d9">isvector</a> () const</td></tr>
<tr class="memdesc:a237bd79e8bf4cb8ad0c6eb1f0a9aa3d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only one of the array dimensions has more than one element.  <a href="classaf_1_1array.htm#a237bd79e8bf4cb8ad0c6eb1f0a9aa3d9">More...</a><br /></td></tr>
<tr class="separator:a237bd79e8bf4cb8ad0c6eb1f0a9aa3d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99cd74de21bde89f497dac1c2e1b23f1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a99cd74de21bde89f497dac1c2e1b23f1">isrow</a> () const</td></tr>
<tr class="memdesc:a99cd74de21bde89f497dac1c2e1b23f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only the second dimension has more than one element.  <a href="classaf_1_1array.htm#a99cd74de21bde89f497dac1c2e1b23f1">More...</a><br /></td></tr>
<tr class="separator:a99cd74de21bde89f497dac1c2e1b23f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5e12ba6e9d5b29ab276fb4271cb0764"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#af5e12ba6e9d5b29ab276fb4271cb0764">iscolumn</a> () const</td></tr>
<tr class="memdesc:af5e12ba6e9d5b29ab276fb4271cb0764"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if only the first dimension has more than one element.  <a href="classaf_1_1array.htm#af5e12ba6e9d5b29ab276fb4271cb0764">More...</a><br /></td></tr>
<tr class="separator:af5e12ba6e9d5b29ab276fb4271cb0764"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e82c9d93b78f06278146e85a222604b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a2e82c9d93b78f06278146e85a222604b">iscomplex</a> () const</td></tr>
<tr class="memdesc:a2e82c9d93b78f06278146e85a222604b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="classaf_1_1array.htm#a2e82c9d93b78f06278146e85a222604b">More...</a><br /></td></tr>
<tr class="separator:a2e82c9d93b78f06278146e85a222604b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae778ca527466663084f5797f23075603"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#ae778ca527466663084f5797f23075603">isreal</a> () const</td></tr>
<tr class="memdesc:ae778ca527466663084f5797f23075603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="classaf_1_1array.htm#ae778ca527466663084f5797f23075603">More...</a><br /></td></tr>
<tr class="separator:ae778ca527466663084f5797f23075603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1893dbf4e3ad0325a7cdff6bc5485f5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#ae1893dbf4e3ad0325a7cdff6bc5485f5">isdouble</a> () const</td></tr>
<tr class="memdesc:ae1893dbf4e3ad0325a7cdff6bc5485f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="classaf_1_1array.htm#ae1893dbf4e3ad0325a7cdff6bc5485f5">More...</a><br /></td></tr>
<tr class="separator:ae1893dbf4e3ad0325a7cdff6bc5485f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a819cfdc18b093dce679d6b6c72d0110b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a819cfdc18b093dce679d6b6c72d0110b">issingle</a> () const</td></tr>
<tr class="memdesc:a819cfdc18b093dce679d6b6c72d0110b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is either <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a>.  <a href="classaf_1_1array.htm#a819cfdc18b093dce679d6b6c72d0110b">More...</a><br /></td></tr>
<tr class="separator:a819cfdc18b093dce679d6b6c72d0110b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ce9ca2348ff15914295042744c734e7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a3ce9ca2348ff15914295042744c734e7">ishalf</a> () const</td></tr>
<tr class="memdesc:a3ce9ca2348ff15914295042744c734e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a>.  <a href="classaf_1_1array.htm#a3ce9ca2348ff15914295042744c734e7">More...</a><br /></td></tr>
<tr class="separator:a3ce9ca2348ff15914295042744c734e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26b61c0ea2dcb7aa91d21db31c0cf148"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a26b61c0ea2dcb7aa91d21db31c0cf148">isrealfloating</a> () const</td></tr>
<tr class="memdesc:a26b61c0ea2dcb7aa91d21db31c0cf148"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>.  <a href="classaf_1_1array.htm#a26b61c0ea2dcb7aa91d21db31c0cf148">More...</a><br /></td></tr>
<tr class="separator:a26b61c0ea2dcb7aa91d21db31c0cf148"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab33ad283445e5af655bf7e87bbab72e3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#ab33ad283445e5af655bf7e87bbab72e3">isfloating</a> () const</td></tr>
<tr class="memdesc:ab33ad283445e5af655bf7e87bbab72e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>.  <a href="classaf_1_1array.htm#ab33ad283445e5af655bf7e87bbab72e3">More...</a><br /></td></tr>
<tr class="separator:ab33ad283445e5af655bf7e87bbab72e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b69d758673c8443bd0609685cb97615"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a4b69d758673c8443bd0609685cb97615">isinteger</a> () const</td></tr>
<tr class="memdesc:a4b69d758673c8443bd0609685cb97615"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0">u8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1">s32</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a2fb596fb851c71689624894525c069e4">s64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1b18b7885e1360b6696142284b4b4928">u64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a98085990ff18bf438d3c839ea4c80bb4">s16</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5ae817c8a85914a5f150f2739df6b76c57">u16</a>.  <a href="classaf_1_1array.htm#a4b69d758673c8443bd0609685cb97615">More...</a><br /></td></tr>
<tr class="separator:a4b69d758673c8443bd0609685cb97615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75548d3af424a944fd62f0c897321311"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a75548d3af424a944fd62f0c897321311">isbool</a> () const</td></tr>
<tr class="memdesc:a75548d3af424a944fd62f0c897321311"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>.  <a href="classaf_1_1array.htm#a75548d3af424a944fd62f0c897321311">More...</a><br /></td></tr>
<tr class="separator:a75548d3af424a944fd62f0c897321311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c71baaa51ca6bc9403a2a9ef0c46d96"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a4c71baaa51ca6bc9403a2a9ef0c46d96">issparse</a> () const</td></tr>
<tr class="memdesc:a4c71baaa51ca6bc9403a2a9ef0c46d96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the array is a sparse array.  <a href="classaf_1_1array.htm#a4c71baaa51ca6bc9403a2a9ef0c46d96">More...</a><br /></td></tr>
<tr class="separator:a4c71baaa51ca6bc9403a2a9ef0c46d96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a8d7156cd3c66a9ca9f0f2688ee9f72"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">eval</a> () const</td></tr>
<tr class="memdesc:a6a8d7156cd3c66a9ca9f0f2688ee9f72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate any JIT expressions to generate data for the array.  <a href="classaf_1_1array.htm#a6a8d7156cd3c66a9ca9f0f2688ee9f72">More...</a><br /></td></tr>
<tr class="separator:a6a8d7156cd3c66a9ca9f0f2688ee9f72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a048d77db849d74f18a13dabfd43ce55d"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:a048d77db849d74f18a13dabfd43ce55d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a048d77db849d74f18a13dabfd43ce55d">scalar</a> () const</td></tr>
<tr class="memdesc:a048d77db849d74f18a13dabfd43ce55d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the first element of the array as a scalar.  <a href="classaf_1_1array.htm#a048d77db849d74f18a13dabfd43ce55d">More...</a><br /></td></tr>
<tr class="separator:a048d77db849d74f18a13dabfd43ce55d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64bf5e096ea250f57e4e90d228025c66"><td class="memTemplParams" colspan="2">template&lt;typename <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> &gt; </td></tr>
<tr class="memitem:a64bf5e096ea250f57e4e90d228025c66"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a64bf5e096ea250f57e4e90d228025c66">device</a> () const</td></tr>
<tr class="memdesc:a64bf5e096ea250f57e4e90d228025c66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the device pointer from the array and lock the buffer in memory manager.  <a href="classaf_1_1array.htm#a64bf5e096ea250f57e4e90d228025c66">More...</a><br /></td></tr>
<tr class="separator:a64bf5e096ea250f57e4e90d228025c66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fe5da06c007e62ef0f1a9f37e4f5d8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__paren.htm#ga9fe5da06c007e62ef0f1a9f37e4f5d8a">operator()</a> (const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s0)</td></tr>
<tr class="memdesc:ga9fe5da06c007e62ef0f1a9f37e4f5d8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">This operator returns a reference of the original array at a given coordinate.  <a href="group__array__mem__operator__paren.htm#ga9fe5da06c007e62ef0f1a9f37e4f5d8a">More...</a><br /></td></tr>
<tr class="separator:ga9fe5da06c007e62ef0f1a9f37e4f5d8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad339fd330407473c07631cb73c1068ea"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__paren.htm#gad339fd330407473c07631cb73c1068ea">operator()</a> (const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s0) const</td></tr>
<tr class="memdesc:gad339fd330407473c07631cb73c1068ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">This operator returns a reference of the original array at a given coordinate.   <a href="group__array__mem__operator__paren.htm#gad339fd330407473c07631cb73c1068ea">More...</a><br /></td></tr>
<tr class="separator:gad339fd330407473c07631cb73c1068ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad94516ed0fbbf6c7aad0bdee90d1de29"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__paren.htm#gad94516ed0fbbf6c7aad0bdee90d1de29">operator()</a> (const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s0, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s1, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s2=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s3=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>)</td></tr>
<tr class="memdesc:gad94516ed0fbbf6c7aad0bdee90d1de29"><td class="mdescLeft">&#160;</td><td class="mdescRight">This operator returns a reference of the original array at a given coordinate.  <a href="group__array__mem__operator__paren.htm#gad94516ed0fbbf6c7aad0bdee90d1de29">More...</a><br /></td></tr>
<tr class="separator:gad94516ed0fbbf6c7aad0bdee90d1de29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac05aef47c7537b2e9d00ad568e26c457"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__paren.htm#gac05aef47c7537b2e9d00ad568e26c457">operator()</a> (const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s0, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s1, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s2=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, const <a class="el" href="classaf_1_1index.htm">index</a> &amp;s3=<a class="el" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) const</td></tr>
<tr class="memdesc:gac05aef47c7537b2e9d00ad568e26c457"><td class="mdescLeft">&#160;</td><td class="mdescRight">This operator returns a reference of the original array at a given coordinate.   <a href="group__array__mem__operator__paren.htm#gac05aef47c7537b2e9d00ad568e26c457">More...</a><br /></td></tr>
<tr class="separator:gac05aef47c7537b2e9d00ad568e26c457"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5822c6bdfbf4ff01f23c4417934b924c"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a> (<a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> <a class="el" href="classaf_1_1array.htm#a122667ba97054fbee7b1ff885bb3bfe4">type</a>) const</td></tr>
<tr class="memdesc:a5822c6bdfbf4ff01f23c4417934b924c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the array into another data type.  <a href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">More...</a><br /></td></tr>
<tr class="separator:a5822c6bdfbf4ff01f23c4417934b924c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ec8b3d923f76dab805bc55dc821be1d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a8ec8b3d923f76dab805bc55dc821be1d">~array</a> ()</td></tr>
<tr class="separator:a8ec8b3d923f76dab805bc55dc821be1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fc1c437c072767fc8acea2b67469498"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> () const</td></tr>
<tr class="memdesc:a7fc1c437c072767fc8acea2b67469498"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the transposed the array.  <a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">More...</a><br /></td></tr>
<tr class="separator:a7fc1c437c072767fc8acea2b67469498"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a222cd421e1a99821609a17d54c9fc488"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a222cd421e1a99821609a17d54c9fc488">H</a> () const</td></tr>
<tr class="memdesc:a222cd421e1a99821609a17d54c9fc488"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the conjugate-transpose of the current array.  <a href="classaf_1_1array.htm#a222cd421e1a99821609a17d54c9fc488">More...</a><br /></td></tr>
<tr class="separator:a222cd421e1a99821609a17d54c9fc488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaedef821c349b4baef7c60b52c958f4fc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neg.htm#gaedef821c349b4baef7c60b52c958f4fc">operator-</a> () const</td></tr>
<tr class="memdesc:gaedef821c349b4baef7c60b52c958f4fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Negates the values of the array.  <a href="group__arith__func__neg.htm#gaedef821c349b4baef7c60b52c958f4fc">More...</a><br /></td></tr>
<tr class="separator:gaedef821c349b4baef7c60b52c958f4fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17eb7b75d893bff8288eb80067d4be77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__not.htm#ga17eb7b75d893bff8288eb80067d4be77">operator!</a> () const</td></tr>
<tr class="memdesc:ga17eb7b75d893bff8288eb80067d4be77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a not operation on the values of the array.  <a href="group__arith__func__not.htm#ga17eb7b75d893bff8288eb80067d4be77">More...</a><br /></td></tr>
<tr class="separator:ga17eb7b75d893bff8288eb80067d4be77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed61e7b1a6c6d5c2391d0b52ac069009"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitnot.htm#gaed61e7b1a6c6d5c2391d0b52ac069009">operator~</a> () const</td></tr>
<tr class="memdesc:gaed61e7b1a6c6d5c2391d0b52ac069009"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs a bitwise not operation on the values of the array.  <a href="group__arith__func__bitnot.htm#gaed61e7b1a6c6d5c2391d0b52ac069009">More...</a><br /></td></tr>
<tr class="separator:gaed61e7b1a6c6d5c2391d0b52ac069009"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea718cb4ebc56f57330352f130385c89"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#aea718cb4ebc56f57330352f130385c89">nonzeros</a> () const</td></tr>
<tr class="memdesc:aea718cb4ebc56f57330352f130385c89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the count of non-zero elements in the array.  <a href="classaf_1_1array.htm#aea718cb4ebc56f57330352f130385c89">More...</a><br /></td></tr>
<tr class="separator:aea718cb4ebc56f57330352f130385c89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0af0c6e3920cd67025211889c98807db"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a0af0c6e3920cd67025211889c98807db">lock</a> () const</td></tr>
<tr class="memdesc:a0af0c6e3920cd67025211889c98807db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Locks the device buffer in the memory manager.  <a href="classaf_1_1array.htm#a0af0c6e3920cd67025211889c98807db">More...</a><br /></td></tr>
<tr class="separator:a0af0c6e3920cd67025211889c98807db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43966e19963e4bcb7f7f9b5327ec732b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#a43966e19963e4bcb7f7f9b5327ec732b">isLocked</a> () const</td></tr>
<tr class="memdesc:a43966e19963e4bcb7f7f9b5327ec732b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query if the array has been locked by the user.  <a href="classaf_1_1array.htm#a43966e19963e4bcb7f7f9b5327ec732b">More...</a><br /></td></tr>
<tr class="separator:a43966e19963e4bcb7f7f9b5327ec732b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc83498cc8bf3655094e2f4273861680"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classaf_1_1array.htm#abc83498cc8bf3655094e2f4273861680">unlock</a> () const</td></tr>
<tr class="memdesc:abc83498cc8bf3655094e2f4273861680"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlocks the device buffer in the memory manager.  <a href="classaf_1_1array.htm#abc83498cc8bf3655094e2f4273861680">More...</a><br /></td></tr>
<tr class="separator:abc83498cc8bf3655094e2f4273861680"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gab4b3d8fcff693a861c0748faf06fd65e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__row.htm#gab4b3d8fcff693a861c0748faf06fd65e">row</a> (int <a class="el" href="classaf_1_1index.htm">index</a>)</td></tr>
<tr class="memdesc:gab4b3d8fcff693a861c0748faf06fd65e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to a row.  <a href="group__array__mem__row.htm#gab4b3d8fcff693a861c0748faf06fd65e">More...</a><br /></td></tr>
<tr class="separator:gab4b3d8fcff693a861c0748faf06fd65e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9d0184cfb1f00ed4b0ecb371f5cc4728"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__row.htm#ga9d0184cfb1f00ed4b0ecb371f5cc4728">row</a> (int <a class="el" href="classaf_1_1index.htm">index</a>) const</td></tr>
<tr class="memdesc:ga9d0184cfb1f00ed4b0ecb371f5cc4728"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to a row.   <a href="group__array__mem__row.htm#ga9d0184cfb1f00ed4b0ecb371f5cc4728">More...</a><br /></td></tr>
<tr class="separator:ga9d0184cfb1f00ed4b0ecb371f5cc4728"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacb5178c8a2361d0405cc34775e20c3af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__row.htm#gacb5178c8a2361d0405cc34775e20c3af">rows</a> (int first, int last)</td></tr>
<tr class="memdesc:gacb5178c8a2361d0405cc34775e20c3af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to sequence of rows.  <a href="group__array__mem__row.htm#gacb5178c8a2361d0405cc34775e20c3af">More...</a><br /></td></tr>
<tr class="separator:gacb5178c8a2361d0405cc34775e20c3af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9cc36347482f44a204d053f9dd6d230c"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__row.htm#ga9cc36347482f44a204d053f9dd6d230c">rows</a> (int first, int last) const</td></tr>
<tr class="memdesc:ga9cc36347482f44a204d053f9dd6d230c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to sequence of rows.   <a href="group__array__mem__row.htm#ga9cc36347482f44a204d053f9dd6d230c">More...</a><br /></td></tr>
<tr class="separator:ga9cc36347482f44a204d053f9dd6d230c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:gae54ff0116727d4f4f5f91306c609704e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__col.htm#gae54ff0116727d4f4f5f91306c609704e">col</a> (int <a class="el" href="classaf_1_1index.htm">index</a>)</td></tr>
<tr class="memdesc:gae54ff0116727d4f4f5f91306c609704e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to a col.  <a href="group__array__mem__col.htm#gae54ff0116727d4f4f5f91306c609704e">More...</a><br /></td></tr>
<tr class="separator:gae54ff0116727d4f4f5f91306c609704e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9d4458d899387af9befc15794eea8aa"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__col.htm#gae9d4458d899387af9befc15794eea8aa">col</a> (int <a class="el" href="classaf_1_1index.htm">index</a>) const</td></tr>
<tr class="memdesc:gae9d4458d899387af9befc15794eea8aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to a col.   <a href="group__array__mem__col.htm#gae9d4458d899387af9befc15794eea8aa">More...</a><br /></td></tr>
<tr class="separator:gae9d4458d899387af9befc15794eea8aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4bddfa6cca59628b353964a71e8ec34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__col.htm#gab4bddfa6cca59628b353964a71e8ec34">cols</a> (int first, int last)</td></tr>
<tr class="memdesc:gab4bddfa6cca59628b353964a71e8ec34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to sequence of columns.  <a href="group__array__mem__col.htm#gab4bddfa6cca59628b353964a71e8ec34">More...</a><br /></td></tr>
<tr class="separator:gab4bddfa6cca59628b353964a71e8ec34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabcf3442d37bcd62b586f352a8f5017d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__col.htm#gaabcf3442d37bcd62b586f352a8f5017d">cols</a> (int first, int last) const</td></tr>
<tr class="memdesc:gaabcf3442d37bcd62b586f352a8f5017d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to sequence of columns.   <a href="group__array__mem__col.htm#gaabcf3442d37bcd62b586f352a8f5017d">More...</a><br /></td></tr>
<tr class="separator:gaabcf3442d37bcd62b586f352a8f5017d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga6bc9386479d36e426c205f3a761d6f0c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__slice.htm#ga6bc9386479d36e426c205f3a761d6f0c">slice</a> (int <a class="el" href="classaf_1_1index.htm">index</a>)</td></tr>
<tr class="memdesc:ga6bc9386479d36e426c205f3a761d6f0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to a matrix in a volume.  <a href="group__array__mem__slice.htm#ga6bc9386479d36e426c205f3a761d6f0c">More...</a><br /></td></tr>
<tr class="separator:ga6bc9386479d36e426c205f3a761d6f0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4fc1362a4db0b4b4ac2a1b8452f4dea6"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__slice.htm#ga4fc1362a4db0b4b4ac2a1b8452f4dea6">slice</a> (int <a class="el" href="classaf_1_1index.htm">index</a>) const</td></tr>
<tr class="memdesc:ga4fc1362a4db0b4b4ac2a1b8452f4dea6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to a matrix in a volume.   <a href="group__array__mem__slice.htm#ga4fc1362a4db0b4b4ac2a1b8452f4dea6">More...</a><br /></td></tr>
<tr class="separator:ga4fc1362a4db0b4b4ac2a1b8452f4dea6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2164a9d0e38dd9e5b46d3763d77e5082"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__slice.htm#ga2164a9d0e38dd9e5b46d3763d77e5082">slices</a> (int first, int last)</td></tr>
<tr class="memdesc:ga2164a9d0e38dd9e5b46d3763d77e5082"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to a matrix in a volume.  <a href="group__array__mem__slice.htm#ga2164a9d0e38dd9e5b46d3763d77e5082">More...</a><br /></td></tr>
<tr class="separator:ga2164a9d0e38dd9e5b46d3763d77e5082"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacceb2e3736fd26549d8487785b9745ba"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classaf_1_1array_1_1array__proxy.htm">array::array_proxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__slice.htm#gacceb2e3736fd26549d8487785b9745ba">slices</a> (int first, int last) const</td></tr>
<tr class="memdesc:gacceb2e3736fd26549d8487785b9745ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a reference to a matrix in a volume.   <a href="group__array__mem__slice.htm#gacceb2e3736fd26549d8487785b9745ba">More...</a><br /></td></tr>
<tr class="separator:gacceb2e3736fd26549d8487785b9745ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga44408990fbf862a5bfcb540332669bdb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga44408990fbf862a5bfcb540332669bdb">operator=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;val)</td></tr>
<tr class="memdesc:ga44408990fbf862a5bfcb540332669bdb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__eq.htm#ga44408990fbf862a5bfcb540332669bdb">More...</a><br /></td></tr>
<tr class="separator:ga44408990fbf862a5bfcb540332669bdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1b5613654b69c2b85a29db33c5aa821d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga1b5613654b69c2b85a29db33c5aa821d">operator=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:ga1b5613654b69c2b85a29db33c5aa821d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga1b5613654b69c2b85a29db33c5aa821d">More...</a><br /></td></tr>
<tr class="separator:ga1b5613654b69c2b85a29db33c5aa821d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4708f6ac601c0158252ff4125d48df6e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga4708f6ac601c0158252ff4125d48df6e">operator=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="memdesc:ga4708f6ac601c0158252ff4125d48df6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga4708f6ac601c0158252ff4125d48df6e">More...</a><br /></td></tr>
<tr class="separator:ga4708f6ac601c0158252ff4125d48df6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1b8011aba3399f25a35129e3b6b221fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga1b8011aba3399f25a35129e3b6b221fa">operator=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="memdesc:ga1b8011aba3399f25a35129e3b6b221fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga1b8011aba3399f25a35129e3b6b221fa">More...</a><br /></td></tr>
<tr class="separator:ga1b8011aba3399f25a35129e3b6b221fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga83b7b73fd4b949d165713924d223309d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga83b7b73fd4b949d165713924d223309d">operator=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:ga83b7b73fd4b949d165713924d223309d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga83b7b73fd4b949d165713924d223309d">More...</a><br /></td></tr>
<tr class="separator:ga83b7b73fd4b949d165713924d223309d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga049bef9728b657a2d9ab557484719da2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga049bef9728b657a2d9ab557484719da2">operator=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:ga049bef9728b657a2d9ab557484719da2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga049bef9728b657a2d9ab557484719da2">More...</a><br /></td></tr>
<tr class="separator:ga049bef9728b657a2d9ab557484719da2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga64b30d0491617033d15db7fcc8bead3c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga64b30d0491617033d15db7fcc8bead3c">operator=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:ga64b30d0491617033d15db7fcc8bead3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga64b30d0491617033d15db7fcc8bead3c">More...</a><br /></td></tr>
<tr class="separator:ga64b30d0491617033d15db7fcc8bead3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b05ab7a6c5c90264499f9214f1ed7f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga0b05ab7a6c5c90264499f9214f1ed7f6">operator=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:ga0b05ab7a6c5c90264499f9214f1ed7f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga0b05ab7a6c5c90264499f9214f1ed7f6">More...</a><br /></td></tr>
<tr class="separator:ga0b05ab7a6c5c90264499f9214f1ed7f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f527a51bfdce80d224f90e4b148f582"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga9f527a51bfdce80d224f90e4b148f582">operator=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:ga9f527a51bfdce80d224f90e4b148f582"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga9f527a51bfdce80d224f90e4b148f582">More...</a><br /></td></tr>
<tr class="separator:ga9f527a51bfdce80d224f90e4b148f582"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c920f2ea1e0db848bcba120cff763ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga3c920f2ea1e0db848bcba120cff763ca">operator=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:ga3c920f2ea1e0db848bcba120cff763ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#ga3c920f2ea1e0db848bcba120cff763ca">More...</a><br /></td></tr>
<tr class="separator:ga3c920f2ea1e0db848bcba120cff763ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae81fa5b231119240a78f7ec745be62d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#gae81fa5b231119240a78f7ec745be62d1">operator=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:gae81fa5b231119240a78f7ec745be62d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#gae81fa5b231119240a78f7ec745be62d1">More...</a><br /></td></tr>
<tr class="separator:gae81fa5b231119240a78f7ec745be62d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec96cc307af46a8d9eb08d61583f14ec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#gaec96cc307af46a8d9eb08d61583f14ec">operator=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:gaec96cc307af46a8d9eb08d61583f14ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#gaec96cc307af46a8d9eb08d61583f14ec">More...</a><br /></td></tr>
<tr class="separator:gaec96cc307af46a8d9eb08d61583f14ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5d52fd08d3ff1b3658f7550de1a8c4f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#gad5d52fd08d3ff1b3658f7550de1a8c4f">operator=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:gad5d52fd08d3ff1b3658f7550de1a8c4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#gad5d52fd08d3ff1b3658f7550de1a8c4f">More...</a><br /></td></tr>
<tr class="separator:gad5d52fd08d3ff1b3658f7550de1a8c4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga27e9106b8e81525c08e84745b78665eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#ga27e9106b8e81525c08e84745b78665eb">operator=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="separator:ga27e9106b8e81525c08e84745b78665eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3fc8309b4bce2905a28f4325c186bfb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#gac3fc8309b4bce2905a28f4325c186bfb">operator=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:gac3fc8309b4bce2905a28f4325c186bfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__eq.htm#gac3fc8309b4bce2905a28f4325c186bfb">More...</a><br /></td></tr>
<tr class="separator:gac3fc8309b4bce2905a28f4325c186bfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf71eb6bdb9834156c0d8aa2f3e77e6bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm#gaf71eb6bdb9834156c0d8aa2f3e77e6bb">operator=</a> (const unsigned short &amp;val)</td></tr>
<tr class="separator:gaf71eb6bdb9834156c0d8aa2f3e77e6bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga6415c77c6851dea7b0d01d94767cc5bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga6415c77c6851dea7b0d01d94767cc5bc">operator+=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;val)</td></tr>
<tr class="memdesc:ga6415c77c6851dea7b0d01d94767cc5bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__plus__eq.htm#ga6415c77c6851dea7b0d01d94767cc5bc">More...</a><br /></td></tr>
<tr class="separator:ga6415c77c6851dea7b0d01d94767cc5bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga86f8bc305e5d05011810b99ad988a07a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga86f8bc305e5d05011810b99ad988a07a">operator+=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:ga86f8bc305e5d05011810b99ad988a07a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga86f8bc305e5d05011810b99ad988a07a">More...</a><br /></td></tr>
<tr class="separator:ga86f8bc305e5d05011810b99ad988a07a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga621e8da593de6776cd2643a85d7cfdb8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga621e8da593de6776cd2643a85d7cfdb8">operator+=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="memdesc:ga621e8da593de6776cd2643a85d7cfdb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga621e8da593de6776cd2643a85d7cfdb8">More...</a><br /></td></tr>
<tr class="separator:ga621e8da593de6776cd2643a85d7cfdb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga27d5d543f38fcc4fed476d91da4c7ce4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga27d5d543f38fcc4fed476d91da4c7ce4">operator+=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="memdesc:ga27d5d543f38fcc4fed476d91da4c7ce4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga27d5d543f38fcc4fed476d91da4c7ce4">More...</a><br /></td></tr>
<tr class="separator:ga27d5d543f38fcc4fed476d91da4c7ce4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7e2abc85c8a6b71815777e3f9b6cc10c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga7e2abc85c8a6b71815777e3f9b6cc10c">operator+=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:ga7e2abc85c8a6b71815777e3f9b6cc10c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga7e2abc85c8a6b71815777e3f9b6cc10c">More...</a><br /></td></tr>
<tr class="separator:ga7e2abc85c8a6b71815777e3f9b6cc10c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7dadb274263f2c31a9ac71c898e560f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga7dadb274263f2c31a9ac71c898e560f5">operator+=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:ga7dadb274263f2c31a9ac71c898e560f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga7dadb274263f2c31a9ac71c898e560f5">More...</a><br /></td></tr>
<tr class="separator:ga7dadb274263f2c31a9ac71c898e560f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b995b68d6bd803be8a5e23d7e1abc98"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga9b995b68d6bd803be8a5e23d7e1abc98">operator+=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:ga9b995b68d6bd803be8a5e23d7e1abc98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga9b995b68d6bd803be8a5e23d7e1abc98">More...</a><br /></td></tr>
<tr class="separator:ga9b995b68d6bd803be8a5e23d7e1abc98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd1f5924187fba50599107c11bbf30f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gacd1f5924187fba50599107c11bbf30f2">operator+=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:gacd1f5924187fba50599107c11bbf30f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#gacd1f5924187fba50599107c11bbf30f2">More...</a><br /></td></tr>
<tr class="separator:gacd1f5924187fba50599107c11bbf30f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4cb8acdf9a1286a66ca1201cae39326c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga4cb8acdf9a1286a66ca1201cae39326c">operator+=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:ga4cb8acdf9a1286a66ca1201cae39326c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga4cb8acdf9a1286a66ca1201cae39326c">More...</a><br /></td></tr>
<tr class="separator:ga4cb8acdf9a1286a66ca1201cae39326c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga235b2f91caa14b27de040adeb61ad9ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga235b2f91caa14b27de040adeb61ad9ad">operator+=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:ga235b2f91caa14b27de040adeb61ad9ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga235b2f91caa14b27de040adeb61ad9ad">More...</a><br /></td></tr>
<tr class="separator:ga235b2f91caa14b27de040adeb61ad9ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga82a4ed51883ff103c5919e73830059d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga82a4ed51883ff103c5919e73830059d8">operator+=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:ga82a4ed51883ff103c5919e73830059d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga82a4ed51883ff103c5919e73830059d8">More...</a><br /></td></tr>
<tr class="separator:ga82a4ed51883ff103c5919e73830059d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga61fe330991c25b6f8fbc74faae738147"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#ga61fe330991c25b6f8fbc74faae738147">operator+=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:ga61fe330991c25b6f8fbc74faae738147"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#ga61fe330991c25b6f8fbc74faae738147">More...</a><br /></td></tr>
<tr class="separator:ga61fe330991c25b6f8fbc74faae738147"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafd9d29209b6f63821fa2204afb171323"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gafd9d29209b6f63821fa2204afb171323">operator+=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:gafd9d29209b6f63821fa2204afb171323"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#gafd9d29209b6f63821fa2204afb171323">More...</a><br /></td></tr>
<tr class="separator:gafd9d29209b6f63821fa2204afb171323"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab298c878d115a839eac615ee4d73f030"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gab298c878d115a839eac615ee4d73f030">operator+=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="separator:gab298c878d115a839eac615ee4d73f030"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab3c8b4944634d48ccb9cbc4c83353b69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gab3c8b4944634d48ccb9cbc4c83353b69">operator+=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:gab3c8b4944634d48ccb9cbc4c83353b69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__plus__eq.htm#gab3c8b4944634d48ccb9cbc4c83353b69">More...</a><br /></td></tr>
<tr class="separator:gab3c8b4944634d48ccb9cbc4c83353b69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefaab5fb0ce57b1321e0405c11873eaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm#gaefaab5fb0ce57b1321e0405c11873eaa">operator+=</a> (const unsigned short &amp;val)</td></tr>
<tr class="separator:gaefaab5fb0ce57b1321e0405c11873eaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga734e7941a5ff8bca941af539ef90fe77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga734e7941a5ff8bca941af539ef90fe77">operator-=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;val)</td></tr>
<tr class="memdesc:ga734e7941a5ff8bca941af539ef90fe77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__minus__eq.htm#ga734e7941a5ff8bca941af539ef90fe77">More...</a><br /></td></tr>
<tr class="separator:ga734e7941a5ff8bca941af539ef90fe77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa6e70382cb9987c92e2982ad797ff551"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#gaa6e70382cb9987c92e2982ad797ff551">operator-=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:gaa6e70382cb9987c92e2982ad797ff551"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#gaa6e70382cb9987c92e2982ad797ff551">More...</a><br /></td></tr>
<tr class="separator:gaa6e70382cb9987c92e2982ad797ff551"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8234e06989955ffe3dbfe7701cebe496"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga8234e06989955ffe3dbfe7701cebe496">operator-=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="memdesc:ga8234e06989955ffe3dbfe7701cebe496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#ga8234e06989955ffe3dbfe7701cebe496">More...</a><br /></td></tr>
<tr class="separator:ga8234e06989955ffe3dbfe7701cebe496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5fd0af4232d209d9dedbe4c9398b7f4d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga5fd0af4232d209d9dedbe4c9398b7f4d">operator-=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="memdesc:ga5fd0af4232d209d9dedbe4c9398b7f4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#ga5fd0af4232d209d9dedbe4c9398b7f4d">More...</a><br /></td></tr>
<tr class="separator:ga5fd0af4232d209d9dedbe4c9398b7f4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5d9ec9b134a652cac441681b906db57"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#gaf5d9ec9b134a652cac441681b906db57">operator-=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:gaf5d9ec9b134a652cac441681b906db57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#gaf5d9ec9b134a652cac441681b906db57">More...</a><br /></td></tr>
<tr class="separator:gaf5d9ec9b134a652cac441681b906db57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga28910198cc12974a6ada9e6db5b21dc8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga28910198cc12974a6ada9e6db5b21dc8">operator-=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:ga28910198cc12974a6ada9e6db5b21dc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#ga28910198cc12974a6ada9e6db5b21dc8">More...</a><br /></td></tr>
<tr class="separator:ga28910198cc12974a6ada9e6db5b21dc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga522a196d16f34ee3ee1f5d9f83789792"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga522a196d16f34ee3ee1f5d9f83789792">operator-=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:ga522a196d16f34ee3ee1f5d9f83789792"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#ga522a196d16f34ee3ee1f5d9f83789792">More...</a><br /></td></tr>
<tr class="separator:ga522a196d16f34ee3ee1f5d9f83789792"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9656feb4d7998bc7fec54a91ed5381b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga9656feb4d7998bc7fec54a91ed5381b8">operator-=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:ga9656feb4d7998bc7fec54a91ed5381b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#ga9656feb4d7998bc7fec54a91ed5381b8">More...</a><br /></td></tr>
<tr class="separator:ga9656feb4d7998bc7fec54a91ed5381b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad355a11eace56fe1dad48654f60304e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#gaad355a11eace56fe1dad48654f60304e">operator-=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:gaad355a11eace56fe1dad48654f60304e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#gaad355a11eace56fe1dad48654f60304e">More...</a><br /></td></tr>
<tr class="separator:gaad355a11eace56fe1dad48654f60304e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe1a72a52d833de09962025ccb4b6c5d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#gafe1a72a52d833de09962025ccb4b6c5d">operator-=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:gafe1a72a52d833de09962025ccb4b6c5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#gafe1a72a52d833de09962025ccb4b6c5d">More...</a><br /></td></tr>
<tr class="separator:gafe1a72a52d833de09962025ccb4b6c5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacea86f104dc5010472793e74f9c47f83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#gacea86f104dc5010472793e74f9c47f83">operator-=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:gacea86f104dc5010472793e74f9c47f83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#gacea86f104dc5010472793e74f9c47f83">More...</a><br /></td></tr>
<tr class="separator:gacea86f104dc5010472793e74f9c47f83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacf7fe8d296a09775219a83773087a5a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#gacf7fe8d296a09775219a83773087a5a5">operator-=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:gacf7fe8d296a09775219a83773087a5a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#gacf7fe8d296a09775219a83773087a5a5">More...</a><br /></td></tr>
<tr class="separator:gacf7fe8d296a09775219a83773087a5a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ed57060f60fc8f0cb62e5844441a14e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga3ed57060f60fc8f0cb62e5844441a14e">operator-=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:ga3ed57060f60fc8f0cb62e5844441a14e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#ga3ed57060f60fc8f0cb62e5844441a14e">More...</a><br /></td></tr>
<tr class="separator:ga3ed57060f60fc8f0cb62e5844441a14e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b36aa63f520f17b145626792084b10d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga5b36aa63f520f17b145626792084b10d">operator-=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="separator:ga5b36aa63f520f17b145626792084b10d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a1777a9d58c19d26e6037f0a6523b40"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga2a1777a9d58c19d26e6037f0a6523b40">operator-=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:ga2a1777a9d58c19d26e6037f0a6523b40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__minus__eq.htm#ga2a1777a9d58c19d26e6037f0a6523b40">More...</a><br /></td></tr>
<tr class="separator:ga2a1777a9d58c19d26e6037f0a6523b40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga422e20f2e9a6487db20c908f8706e02e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm#ga422e20f2e9a6487db20c908f8706e02e">operator-=</a> (const unsigned short &amp;val)</td></tr>
<tr class="separator:ga422e20f2e9a6487db20c908f8706e02e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga46f55e2de47cb2829c556238eaec13db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga46f55e2de47cb2829c556238eaec13db">operator*=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;val)</td></tr>
<tr class="memdesc:ga46f55e2de47cb2829c556238eaec13db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__multiply__eq.htm#ga46f55e2de47cb2829c556238eaec13db">More...</a><br /></td></tr>
<tr class="separator:ga46f55e2de47cb2829c556238eaec13db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga227f7bf6f3afa23a92650693f131754a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga227f7bf6f3afa23a92650693f131754a">operator*=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:ga227f7bf6f3afa23a92650693f131754a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga227f7bf6f3afa23a92650693f131754a">More...</a><br /></td></tr>
<tr class="separator:ga227f7bf6f3afa23a92650693f131754a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaea7f314d83410b2572eb3d844383b24e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#gaea7f314d83410b2572eb3d844383b24e">operator*=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="memdesc:gaea7f314d83410b2572eb3d844383b24e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#gaea7f314d83410b2572eb3d844383b24e">More...</a><br /></td></tr>
<tr class="separator:gaea7f314d83410b2572eb3d844383b24e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4da913d31fb2cac07c9d5931ee5e955c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga4da913d31fb2cac07c9d5931ee5e955c">operator*=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="memdesc:ga4da913d31fb2cac07c9d5931ee5e955c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga4da913d31fb2cac07c9d5931ee5e955c">More...</a><br /></td></tr>
<tr class="separator:ga4da913d31fb2cac07c9d5931ee5e955c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5bfab395961fafa25b9d62c3e1648581"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga5bfab395961fafa25b9d62c3e1648581">operator*=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:ga5bfab395961fafa25b9d62c3e1648581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga5bfab395961fafa25b9d62c3e1648581">More...</a><br /></td></tr>
<tr class="separator:ga5bfab395961fafa25b9d62c3e1648581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec4e72136d25cd8f3e803320799593ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#gaec4e72136d25cd8f3e803320799593ad">operator*=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:gaec4e72136d25cd8f3e803320799593ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#gaec4e72136d25cd8f3e803320799593ad">More...</a><br /></td></tr>
<tr class="separator:gaec4e72136d25cd8f3e803320799593ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4e9850c8e9d63fd2e7ef559b9afeb4d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#gad4e9850c8e9d63fd2e7ef559b9afeb4d">operator*=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:gad4e9850c8e9d63fd2e7ef559b9afeb4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#gad4e9850c8e9d63fd2e7ef559b9afeb4d">More...</a><br /></td></tr>
<tr class="separator:gad4e9850c8e9d63fd2e7ef559b9afeb4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79f816e666fb7b2fb40b0481c4a46189"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga79f816e666fb7b2fb40b0481c4a46189">operator*=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:ga79f816e666fb7b2fb40b0481c4a46189"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga79f816e666fb7b2fb40b0481c4a46189">More...</a><br /></td></tr>
<tr class="separator:ga79f816e666fb7b2fb40b0481c4a46189"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac9812b5c0d4090067ee5289f96f84a5a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#gac9812b5c0d4090067ee5289f96f84a5a">operator*=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:gac9812b5c0d4090067ee5289f96f84a5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#gac9812b5c0d4090067ee5289f96f84a5a">More...</a><br /></td></tr>
<tr class="separator:gac9812b5c0d4090067ee5289f96f84a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga765520e794448cd7262cdb5c18441fd9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga765520e794448cd7262cdb5c18441fd9">operator*=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:ga765520e794448cd7262cdb5c18441fd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga765520e794448cd7262cdb5c18441fd9">More...</a><br /></td></tr>
<tr class="separator:ga765520e794448cd7262cdb5c18441fd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga14e7f621d5891a1f52410786373f7315"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga14e7f621d5891a1f52410786373f7315">operator*=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:ga14e7f621d5891a1f52410786373f7315"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga14e7f621d5891a1f52410786373f7315">More...</a><br /></td></tr>
<tr class="separator:ga14e7f621d5891a1f52410786373f7315"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17bffd565e636fd609374a2c78cb8a48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga17bffd565e636fd609374a2c78cb8a48">operator*=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:ga17bffd565e636fd609374a2c78cb8a48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga17bffd565e636fd609374a2c78cb8a48">More...</a><br /></td></tr>
<tr class="separator:ga17bffd565e636fd609374a2c78cb8a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga570ede028fa59f35fbe4689afe4d2261"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga570ede028fa59f35fbe4689afe4d2261">operator*=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:ga570ede028fa59f35fbe4689afe4d2261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga570ede028fa59f35fbe4689afe4d2261">More...</a><br /></td></tr>
<tr class="separator:ga570ede028fa59f35fbe4689afe4d2261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5bc7d64423193f240560861eb32020ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga5bc7d64423193f240560861eb32020ed">operator*=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="separator:ga5bc7d64423193f240560861eb32020ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0dbed65e42402e9b2b1d5879b9a5e551"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga0dbed65e42402e9b2b1d5879b9a5e551">operator*=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:ga0dbed65e42402e9b2b1d5879b9a5e551"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__multiply__eq.htm#ga0dbed65e42402e9b2b1d5879b9a5e551">More...</a><br /></td></tr>
<tr class="separator:ga0dbed65e42402e9b2b1d5879b9a5e551"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga141a4f0ad420741072aca5a62b156447"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm#ga141a4f0ad420741072aca5a62b156447">operator*=</a> (const unsigned short &amp;val)</td></tr>
<tr class="separator:ga141a4f0ad420741072aca5a62b156447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:ga5427da3aadae8a77bb050c263f3dda7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga5427da3aadae8a77bb050c263f3dda7e">operator/=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;val)</td></tr>
<tr class="memdesc:ga5427da3aadae8a77bb050c263f3dda7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.  <a href="group__array__mem__operator__divide__eq.htm#ga5427da3aadae8a77bb050c263f3dda7e">More...</a><br /></td></tr>
<tr class="separator:ga5427da3aadae8a77bb050c263f3dda7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5dca13ef6e10eb4576ec372c5d37da55"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga5dca13ef6e10eb4576ec372c5d37da55">operator/=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:ga5dca13ef6e10eb4576ec372c5d37da55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga5dca13ef6e10eb4576ec372c5d37da55">More...</a><br /></td></tr>
<tr class="separator:ga5dca13ef6e10eb4576ec372c5d37da55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa53ff71ffefef0f5c107cd251b960221"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaa53ff71ffefef0f5c107cd251b960221">operator/=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="memdesc:gaa53ff71ffefef0f5c107cd251b960221"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#gaa53ff71ffefef0f5c107cd251b960221">More...</a><br /></td></tr>
<tr class="separator:gaa53ff71ffefef0f5c107cd251b960221"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga617ce0b211d70f220beb438de48d8cbc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga617ce0b211d70f220beb438de48d8cbc">operator/=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="memdesc:ga617ce0b211d70f220beb438de48d8cbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga617ce0b211d70f220beb438de48d8cbc">More...</a><br /></td></tr>
<tr class="separator:ga617ce0b211d70f220beb438de48d8cbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e5482c47bf25984b33786f8f8958c56"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga0e5482c47bf25984b33786f8f8958c56">operator/=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:ga0e5482c47bf25984b33786f8f8958c56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga0e5482c47bf25984b33786f8f8958c56">More...</a><br /></td></tr>
<tr class="separator:ga0e5482c47bf25984b33786f8f8958c56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b898c4c4f90f7930231ceaed412f82c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga0b898c4c4f90f7930231ceaed412f82c">operator/=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:ga0b898c4c4f90f7930231ceaed412f82c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga0b898c4c4f90f7930231ceaed412f82c">More...</a><br /></td></tr>
<tr class="separator:ga0b898c4c4f90f7930231ceaed412f82c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf148bdd2bd488097f442dcbceb57c285"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaf148bdd2bd488097f442dcbceb57c285">operator/=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:gaf148bdd2bd488097f442dcbceb57c285"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#gaf148bdd2bd488097f442dcbceb57c285">More...</a><br /></td></tr>
<tr class="separator:gaf148bdd2bd488097f442dcbceb57c285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9abb662dd064c2db8a42feaffe873eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaa9abb662dd064c2db8a42feaffe873eb">operator/=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:gaa9abb662dd064c2db8a42feaffe873eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#gaa9abb662dd064c2db8a42feaffe873eb">More...</a><br /></td></tr>
<tr class="separator:gaa9abb662dd064c2db8a42feaffe873eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f8fceb57338fd56f1c0d4cf790179de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga2f8fceb57338fd56f1c0d4cf790179de">operator/=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:ga2f8fceb57338fd56f1c0d4cf790179de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga2f8fceb57338fd56f1c0d4cf790179de">More...</a><br /></td></tr>
<tr class="separator:ga2f8fceb57338fd56f1c0d4cf790179de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac06f974077381f515cebf63980d68429"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gac06f974077381f515cebf63980d68429">operator/=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:gac06f974077381f515cebf63980d68429"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#gac06f974077381f515cebf63980d68429">More...</a><br /></td></tr>
<tr class="separator:gac06f974077381f515cebf63980d68429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0239a6e92fc7f4d89ad99da51a2f1fc3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga0239a6e92fc7f4d89ad99da51a2f1fc3">operator/=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:ga0239a6e92fc7f4d89ad99da51a2f1fc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga0239a6e92fc7f4d89ad99da51a2f1fc3">More...</a><br /></td></tr>
<tr class="separator:ga0239a6e92fc7f4d89ad99da51a2f1fc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga242773b4f945aad100dbba4e81f7266e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga242773b4f945aad100dbba4e81f7266e">operator/=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:ga242773b4f945aad100dbba4e81f7266e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga242773b4f945aad100dbba4e81f7266e">More...</a><br /></td></tr>
<tr class="separator:ga242773b4f945aad100dbba4e81f7266e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6badd884a0c98ebcd1ecd077a9065ca3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga6badd884a0c98ebcd1ecd077a9065ca3">operator/=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:ga6badd884a0c98ebcd1ecd077a9065ca3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga6badd884a0c98ebcd1ecd077a9065ca3">More...</a><br /></td></tr>
<tr class="separator:ga6badd884a0c98ebcd1ecd077a9065ca3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7aeb216db19134023563bbf007175f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaf7aeb216db19134023563bbf007175f6">operator/=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="separator:gaf7aeb216db19134023563bbf007175f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga22e227ab59d17a3ab5cfe78d8e8ab324"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga22e227ab59d17a3ab5cfe78d8e8ab324">operator/=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:ga22e227ab59d17a3ab5cfe78d8e8ab324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.   <a href="group__array__mem__operator__divide__eq.htm#ga22e227ab59d17a3ab5cfe78d8e8ab324">More...</a><br /></td></tr>
<tr class="separator:ga22e227ab59d17a3ab5cfe78d8e8ab324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ca862b693fae07c10deb0b33d938368"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga2ca862b693fae07c10deb0b33d938368">operator/=</a> (const unsigned short &amp;val)</td></tr>
<tr class="separator:ga2ca862b693fae07c10deb0b33d938368"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >A multi dimensional data container. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="benchmarks_2blas_8cpp-example.htm#_a0">benchmarks/blas.cpp</a>, <a class="el" href="benchmarks_2cg_8cpp-example.htm#_a0">benchmarks/cg.cpp</a>, <a class="el" href="benchmarks_2fft_8cpp-example.htm#_a0">benchmarks/fft.cpp</a>, <a class="el" href="benchmarks_2pi_8cpp-example.htm#_a0">benchmarks/pi.cpp</a>, <a class="el" href="computer_vision_2fast_8cpp-example.htm#_a0">computer_vision/fast.cpp</a>, <a class="el" href="computer_vision_2harris_8cpp-example.htm#_a1">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2matching_8cpp-example.htm#_a0">computer_vision/matching.cpp</a>, <a class="el" href="computer_vision_2susan_8cpp-example.htm#_a0">computer_vision/susan.cpp</a>, <a class="el" href="financial_2black_scholes_options_8cpp-example.htm#_a0">financial/black_scholes_options.cpp</a>, <a class="el" href="financial_2heston_model_8cpp-example.htm#_a0">financial/heston_model.cpp</a>, <a class="el" href="financial_2monte_carlo_options_8cpp-example.htm#_a2">financial/monte_carlo_options.cpp</a>, <a class="el" href="getting_started_2convolve_8cpp-example.htm#_a0">getting_started/convolve.cpp</a>, <a class="el" href="getting_started_2integer_8cpp-example.htm#_a2">getting_started/integer.cpp</a>, <a class="el" href="getting_started_2rainfall_8cpp-example.htm#_a2">getting_started/rainfall.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#_a0">getting_started/vectorize.cpp</a>, <a class="el" href="graphics_2conway_8cpp-example.htm#_a2">graphics/conway.cpp</a>, <a class="el" href="graphics_2conway_pretty_8cpp-example.htm#_a3">graphics/conway_pretty.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#_a3">graphics/field.cpp</a>, <a class="el" href="graphics_2fractal_8cpp-example.htm#_a0">graphics/fractal.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#_a0">graphics/gravity_sim.cpp</a>, <a class="el" href="graphics_2histogram_8cpp-example.htm#_a2">graphics/histogram.cpp</a>, <a class="el" href="graphics_2plot2d_8cpp-example.htm#_a2">graphics/plot2d.cpp</a>, <a class="el" href="graphics_2plot3_8cpp-example.htm#_a2">graphics/plot3.cpp</a>, <a class="el" href="graphics_2surface_8cpp-example.htm#_a2">graphics/surface.cpp</a>, <a class="el" href="helloworld_2helloworld_8cpp-example.htm#_a2">helloworld/helloworld.cpp</a>, <a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#_a0">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#_a0">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#_a0">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2confidence_connected_components_8cpp-example.htm#_a0">image_processing/confidence_connected_components.cpp</a>, <a class="el" href="image_processing_2deconvolution_8cpp-example.htm#_a0">image_processing/deconvolution.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#_a0">image_processing/edge.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#_a0">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2gradient_diffusion_8cpp-example.htm#_a0">image_processing/gradient_diffusion.cpp</a>, <a class="el" href="image_processing_2image_demo_8cpp-example.htm#_a0">image_processing/image_demo.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#_a0">image_processing/image_editing.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#_a0">image_processing/morphing.cpp</a>, <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#_a0">image_processing/optical_flow.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#_a0">image_processing/pyramids.cpp</a>, <a class="el" href="lin_algebra_2cholesky_8cpp-example.htm#_a2">lin_algebra/cholesky.cpp</a>, <a class="el" href="lin_algebra_2lu_8cpp-example.htm#_a2">lin_algebra/lu.cpp</a>, <a class="el" href="lin_algebra_2qr_8cpp-example.htm#_a2">lin_algebra/qr.cpp</a>, <a class="el" href="lin_algebra_2svd_8cpp-example.htm#_a2">lin_algebra/svd.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#_a0">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#_a0">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2geneticalgorithm_8cpp-example.htm#_a0">machine_learning/geneticalgorithm.cpp</a>, <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#_a0">machine_learning/kmeans.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#_a0">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#_a0">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#_a0">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#_a2">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#_a0">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#_a0">machine_learning/rbm.cpp</a>, <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#_a0">machine_learning/softmax_regression.cpp</a>, <a class="el" href="pde_2swe_8cpp-example.htm#_a1">pde/swe.cpp</a>, and <a class="el" href="unified_2basic_8cpp-example.htm#_a2">unified/basic.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l00037">37</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a9cbcfcbf0173e1edaf4094bb36b34b31" name="a9cbcfcbf0173e1edaf4094bb36b34b31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cbcfcbf0173e1edaf4094bb36b34b31">&#9670;&#160;</a></span>array() <span class="overload">[1/15]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an uninitialized array (no data, undefined size) </p>
<div class="fragment"><div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A, B, C;   <span class="comment">// creates three arrays called A, B and C</span></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
</div><!-- fragment --> 
</div>
</div>
<a id="ad34fcf3e619cabf1cd107f72c571f091" name="ad34fcf3e619cabf1cd107f72c571f091"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad34fcf3e619cabf1cd107f72c571f091">&#9670;&#160;</a></span>array() <span class="overload">[2/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>handle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an array from an <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle. </p>
<p >Does not increment a reference counter: the array assumes ownership of the handle. To share the array between multiple objects, use this in conjunction with <a class="el" href="group__c__api__mat.htm#ga7ed45b3f881c0f6c80c5cf2af886dbab">af_retain_array</a>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">handle</td><td>the af_array object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acfba46b754d8e3e5371d9bc78e7ba766" name="acfba46b754d8e3e5371d9bc78e7ba766"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfba46b754d8e3e5371d9bc78e7ba766">&#9670;&#160;</a></span>array() <span class="overload">[3/15]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a copy to the <code>in</code> array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">in</td><td>The input <a class="el" href="classaf_1_1array.htm">array</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a73cb9e2360cecbc511b87abf76b6d631" name="a73cb9e2360cecbc511b87abf76b6d631"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73cb9e2360cecbc511b87abf76b6d631">&#9670;&#160;</a></span>array() <span class="overload">[4/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate a one-dimensional array of a specified size with undefined contents. </p>
<p >Declare a two-dimensional array by passing the number of rows and the number of columns as the first two parameters. The (optional) second parameter is the type of the array. The default type is f32 or 4-byte single-precision floating-point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// allocate space for an array with 10 rows</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(10);          <span class="comment">// type is the default f32</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// allocate space for a column vector with 100 rows</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(100, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);    <span class="comment">// f64 = double precision</span></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a></div><div class="ttdeci">@ f64</div><div class="ttdoc">64-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00213">defines.h:213</a></div></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>number of columns in the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1f0b51e20111680c7fe3c74d54c982dd" name="a1f0b51e20111680c7fe3c74d54c982dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f0b51e20111680c7fe3c74d54c982dd">&#9670;&#160;</a></span>array() <span class="overload">[5/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate a two-dimensional array of a specified size with undefined contents. </p>
<p >Declare a two-dimensional array by passing the number of rows and the number of columns as the first two parameters. The (optional) third parameter is the type of the array. The default type is f32 or 4-byte single-precision floating-point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// allocate space for an array with 10 rows and 8 columns</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(10, 8);          <span class="comment">// type is the default f32</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// allocate space for a column vector with 100 rows (and 1 column)</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(100, 1, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);    <span class="comment">// f64 = double precision</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>number of columns in the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>number of rows in the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a69c9fa684e0b0beaf657ac1dc03afa56" name="a69c9fa684e0b0beaf657ac1dc03afa56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69c9fa684e0b0beaf657ac1dc03afa56">&#9670;&#160;</a></span>array() <span class="overload">[6/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate a three-dimensional (3D) array of a specified size with undefined contents. </p>
<p >This is useful to quickly declare a three-dimensional array by passing the size as the first three parameters. The (optional) fourth parameter is the type of the array. The default type is f32 or 4-byte single-precision floating point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// allocate space for a 10 x 10 x 10 array</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(10, 10, 10);          <span class="comment">// type is the default f32</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// allocate space for a 3D, double precision array</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(10, 10, 10, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);     <span class="comment">// f64 = double precision</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6bc7bac9bb52349c198fa0861b5004b7" name="a6bc7bac9bb52349c198fa0861b5004b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bc7bac9bb52349c198fa0861b5004b7">&#9670;&#160;</a></span>array() <span class="overload">[7/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate a four-dimensional (4D) array of a specified size with undefined contents. </p>
<p >This is useful to quickly declare a four-dimensional array by passing the size as the first four parameters. The (optional) fifth parameter is the type of the array. The default type is f32 or 4-byte floating point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// allocate space for a 10 x 10 x 10 x 20 array</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(10, 10, 10, 20);          <span class="comment">// type is the default f32</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// allocate space for a 4D, double precision array</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(10, 10, 10, 20, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);     <span class="comment">// f64 = double precision</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim3</td><td>fourth dimension of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5686344bf8a49be5286892998d309619" name="a5686344bf8a49be5286892998d309619"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5686344bf8a49be5286892998d309619">&#9670;&#160;</a></span>array() <span class="overload">[8/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>ty</em> = <code><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate an array of a specified size with undefined contents. </p>
<p >This can be useful when the dimensions of the array are calculated somewhere else within the code. The first parameter specifies the size of the array via dim4(). The second parameter is the type of the array. The default type is f32 or 4-byte single-precision floating point numbers.</p>
<div class="fragment"><div class="line"><span class="comment">// create a two-dimensional 10 x 10 array</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a> <a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(10, 10);       <span class="comment">// converted to (10, 10, 1, 1)</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> a1(<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>);          <span class="comment">// create the array (type is f32, the default)</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// create a three-dimensional 10 x 10 x 20 array</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a> <a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(10, 10, 20);   <span class="comment">// converted to (10, 10, 20, 1)</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> a2(<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>,<a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>);      <span class="comment">// f64 = double precision</span></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00025">dim4.hpp:26</a></div></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>size of the array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ty</td><td>optional label describing the data type (default is f32) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8c330c41d6e06b0dea9377ef02762c6f" name="a8c330c41d6e06b0dea9377ef02762c6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c330c41d6e06b0dea9377ef02762c6f">&#9670;&#160;</a></span>array() <span class="overload">[9/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a column vector on the device using a host/device pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>number of elements in the column vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is afHost, can also be afDevice)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="comment">// allocate data on the host</span></div>
<div class="line"><span class="keywordtype">int</span> h_buffer[] = {23, 34, 18, 99, 34};</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(4, h_buffer);   <span class="comment">// copy host data to device</span></div>
<div class="line">                        <span class="comment">//</span></div>
<div class="line">                        <span class="comment">// A = [23]</span></div>
<div class="line">                        <span class="comment">//     [34]</span></div>
<div class="line">                        <span class="comment">//     [18]</span></div>
<div class="line">                        <span class="comment">//     [99]</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first <code>dim0</code> elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object wraps the device pointer AND takes ownership of the underlying memory. </dd></dl>

</div>
</div>
<a id="aa2ebe6a7b991fbe6231321138e79121c" name="aa2ebe6a7b991fbe6231321138e79121c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2ebe6a7b991fbe6231321138e79121c">&#9670;&#160;</a></span>array() <span class="overload">[10/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a 2D array on the device using a host/device pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>number of rows </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>number of columns </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is afHost, can also be <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> h_buffer[] = {0, 1, 2, 3, 4, 5};  <span class="comment">// host array</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(2, 3, h_buffer);              <span class="comment">// copy host data to device</span></div>
</div><!-- fragment --><div class="image">
<img src="2dArray.png" alt=""/>
</div>
<dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first <code>dim0</code> * <code>dim1</code> elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object wraps the device pointer AND takes ownership of the underlying memory. The data is treated as column major format when performing linear algebra operations. </dd></dl>

</div>
</div>
<a id="abd3d95b130bdb2d7e713414687e6b15a" name="abd3d95b130bdb2d7e713414687e6b15a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd3d95b130bdb2d7e713414687e6b15a">&#9670;&#160;</a></span>array() <span class="overload">[11/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a 3D array on the device using a host/device pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, can also be <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> h_buffer[] = {0, 1, 2, 3, 4, 5, 6, 7, 8</div>
<div class="line">                  9, 0, 1, 2, 3, 4, 5, 6, 7};   <span class="comment">// host array</span></div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(3, 3, 2,  h_buffer);   <span class="comment">// copy host data to 3D device array</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first <code>dim0</code> * <code>dim1</code> * <code>dim2</code> elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object just wraps the device pointer and does not take ownership of the underlying memory. The data is treated as column major format when performing linear algebra operations.</dd></dl>
<div class="image">
<img src="3dArray.png" alt=""/>
</div>
 
</div>
</div>
<a id="aaa8fab98447367bc4eaf3d7bc61d8ff5" name="aaa8fab98447367bc4eaf3d7bc61d8ff5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa8fab98447367bc4eaf3d7bc61d8ff5">&#9670;&#160;</a></span>array() <span class="overload">[12/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a 4D array on the device using a host/device pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim3</td><td>fourth dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is afHost, can also be <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> h_buffer[] = {0, 1, 2, 3,</div>
<div class="line">                  4, 5, 6, 7,</div>
<div class="line">                  8, 9, 0, 1,</div>
<div class="line">                  2, 3, 4, 5};   <span class="comment">// host array with 16 elements</span></div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(2, 2, 2, 2, h_buffer);   <span class="comment">// copy host data to 4D device array</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first <code>dim0</code> * <code>dim1</code> * <code>dim2</code> * <code>dim3</code> elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object just wraps the device pointer and does not take ownership of the underlying memory. The data is treated as column major format when performing linear algebra operations. </dd></dl>

</div>
</div>
<a id="a1144078b1596e7d29f57b1a0a1c9b1a8" name="a1144078b1596e7d29f57b1a0a1c9b1a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1144078b1596e7d29f57b1a0a1c9b1a8">&#9670;&#160;</a></span>array() <span class="overload">[13/15]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td>
          <td class="paramname"><em>pointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an array of specified size on the device using a host/device pointer. </p>
<p >This function copies data from the location specified by the pointer to a 1D/2D/3D/4D array on the device. The data is arranged in "column-major" format (similar to that used by FORTRAN).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>vector data type containing the dimension of the <a class="el" href="classaf_1_1array.htm">array</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pointer</td><td>pointer (points to a buffer on the host/device) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>source of the data (default is afHost, can also be <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>)</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line"><span class="keywordtype">int</span> h_buffer[] = {0, 1, 2, 3,    <span class="comment">// host array with 16 elements</span></div>
<div class="line">                  4, 5, 6, 7,    <span class="comment">// written in &quot;row-major&quot; format</span></div>
<div class="line">                  8, 9, 0, 1,</div>
<div class="line">                  2, 3, 4, 5};</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a> <a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(4, 4);</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> A(<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>, h_buffer);         <span class="comment">// A  =  0  4  8  2</span></div>
<div class="line">                                 <span class="comment">//       1  5  9  3</span></div>
<div class="line">                                 <span class="comment">//       2  6  0  4</span></div>
<div class="line">                                 <span class="comment">//       3  7  1  5</span></div>
<div class="line"> </div>
<div class="line">                                 <span class="comment">// Note the &quot;column-major&quot; ordering</span></div>
<div class="line">                                 <span class="comment">// used in ArrayFire</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a>, the first dims.elements() elements are copied. If <code>src</code> is <a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a4994dad30a526a10d0e7e3ed8ec47dc2">afDevice</a>, no copy is done; the array object just wraps the device pointer and does not take ownership of the underlying memory. The data is treated as column major format when performing linear algebra operations. </dd></dl>

</div>
</div>
<a id="ab65f7a320bb53cb1f25de25c685ec0a0" name="ab65f7a320bb53cb1f25de25c685ec0a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab65f7a320bb53cb1f25de25c685ec0a0">&#9670;&#160;</a></span>array() <span class="overload">[14/15]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjust the dimensions of an N-D array (fast). </p>
<p >This operation simply rearranges the description of the array. No memory transfers or transformations are performed. The total number of elements must not change.</p>
<div class="fragment"><div class="line"><span class="keywordtype">float</span> f[] = {1,2,3,4};</div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> a(2,2,f);</div>
<div class="line"><span class="comment">//a=[1 3]</span></div>
<div class="line"><span class="comment">//  [2 4]</span></div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> b = <a class="code hl_function" href="classaf_1_1array.htm#a9cbcfcbf0173e1edaf4094bb36b34b31">array</a>(a, <a class="code hl_class" href="classaf_1_1dim4.htm">dim4</a>(4));</div>
<div class="line"><span class="comment">//b=[1]</span></div>
<div class="line"><span class="comment">//  [2]</span></div>
<div class="line"><span class="comment">//  [3]</span></div>
<div class="line"><span class="comment">//  [4]</span></div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> c = <a class="code hl_function" href="classaf_1_1array.htm#a9cbcfcbf0173e1edaf4094bb36b34b31">array</a>(a, b.<a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>().<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>() );</div>
<div class="line"><span class="comment">//c=[1 2 3 4]</span></div>
<div class="ttc" id="aclassaf_1_1array_htm_a7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a9cbcfcbf0173e1edaf4094bb36b34b31"><div class="ttname"><a href="classaf_1_1array.htm#a9cbcfcbf0173e1edaf4094bb36b34b31">af::array::array</a></div><div class="ttdeci">array()</div><div class="ttdoc">Create an uninitialized array (no data, undefined size)</div></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>total number of elements must not change. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4866e95e473b71b99ad842608744ac4f" name="a4866e95e473b71b99ad842608744ac4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4866e95e473b71b99ad842608744ac4f">&#9670;&#160;</a></span>array() <span class="overload">[15/15]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim1</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim2</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>dim3</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjust the dimensions of an N-D array (fast). </p>
<p >This operation simply rearranges the description of the array. No memory transfers or transformations are performed. The total number of elements must not change.</p>
<div class="fragment"><div class="line"><span class="keywordtype">float</span> f[] = {1,2,3,4};</div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> a(2,2,f);</div>
<div class="line"><span class="comment">//a=[1 3]</span></div>
<div class="line"><span class="comment">//  [2 4]</span></div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> b = <a class="code hl_function" href="classaf_1_1array.htm#a9cbcfcbf0173e1edaf4094bb36b34b31">array</a>(a, 4);</div>
<div class="line"><span class="comment">//b=[1]</span></div>
<div class="line"><span class="comment">//  [2]</span></div>
<div class="line"><span class="comment">//  [3]</span></div>
<div class="line"><span class="comment">//  [4]</span></div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">array</a> c = <a class="code hl_function" href="classaf_1_1array.htm#a9cbcfcbf0173e1edaf4094bb36b34b31">array</a>(a, 1, 4);</div>
<div class="line"><span class="comment">//c=[1 2 3 4]</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim0</td><td>first dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim1</td><td>second dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim2</td><td>third dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim3</td><td>fourth dimension </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8ec8b3d923f76dab805bc55dc821be1d" name="a8ec8b3d923f76dab805bc55dc821be1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ec8b3d923f76dab805bc55dc821be1d">&#9670;&#160;</a></span>~array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classaf_1_1array.htm">array</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a8bc3e142a14a07815b29e230cefacd3e" name="a8bc3e142a14a07815b29e230cefacd3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bc3e142a14a07815b29e230cefacd3e">&#9670;&#160;</a></span>allocated()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t allocated </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the array in memory. </p>
<p >This will return the parent's <a class="el" href="classaf_1_1array.htm#a3b73c6479b9490ad49b8156e14473541" title="Get the size of the array in bytes.">bytes()</a> if the array is indexed. </p>

</div>
</div>
<a id="a5822c6bdfbf4ff01f23c4417934b924c" name="a5822c6bdfbf4ff01f23c4417934b924c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5822c6bdfbf4ff01f23c4417934b924c">&#9670;&#160;</a></span>as()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classaf_1_1array.htm">array</a> as </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Casts the array into another data type. </p>
<dl class="section note"><dt>Note</dt><dd>Consecitive casting operations may be may be optimized out if the original type of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> is the same as the final type. For example if the original type is f64 which is then cast to f32 and then back to f64, then the cast to f32 will be skipped and that operation will <em>NOT</em> be performed by ArrayFire. The following table shows which casts will be optimized out. outer -&gt; inner -&gt; outer <table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">inner-&gt;   </th><th class="markdownTableHeadNone">f32   </th><th class="markdownTableHeadNone">f64   </th><th class="markdownTableHeadNone">c32   </th><th class="markdownTableHeadNone">c64   </th><th class="markdownTableHeadNone">s32   </th><th class="markdownTableHeadNone">u32   </th><th class="markdownTableHeadNone">u8   </th><th class="markdownTableHeadNone">b8   </th><th class="markdownTableHeadNone">s64   </th><th class="markdownTableHeadNone">u64   </th><th class="markdownTableHeadNone">s16   </th><th class="markdownTableHeadNone">u16   </th><th class="markdownTableHeadNone">f16    </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">f32   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">f64   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">c32   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">c64   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">s32   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">u32   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">u8   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">b8   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">s64   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">u64   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">s16   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">u16   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x    </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">f16   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone">x   </td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone"></td><td class="markdownTableBodyNone">x   </td></tr>
</table>
If you want to avoid this behavior use af_eval after the first cast operation. This will ensure that the cast operation is performed on the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>is the desired type(f32, s64, etc.) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with the type specified by <code>type</code> </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="graphics_2conway_pretty_8cpp-example.htm#a10">graphics/conway_pretty.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a7">graphics/gravity_sim.cpp</a>, <a class="el" href="graphics_2histogram_8cpp-example.htm#a8">graphics/histogram.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a4">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2deconvolution_8cpp-example.htm#a1">image_processing/deconvolution.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a3">image_processing/edge.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a3">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2geneticalgorithm_8cpp-example.htm#a7">machine_learning/geneticalgorithm.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a6">machine_learning/neural_network.cpp</a>, and <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a3">machine_learning/rbm.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a3b73c6479b9490ad49b8156e14473541" name="a3b73c6479b9490ad49b8156e14473541"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b73c6479b9490ad49b8156e14473541">&#9670;&#160;</a></span>bytes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the array in bytes. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="benchmarks_2cg_8cpp-example.htm#a4">benchmarks/cg.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="aa859f53b411dd3ab37c8c817b4352e07" name="aa859f53b411dd3ab37c8c817b4352e07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa859f53b411dd3ab37c8c817b4352e07">&#9670;&#160;</a></span>copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> copy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform deep copy of the array. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a2">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a2">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a2">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a1">image_processing/pyramids.cpp</a>, <a class="el" href="lin_algebra_2cholesky_8cpp-example.htm#a4">lin_algebra/cholesky.cpp</a>, <a class="el" href="lin_algebra_2lu_8cpp-example.htm#a4">lin_algebra/lu.cpp</a>, and <a class="el" href="lin_algebra_2qr_8cpp-example.htm#a4">lin_algebra/qr.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a64bf5e096ea250f57e4e90d228025c66" name="a64bf5e096ea250f57e4e90d228025c66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64bf5e096ea250f57e4e90d228025c66">&#9670;&#160;</a></span>device()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> * device </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the device pointer from the array and lock the buffer in memory manager. </p>
<p >The device memory returned by this function is not freed until <a class="el" href="classaf_1_1array.htm#abc83498cc8bf3655094e2f4273861680" title="Unlocks the device buffer in the memory manager.">unlock()</a> is called.</p>
<p >/note When using the OpenCL backend and using the cl_mem template argument, the delete function should be called on the pointer returned by this function. </p>

</div>
</div>
<a id="a10d14b019693bc98f672ad7c4ac60bac" name="a10d14b019693bc98f672ad7c4ac60bac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10d14b019693bc98f672ad7c4ac60bac">&#9670;&#160;</a></span>dims() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1dim4.htm">dim4</a> dims </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get dimensions of the array. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="benchmarks_2cg_8cpp-example.htm#a2">benchmarks/cg.cpp</a>, <a class="el" href="computer_vision_2harris_8cpp-example.htm#a5">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2matching_8cpp-example.htm#a5">computer_vision/matching.cpp</a>, <a class="el" href="financial_2black_scholes_options_8cpp-example.htm#a4">financial/black_scholes_options.cpp</a>, <a class="el" href="financial_2heston_model_8cpp-example.htm#a4">financial/heston_model.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#a1">getting_started/vectorize.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#a5">graphics/field.cpp</a>, <a class="el" href="graphics_2fractal_8cpp-example.htm#a2">graphics/fractal.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a16">graphics/gravity_sim.cpp</a>, <a class="el" href="graphics_2plot2d_8cpp-example.htm#a5">graphics/plot2d.cpp</a>, <a class="el" href="image_processing_2adaptive_thresholding_8cpp-example.htm#a1">image_processing/adaptive_thresholding.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a1">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a3">image_processing/brain_segmentation.cpp</a>, <a class="el" href="image_processing_2edge_8cpp-example.htm#a1">image_processing/edge.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a1">image_processing/filters.cpp</a>, <a class="el" href="image_processing_2gradient_diffusion_8cpp-example.htm#a1">image_processing/gradient_diffusion.cpp</a>, <a class="el" href="image_processing_2image_editing_8cpp-example.htm#a2">image_processing/image_editing.cpp</a>, <a class="el" href="image_processing_2morphing_8cpp-example.htm#a1">image_processing/morphing.cpp</a>, <a class="el" href="image_processing_2optical_flow_8cpp-example.htm#a5">image_processing/optical_flow.cpp</a>, <a class="el" href="image_processing_2pyramids_8cpp-example.htm#a2">image_processing/pyramids.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a2">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a2">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#a1">machine_learning/kmeans.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a2">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a2">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a2">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a4">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a2">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a2">machine_learning/rbm.cpp</a>, <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a2">machine_learning/softmax_regression.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a7">pde/swe.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a83301f0006c5cb2de7b92b596b40b97b" name="a83301f0006c5cb2de7b92b596b40b97b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83301f0006c5cb2de7b92b596b40b97b">&#9670;&#160;</a></span>dims() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> dims </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>dim</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get dimensions of the array. </p>

</div>
</div>
<a id="a89f91cdf327a8b304589916db5bde3c2" name="a89f91cdf327a8b304589916db5bde3c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89f91cdf327a8b304589916db5bde3c2">&#9670;&#160;</a></span>elements()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> elements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the total number of elements across all dimensions of the array. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="benchmarks_2cg_8cpp-example.htm#a3">benchmarks/cg.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#a8">graphics/field.cpp</a>, <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a5">image_processing/binary_thresholding.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a5">image_processing/filters.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a1">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a1">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2geneticalgorithm_8cpp-example.htm#a1">machine_learning/geneticalgorithm.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a1">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a1">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a1">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a3">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a1">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a1">machine_learning/rbm.cpp</a>, <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a1">machine_learning/softmax_regression.cpp</a>, and <a class="el" href="pde_2swe_8cpp-example.htm#a6">pde/swe.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a6a8d7156cd3c66a9ca9f0f2688ee9f72" name="a6a8d7156cd3c66a9ca9f0f2688ee9f72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a8d7156cd3c66a9ca9f0f2688ee9f72">&#9670;&#160;</a></span>eval()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void eval </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluate any JIT expressions to generate data for the array. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="benchmarks_2fft_8cpp-example.htm#a1">benchmarks/fft.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#a7">graphics/field.cpp</a>, <a class="el" href="graphics_2fractal_8cpp-example.htm#a6">graphics/fractal.cpp</a>, <a class="el" href="graphics_2gravity_sim_8cpp-example.htm#a8">graphics/gravity_sim.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a4">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a4">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a4">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a4">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a4">machine_learning/perceptron.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a4">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="aac57222501ff47f5d795503ac47c87e3" name="aac57222501ff47f5d795503ac47c87e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac57222501ff47f5d795503ac47c87e3">&#9670;&#160;</a></span>get() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle </p>

</div>
</div>
<a id="ae2b564347156aa7fd3908617a84ba3cc" name="ae2b564347156aa7fd3908617a84ba3cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2b564347156aa7fd3908617a84ba3cc">&#9670;&#160;</a></span>get() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> handle </p>

</div>
</div>
<a id="a222cd421e1a99821609a17d54c9fc488" name="a222cd421e1a99821609a17d54c9fc488"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a222cd421e1a99821609a17d54c9fc488">&#9670;&#160;</a></span>H()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> H </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the conjugate-transpose of the current array. </p>
<dl class="section return"><dt>Returns</dt><dd>conjugate-transpose matrix </dd></dl>

</div>
</div>
<a id="a44a7a503b21a96e6bb16636227ae5e35" name="a44a7a503b21a96e6bb16636227ae5e35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44a7a503b21a96e6bb16636227ae5e35">&#9670;&#160;</a></span>host() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> * host </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy array data to host and return host pointer. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="computer_vision_2fast_8cpp-example.htm#a5">computer_vision/fast.cpp</a>, <a class="el" href="computer_vision_2harris_8cpp-example.htm#a4">computer_vision/harris.cpp</a>, <a class="el" href="computer_vision_2susan_8cpp-example.htm#a6">computer_vision/susan.cpp</a>, and <a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a7">image_processing/binary_thresholding.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a5cc0f3c2307de6b82ede47c9b26da2d0" name="a5cc0f3c2307de6b82ede47c9b26da2d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cc0f3c2307de6b82ede47c9b26da2d0">&#9670;&#160;</a></span>host() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void host </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy array data to existing host pointer. </p>

</div>
</div>
<a id="a75548d3af424a944fd62f0c897321311" name="a75548d3af424a944fd62f0c897321311"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75548d3af424a944fd62f0c897321311">&#9670;&#160;</a></span>isbool()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isbool </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>. </p>

</div>
</div>
<a id="af5e12ba6e9d5b29ab276fb4271cb0764" name="af5e12ba6e9d5b29ab276fb4271cb0764"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5e12ba6e9d5b29ab276fb4271cb0764">&#9670;&#160;</a></span>iscolumn()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool iscolumn </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only the first dimension has more than one element. </p>

</div>
</div>
<a id="a2e82c9d93b78f06278146e85a222604b" name="a2e82c9d93b78f06278146e85a222604b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e82c9d93b78f06278146e85a222604b">&#9670;&#160;</a></span>iscomplex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool iscomplex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a id="ae1893dbf4e3ad0325a7cdff6bc5485f5" name="ae1893dbf4e3ad0325a7cdff6bc5485f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1893dbf4e3ad0325a7cdff6bc5485f5">&#9670;&#160;</a></span>isdouble()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isdouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a id="a02af51409898c251bb31665e41596057" name="a02af51409898c251bb31665e41596057"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02af51409898c251bb31665e41596057">&#9670;&#160;</a></span>isempty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isempty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true of the array is empty. </p>

</div>
</div>
<a id="ab33ad283445e5af655bf7e87bbab72e3" name="ab33ad283445e5af655bf7e87bbab72e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab33ad283445e5af655bf7e87bbab72e3">&#9670;&#160;</a></span>isfloating()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isfloating </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

</div>
</div>
<a id="a3ce9ca2348ff15914295042744c734e7" name="a3ce9ca2348ff15914295042744c734e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ce9ca2348ff15914295042744c734e7">&#9670;&#160;</a></span>ishalf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ishalf </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a>. </p>

</div>
</div>
<a id="a4b69d758673c8443bd0609685cb97615" name="a4b69d758673c8443bd0609685cb97615"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b69d758673c8443bd0609685cb97615">&#9670;&#160;</a></span>isinteger()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isinteger </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5afa33d5748ff04bcd920280e5a3b790c0">u8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a3734f496648357f310306becf43915b3">b8</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1bd64190677c261a61c640017dbaddf1">s32</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a05ef7b967bac0eef5d9712a6803b9f1a">u32</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a2fb596fb851c71689624894525c069e4">s64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a1b18b7885e1360b6696142284b4b4928">u64</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a98085990ff18bf438d3c839ea4c80bb4">s16</a>, <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5ae817c8a85914a5f150f2739df6b76c57">u16</a>. </p>

</div>
</div>
<a id="a43966e19963e4bcb7f7f9b5327ec732b" name="a43966e19963e4bcb7f7f9b5327ec732b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43966e19963e4bcb7f7f9b5327ec732b">&#9670;&#160;</a></span>isLocked()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isLocked </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Query if the array has been locked by the user. </p>
<p >An array can be locked by the user by calling <code>arry.lock</code> or <code>arr.device</code> or <code>getRawPtr</code> function. </p>

</div>
</div>
<a id="ae778ca527466663084f5797f23075603" name="ae778ca527466663084f5797f23075603"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae778ca527466663084f5797f23075603">&#9670;&#160;</a></span>isreal()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool isreal </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the array type is neither <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a782bca2d24c98bee3e5f1787c4165198">c64</a>. </p>

<p class="definition">Definition at line <a class="el" href="array_8h_source.htm#l00733">733</a> of file <a class="el" href="array_8h_source.htm">array.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  733</span>{ <span class="keywordflow">return</span> !<a class="code hl_function" href="classaf_1_1array.htm#a2e82c9d93b78f06278146e85a222604b">iscomplex</a>(); }</div>
<div class="ttc" id="aclassaf_1_1array_htm_a2e82c9d93b78f06278146e85a222604b"><div class="ttname"><a href="classaf_1_1array.htm#a2e82c9d93b78f06278146e85a222604b">af::array::iscomplex</a></div><div class="ttdeci">bool iscomplex() const</div><div class="ttdoc">Returns true if the array type is c32 or c64.</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a26b61c0ea2dcb7aa91d21db31c0cf148" name="a26b61c0ea2dcb7aa91d21db31c0cf148"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26b61c0ea2dcb7aa91d21db31c0cf148">&#9670;&#160;</a></span>isrealfloating()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isrealfloating </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5af4512c88801326ab48816bf6ece20d67">f16</a> <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> or <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5acdbf3e9fd5f3594b523a077f4838e962">f64</a>. </p>

</div>
</div>
<a id="a99cd74de21bde89f497dac1c2e1b23f1" name="a99cd74de21bde89f497dac1c2e1b23f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99cd74de21bde89f497dac1c2e1b23f1">&#9670;&#160;</a></span>isrow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isrow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only the second dimension has more than one element. </p>

</div>
</div>
<a id="a41966eaad67492044dc4757b843dbbac" name="a41966eaad67492044dc4757b843dbbac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41966eaad67492044dc4757b843dbbac">&#9670;&#160;</a></span>isscalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isscalar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true of the array contains only one value. </p>

</div>
</div>
<a id="a819cfdc18b093dce679d6b6c72d0110b" name="a819cfdc18b093dce679d6b6c72d0110b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a819cfdc18b093dce679d6b6c72d0110b">&#9670;&#160;</a></span>issingle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool issingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array type is either <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a> nor <a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a>. </p>

</div>
</div>
<a id="a4c71baaa51ca6bc9403a2a9ef0c46d96" name="a4c71baaa51ca6bc9403a2a9ef0c46d96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c71baaa51ca6bc9403a2a9ef0c46d96">&#9670;&#160;</a></span>issparse()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool issparse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the array is a sparse array. </p>

</div>
</div>
<a id="a237bd79e8bf4cb8ad0c6eb1f0a9aa3d9" name="a237bd79e8bf4cb8ad0c6eb1f0a9aa3d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a237bd79e8bf4cb8ad0c6eb1f0a9aa3d9">&#9670;&#160;</a></span>isvector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isvector </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if only one of the array dimensions has more than one element. </p>

</div>
</div>
<a id="a0af0c6e3920cd67025211889c98807db" name="a0af0c6e3920cd67025211889c98807db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0af0c6e3920cd67025211889c98807db">&#9670;&#160;</a></span>lock()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void lock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Locks the device buffer in the memory manager. </p>
<p >This method can be called to take control of the device pointer from the memory manager. While a buffer is locked, the memory manager doesn't free the memory until <a class="el" href="classaf_1_1array.htm#abc83498cc8bf3655094e2f4273861680" title="Unlocks the device buffer in the memory manager.">unlock()</a> is invoked. </p>

</div>
</div>
<a id="aea718cb4ebc56f57330352f130385c89" name="aea718cb4ebc56f57330352f130385c89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea718cb4ebc56f57330352f130385c89">&#9670;&#160;</a></span>nonzeros()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int nonzeros </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the count of non-zero elements in the array. </p>
<p >For dense matrix, this is the same as count&lt;int&gt;(arr); </p>

</div>
</div>
<a id="af44710cddd99a7992a890b6096265041" name="af44710cddd99a7992a890b6096265041"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af44710cddd99a7992a890b6096265041">&#9670;&#160;</a></span>numdims()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned numdims </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of dimensions of the array. </p>

</div>
</div>
<a id="a048d77db849d74f18a13dabfd43ce55d" name="a048d77db849d74f18a13dabfd43ce55d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a048d77db849d74f18a13dabfd43ce55d">&#9670;&#160;</a></span>scalar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> scalar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the first element of the array as a scalar. </p>
<dl class="section note"><dt>Note</dt><dd>The scalar function is recommended for use while debugging. Calling this method often will affect performance. </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="image_processing_2binary_thresholding_8cpp-example.htm#a8">image_processing/binary_thresholding.cpp</a>, and <a class="el" href="machine_learning_2kmeans_8cpp-example.htm#a4">machine_learning/kmeans.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a45b3c2ad4eb3f366485b7408367c56b5" name="a45b3c2ad4eb3f366485b7408367c56b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45b3c2ad4eb3f366485b7408367c56b5">&#9670;&#160;</a></span>set()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>tmp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the internal <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> object. </p>
<dl class="section note"><dt>Note</dt><dd>This function will reduce the reference of the previous <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> object </dd></dl>

</div>
</div>
<a id="a7fc1c437c072767fc8acea2b67469498" name="a7fc1c437c072767fc8acea2b67469498"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fc1c437c072767fc8acea2b67469498">&#9670;&#160;</a></span>T()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> T </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the transposed the array. </p>
<dl class="section return"><dt>Returns</dt><dd>Transposed matrix </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="getting_started_2integer_8cpp-example.htm#a6">getting_started/integer.cpp</a>, <a class="el" href="getting_started_2vectorize_8cpp-example.htm#a4">getting_started/vectorize.cpp</a>, <a class="el" href="graphics_2field_8cpp-example.htm#a6">graphics/field.cpp</a>, <a class="el" href="image_processing_2filters_8cpp-example.htm#a4">image_processing/filters.cpp</a>, <a class="el" href="machine_learning_2bagging_8cpp-example.htm#a3">machine_learning/bagging.cpp</a>, <a class="el" href="machine_learning_2deep_belief_net_8cpp-example.htm#a6">machine_learning/deep_belief_net.cpp</a>, <a class="el" href="machine_learning_2knn_8cpp-example.htm#a3">machine_learning/knn.cpp</a>, <a class="el" href="machine_learning_2logistic_regression_8cpp-example.htm#a5">machine_learning/logistic_regression.cpp</a>, <a class="el" href="machine_learning_2naive_bayes_8cpp-example.htm#a6">machine_learning/naive_bayes.cpp</a>, <a class="el" href="machine_learning_2neural_network_8cpp-example.htm#a7">machine_learning/neural_network.cpp</a>, <a class="el" href="machine_learning_2perceptron_8cpp-example.htm#a5">machine_learning/perceptron.cpp</a>, <a class="el" href="machine_learning_2rbm_8cpp-example.htm#a7">machine_learning/rbm.cpp</a>, and <a class="el" href="machine_learning_2softmax_regression_8cpp-example.htm#a5">machine_learning/softmax_regression.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="a122667ba97054fbee7b1ff885bb3bfe4" name="a122667ba97054fbee7b1ff885bb3bfe4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a122667ba97054fbee7b1ff885bb3bfe4">&#9670;&#160;</a></span>type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5">dtype</a> type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get array data type. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="image_processing_2brain_segmentation_8cpp-example.htm#a5">image_processing/brain_segmentation.cpp</a>, and <a class="el" href="image_processing_2morphing_8cpp-example.htm#a4">image_processing/morphing.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="abc83498cc8bf3655094e2f4273861680" name="abc83498cc8bf3655094e2f4273861680"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc83498cc8bf3655094e2f4273861680">&#9670;&#160;</a></span>unlock()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void unlock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unlocks the device buffer in the memory manager. </p>
<p >This method can be called after called after calling <a class="el" href="classaf_1_1array.htm#a0af0c6e3920cd67025211889c98807db">array::lock()</a> Calling this method gives back the control of the device pointer to the memory manager. </p>

</div>
</div>
<a id="aa70b253da2d32394c521a815f7627116" name="aa70b253da2d32394c521a815f7627116"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa70b253da2d32394c521a815f7627116">&#9670;&#160;</a></span>write()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void write </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a> *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6">af::source</a>&#160;</td>
          <td class="paramname"><em>src</em> = <code><a class="el" href="defines_8h.htm#ab99909561d2b3c97b0f6a0935a6f7cc6a53f55a251b7809ae7b1c40163f24ffba">afHost</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform deep copy from host/device pointer to an existing array. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="array_8h_source.htm">array.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="navelem"><a class="el" href="namespaceaf.htm">af</a></li><li class="navelem"><a class="el" href="classaf_1_1array.htm">array</a></li>
        <li class="footer">Generated on Wed Aug 30 2023 15:41:58 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
