<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: deviceMemInfo</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__device__func__mem.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">deviceMemInfo<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a> &raquo; <a class="el" href="group__device__mat.htm">Managing devices in ArrayFire</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Memory manager related functions.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga9c79ca1f0e4dcf4168596d9602d7795c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga9c79ca1f0e4dcf4168596d9602d7795c">setMemStepSize</a> (const size_t size)</td></tr>
<tr class="memdesc:ga9c79ca1f0e4dcf4168596d9602d7795c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the resolution of memory chunks.  <a href="group__device__func__mem.htm#ga9c79ca1f0e4dcf4168596d9602d7795c">More...</a><br /></td></tr>
<tr class="separator:ga9c79ca1f0e4dcf4168596d9602d7795c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga779bdc65de61e76e066d2cda263a814e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga779bdc65de61e76e066d2cda263a814e">getMemStepSize</a> ()</td></tr>
<tr class="memdesc:ga779bdc65de61e76e066d2cda263a814e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the resolution of memory chunks.  <a href="group__device__func__mem.htm#ga779bdc65de61e76e066d2cda263a814e">More...</a><br /></td></tr>
<tr class="separator:ga779bdc65de61e76e066d2cda263a814e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae633760aed4638f8a5ea333e0774ac84"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#gae633760aed4638f8a5ea333e0774ac84">af_device_mem_info</a> (size_t *alloc_bytes, size_t *alloc_buffers, size_t *lock_bytes, size_t *lock_buffers)</td></tr>
<tr class="memdesc:gae633760aed4638f8a5ea333e0774ac84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get memory information from the memory manager.  <a href="group__device__func__mem.htm#gae633760aed4638f8a5ea333e0774ac84">More...</a><br /></td></tr>
<tr class="separator:gae633760aed4638f8a5ea333e0774ac84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c928031579de47fe21594fd745e9188"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga7c928031579de47fe21594fd745e9188">af_print_mem_info</a> (const char *msg, const int device_id)</td></tr>
<tr class="memdesc:ga7c928031579de47fe21594fd745e9188"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints buffer details from the ArrayFire Device Manager.  <a href="group__device__func__mem.htm#ga7c928031579de47fe21594fd745e9188">More...</a><br /></td></tr>
<tr class="separator:ga7c928031579de47fe21594fd745e9188"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga182a33d34b3288c5cf5b88cd02468c56"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga182a33d34b3288c5cf5b88cd02468c56">af_device_gc</a> ()</td></tr>
<tr class="memdesc:ga182a33d34b3288c5cf5b88cd02468c56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call the garbage collection routine.  <a href="group__device__func__mem.htm#ga182a33d34b3288c5cf5b88cd02468c56">More...</a><br /></td></tr>
<tr class="separator:ga182a33d34b3288c5cf5b88cd02468c56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3be9c5ea9ee828868f5d906333a11499"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga3be9c5ea9ee828868f5d906333a11499">af_set_mem_step_size</a> (const size_t step_bytes)</td></tr>
<tr class="memdesc:ga3be9c5ea9ee828868f5d906333a11499"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the minimum memory chunk size.  <a href="group__device__func__mem.htm#ga3be9c5ea9ee828868f5d906333a11499">More...</a><br /></td></tr>
<tr class="separator:ga3be9c5ea9ee828868f5d906333a11499"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c04df1ae248a6a8aa0a28263323872a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga4c04df1ae248a6a8aa0a28263323872a">af_get_mem_step_size</a> (size_t *step_bytes)</td></tr>
<tr class="memdesc:ga4c04df1ae248a6a8aa0a28263323872a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the minimum memory chunk size.  <a href="group__device__func__mem.htm#ga4c04df1ae248a6a8aa0a28263323872a">More...</a><br /></td></tr>
<tr class="separator:ga4c04df1ae248a6a8aa0a28263323872a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2ad5089cbca1a6cca8d87d42279c6a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#gac2ad5089cbca1a6cca8d87d42279c6a8">af_lock_device_ptr</a> (const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gac2ad5089cbca1a6cca8d87d42279c6a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lock the device buffer in the memory manager.  <a href="group__device__func__mem.htm#gac2ad5089cbca1a6cca8d87d42279c6a8">More...</a><br /></td></tr>
<tr class="separator:gac2ad5089cbca1a6cca8d87d42279c6a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga39817b0ba24db34f00c20cc3a20df6d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga39817b0ba24db34f00c20cc3a20df6d4">af_unlock_device_ptr</a> (const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga39817b0ba24db34f00c20cc3a20df6d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlock device buffer in the memory manager.  <a href="group__device__func__mem.htm#ga39817b0ba24db34f00c20cc3a20df6d4">More...</a><br /></td></tr>
<tr class="separator:ga39817b0ba24db34f00c20cc3a20df6d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga825e21412e9c8e3609c759f8106fd384"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga825e21412e9c8e3609c759f8106fd384">af_lock_array</a> (const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga825e21412e9c8e3609c759f8106fd384"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lock the device buffer in the memory manager.  <a href="group__device__func__mem.htm#ga825e21412e9c8e3609c759f8106fd384">More...</a><br /></td></tr>
<tr class="separator:ga825e21412e9c8e3609c759f8106fd384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga07151f8b3d69c1afe3cbd860fd98c36f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga07151f8b3d69c1afe3cbd860fd98c36f">af_unlock_array</a> (const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga07151f8b3d69c1afe3cbd860fd98c36f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlock device buffer in the memory manager.  <a href="group__device__func__mem.htm#ga07151f8b3d69c1afe3cbd860fd98c36f">More...</a><br /></td></tr>
<tr class="separator:ga07151f8b3d69c1afe3cbd860fd98c36f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab99cb6a3744802742c98714fc88fb991"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#gab99cb6a3744802742c98714fc88fb991">af_is_locked_array</a> (bool *res, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:gab99cb6a3744802742c98714fc88fb991"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query if the array has been locked by the user.  <a href="group__device__func__mem.htm#gab99cb6a3744802742c98714fc88fb991">More...</a><br /></td></tr>
<tr class="separator:gab99cb6a3744802742c98714fc88fb991"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58fda2d491cd27f31108e699b5aef506"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga58fda2d491cd27f31108e699b5aef506">af_get_device_ptr</a> (void **ptr, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> arr)</td></tr>
<tr class="memdesc:ga58fda2d491cd27f31108e699b5aef506"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the device pointer and lock the buffer in memory manager.  <a href="group__device__func__mem.htm#ga58fda2d491cd27f31108e699b5aef506">More...</a><br /></td></tr>
<tr class="separator:ga58fda2d491cd27f31108e699b5aef506"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae763d44f5c5cd80d4cf31fd044ee4e3d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#gae763d44f5c5cd80d4cf31fd044ee4e3d">deviceMemInfo</a> (size_t *alloc_bytes, size_t *alloc_buffers, size_t *lock_bytes, size_t *lock_buffers)</td></tr>
<tr class="memdesc:gae763d44f5c5cd80d4cf31fd044ee4e3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets information about the memory manager.  <a href="group__device__func__mem.htm#gae763d44f5c5cd80d4cf31fd044ee4e3d">More...</a><br /></td></tr>
<tr class="separator:gae763d44f5c5cd80d4cf31fd044ee4e3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga64f2598efae63032e3f9d20841f6abeb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga64f2598efae63032e3f9d20841f6abeb">printMemInfo</a> (const char *msg=NULL, const int device_id=-1)</td></tr>
<tr class="memdesc:ga64f2598efae63032e3f9d20841f6abeb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints buffer details from the ArrayFire Device Manager.  <a href="group__device__func__mem.htm#ga64f2598efae63032e3f9d20841f6abeb">More...</a><br /></td></tr>
<tr class="separator:ga64f2598efae63032e3f9d20841f6abeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2fa2d8f09a01b92e840c8149630246d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm#ga2fa2d8f09a01b92e840c8149630246d6">deviceGC</a> ()</td></tr>
<tr class="memdesc:ga2fa2d8f09a01b92e840c8149630246d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call the garbage collection function in the memory manager.  <a href="group__device__func__mem.htm#ga2fa2d8f09a01b92e840c8149630246d6">More...</a><br /></td></tr>
<tr class="separator:ga2fa2d8f09a01b92e840c8149630246d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Memory manager related functions. </p>
<p>Memory manager related functions </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga182a33d34b3288c5cf5b88cd02468c56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga182a33d34b3288c5cf5b88cd02468c56">&#9670;&nbsp;</a></span>af_device_gc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_device_gc </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call the garbage collection routine. </p>

</div>
</div>
<a id="gae633760aed4638f8a5ea333e0774ac84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae633760aed4638f8a5ea333e0774ac84">&#9670;&nbsp;</a></span>af_device_mem_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_device_mem_info </td>
          <td>(</td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>alloc_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>alloc_buffers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>lock_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>lock_buffers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get memory information from the memory manager. </p>

</div>
</div>
<a id="ga58fda2d491cd27f31108e699b5aef506"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga58fda2d491cd27f31108e699b5aef506">&#9670;&nbsp;</a></span>af_get_device_ptr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_device_ptr </td>
          <td>(</td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the device pointer and lock the buffer in memory manager. </p>
<p>The device pointer <code>ptr</code> is notfreed by memory manager until <a class="el" href="group__device__func__mem.htm#ga39817b0ba24db34f00c20cc3a20df6d4">af_unlock_device_ptr</a> is called.</p>
<dl class="section note"><dt>Note</dt><dd>For OpenCL backend *ptr should be cast to cl_mem. </dd></dl>

</div>
</div>
<a id="ga4c04df1ae248a6a8aa0a28263323872a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4c04df1ae248a6a8aa0a28263323872a">&#9670;&nbsp;</a></span>af_get_mem_step_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_get_mem_step_size </td>
          <td>(</td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>step_bytes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the minimum memory chunk size. </p>
<p>Works only with the default memory manager - returns an error if a custom memory manager is set. </p>

</div>
</div>
<a id="gab99cb6a3744802742c98714fc88fb991"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab99cb6a3744802742c98714fc88fb991">&#9670;&nbsp;</a></span>af_is_locked_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_is_locked_array </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>res</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Query if the array has been locked by the user. </p>
<p>An array can be locked by the user by calling <code>af_lock_array</code> or <code>af_get_device_ptr</code> or <code>af_get_raw_ptr</code> function. </p>

</div>
</div>
<a id="ga825e21412e9c8e3609c759f8106fd384"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga825e21412e9c8e3609c759f8106fd384">&#9670;&nbsp;</a></span>af_lock_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_lock_array </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Lock the device buffer in the memory manager. </p>
<p>Locked buffers are not freed by memory manager until <a class="el" href="group__device__func__mem.htm#ga07151f8b3d69c1afe3cbd860fd98c36f">af_unlock_array</a> is called. </p>

</div>
</div>
<a id="gac2ad5089cbca1a6cca8d87d42279c6a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac2ad5089cbca1a6cca8d87d42279c6a8">&#9670;&nbsp;</a></span>af_lock_device_ptr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_lock_device_ptr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Lock the device buffer in the memory manager. </p>
<p>Locked buffers are not freed by memory manager until <a class="el" href="group__device__func__mem.htm#ga07151f8b3d69c1afe3cbd860fd98c36f">af_unlock_array</a> is called. </p>

</div>
</div>
<a id="ga7c928031579de47fe21594fd745e9188"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7c928031579de47fe21594fd745e9188">&#9670;&nbsp;</a></span>af_print_mem_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_print_mem_info </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>device_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints buffer details from the ArrayFire Device Manager. </p>
<p>The result is a table with several columns:</p>
<p>POINTER: The hex address of the array's device or pinned-memory pointer SIZE: Human-readable size of the array AF LOCK: Indicates whether ArrayFire is using this chunk of memory. If not, the chunk is ready for reuse. USER LOCK: If set, ArrayFire is prevented from freeing this memory. The chunk is not ready for re-use even if all ArrayFire's references to it go out of scope.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">msg</td><td>A message to print before the table </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">device_id</td><td>print the memory info of the specified device. -1 signifies active device.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>AF_SUCCESS if successful </dd></dl>

</div>
</div>
<a id="ga3be9c5ea9ee828868f5d906333a11499"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3be9c5ea9ee828868f5d906333a11499">&#9670;&nbsp;</a></span>af_set_mem_step_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_set_mem_step_size </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>step_bytes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the minimum memory chunk size. </p>
<p>Works only with the default memory manager - returns an error if a custom memory manager is set. </p>

</div>
</div>
<a id="ga07151f8b3d69c1afe3cbd860fd98c36f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga07151f8b3d69c1afe3cbd860fd98c36f">&#9670;&nbsp;</a></span>af_unlock_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_unlock_array </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unlock device buffer in the memory manager. </p>
<p>This function will give back the control over the device pointer to the memory manager. </p>

</div>
</div>
<a id="ga39817b0ba24db34f00c20cc3a20df6d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga39817b0ba24db34f00c20cc3a20df6d4">&#9670;&nbsp;</a></span>af_unlock_device_ptr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_unlock_device_ptr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unlock device buffer in the memory manager. </p>
<p>This function will give back the control over the device pointer to the memory manager. </p>

</div>
</div>
<a id="ga2fa2d8f09a01b92e840c8149630246d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2fa2d8f09a01b92e840c8149630246d6">&#9670;&nbsp;</a></span>deviceGC()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::deviceGC </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call the garbage collection function in the memory manager. </p>

</div>
</div>
<a id="gae763d44f5c5cd80d4cf31fd044ee4e3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae763d44f5c5cd80d4cf31fd044ee4e3d">&#9670;&nbsp;</a></span>deviceMemInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::deviceMemInfo </td>
          <td>(</td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>alloc_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>alloc_buffers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>lock_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>lock_buffers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets information about the memory manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">alloc_bytes</td><td>the number of bytes allocated by the memory </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">alloc_buffers</td><td>the number of buffers created by the memory </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">lock_bytes</td><td>The number of bytes in use </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">lock_buffers</td><td>The number of buffers in use</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function performs a synchronization operation </dd></dl>

</div>
</div>
<a id="ga779bdc65de61e76e066d2cda263a814e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga779bdc65de61e76e066d2cda263a814e">&#9670;&nbsp;</a></span>getMemStepSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> size_t af::getMemStepSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the resolution of memory chunks. </p>
<p>Works only with the default memory manager - throws if a custom memory manager is set. </p>

</div>
</div>
<a id="ga64f2598efae63032e3f9d20841f6abeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga64f2598efae63032e3f9d20841f6abeb">&#9670;&nbsp;</a></span>printMemInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::printMemInfo </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>msg</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>device_id</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints buffer details from the ArrayFire Device Manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">msg</td><td>A message to print before the table </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">device_id</td><td>print the memory info of the specified device. -1 signifies active device.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function performs a synchronization operation </dd></dl>

</div>
</div>
<a id="ga9c79ca1f0e4dcf4168596d9602d7795c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9c79ca1f0e4dcf4168596d9602d7795c">&#9670;&nbsp;</a></span>setMemStepSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::setMemStepSize </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the resolution of memory chunks. </p>
<p>Works only with the default memory manager - throws if a custom memory manager is set. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
