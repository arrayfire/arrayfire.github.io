<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: svd</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__lapack__factor__func__svd.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">svd<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__linalg__mat.htm">Linear Algebra</a> &raquo; <a class="el" href="group__lapack__factor__mat.htm">Matrix factorizations and decompositions</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Computes the singular value decomposition of a matrix.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaec191cdf321f030c3bc3b9aee598d256"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gaec191cdf321f030c3bc3b9aee598d256">svd</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;u, <a class="el" href="classaf_1_1array.htm">array</a> &amp;s, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vt, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gaec191cdf321f030c3bc3b9aee598d256"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SVD decomposition.  <br /></td></tr>
<tr class="separator:gaec191cdf321f030c3bc3b9aee598d256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab3f0e525c4e75b96c9a8f2501a517d9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gab3f0e525c4e75b96c9a8f2501a517d9f">svdInPlace</a> (<a class="el" href="classaf_1_1array.htm">array</a> &amp;u, <a class="el" href="classaf_1_1array.htm">array</a> &amp;s, <a class="el" href="classaf_1_1array.htm">array</a> &amp;vt, <a class="el" href="classaf_1_1array.htm">array</a> &amp;in)</td></tr>
<tr class="memdesc:gab3f0e525c4e75b96c9a8f2501a517d9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SVD decomposition (in-place)  <br /></td></tr>
<tr class="separator:gab3f0e525c4e75b96c9a8f2501a517d9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae76f30656dce9bd67246ec652983ec21"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gae76f30656dce9bd67246ec652983ec21">af_svd</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *u, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *s, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vt, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gae76f30656dce9bd67246ec652983ec21"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for SVD decomposition.  <br /></td></tr>
<tr class="separator:gae76f30656dce9bd67246ec652983ec21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80b31f7671bf00143dd992df8d585a2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#ga80b31f7671bf00143dd992df8d585a2d">af_svd_inplace</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *u, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *s, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vt, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga80b31f7671bf00143dd992df8d585a2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for SVD decomposition (in-place)  <br /></td></tr>
<tr class="separator:ga80b31f7671bf00143dd992df8d585a2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Computes the singular value decomposition of a matrix. </p>
<p>This function factorizes a matrix \(A\) into two unitary matrices, \(U\) and \(V^T\), and a diagonal matrix \(S\), such that \(A = USV^T\). If \(A\) has \(M\) rows and \(N\) columns ( \(M \times N\)), then \(U\) will be \(M \times M\), \(V\) will be \(N \times N\), and \(S\) will be \(M \times N\). However, for \(S\), this function only returns the non-zero diagonal elements as a sorted (in descending order) 1D array.</p>
<p>To reconstruct the original matrix \(A\) from the individual factors, the following code snippet can be used:</p>
<div class="fragment"><div class="line">    array U, S, Vt;</div>
<div class="line">    <a class="code hl_function" href="group__lapack__factor__func__svd.htm#gaec191cdf321f030c3bc3b9aee598d256">af::svd</a>(U, S, Vt, A);</div>
<div class="line"> </div>
<div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> MN = std::min(M, N);</div>
<div class="line"> </div>
<div class="line">    array UU = U(span, seq(MN));</div>
<div class="line">    array SS = diag(S, 0, <span class="keyword">false</span>).<a class="code hl_function" href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">as</a>(ty);</div>
<div class="line">    array VV = Vt(seq(MN), span);</div>
<div class="line"> </div>
<div class="line">    array AA = matmul(UU, SS, VV);</div>
<div class="ttc" id="aclassaf_1_1array_htm_a5822c6bdfbf4ff01f23c4417934b924c"><div class="ttname"><a href="classaf_1_1array.htm#a5822c6bdfbf4ff01f23c4417934b924c">af::array::as</a></div><div class="ttdeci">const array as(dtype type) const</div><div class="ttdoc">Casts the array into another data type.</div></div>
<div class="ttc" id="agroup__lapack__factor__func__svd_htm_gaec191cdf321f030c3bc3b9aee598d256"><div class="ttname"><a href="group__lapack__factor__func__svd.htm#gaec191cdf321f030c3bc3b9aee598d256">af::svd</a></div><div class="ttdeci">AFAPI void svd(array &amp;u, array &amp;s, array &amp;vt, const array &amp;in)</div><div class="ttdoc">C++ Interface for SVD decomposition.</div></div>
</div><!-- fragment --><p>When memory is a concern, and \(A\) is dispensable, <a class="el" href="group__lapack__factor__func__svd.htm#gab3f0e525c4e75b96c9a8f2501a517d9f">af::svdInPlace()</a> can be used. However, this in-place version is currently limited to input arrays where \(M \geq N\).</p>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="gae76f30656dce9bd67246ec652983ec21" name="gae76f30656dce9bd67246ec652983ec21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae76f30656dce9bd67246ec652983ec21">&#9670;&#160;</a></span>af_svd()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_svd </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for SVD decomposition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">u</td><td>is the output array containing U </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>is the output array containing the diagonal values of sigma, (singular values of the input matrix)) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vt</td><td>is the output array containing V^H </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input matrix </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga80b31f7671bf00143dd992df8d585a2d" name="ga80b31f7671bf00143dd992df8d585a2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga80b31f7671bf00143dd992df8d585a2d">&#9670;&#160;</a></span>af_svd_inplace()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_svd_inplace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for SVD decomposition (in-place) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">u</td><td>is the output array containing U </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>is the output array containing the diagonal values of sigma, (singular values of the input matrix)) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vt</td><td>is the output array containing V^H </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">in</td><td>is the input matrix that will contain random data after this operation</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Currently, <code>in</code> is limited to arrays where <code>dim0</code> \(\geq\) <code>dim1</code> </dd>
<dd>
This is best used when minimizing memory usage and <code>in</code> is dispensable </dd></dl>

</div>
</div>
<a id="gaec191cdf321f030c3bc3b9aee598d256" name="gaec191cdf321f030c3bc3b9aee598d256"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaec191cdf321f030c3bc3b9aee598d256">&#9670;&#160;</a></span>svd()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void svd </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for SVD decomposition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">u</td><td>is the output array containing U </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>is the output array containing the diagonal values of sigma, (singular values of the input matrix)) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vt</td><td>is the output array containing V^H </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input matrix </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gab3f0e525c4e75b96c9a8f2501a517d9f" name="gab3f0e525c4e75b96c9a8f2501a517d9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab3f0e525c4e75b96c9a8f2501a517d9f">&#9670;&#160;</a></span>svdInPlace()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void svdInPlace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for SVD decomposition (in-place) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">u</td><td>is the output array containing U </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>is the output array containing the diagonal values of sigma, (singular values of the input matrix)) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vt</td><td>is the output array containing V^H </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">in</td><td>is the input matrix and will contain random data after this operation</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Currently, <code>in</code> is limited to arrays where <code>dim0</code> \(\geq\) <code>dim1</code> </dd>
<dd>
This is best used when minimizing memory usage and <code>in</code> is dispensable </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Tue Feb 14 2023 10:39:43 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
    </ul>
</div>
</body>
</html>
