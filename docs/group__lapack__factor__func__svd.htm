<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>svd</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__lapack__factor__func__svd.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">svd<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__linalg__mat.htm">Linear Algebra</a> &raquo;  &#124; <a class="el" href="group__lapack__factor__mat.htm">Matrix factorizations and decompositions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Perform Singular Value Decomposition.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gab016ef45fce266ab9545054bea1cb6b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gab016ef45fce266ab9545054bea1cb6b7">svd</a> (array &amp;u, array &amp;s, array &amp;vt, const array &amp;in)</td></tr>
<tr class="memdesc:gab016ef45fce266ab9545054bea1cb6b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SVD decomposition.  <a href="group__lapack__factor__func__svd.htm#gab016ef45fce266ab9545054bea1cb6b7">More...</a><br /></td></tr>
<tr class="separator:gab016ef45fce266ab9545054bea1cb6b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab551c4f09090010669e3906988ac8a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gaab551c4f09090010669e3906988ac8a1">svdInPlace</a> (array &amp;u, array &amp;s, array &amp;vt, array &amp;in)</td></tr>
<tr class="memdesc:gaab551c4f09090010669e3906988ac8a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for SVD decomposition.  <a href="group__lapack__factor__func__svd.htm#gaab551c4f09090010669e3906988ac8a1">More...</a><br /></td></tr>
<tr class="separator:gaab551c4f09090010669e3906988ac8a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae76f30656dce9bd67246ec652983ec21"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#gae76f30656dce9bd67246ec652983ec21">af_svd</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *u, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *s, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vt, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:gae76f30656dce9bd67246ec652983ec21"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for SVD decomposition.  <a href="#gae76f30656dce9bd67246ec652983ec21">More...</a><br /></td></tr>
<tr class="separator:gae76f30656dce9bd67246ec652983ec21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80b31f7671bf00143dd992df8d585a2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm#ga80b31f7671bf00143dd992df8d585a2d">af_svd_inplace</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *u, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *s, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *vt, <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in)</td></tr>
<tr class="memdesc:ga80b31f7671bf00143dd992df8d585a2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for SVD decomposition.  <a href="#ga80b31f7671bf00143dd992df8d585a2d">More...</a><br /></td></tr>
<tr class="separator:ga80b31f7671bf00143dd992df8d585a2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Perform Singular Value Decomposition. </p>
<p>This function factorizes a matrix <b>A</b> into two unitary matrices <b>U</b> and <b>Vt</b>, and a diagonal matrix <b>S</b> such that</p>
<p>\(A = U * S * Vt\)</p>
<p>If <b>A</b> has <b>M</b> rows and <b>N</b> columns, <b>U</b> is of the size <b>M x M</b> , <b>V</b> is of size <b>N x N</b>, and <b>S</b> is of size <b>M x N</b></p>
<p>The arrayfire function only returns the non zero diagonal elements of <b>S</b>. To reconstruct the original matrix <b>A</b> from the individual factors, the following code snuppet can be used:</p>
<div class="fragment"><div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> U, S, Vt;</div><div class="line">    <a class="code" href="group__lapack__factor__func__svd.htm#gab016ef45fce266ab9545054bea1cb6b7">af::svd</a>(U, S, Vt, A);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> MN = <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">std::min</a>(M, N);</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> UU = U(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a>, <a class="code" href="classaf_1_1seq.htm">af::seq</a>(MN));</div><div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> SS = <a class="code" href="group__data__func__diag.htm#ga0cf9ea583e513631ed0226aa08ff60da">af::diag</a>(S, 0, <span class="keyword">false</span>).<a class="code" href="group__method__mat.htm#ga28967fdd5fff8001f4ef6181d9b186fb">as</a>(ty);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> VV = Vt(<a class="code" href="classaf_1_1seq.htm">af::seq</a>(MN), <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a>);</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">af::array</a> AA = <a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(UU, SS, VV);</div></div><!-- fragment --><p> When memory is a concern, and <b>A</b> is dispensible, <a class="el" href="group__lapack__factor__func__svd.htm#gaab551c4f09090010669e3906988ac8a1">svdInPlace()</a> can be used</p>
<hr/>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gae76f30656dce9bd67246ec652983ec21"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_svd </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for SVD decomposition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">u</td><td>is the output array containing U </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>is the output array containing the diagonal values of sigma, (singular values of the input matrix)) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vt</td><td>is the output array containing V^H </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input matrix </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga80b31f7671bf00143dd992df8d585a2d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_svd_inplace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for SVD decomposition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">u</td><td>is the output array containing U </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>is the output array containing the diagonal values of sigma, (singular values of the input matrix)) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vt</td><td>is the output array containing V^H </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">in</td><td>is the input matrix that will contain random data after this operation </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gab016ef45fce266ab9545054bea1cb6b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::svd </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for SVD decomposition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">u</td><td>is the output array containing U </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>is the output array containing the diagonal values of sigma, (singular values of the input matrix)) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vt</td><td>is the output array containing V^H </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input matrix </td></tr>
  </table>
  </dd>
</dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="lin_algebra_2svd_8cpp-example.htm#a3">lin_algebra/svd.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="gaab551c4f09090010669e3906988ac8a1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> void af::svdInPlace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for SVD decomposition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">u</td><td>is the output array containing U </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">s</td><td>is the output array containing the diagonal values of sigma, (singular values of the input matrix)) </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">vt</td><td>is the output array containing V^H </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">in</td><td>is the input matrix and will contain random data after this operation </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
