<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Using ArrayFire with Microsoft Windows and Visual Studio</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('using_on_windows.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div><div class="header">
  <div class="headertitle"><div class="title">Using ArrayFire with Microsoft Windows and Visual Studio </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p><a class="anchor" id="md__data_devel_arrayfire_docs_pages_using_on_windows"></a></p>
<p>If you have not already done so, please make sure you have installed, configured, and tested ArrayFire following the <a class="el" href="installing.htm">installation instructions</a>.</p>
<h1><a class="anchor" id="big-picture-windows"></a>
The big picture</h1>
<p>The ArrayFire Windows installer creates the following:</p><ol type="1">
<li><b>AF_PATH</b> environment variable to point to the installation location. The default install location is <code>C:\Program Files\ArrayFire\v3</code></li>
<li><b>AF_PATH/include</b> : Header files for ArrayFire (include directory)</li>
<li><b>AF_PATH/lib</b> : All ArrayFire backends libraries, dlls and dependency dlls (library directory)</li>
<li><b>AF_PATH/examples</b> : Examples to get started.</li>
<li><b>AF_PATH/cmake</b> : CMake config files</li>
<li><b>AF_PATH/uninstall.exe</b> : Uninstaller</li>
</ol>
<p>The installer will prompt the user for following three options.</p><ul>
<li>Do not add <b>%AF_PATH%/lib</b> to PATH</li>
<li>Add <b>%AF_PATH%/lib</b> to PATH environment variable of current user</li>
<li>Add <b>%AF_PATH%/lib</b> to PATH environment variable for all users</li>
</ul>
<p>If you chose not to modify PATH during installation please make sure to do so manually so that all applications using ArrayFire libraries will be able to find the required DLLs.</p>
<h1><a class="anchor" id="section1"></a>
Build and Run Helloworld</h1>
<p>This can be done in two ways either by using CMake build tool or using Visual Studio directly.</p>
<h2><a class="anchor" id="section1part1"></a>
Using CMake</h2>
<ol type="1">
<li>Download and install <a href="https://cmake.org/download/">CMake</a>, preferrably the latest version.</li>
<li>Open CMake-GUI and set the field <b>Where is the source code</b> to the root directory of examples.</li>
<li>Set the field <b>Where to build the binaries</b> to <b>path_to_examples_root_dir/build</b> and click the <code>Configure</code> button towards the lower left bottom.</li>
<li>CMake will prompt you asking if it has to create the <code>build</code> directory if it's not already present. Click yes to create the build directory.</li>
<li>Before the configuration begins, CMake will show you a list(drop-down menu) of available Visual Studio versions on your system to chose from. Select one and check the radio button that says <b>Use default native compilers</b> and click finish button in the bottom right corner.</li>
<li>CMake will show you errors in red text if any once configuration is finished. Ideally, you wouldn't need to do anything and CMake should be able to find ArrayFire automatically. Please let us know if it didn't on your machine.</li>
<li>Click <b>Generate</b> button to generate the Visual Studio solution files for the examples.</li>
<li>Click <b>Open Project</b> button that is right next to <b>Generate</b> button to open the solution file.</li>
<li>You will see a bunch of examples segregated into three sets named after the compute backends of ArrayFire: cpu, cuda &amp; opencl if you have installed all backends. Select the helloworld project from any of the installed backends and mark it as startup project and hit <code>F5</code>.</li>
<li>Once the helloworld example builds, you will see a console window with the output from helloworld program.</li>
</ol>
<h2><a class="anchor" id="section1part2"></a>
Using Visual Studio</h2>
<ol type="1">
<li>Open Visual Studio of your choice and create an empty C++ project.</li>
<li>Right click the project and add an existing source file <code>examples/helloworld/helloworld.cpp</code> to this project.</li>
<li>Add <code>"$(AF_PATH)/include;"</code> to <em>Project Properties -&gt; C/C++ -&gt; General -&gt; Additional Include Directories</em>.</li>
<li>Add <code>"$(AF_PATH)/lib;"</code> to <em>Project Properties -&gt; Linker -&gt; General -&gt; Additional Library Directories</em>.</li>
<li>Add <code>afcpu.lib</code> or <code>afcuda.lib</code> or <code>afopencl.lib</code> to <em>Project Properties -&gt; Linker -&gt; Input -&gt; Additional Dependencies</em>. based on your preferred backend.</li>
<li>(Optional) You may choose to define <code>NOMINMAX</code>, <code>AF_&lt;CPU/CUDA/OPENCL&gt;</code> and/or <code>AF_&lt;DEBUG/RELEASE&gt;</code> in your projects. This can be added to <em>Project Properties -&gt; C/C++ -&gt; General -&gt; Preprocessor-&gt; Preprocessory definitions</em>.</li>
<li>Build and run the project. You will see a console window with the output from helloworld program.</li>
</ol>
<h1><a class="anchor" id="section2"></a>
Using ArrayFire within Existing Visual Studio Projects</h1>
<p>This is divided into three parts:</p><ul>
<li><a class="el" href="using_on_windows.htm#section2partA">Part A: Adding ArrayFire to an existing solution (Single Backend)</a></li>
<li><a class="el" href="using_on_windows.htm#section2partB">Part B: Adding ArrayFire CUDA to a new/existing CUDA project</a></li>
<li><a class="el" href="using_on_windows.htm#section2partC">Part C: Project with all ArrayFire backends</a></li>
</ul>
<h2><a class="anchor" id="section2partA"></a>
Part A: Adding ArrayFire to an existing solution (Single Backend)</h2>
<p>Note: If you plan on using Native CUDA code in the project, use the steps under <a class="el" href="using_on_windows.htm#section2partB">Part B</a>.</p>
<p>Adding a single backend to an existing project is quite simple.</p>
<ol type="1">
<li>Add <code>"$(AF_PATH)/include;"</code> to <em>Project Properties -&gt; C/C++ -&gt; General -&gt; Additional Include Directories</em>.</li>
<li>Add <code>"$(AF_PATH)/lib;"</code> to <em>Project Properties -&gt; Linker -&gt; General -&gt; Additional Library Directories</em>.</li>
<li>Add <code>afcpu.lib</code>, <code>afcuda.lib</code>, <code>afopencl.lib</code>, or <code>af.lib</code> to <em>Project Properties -&gt; Linker -&gt; Input -&gt; Additional Dependencies</em>. based on your preferred backend.</li>
</ol>
<h2><a class="anchor" id="section2partB"></a>
Part B: Adding ArrayFire CUDA to a new/existing CUDA project</h2>
<p>Lastly, if your project contains custom CUDA code, the instructions are slightly different as it requires using a CUDA NVCC Project:</p>
<ol type="1">
<li>Create a custom "CUDA NVCC project" in Visual Studio</li>
<li>Add <code>"$(AF_PATH)/include;"</code> to <em>Project Properties -&gt; CUDA C/C++ -&gt; General -&gt; Additional Include Directories</em>.</li>
<li>Add <code>"$(AF_PATH)/lib;"</code> to <em>Project Properties -&gt; Linker -&gt; General -&gt; Additional Library Directories</em>.</li>
<li>Add <code>afcpu.lib</code>, <code>afcuda.lib</code>, <code>afopencl.lib</code>, or <code>af.lib</code> to <em>Project Properties -&gt; Linker -&gt; Input -&gt; Additional Dependencies</em>. based on your preferred backend.</li>
</ol>
<h3><a class="anchor" id="section2partC"></a>
Part C: Project with all ArrayFire backends</h3>
<p>If you wish to create a project that allows you to use all the ArrayFire backends with ease, you should use <code>af.lib</code> in step 3 from <a class="el" href="using_on_windows.htm#section2partA">Part A</a>.</p>
<p>You can alternately download the template project from <a href="https://github.com/arrayfire/arrayfire-project-templates">ArrayFire Template Projects</a></p>
<h1><a class="anchor" id="section3"></a>Using ArrayFire with CMake</h1>
<p>ArrayFire ships with a series of CMake scripts to make finding and using our library easy.</p>
<p>First create a file called <code>CMakeLists.txt</code> in your project directory: </p><pre class="fragment">cd your-project-directory
touch CMakeLists.txt
</pre><p> and populate it with the following code: </p><pre class="fragment">find_package(ArrayFire)
add_executable(&lt;my_executable&gt; [list your source files here])

# To use Unified backend, do the following.
# Unified backend lets you choose the backend at runtime
target_link_libraries(&lt;my_executable&gt; ArrayFire::af)
</pre><p> where <code>&lt;my_executable&gt;</code> is the name of the executable you wish to create. See the <a href="https://cmake.org/documentation/">CMake documentation</a> for more information on how to use CMake. To link with a specific backend directly, replace the <code>ArrayFire::af</code> with the following for their respective backends.</p>
<ul>
<li><code>ArrayFire::afcpu</code> for CPU backend.</li>
<li><code>ArrayFire::afcuda</code> for CUDA backend.</li>
<li><code>ArrayFire::afopencl</code> for OpenCL backend.</li>
</ul>
<p>Next we need to instruct CMake to create build instructions and then compile. We suggest using CMake's out-of-source build functionality to keep your build and source files cleanly separated. To do this open the CMake GUI.</p>
<ul>
<li>Under source directory, add the path to your project</li>
<li>Under build directory, add the path to your project and append /build</li>
<li>Click configure and choose a 64 bit Visual Studio generator.</li>
<li>If configuration was successful, click generate. This will create a my-project.sln file under build. Click <code>Open Project</code> in CMake-GUI to open the solution and compile the ALL_BUILD project. </li>
</ul>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Tue Feb 14 2023 10:39:42 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
    </ul>
</div>
</body>
</html>
