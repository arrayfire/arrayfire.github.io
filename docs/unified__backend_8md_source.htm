<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>arrayfire-docs-3.6.1/docs/pages/unified_backend.md (2018-05-22 12:00:01 -0400, (build fd64c39)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('unified__backend_8md.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">arrayfire-docs-3.6.1/docs/pages/unified_backend.md (2018-05-22 12:00:01 -0400, (build fd64c39))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="unified__backend_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Unified Backend {#unifiedbackend}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;==========</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;[TOC]</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;# Introduction</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;The Unified backend was introduced in ArrayFire with version 3.2.</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;While this is not an independent backend, it allows the user to switch between</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;the different ArrayFire backends (CPU, CUDA and OpenCL) at runtime.</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;# Compiling with Unified</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;The steps to compile with the unified backend are the same as compiling with</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;any of the other backends.</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;The only change being that the executable needs to be linked with the __af__</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;library (`libaf.so` (Linux), `libaf.dylib` (OSX), `af.lib` (Windows)).</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;Check the Using with [Linux](\ref using_on_linux), [OSX](\ref using_on_osx),</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;[Windows](\ref using_on_windows) for more details.</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;To use with CMake, use the __ArrayFire_Unified_LIBRARIES__ variable.</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;# Using the Unified Backend</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;The Unified backend will try to dynamically load the backend libraries. The</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;priority of backends is __CUDA -&gt; OpenCL -&gt; CPU__</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;The most important aspect to note here is that all the libraries the ArrayFire</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;libs depend on need to be in the environment paths</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;* `LD_LIBRARY_PATH` -&gt; Linux, Unix, OSX</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;* `DYLD_LIBRARY_PATH` -&gt; OSX</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;* `PATH` -&gt; Windows</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;If any of the libs are missing, then the library will fail to load and the</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;backend will be marked as unavailable.</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;Optionally, The ArrayFire libs may be present in `AF_PATH` or `AF_BUILD_PATH`</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;environment variables if the path is not in the system paths. These are</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;treated as fallback paths in case the files are not found in the system paths.</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;However, all the other upstream libraries for ArrayFire libs must be present</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;in the system path variables shown above.</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;# Switching Backends</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;The af_backend enum stores the possible backends.</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;To select a backend, call the af::setBackend function as shown below.</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.c}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;af::setBackend(AF_BACKEND_CUDA);    // Sets CUDA as current backend</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;To get the count of the number of backends available (the number of `libaf*`</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;backend libraries loaded successfully), call the af::getBackendCount function.</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;# Example</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;This example is shortened form of [basic.cpp](\ref unified/basic.cpp).</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.c}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;#include &lt;arrayfire.h&gt;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;void testBackend()</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    af::info();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    af_print(af::randu(5, 4));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;int main()</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    try {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        printf(&quot;Trying CPU Backend\n&quot;);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        af::setBackend(AF_BACKEND_CPU);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        testBackend();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    } catch (af::exception&amp; e) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        printf(&quot;Caught exception when trying CPU backend\n&quot;);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        fprintf(stderr, &quot;%s\n&quot;, e.what());</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    try {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        printf(&quot;Trying CUDA Backend\n&quot;);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        af::setBackend(AF_BACKEND_CUDA);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        testBackend();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    } catch (af::exception&amp; e) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        printf(&quot;Caught exception when trying CUDA backend\n&quot;);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        fprintf(stderr, &quot;%s\n&quot;, e.what());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    try {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        printf(&quot;Trying OpenCL Backend\n&quot;);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        af::setBackend(AF_BACKEND_OPENCL);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        testBackend();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    } catch (af::exception&amp; e) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        printf(&quot;Caught exception when trying OpenCL backend\n&quot;);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        fprintf(stderr, &quot;%s\n&quot;, e.what());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    return 0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;This output would be:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    Trying CPU Backend</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    ArrayFire v3.2.0 (CPU, 64-bit Linux, build fc7630f)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    [0] Intel: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz Max threads(8)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    af::randu(5, 4)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    [5 4 1 1]</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        0.0000     0.2190     0.3835     0.5297</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        0.1315     0.0470     0.5194     0.6711</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        0.7556     0.6789     0.8310     0.0077</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        0.4587     0.6793     0.0346     0.3834</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        0.5328     0.9347     0.0535     0.0668</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    Trying CUDA Backend</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    ArrayFire v3.2.0 (CUDA, 64-bit Linux, build fc7630f)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    Platform: CUDA Toolkit 7.5, Driver: 355.11</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    [0] Quadro K5000, 4093 MB, CUDA Compute 3.0</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    af::randu(5, 4)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    [5 4 1 1]</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        0.7402     0.4464     0.7762     0.2920</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        0.9210     0.6673     0.2948     0.3194</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        0.0390     0.1099     0.7140     0.8109</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        0.9690     0.4702     0.3585     0.1541</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        0.9251     0.5132     0.6814     0.4452</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    Trying OpenCL Backend</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    ArrayFire v3.2.0 (OpenCL, 64-bit Linux, build fc7630f)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    [0] NVIDIA  : Quadro K5000</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    -1- INTEL   : Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    af::randu(5, 4)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    [5 4 1 1]</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        0.4107     0.0081     0.6600     0.1046</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        0.8224     0.3775     0.0764     0.8827</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        0.9518     0.3027     0.0901     0.1647</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        0.1794     0.6456     0.5933     0.8060</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        0.4198     0.5591     0.1098     0.5938</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;# Dos and Don&#39;ts</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;It is very easy to run into exceptions if you are not careful with the</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;switching of backends.</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;### Don&#39;t: Do not use arrays between different backends</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;ArrayFire checks the input arrays to functions for mismatches with the active</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;backend. If an array created on one backend, but used when another backend is</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;set to active, an exception with code 503 (`AF_ERR_ARR_BKND_MISMATCH`) is</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;thrown.</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.c}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;#include &lt;arrayfire.h&gt;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;int main()</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    try {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        af::setBackend(AF_BACKEND_CUDA);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        af::array A = af::randu(5, 5);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        af::setBackend(AF_BACKEND_OPENCL);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        af::array B = af::constant(10, 5, 5);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        af::array C = af::matmul(A, B);     // This will throw an exception</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    } catch (af::exception&amp; e) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        fprintf(stderr, &quot;%s\n&quot;, e.what());</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    return 0;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;### Do: Use a naming scheme to track arrays and backends</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;We recommend that you use a technique to track the arrays on the backends. One</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;suggested technique would be to use a suffix of `_cpu`, `_cuda`, `_opencl`</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;with the array names. So an array created on the CUDA backend would be named</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;`myarray_cuda`.</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;If you have not used the af::setBackend function anywhere in your code, then</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;you do not have to worry about this as all the arrays will be created on the</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;same default backend.</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;### Don&#39;t: Do not use custom kernels (CUDA/OpenCL) with the Unified backend</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;This is another area that is a no go when using the Unified backend. It not</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;recommended that you use custom kernels with unified backend. This is mainly</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;becuase the Unified backend is meant to be ultra portable and should use only</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;ArrayFire and native CPU code.</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
