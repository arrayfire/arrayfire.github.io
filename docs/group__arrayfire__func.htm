<!-- HTML header for doxygen 1.9.3-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: ArrayFire Functions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
  <!--<td id="projectalign">
   <div id="projectname">ArrayFire<span id="projectnumber">&#160;3.8.1</span>
   </div>
   <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>-->
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__arrayfire__func.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#groups">Modules</a>  </div>
  <div class="headertitle"><div class="title">ArrayFire Functions</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="groups" name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem:group__arith__func__abs"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__abs.htm">abs</a></td></tr>
<tr class="memdesc:group__arith__func__abs"><td class="mdescLeft">&#160;</td><td class="mdescRight">Absolute value. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__scan__func__accum"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__accum.htm">accum</a></td></tr>
<tr class="memdesc:group__scan__func__accum"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cumulative sum (inclusive). <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__acos"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acos.htm">acos</a></td></tr>
<tr class="memdesc:group__arith__func__acos"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inverse cosine. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__acosh"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__acosh.htm">acosh</a></td></tr>
<tr class="memdesc:group__arith__func__acosh"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inverse hyperbolic cosine. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__add"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__add.htm">add</a></td></tr>
<tr class="memdesc:group__arith__func__add"><td class="mdescLeft">&#160;</td><td class="mdescRight">Addition of two inputs. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__all__true"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true.htm">allTrue</a></td></tr>
<tr class="memdesc:group__reduce__func__all__true"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test if all values in an array are true. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__all__true__by__key"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__all__true__by__key.htm">allTrueByKey</a></td></tr>
<tr class="memdesc:group__reduce__func__all__true__by__key"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate if all values that share the same consecutive keys are true. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__alloc__host"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc__host.htm">allocHost</a></td></tr>
<tr class="memdesc:group__device__func__alloc__host"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate memory on host. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__alloc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__alloc.htm">allocV2</a></td></tr>
<tr class="memdesc:group__device__func__alloc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate memory using the ArrayFire memory manager. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__and"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__and.htm">and</a></td></tr>
<tr class="memdesc:group__arith__func__and"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical AND. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__anisotropic__diffusion"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__anisotropic__diffusion.htm">anisotropicDiffusion</a></td></tr>
<tr class="memdesc:group__image__func__anisotropic__diffusion"><td class="mdescLeft">&#160;</td><td class="mdescRight">Anisotropic Smoothing Filter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__anytrue__by__key"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__anytrue__by__key.htm">anyTrueByKey</a></td></tr>
<tr class="memdesc:group__reduce__func__anytrue__by__key"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate if any values that share the same consecutive keys are true. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__any__true"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__any__true.htm">anytrue</a></td></tr>
<tr class="memdesc:group__reduce__func__any__true"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate if any values in an array are true. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__approx1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx1.htm">approx1</a></td></tr>
<tr class="memdesc:group__signal__func__approx1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interpolation across a single dimension. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__approx2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__approx2.htm">approx2</a></td></tr>
<tr class="memdesc:group__signal__func__approx2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interpolation along two dimensions. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__arg"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__arg.htm">arg</a></td></tr>
<tr class="memdesc:group__arith__func__arg"><td class="mdescLeft">&#160;</td><td class="mdescRight">Phase of a number in the complex plane. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__asin"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asin.htm">asin</a></td></tr>
<tr class="memdesc:group__arith__func__asin"><td class="mdescLeft">&#160;</td><td class="mdescRight">arc sin of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__asinh"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__asinh.htm">asinh</a></td></tr>
<tr class="memdesc:group__arith__func__asinh"><td class="mdescLeft">&#160;</td><td class="mdescRight">asinh of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__index__func__assign"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__index__func__assign.htm">assign</a></td></tr>
<tr class="memdesc:group__index__func__assign"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy and write values in the locations specified by the sequences. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__atan"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atan.htm">atan/atan2</a></td></tr>
<tr class="memdesc:group__arith__func__atan"><td class="mdescLeft">&#160;</td><td class="mdescRight">arc tan of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__atanh"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__atanh.htm">atanh</a></td></tr>
<tr class="memdesc:group__arith__func__atanh"><td class="mdescLeft">&#160;</td><td class="mdescRight">atanh of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__bilateral"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__bilateral.htm">bilateral</a></td></tr>
<tr class="memdesc:group__image__func__bilateral"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bilateral Filter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__bitand"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitand.htm">bitand</a></td></tr>
<tr class="memdesc:group__arith__func__bitand"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise and operation of two inputs. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__bitnot"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitnot.htm">bitnot</a></td></tr>
<tr class="memdesc:group__arith__func__bitnot"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise not on the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__bitor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitor.htm">bitor</a></td></tr>
<tr class="memdesc:group__arith__func__bitor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise or operation of two inputs. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__shiftl"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftl.htm">bitshiftl</a></td></tr>
<tr class="memdesc:group__arith__func__shiftl"><td class="mdescLeft">&#160;</td><td class="mdescRight">Left shift an input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__shiftr"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__shiftr.htm">bitshiftr</a></td></tr>
<tr class="memdesc:group__arith__func__shiftr"><td class="mdescLeft">&#160;</td><td class="mdescRight">Right shift an input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__bitxor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__bitxor.htm">bitxor</a></td></tr>
<tr class="memdesc:group__arith__func__bitxor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitwise xor operation of two inputs. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__canny"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__canny.htm">canny</a></td></tr>
<tr class="memdesc:group__image__func__canny"><td class="mdescLeft">&#160;</td><td class="mdescRight">Canny Edge Detector. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__cast"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cast.htm">cast</a></td></tr>
<tr class="memdesc:group__arith__func__cast"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casting inputs from one type to another. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__cbrt"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cbrt.htm">cbrt</a></td></tr>
<tr class="memdesc:group__arith__func__cbrt"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cube root of input arrays. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__ceil"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ceil.htm">ceil</a></td></tr>
<tr class="memdesc:group__arith__func__ceil"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round to integer greater than equal to current value. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__factor__func__cholesky"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__cholesky.htm">cholesky</a></td></tr>
<tr class="memdesc:group__lapack__factor__func__cholesky"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform Cholesky decomposition. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__col"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__col.htm">col/cols</a></td></tr>
<tr class="memdesc:group__array__mem__col"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a reference of a col in a 2D <a class="el" href="classaf_1_1array.htm">af::array</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__colorspace"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__colorspace.htm">colorSpace</a></td></tr>
<tr class="memdesc:group__image__func__colorspace"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colorspace conversion function. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__cplx"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cplx.htm">complex</a></td></tr>
<tr class="memdesc:group__arith__func__cplx"><td class="mdescLeft">&#160;</td><td class="mdescRight">create complex arrays <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__confidence__cc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__confidence__cc.htm">confidenceCC</a></td></tr>
<tr class="memdesc:group__image__func__confidence__cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Segment image based on similar pixel characteristics. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__conjg"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__conjg.htm">conjg</a></td></tr>
<tr class="memdesc:group__arith__func__conjg"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get complex conjugate. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__constant"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__constant.htm">constant</a></td></tr>
<tr class="memdesc:group__data__func__constant"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a array from a scalar input value. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__convolve"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve.htm">convolve (Non-separable)</a></td></tr>
<tr class="memdesc:group__signal__func__convolve"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution Integral for any(one through three) dimensional data. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__convolve__sep"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve__sep.htm">convolve (Separable)</a></td></tr>
<tr class="memdesc:group__signal__func__convolve__sep"><td class="mdescLeft">&#160;</td><td class="mdescRight">Separable Convolution. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__convolve1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve1.htm">convolve1</a></td></tr>
<tr class="memdesc:group__signal__func__convolve1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution Integral for one dimensional data. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__convolve2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve2.htm">convolve2</a></td></tr>
<tr class="memdesc:group__signal__func__convolve2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution Integral for two dimensional data. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__convolve3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__convolve3.htm">convolve3</a></td></tr>
<tr class="memdesc:group__signal__func__convolve3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution Integral for three dimensional data. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stat__func__corrcoef"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__corrcoef.htm">corrcoef</a></td></tr>
<tr class="memdesc:group__stat__func__corrcoef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the correlation coefficient of values in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__cos"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cos.htm">cos</a></td></tr>
<tr class="memdesc:group__arith__func__cos"><td class="mdescLeft">&#160;</td><td class="mdescRight">cos of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__cosh"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__cosh.htm">cosh</a></td></tr>
<tr class="memdesc:group__arith__func__cosh"><td class="mdescLeft">&#160;</td><td class="mdescRight">cosh of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__count"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count.htm">count</a></td></tr>
<tr class="memdesc:group__reduce__func__count"><td class="mdescLeft">&#160;</td><td class="mdescRight">Count the number of non-zero elements in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__count__by__key"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__count__by__key.htm">countByKey</a></td></tr>
<tr class="memdesc:group__reduce__func__count__by__key"><td class="mdescLeft">&#160;</td><td class="mdescRight">Counts the non-zero values of an input array according to an array of keys. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stat__func__cov"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__cov.htm">cov</a></td></tr>
<tr class="memdesc:group__stat__func__cov"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the covariance of values in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__imagemem__func__delete"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__delete.htm">deleteImageMem</a></td></tr>
<tr class="memdesc:group__imagemem__func__delete"><td class="mdescLeft">&#160;</td><td class="mdescRight">Delete memory created by saveImageMem and af_save_image_memory function. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__dense"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__dense.htm">dense</a></td></tr>
<tr class="memdesc:group__sparse__func__dense"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a dense array from a sparse input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__ops__func__det"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__det.htm">det</a></td></tr>
<tr class="memdesc:group__lapack__ops__func__det"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the determinant of the input matrix. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__prop"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__prop.htm">deviceInfo</a></td></tr>
<tr class="memdesc:group__device__func__prop"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the information about device and platform as strings. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__mem"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__mem.htm">deviceMemInfo</a></td></tr>
<tr class="memdesc:group__device__func__mem"><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory manager related functions. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__diag"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__diag.htm">diag</a></td></tr>
<tr class="memdesc:group__data__func__diag"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract diagonal from a matrix when <code>extract</code> is set to true. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__calc__func__diff1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff1.htm">diff1</a></td></tr>
<tr class="memdesc:group__calc__func__diff1"><td class="mdescLeft">&#160;</td><td class="mdescRight">First order numerical difference along specified dimension. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__calc__func__diff2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__diff2.htm">diff2</a></td></tr>
<tr class="memdesc:group__calc__func__diff2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Second order numerical difference along specified dimension. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__dilate"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__dilate.htm">dilate</a></td></tr>
<tr class="memdesc:group__image__func__dilate"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dilation(morphological operator) for images. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__dilate3d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__dilate3d.htm">dilate3d</a></td></tr>
<tr class="memdesc:group__image__func__dilate3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dilation(morphological operator) for volumes. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__div"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__div.htm">div</a></td></tr>
<tr class="memdesc:group__arith__func__div"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divide one input by another. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__dog"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__dog.htm">dog</a></td></tr>
<tr class="memdesc:group__cv__func__dog"><td class="mdescLeft">&#160;</td><td class="mdescRight">Difference of Gaussians. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__blas__func__dot"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__dot.htm">dot</a></td></tr>
<tr class="memdesc:group__blas__func__dot"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the dot product of a vector. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__eq"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__eq.htm">eq</a></td></tr>
<tr class="memdesc:group__arith__func__eq"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if input two inputs are equal. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__erf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erf.htm">erf</a></td></tr>
<tr class="memdesc:group__arith__func__erf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Error function value. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__erfc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__erfc.htm">erfc</a></td></tr>
<tr class="memdesc:group__arith__func__erfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Complementary Error function value. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__erode"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__erode.htm">erode</a></td></tr>
<tr class="memdesc:group__image__func__erode"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erosion(morphological operator) for images. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__erode3d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__erode3d.htm">erode3d</a></td></tr>
<tr class="memdesc:group__image__func__erode3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erosion(morphological operator) for volumes. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__exp"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__exp.htm">exp</a></td></tr>
<tr class="memdesc:group__arith__func__exp"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exponential of input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__expm1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__expm1.htm">expm1</a></td></tr>
<tr class="memdesc:group__arith__func__expm1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exponential of input - 1. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__factorial"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__factorial.htm">factorial</a></td></tr>
<tr class="memdesc:group__arith__func__factorial"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factorial function. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__fast"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__fast.htm">fast</a></td></tr>
<tr class="memdesc:group__cv__func__fast"><td class="mdescLeft">&#160;</td><td class="mdescRight">FAST feature detector. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__features__group__features"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__features__group__features.htm">features</a></td></tr>
<tr class="memdesc:group__features__group__features"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lookup values of an array based on sequences and/or arrays. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__fft"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft.htm">fft</a></td></tr>
<tr class="memdesc:group__signal__func__fft"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast Fourier Transform. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__fft2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft2.htm">fft2</a></td></tr>
<tr class="memdesc:group__signal__func__fft2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast Fourier Transform. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__fft3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft3.htm">fft3</a></td></tr>
<tr class="memdesc:group__signal__func__fft3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast Fourier Transform. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__fft__c2r"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft__c2r.htm">fftC2R</a></td></tr>
<tr class="memdesc:group__signal__func__fft__c2r"><td class="mdescLeft">&#160;</td><td class="mdescRight">Complex to Real Fast Fourier Transform. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__fft__r2c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fft__r2c.htm">fftR2C</a></td></tr>
<tr class="memdesc:group__signal__func__fft__r2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Real to Complex Fast Fourier Transform. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__fir"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__fir.htm">fir</a></td></tr>
<tr class="memdesc:group__signal__func__fir"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function implements a Finite Impulse Filter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__manip__func__flat"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__flat.htm">flat</a></td></tr>
<tr class="memdesc:group__manip__func__flat"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flatten the input to a single dimension. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__manip__func__flip"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__flip.htm">flip</a></td></tr>
<tr class="memdesc:group__manip__func__flip"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flip the input along specified dimension. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__floor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__floor.htm">floor</a></td></tr>
<tr class="memdesc:group__arith__func__floor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round to integer less than equal to current value. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__free__host"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free__host.htm">freeHost</a></td></tr>
<tr class="memdesc:group__device__func__free__host"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free memory allocated on host internally by ArrayFire. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__free__pinned"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free__pinned.htm">freePinned</a></td></tr>
<tr class="memdesc:group__device__func__free__pinned"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free pinned memory allocated by ArrayFire's memory manager. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__free"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__free.htm">freeV2</a></td></tr>
<tr class="memdesc:group__device__func__free"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns memory to ArrayFire's memory manager. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__gauss"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gauss.htm">gaussiankernel</a></td></tr>
<tr class="memdesc:group__image__func__gauss"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a Gaussian Kernel. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__ge"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__ge.htm">ge</a></td></tr>
<tr class="memdesc:group__arith__func__ge"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if input is greater than or equal to another. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__unified__func__getactivebackend"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getactivebackend.htm">getActiveBackend</a></td></tr>
<tr class="memdesc:group__unified__func__getactivebackend"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get's the backend enum for the active backend. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__unified__func__getavailbackends"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getavailbackends.htm">getAvailableBackends</a></td></tr>
<tr class="memdesc:group__unified__func__getavailbackends"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an integer indicating the backends loaded successfully. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__unified__func__getbackendcount"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getbackendcount.htm">getBackendCount</a></td></tr>
<tr class="memdesc:group__unified__func__getbackendcount"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of backends whose libraries were successfully loaded. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__unified__func__getbackendid"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getbackendid.htm">getBackendId</a></td></tr>
<tr class="memdesc:group__unified__func__getbackendid"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get's the backend enum for an array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__random__func__get__default__engine"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__get__default__engine.htm">getDefaultRandomEngine</a></td></tr>
<tr class="memdesc:group__random__func__get__default__engine"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the default random engine object. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__get"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__get.htm">getDevice</a></td></tr>
<tr class="memdesc:group__device__func__get"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current device ID. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__count"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__count.htm">getDeviceCount</a></td></tr>
<tr class="memdesc:group__device__func__count"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of compute devices on the system. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__unified__func__getdeviceid"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__getdeviceid.htm">getDeviceId</a></td></tr>
<tr class="memdesc:group__unified__func__getdeviceid"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get's the id of the device an array was created on. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__random__func__get__seed"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__get__seed.htm">getSeed</a></td></tr>
<tr class="memdesc:group__random__func__get__seed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the seed for random number generation. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__gloh"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__gloh.htm">gloh</a></td></tr>
<tr class="memdesc:group__cv__func__gloh"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIFT feature detector and GLOH descriptor extractor. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__calc__func__grad"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__calc__func__grad.htm">grad</a></td></tr>
<tr class="memdesc:group__calc__func__grad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the gradients of the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__gray2rgb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__gray2rgb.htm">gray2rgb</a></td></tr>
<tr class="memdesc:group__image__func__gray2rgb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Grayscale to RGB colorspace converter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__gt"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__gt.htm">gt</a></td></tr>
<tr class="memdesc:group__arith__func__gt"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if input is greater than another. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__hamming__matcher"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__hamming__matcher.htm">hammingMatcher</a></td></tr>
<tr class="memdesc:group__cv__func__hamming__matcher"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hamming Matcher. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__harris"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__harris.htm">harris</a></td></tr>
<tr class="memdesc:group__cv__func__harris"><td class="mdescLeft">&#160;</td><td class="mdescRight">Harris corner detector. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__histequal"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histequal.htm">histequal</a></td></tr>
<tr class="memdesc:group__image__func__histequal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Histogram equalization of input image. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__histogram"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__histogram.htm">histogram</a></td></tr>
<tr class="memdesc:group__image__func__histogram"><td class="mdescLeft">&#160;</td><td class="mdescRight">Histogram of input data. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__homography"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__homography.htm">homography</a></td></tr>
<tr class="memdesc:group__cv__func__homography"><td class="mdescLeft">&#160;</td><td class="mdescRight">Homography Estimation. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__hsv2rgb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__hsv2rgb.htm">hsv2rgb</a></td></tr>
<tr class="memdesc:group__image__func__hsv2rgb"><td class="mdescLeft">&#160;</td><td class="mdescRight">HSV to RGB colorspace converter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__hypot"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__hypot.htm">hypot</a></td></tr>
<tr class="memdesc:group__arith__func__hypot"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hypotenuse of the two inputs. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__identity"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__identity.htm">identity</a></td></tr>
<tr class="memdesc:group__data__func__identity"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an identity array with diagonal values 1. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__ifft"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft.htm">ifft</a></td></tr>
<tr class="memdesc:group__signal__func__ifft"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast Fourier Transform. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__ifft2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft2.htm">ifft2</a></td></tr>
<tr class="memdesc:group__signal__func__ifft2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast Fourier Transform. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__ifft3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__ifft3.htm">ifft3</a></td></tr>
<tr class="memdesc:group__signal__func__ifft3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast Fourier Transform. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__signal__func__iir"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__signal__func__iir.htm">iir</a></td></tr>
<tr class="memdesc:group__signal__func__iir"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function implements a Infinite Impulse Filter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__imag"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__imag.htm">imag</a></td></tr>
<tr class="memdesc:group__arith__func__imag"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get imaginary part of complex arrays. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__index__func__index"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__index__func__index.htm">index</a></td></tr>
<tr class="memdesc:group__index__func__index"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lookup values of an array based on sequences and/or arrays. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__info"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__info.htm">info</a></td></tr>
<tr class="memdesc:group__device__func__info"><td class="mdescLeft">&#160;</td><td class="mdescRight">Display ArrayFire and device info. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__info__string"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__info__string.htm">infoString</a></td></tr>
<tr class="memdesc:group__device__func__info__string"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get <a class="el" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info()</a> as a string. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__ops__func__inv"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__inv.htm">inverse</a></td></tr>
<tr class="memdesc:group__lapack__ops__func__inv"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invert a matrix. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__inverse__deconv"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__inverse__deconv.htm">inverseDeconv</a></td></tr>
<tr class="memdesc:group__image__func__inverse__deconv"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inverse Deconvolution. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__iota"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__iota.htm">iota</a></td></tr>
<tr class="memdesc:group__data__func__iota"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an sequence [0, dims.elements() - 1] and modify to specified dimensions dims and then tile it according to tile_dims. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__dbl"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__dbl.htm">isDoubleAvailable</a></td></tr>
<tr class="memdesc:group__device__func__dbl"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if double precision support is available for specified device. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__half"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__half.htm">isHalfAvailable</a></td></tr>
<tr class="memdesc:group__device__func__half"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if half(16-bit) precision floating point support is available for specified device. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__imageio__func__available"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__available.htm">isImageIoAvailable</a></td></tr>
<tr class="memdesc:group__imageio__func__available"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if ArrayFire was compiled with ImageIO (FreeImage) support. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__helper__func__available"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__helper__func__available.htm">isLAPACKAvailable</a></td></tr>
<tr class="memdesc:group__lapack__helper__func__available"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true is ArrayFire is compiled with LAPACK support. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__isnan"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isnan.htm">isNan</a></td></tr>
<tr class="memdesc:group__arith__func__isnan"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if values are Nan. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__isinf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__isinf.htm">isinf</a></td></tr>
<tr class="memdesc:group__arith__func__isinf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if values are infinite. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__iszero"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__iszero.htm">iszero</a></td></tr>
<tr class="memdesc:group__arith__func__iszero"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if values are zero. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__iterative__deconv"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__iterative__deconv.htm">iterativeDeconv</a></td></tr>
<tr class="memdesc:group__image__func__iterative__deconv"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterative Deconvolution. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__manip__func__join"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__join.htm">join</a></td></tr>
<tr class="memdesc:group__manip__func__join"><td class="mdescLeft">&#160;</td><td class="mdescRight">Join up to 4 arrays along specified dimension. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__le"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__le.htm">le</a></td></tr>
<tr class="memdesc:group__arith__func__le"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if input is less than or equal to another. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__lgamma"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lgamma.htm">lgamma</a></td></tr>
<tr class="memdesc:group__arith__func__lgamma"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logarithm of absolute values of Gamma function. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__imageio__func__load"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__load.htm">loadImage</a></td></tr>
<tr class="memdesc:group__imageio__func__load"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load an image from disk to an array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__imagemem__func__load"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__load.htm">loadImageMem</a></td></tr>
<tr class="memdesc:group__imagemem__func__load"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load an image from memory which is stored as a FreeImage stream (FIMEMORY). <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__log"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log.htm">log</a></td></tr>
<tr class="memdesc:group__arith__func__log"><td class="mdescLeft">&#160;</td><td class="mdescRight">Natural logarithm. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__log10"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log10.htm">log10</a></td></tr>
<tr class="memdesc:group__arith__func__log10"><td class="mdescLeft">&#160;</td><td class="mdescRight">logarithm base 10 <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__log1p"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__log1p.htm">log1p</a></td></tr>
<tr class="memdesc:group__arith__func__log1p"><td class="mdescLeft">&#160;</td><td class="mdescRight">Natural logarithm of (1 + in) <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__index__func__lookup"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__index__func__lookup.htm">lookup</a></td></tr>
<tr class="memdesc:group__index__func__lookup"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lookup values of an array by indexing with another array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__lower"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__lower.htm">lower</a></td></tr>
<tr class="memdesc:group__data__func__lower"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a lower triangular matrix from input array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__lt"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__lt.htm">lt</a></td></tr>
<tr class="memdesc:group__arith__func__lt"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if input is less than another. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__factor__func__lu"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__lu.htm">lu</a></td></tr>
<tr class="memdesc:group__lapack__factor__func__lu"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform LU decomposition. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__match__template"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__match__template.htm">matchTemplate</a></td></tr>
<tr class="memdesc:group__cv__func__match__template"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template Matching. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__blas__func__matmul"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__matmul.htm">matmul</a></td></tr>
<tr class="memdesc:group__blas__func__matmul"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matrix multiplication using array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__max"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max.htm">max</a></td></tr>
<tr class="memdesc:group__reduce__func__max"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the maximum values and their locations. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__max"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__max.htm">max</a></td></tr>
<tr class="memdesc:group__arith__func__max"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum of two inputs. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__max__by__key"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__max__by__key.htm">maxByKey</a></td></tr>
<tr class="memdesc:group__reduce__func__max__by__key"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the max of an input array according to an array of keys. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__maxfilt"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__maxfilt.htm">maxfilt</a></td></tr>
<tr class="memdesc:group__image__func__maxfilt"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find maximum value from a window. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stat__func__mean"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__mean.htm">mean</a></td></tr>
<tr class="memdesc:group__stat__func__mean"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the mean of values in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__mean__shift"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__mean__shift.htm">meanshift</a></td></tr>
<tr class="memdesc:group__image__func__mean__shift"><td class="mdescLeft">&#160;</td><td class="mdescRight">Meanshift Filter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__medfilt"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__medfilt.htm">medfilt</a></td></tr>
<tr class="memdesc:group__image__func__medfilt"><td class="mdescLeft">&#160;</td><td class="mdescRight">Median Filter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stat__func__median"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__median.htm">median</a></td></tr>
<tr class="memdesc:group__stat__func__median"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the median of values in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__min"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min.htm">min</a></td></tr>
<tr class="memdesc:group__reduce__func__min"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the minimum values and their locations. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__min"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__min.htm">min</a></td></tr>
<tr class="memdesc:group__arith__func__min"><td class="mdescLeft">&#160;</td><td class="mdescRight">Minimum of two inputs. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__min__by__key"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__min__by__key.htm">minByKey</a></td></tr>
<tr class="memdesc:group__reduce__func__min__by__key"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the min of an input array according to an array of keys. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__minfilt"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__minfilt.htm">minfilt</a></td></tr>
<tr class="memdesc:group__image__func__minfilt"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find minimum value from a window. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__mod"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mod.htm">mod</a></td></tr>
<tr class="memdesc:group__arith__func__mod"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute \(x - n * y\) where n is quotient of \(x / y\). <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__manip__func__moddims"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__moddims.htm">moddims</a></td></tr>
<tr class="memdesc:group__manip__func__moddims"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modify the input dimensions without changing the data order. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__moments"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__moments.htm">moments</a></td></tr>
<tr class="memdesc:group__image__func__moments"><td class="mdescLeft">&#160;</td><td class="mdescRight">The <a class="el" href="group__image__func__moments.htm#gad47cec0ccc29f245d9f565bddb4c3ad9">moments()</a> function allows for finding different properties of image regions. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__mul"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__mul.htm">mul</a></td></tr>
<tr class="memdesc:group__arith__func__mul"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiply two inputs element wise. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__nearest__neighbour"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__nearest__neighbour.htm">nearestNeighbour</a></td></tr>
<tr class="memdesc:group__cv__func__nearest__neighbour"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine the nearest neighbouring points to a given set of points. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__neg"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neg.htm">neg</a></td></tr>
<tr class="memdesc:group__arith__func__neg"><td class="mdescLeft">&#160;</td><td class="mdescRight">Negative of an input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__neq"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__neq.htm">neq</a></td></tr>
<tr class="memdesc:group__arith__func__neq"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if input two inputs are not equal. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__ops__func__norm"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__norm.htm">norm</a></td></tr>
<tr class="memdesc:group__lapack__ops__func__norm"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the norm of the input matrix. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__not"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__not.htm">not</a></td></tr>
<tr class="memdesc:group__arith__func__not"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical not of an input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__operator__paren"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__paren.htm">operator()</a></td></tr>
<tr class="memdesc:group__array__mem__operator__paren"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a reference to a set of elements. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__operator__multiply__eq"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__multiply__eq.htm">operator(star)=</a></td></tr>
<tr class="memdesc:group__array__mem__operator__multiply__eq"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__operator__plus__eq"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__plus__eq.htm">operator+=</a></td></tr>
<tr class="memdesc:group__array__mem__operator__plus__eq"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__operator__minus__eq"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__minus__eq.htm">operator-=</a></td></tr>
<tr class="memdesc:group__array__mem__operator__minus__eq"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__operator__divide__eq"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm">operator/=</a></td></tr>
<tr class="memdesc:group__array__mem__operator__divide__eq"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__operator__eq"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__eq.htm">operator=</a></td></tr>
<tr class="memdesc:group__array__mem__operator__eq"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignes the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__or"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__or.htm">or</a></td></tr>
<tr class="memdesc:group__arith__func__or"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logical or of two inputs. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__orb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__orb.htm">orb</a></td></tr>
<tr class="memdesc:group__cv__func__orb"><td class="mdescLeft">&#160;</td><td class="mdescRight">ORB Feature descriptor. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__pad"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__pad.htm">pad</a></td></tr>
<tr class="memdesc:group__data__func__pad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pad an array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__pinned"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__pinned.htm">pinned</a></td></tr>
<tr class="memdesc:group__device__func__pinned"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate pinned memory using ArrayFire's memory manager. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__ops__func__pinv"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__pinv.htm">pinverse</a></td></tr>
<tr class="memdesc:group__lapack__ops__func__pinv"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pseudo-invert a matrix. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__pow"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__pow.htm">pow</a></td></tr>
<tr class="memdesc:group__arith__func__pow"><td class="mdescLeft">&#160;</td><td class="mdescRight">Raise an array to a power. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__print__func__print"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__print.htm">print</a></td></tr>
<tr class="memdesc:group__print__func__print"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the array to screen. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__product"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product.htm">product</a></td></tr>
<tr class="memdesc:group__reduce__func__product"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the product of values in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__product__by__key"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__product__by__key.htm">productByKey</a></td></tr>
<tr class="memdesc:group__reduce__func__product__by__key"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the product of an input array according to an array of keys. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__factor__func__qr"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__qr.htm">qr</a></td></tr>
<tr class="memdesc:group__lapack__factor__func__qr"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform QR decomposition. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__random__func__randn"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randn.htm">randn</a></td></tr>
<tr class="memdesc:group__random__func__randn"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a random array sampled from normal distribution. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__random__func__random__engine"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__random__engine.htm">randomEngine</a></td></tr>
<tr class="memdesc:group__random__func__random__engine"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functions to create, modify, use, and destroy randomEngine objects. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__random__func__randu"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__randu.htm">randu</a></td></tr>
<tr class="memdesc:group__random__func__randu"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a random array sampled from uniform distribution. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__range"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__range.htm">range</a></td></tr>
<tr class="memdesc:group__data__func__range"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an array with [0, n] values along the seq_dim which is tiled across other dimensions. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__ops__func__rank"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__ops__func__rank.htm">rank</a></td></tr>
<tr class="memdesc:group__lapack__ops__func__rank"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the rank of the input matrix. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stream__func__read"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__read.htm">readArray</a></td></tr>
<tr class="memdesc:group__stream__func__read"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load an array from a file. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__real"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__real.htm">real</a></td></tr>
<tr class="memdesc:group__arith__func__real"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get real part of complex arrays. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__regions"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__regions.htm">regions</a></td></tr>
<tr class="memdesc:group__image__func__regions"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find blobs in given image. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__rem"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rem.htm">rem</a></td></tr>
<tr class="memdesc:group__arith__func__rem"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remainder operation. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__manip__func__reorder"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__reorder.htm">reorder</a></td></tr>
<tr class="memdesc:group__manip__func__reorder"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reorder an array according to the specified dimensions. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__replace"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__replace.htm">replace</a></td></tr>
<tr class="memdesc:group__data__func__replace"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace elements of an array based on a conditional array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__transform__func__resize"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__resize.htm">resize</a></td></tr>
<tr class="memdesc:group__transform__func__resize"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resize an input image. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__rgb2gray"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2gray.htm">rgb2gray</a></td></tr>
<tr class="memdesc:group__image__func__rgb2gray"><td class="mdescLeft">&#160;</td><td class="mdescRight">RGB to Grayscale colorspace converter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__rgb2hsv"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2hsv.htm">rgb2hsv</a></td></tr>
<tr class="memdesc:group__image__func__rgb2hsv"><td class="mdescLeft">&#160;</td><td class="mdescRight">RGB to HSV colorspace converter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__rgb2ycbcr"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__rgb2ycbcr.htm">rgb2ycbcr</a></td></tr>
<tr class="memdesc:group__image__func__rgb2ycbcr"><td class="mdescLeft">&#160;</td><td class="mdescRight">RGB to YCbCr colorspace converter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__root"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__root.htm">root</a></td></tr>
<tr class="memdesc:group__arith__func__root"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find root of an input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__transform__func__rotate"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__rotate.htm">rotate</a></td></tr>
<tr class="memdesc:group__transform__func__rotate"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate an input image or array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__round"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__round.htm">round</a></td></tr>
<tr class="memdesc:group__arith__func__round"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round to nearest integer. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__row"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__row.htm">row/rows</a></td></tr>
<tr class="memdesc:group__array__mem__row"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a reference of a row in a 2D <a class="el" href="classaf_1_1array.htm">af::array</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__rsqrt"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__rsqrt.htm">rsqrt</a></td></tr>
<tr class="memdesc:group__arith__func__rsqrt"><td class="mdescLeft">&#160;</td><td class="mdescRight">The reciprocal or inverse square root of input arrays. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__sat"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__sat.htm">sat</a></td></tr>
<tr class="memdesc:group__image__func__sat"><td class="mdescLeft">&#160;</td><td class="mdescRight">Summed Area Tables. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stream__func__save"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stream__func__save.htm">saveArray</a></td></tr>
<tr class="memdesc:group__stream__func__save"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save an array to a binary file. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__imageio__func__save"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imageio__func__save.htm">saveImage</a></td></tr>
<tr class="memdesc:group__imageio__func__save"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save an array to disk as an image. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__imagemem__func__save"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__imagemem__func__save.htm">saveImageMem</a></td></tr>
<tr class="memdesc:group__imagemem__func__save"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save an array to memory as an image using FreeImage stream (FIMEMORY). <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__transform__func__scale"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__scale.htm">scale</a></td></tr>
<tr class="memdesc:group__transform__func__scale"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale an input image. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__scan__func__scan"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scan.htm">scan</a></td></tr>
<tr class="memdesc:group__scan__func__scan"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inclusive or exclusive scan of an array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__scan__func__scanbykey"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__scanbykey.htm">scanByKey</a></td></tr>
<tr class="memdesc:group__scan__func__scanbykey"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inclusive or exclusive scan of an array by key. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__select"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__select.htm">select</a></td></tr>
<tr class="memdesc:group__data__func__select"><td class="mdescLeft">&#160;</td><td class="mdescRight">Selects elements from two arrays based on the values of a binary conditional array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__unified__func__setbackend"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__unified__func__setbackend.htm">setBackend</a></td></tr>
<tr class="memdesc:group__unified__func__setbackend"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the current backend when using Unified backend. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__random__func__set__default__engine"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__set__default__engine.htm">setDefaultRandomEngineType</a></td></tr>
<tr class="memdesc:group__random__func__set__default__engine"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the default random engine type. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__set"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__set.htm">setDevice</a></td></tr>
<tr class="memdesc:group__device__func__set"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change current device to specified device. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__random__func__set__seed"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__random__func__set__seed.htm">setSeed</a></td></tr>
<tr class="memdesc:group__random__func__set__seed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the seed for random number generation. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__set__func__intersect"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__intersect.htm">setintersect</a></td></tr>
<tr class="memdesc:group__set__func__intersect"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the intersection of two sets. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__set__func__union"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__union.htm">setunion</a></td></tr>
<tr class="memdesc:group__set__func__union"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the union of two sets. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__set__func__unique"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__set__func__unique.htm">setunique</a></td></tr>
<tr class="memdesc:group__set__func__unique"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds unique values from an input set. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__manip__func__shift"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__shift.htm">shift</a></td></tr>
<tr class="memdesc:group__manip__func__shift"><td class="mdescLeft">&#160;</td><td class="mdescRight">Circular shift slong specified dimensions. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__sift"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__sift.htm">sift</a></td></tr>
<tr class="memdesc:group__cv__func__sift"><td class="mdescLeft">&#160;</td><td class="mdescRight">SIFT feature detector and descriptor extractor. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__sign"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sign.htm">sign</a></td></tr>
<tr class="memdesc:group__arith__func__sign"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if input is negative. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__sin"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sin.htm">sin</a></td></tr>
<tr class="memdesc:group__arith__func__sin"><td class="mdescLeft">&#160;</td><td class="mdescRight">sin of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__sinh"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sinh.htm">sinh</a></td></tr>
<tr class="memdesc:group__arith__func__sinh"><td class="mdescLeft">&#160;</td><td class="mdescRight">sinh of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__transform__func__skew"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__skew.htm">skew</a></td></tr>
<tr class="memdesc:group__transform__func__skew"><td class="mdescLeft">&#160;</td><td class="mdescRight">Skew an input image. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__array__mem__slice"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__slice.htm">slice/slices</a></td></tr>
<tr class="memdesc:group__array__mem__slice"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a reference of a matrix in a 3D <a class="el" href="classaf_1_1array.htm">af::array</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__sobel"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__sobel.htm">sobel</a></td></tr>
<tr class="memdesc:group__image__func__sobel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sobel Operators. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__solve__func__gen"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__solve__func__gen.htm">solve</a></td></tr>
<tr class="memdesc:group__lapack__solve__func__gen"><td class="mdescLeft">&#160;</td><td class="mdescRight">Solve a system of equations. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__solve__lu__func__gen"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__solve__lu__func__gen.htm">solveLU</a></td></tr>
<tr class="memdesc:group__lapack__solve__lu__func__gen"><td class="mdescLeft">&#160;</td><td class="mdescRight">Solve a system of equations. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sort__func__sort"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort.htm">sort</a></td></tr>
<tr class="memdesc:group__sort__func__sort"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort input arrays. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sort__func__sort__keys"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__keys.htm">sortByKey</a></td></tr>
<tr class="memdesc:group__sort__func__sort__keys"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort input arrays based on keys. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sort__func__sort__index"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sort__func__sort__index.htm">sortIndex</a></td></tr>
<tr class="memdesc:group__sort__func__sort__index"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort input arrays get the sorted indices. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__create"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__create.htm">sparse</a></td></tr>
<tr class="memdesc:group__sparse__func__create"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a sparse array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__convert__to"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__convert__to.htm">sparseConvertTo</a></td></tr>
<tr class="memdesc:group__sparse__func__convert__to"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an existing sparse array into a different storage format. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__col__idx"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__col__idx.htm">sparseGetColdx</a></td></tr>
<tr class="memdesc:group__sparse__func__col__idx"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns reference to the column indices component of the sparse array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__info"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__info.htm">sparseGetInfo</a></td></tr>
<tr class="memdesc:group__sparse__func__info"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns reference to components of the input sparse array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__nnz"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__nnz.htm">sparseGetNNZ</a></td></tr>
<tr class="memdesc:group__sparse__func__nnz"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of non zero elements in the sparse array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__row__idx"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__row__idx.htm">sparseGetRowIdx</a></td></tr>
<tr class="memdesc:group__sparse__func__row__idx"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns reference to the row indices component of the sparse array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__storage"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__storage.htm">sparseGetStorage</a></td></tr>
<tr class="memdesc:group__sparse__func__storage"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the storage type of a sparse array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__sparse__func__values"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sparse__func__values.htm">sparseGetValues</a></td></tr>
<tr class="memdesc:group__sparse__func__values"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns reference to the values component of the sparse array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__sqrt"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sqrt.htm">sqrt</a></td></tr>
<tr class="memdesc:group__arith__func__sqrt"><td class="mdescLeft">&#160;</td><td class="mdescRight">Square root of input arrays. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stat__func__stdev"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__stdev.htm">stdev</a></td></tr>
<tr class="memdesc:group__stat__func__stdev"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the standard deviation of values in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__sub"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__sub.htm">sub</a></td></tr>
<tr class="memdesc:group__arith__func__sub"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract one input from another. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__sum"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum.htm">sum</a></td></tr>
<tr class="memdesc:group__reduce__func__sum"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the sum of values in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__reduce__func__sum__by__key"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__reduce__func__sum__by__key.htm">sumByKey</a></td></tr>
<tr class="memdesc:group__reduce__func__sum__by__key"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the sum of an input array according to an array of keys. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__cv__func__susan"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cv__func__susan.htm">susan</a></td></tr>
<tr class="memdesc:group__cv__func__susan"><td class="mdescLeft">&#160;</td><td class="mdescRight">SUSAN corner detector. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__lapack__factor__func__svd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__lapack__factor__func__svd.htm">svd</a></td></tr>
<tr class="memdesc:group__lapack__factor__func__svd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the singular value decomposition of a matrix. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__device__func__sync"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__device__func__sync.htm">sync</a></td></tr>
<tr class="memdesc:group__device__func__sync"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks until all operations on device are finished. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__tan"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tan.htm">tan/tan2</a></td></tr>
<tr class="memdesc:group__arith__func__tan"><td class="mdescLeft">&#160;</td><td class="mdescRight">tan of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__tanh"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tanh.htm">tanh</a></td></tr>
<tr class="memdesc:group__arith__func__tanh"><td class="mdescLeft">&#160;</td><td class="mdescRight">tanh of input <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__tgamma"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__tgamma.htm">tgamma</a></td></tr>
<tr class="memdesc:group__arith__func__tgamma"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gamma function. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__manip__func__tile"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__manip__func__tile.htm">tile</a></td></tr>
<tr class="memdesc:group__manip__func__tile"><td class="mdescLeft">&#160;</td><td class="mdescRight">Repeat the contents of the input array along the specified dimensions. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__print__func__tostring"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__print__func__tostring.htm">toString</a></td></tr>
<tr class="memdesc:group__print__func__tostring"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the array to a string instead of the screen. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stat__func__topk"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__topk.htm">topk</a></td></tr>
<tr class="memdesc:group__stat__func__topk"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function returns the top k values along a given dimension of the input array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__transform__func__transform"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__transform.htm">transform</a></td></tr>
<tr class="memdesc:group__transform__func__transform"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transform an input image. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__transform__func__coordinates"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__coordinates.htm">transformCoordinates</a></td></tr>
<tr class="memdesc:group__transform__func__coordinates"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transform input coordinates. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__transform__func__translate"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__transform__func__translate.htm">translate</a></td></tr>
<tr class="memdesc:group__transform__func__translate"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translate an input image. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__blas__func__transpose"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__blas__func__transpose.htm">transpose</a></td></tr>
<tr class="memdesc:group__blas__func__transpose"><td class="mdescLeft">&#160;</td><td class="mdescRight">Matrix Transpose. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__arith__func__trunc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__arith__func__trunc.htm">trunc</a></td></tr>
<tr class="memdesc:group__arith__func__trunc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate to nearest integer. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__unwrap"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__unwrap.htm">unwrap</a></td></tr>
<tr class="memdesc:group__image__func__unwrap"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rearrange windowed sections of an array into columns (or rows) <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__data__func__upper"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__data__func__upper.htm">upper</a></td></tr>
<tr class="memdesc:group__data__func__upper"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a upper triangular matrix from input array. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__stat__func__var"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stat__func__var.htm">var</a></td></tr>
<tr class="memdesc:group__stat__func__var"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the variance of values in the input. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__scan__func__where"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__scan__func__where.htm">where</a></td></tr>
<tr class="memdesc:group__scan__func__where"><td class="mdescLeft">&#160;</td><td class="mdescRight">Locate the indices of non-zero elements. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__wrap"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__wrap.htm">wrap</a></td></tr>
<tr class="memdesc:group__image__func__wrap"><td class="mdescLeft">&#160;</td><td class="mdescRight">Performs the opposite of <a class="el" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap()</a>. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__image__func__ycbcr2rgb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__ycbcr2rgb.htm">ycbcr2rgb</a></td></tr>
<tr class="memdesc:group__image__func__ycbcr2rgb"><td class="mdescLeft">&#160;</td><td class="mdescRight">YCbCr to RGB colorspace converter. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Thu Feb 24 2022 14:12:32 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
    </ul>
</div>
</body>
</html>
