<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: image_processing/binary_thresholding.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('image_processing_2binary_thresholding_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">image_processing/binary_thresholding.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2015, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * https://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> threshold(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; in, <span class="keywordtype">float</span> thresholdValue) {</div>
<div class="line">    <span class="keywordtype">int</span> channels  = in.<a name="a1"></a><a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(2);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> ret_val = in.<a name="a2"></a><a class="code" href="classaf_1_1array.htm#aa859f53b411dd3ab37c8c817b4352e07">copy</a>();</div>
<div class="line">    <span class="keywordflow">if</span> (channels &gt; 1) ret_val = <a name="a3"></a><a class="code" href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">colorSpace</a>(in, <a name="a4"></a><a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1">AF_GRAY</a>, <a name="a5"></a><a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6">AF_RGB</a>);</div>
<div class="line">    ret_val =</div>
<div class="line">        (ret_val &lt; thresholdValue) * 0.0f + 255.0f * (ret_val &gt; thresholdValue);</div>
<div class="line">    <span class="keywordflow">return</span> ret_val;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> otsu(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a>&amp; in) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> gray;</div>
<div class="line">    <span class="keywordtype">int</span> channels = in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(2);</div>
<div class="line">    <span class="keywordflow">if</span> (channels &gt; 1)</div>
<div class="line">        gray = <a class="code" href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">colorSpace</a>(in, <a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1">AF_GRAY</a>, <a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6">AF_RGB</a>);</div>
<div class="line">    <span class="keywordflow">else</span></div>
<div class="line">        gray = in;</div>
<div class="line">    <span class="keywordtype">unsigned</span> total = gray.<a name="a6"></a><a class="code" href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">elements</a>();</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> hist     = <a name="a7"></a><a class="code" href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a">histogram</a>(gray, 256, 0.0f, 255.0f);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> wts      = <a name="a8"></a><a class="code" href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">range</a>(256);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> wtB   = <a name="a9"></a><a class="code" href="group__scan__func__accum.htm#gae450135c4ae1bdaa4489804a215f3214">accum</a>(hist);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> wtF   = total - wtB;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> sumB  = <a class="code" href="group__scan__func__accum.htm#gae450135c4ae1bdaa4489804a215f3214">accum</a>(wts * hist);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> meanB = sumB / wtB;</div>
<div class="line">    <span class="keywordtype">float</span> lastElemInSumB;</div>
<div class="line">    sumB(<a name="_a10"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(255, 255, 1)).<a name="a11"></a><a class="code" href="classaf_1_1array.htm#a332e06d4340867375a5e415fc1befc1d">host</a>((<span class="keywordtype">void</span>*)&amp;lastElemInSumB);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> meanF = (lastElemInSumB - sumB) / wtF;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> mDiff = meanB - meanF;</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> interClsVar = wtB * wtF * mDiff * mDiff;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> <a name="a12"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>        = af::max&lt;float&gt;(interClsVar);</div>
<div class="line">    <span class="keywordtype">float</span> threshold2 = <a name="a13"></a><a class="code" href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">where</a>(interClsVar == <a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>).<a name="a14"></a><a class="code" href="classaf_1_1array.htm#a048d77db849d74f18a13dabfd43ce55d">scalar</a>&lt;<span class="keywordtype">unsigned</span>&gt;();</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> threshIdx  = <a class="code" href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">where</a>(interClsVar &gt;= <a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a>);</div>
<div class="line">    <span class="keywordtype">float</span> threshold1 =</div>
<div class="line">        threshIdx.elements() &gt; 0 ? threshIdx.scalar&lt;<span class="keywordtype">unsigned</span>&gt;() : 0.0f;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> threshold(gray, (threshold1 + threshold2) / 2.0f);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv) {</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">        <a name="a15"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a16"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line"> </div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> bimodal =</div>
<div class="line">            <a name="a17"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/noisy_square.png&quot;</span>, <span class="keyword">false</span>);</div>
<div class="line">        bimodal = <a name="a18"></a><a class="code" href="group__transform__func__resize.htm#ga017b9370e3e287693519de5b59fcc8ff">resize</a>(0.75f, bimodal);</div>
<div class="line"> </div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> bt         = threshold(bimodal, 180.0f);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> ot         = otsu(bimodal);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> bimodHist  = <a class="code" href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a">histogram</a>(bimodal, 256, 0, 255);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> smooth     = <a name="a19"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(bimodal, <a name="a20"></a><a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(5, 5));</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> smoothHist = <a class="code" href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a">histogram</a>(smooth, 256, 0, 255);</div>
<div class="line"> </div>
<div class="line">        <a name="_a21"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd(1536, 1024, <span class="stringliteral">&quot;Binary Thresholding Algorithms&quot;</span>);</div>
<div class="line">        printf(<span class="stringliteral">&quot;Press ESC while the window is in focus to proceed to exit\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        wnd.grid(3, 3);</div>
<div class="line">        wnd(0, 1).setAxesTitles(<span class="stringliteral">&quot;Bins&quot;</span>, <span class="stringliteral">&quot;Frequency&quot;</span>);</div>
<div class="line">        wnd(1, 1).setAxesTitles(<span class="stringliteral">&quot;Bins&quot;</span>, <span class="stringliteral">&quot;Frequency&quot;</span>);</div>
<div class="line">        wnd(2, 1).setAxesTitles(<span class="stringliteral">&quot;Bins&quot;</span>, <span class="stringliteral">&quot;Frequency&quot;</span>);</div>
<div class="line">        <span class="keywordflow">while</span> (!wnd.close()) {</div>
<div class="line">            wnd(0, 0).image(bimodal / 255, <span class="stringliteral">&quot;Input Image&quot;</span>);</div>
<div class="line">            wnd(1, 0).image(bimodal / 255, <span class="stringliteral">&quot;Input Image&quot;</span>);</div>
<div class="line">            wnd(2, 0).image(smooth / 255, <span class="stringliteral">&quot;Input Smoothed by Gaussian Filter&quot;</span>);</div>
<div class="line">            wnd(0, 1).hist(bimodHist, 0, 255, <span class="stringliteral">&quot;Input Histogram&quot;</span>);</div>
<div class="line">            wnd(1, 1).hist(bimodHist, 0, 255, <span class="stringliteral">&quot;Input Histogram&quot;</span>);</div>
<div class="line">            wnd(2, 1).hist(smoothHist, 0, 255, <span class="stringliteral">&quot;Smoothed Input Histogram&quot;</span>);</div>
<div class="line">            wnd(0, 2).image(bt, <span class="stringliteral">&quot;Simple Binary threshold&quot;</span>);</div>
<div class="line">            wnd(1, 2).image(ot, <span class="stringliteral">&quot;Otsu&#39;s Threshold&quot;</span>);</div>
<div class="line">            wnd(2, 2).image(otsu(smooth), <span class="stringliteral">&quot;Otsu&#39;s Threshold on Smoothed Image&quot;</span>);</div>
<div class="line">            wnd.show();</div>
<div class="line">        }</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a22"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>&amp; e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a23"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__scan__func__accum_htm_gae450135c4ae1bdaa4489804a215f3214"><div class="ttname"><a href="group__scan__func__accum.htm#gae450135c4ae1bdaa4489804a215f3214">af::accum</a></div><div class="ttdeci">AFAPI array accum(const array &amp;in, const int dim=0)</div><div class="ttdoc">C++ Interface for computing the cumulative sum (inclusive) of an array.</div></div>
<div class="ttc" id="agroup__data__func__range_htm_ga3789475e962b4c31e07c1c3bdab8498b"><div class="ttname"><a href="group__data__func__range.htm#ga3789475e962b4c31e07c1c3bdab8498b">af::range</a></div><div class="ttdeci">AFAPI array range(const dim4 &amp;dims, const int seq_dim=-1, const dtype ty=f32)</div></div>
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:46</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a332e06d4340867375a5e415fc1befc1d"><div class="ttname"><a href="classaf_1_1array.htm#a332e06d4340867375a5e415fc1befc1d">af::array::host</a></div><div class="ttdeci">T * host() const</div><div class="ttdoc">Copy array data to host and return host pointer.</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a048d77db849d74f18a13dabfd43ce55d"><div class="ttname"><a href="classaf_1_1array.htm#a048d77db849d74f18a13dabfd43ce55d">af::array::scalar</a></div><div class="ttdeci">T scalar() const</div><div class="ttdoc">Get the first element of the array as a scalar.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="agroup__image__func__gauss_htm_gaa5de1866bc1bf50bf5fe3cb26d4e410d"><div class="ttname"><a href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">af::gaussianKernel</a></div><div class="ttdeci">AFAPI array gaussianKernel(const int rows, const int cols, const double sig_r=0, const double sig_c=0)</div><div class="ttdoc">C++ Interface for generating gausian kernels.</div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a89f91cdf327a8b304589916db5bde3c2"><div class="ttname"><a href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">af::array::elements</a></div><div class="ttdeci">dim_t elements() const</div><div class="ttdoc">Get the total number of elements across all dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:29</a></div></div>
<div class="ttc" id="agroup__scan__func__where_htm_ga1e677067915477bc4aec1605d80d9b7b"><div class="ttname"><a href="group__scan__func__where.htm#ga1e677067915477bc4aec1605d80d9b7b">af::where</a></div><div class="ttdeci">AFAPI array where(const array &amp;in)</div><div class="ttdoc">C++ Interface for finding the locations of non-zero values in an array.</div></div>
<div class="ttc" id="adefines_8h_htm_ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6"><div class="ttname"><a href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6">AF_RGB</a></div><div class="ttdeci">@ AF_RGB</div><div class="ttdoc">3-channel RGB</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00341">defines.h:341</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="agroup__image__func__colorspace_htm_ga9dabba47b9390faacf8fb146605339b0"><div class="ttname"><a href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">af::colorSpace</a></div><div class="ttdeci">AFAPI array colorSpace(const array &amp;image, const CSpace to, const CSpace from)</div><div class="ttdoc">C++ Interface wrapper for colorspace conversion.</div></div>
<div class="ttc" id="agroup__imageio__func__load_htm_ga8bcf01ffa60bc513856d98b8a63bb12a"><div class="ttname"><a href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">af::loadImage</a></div><div class="ttdeci">AFAPI array loadImage(const char *filename, const bool is_color=false)</div><div class="ttdoc">C++ Interface for loading an image.</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_aa859f53b411dd3ab37c8c817b4352e07"><div class="ttname"><a href="classaf_1_1array.htm#aa859f53b411dd3ab37c8c817b4352e07">af::array::copy</a></div><div class="ttdeci">array copy() const</div><div class="ttdoc">Perform deep copy of the array.</div></div>
<div class="ttc" id="adefines_8h_htm_ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1"><div class="ttname"><a href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1">AF_GRAY</a></div><div class="ttdeci">@ AF_GRAY</div><div class="ttdoc">Grayscale.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00340">defines.h:340</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_gae79b64c8b0d6a06309e8b67bf89cf6c9"><div class="ttname"><a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="agroup__transform__func__resize_htm_ga017b9370e3e287693519de5b59fcc8ff"><div class="ttname"><a href="group__transform__func__resize.htm#ga017b9370e3e287693519de5b59fcc8ff">af::resize</a></div><div class="ttdeci">AFAPI array resize(const array &amp;in, const dim_t odim0, const dim_t odim1, const interpType method=AF_INTERP_NEAREST)</div><div class="ttdoc">C++ Interface for resizing an image to specified dimensions.</div></div>
<div class="ttc" id="agroup__image__func__histogram_htm_gafb93ba76739ef18b3698e39c7768c90a"><div class="ttname"><a href="group__image__func__histogram.htm#gafb93ba76739ef18b3698e39c7768c90a">af::histogram</a></div><div class="ttdeci">AFAPI array histogram(const array &amp;in, const unsigned nbins, const double minval, const double maxval)</div><div class="ttdoc">C++ Interface for histogram.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
