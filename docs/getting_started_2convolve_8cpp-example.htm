<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: getting_started/convolve.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('getting_started_2convolve_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">getting_started/convolve.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// use static variables at file scope so timeit() wrapper functions</span></div>
<div class="line"><span class="comment">// can reference image/kernels</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// image to convolve</span></div>
<div class="line"><span class="keyword">static</span> <a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> img;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// 5x5 derivative with separable kernels</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">float</span> h_dx[]     = {1.f / 12, -8.f / 12, 0, 8.f / 12,</div>
<div class="line">                       -1.f / 12};  <span class="comment">// five point stencil</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">float</span> h_spread[] = {1.f / 5, 1.f / 5, 1.f / 5, 1.f / 5, 1.f / 5};</div>
<div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> dx, spread, kernel;  <span class="comment">// device kernels</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> full_out, dsep_out, hsep_out;  <span class="comment">// save output for value checks</span></div>
<div class="line"><span class="comment">// wrapper functions for timeit() below</span></div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> full() { full_out = <a name="a1"></a><a class="code" href="group__signal__func__convolve2.htm#ga0aec29b4d4c9cf4412420b91c96ffe6c">convolve2</a>(img, kernel); }</div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> dsep() { dsep_out = <a name="a2"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(dx, spread, img); }</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">bool</span> fail(<a class="code" href="classaf_1_1array.htm">array</a> &amp;left, <a class="code" href="classaf_1_1array.htm">array</a> &amp;right) {</div>
<div class="line">    <span class="keywordflow">return</span> (max&lt;float&gt;(<a name="a3"></a><a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(left - right)) &gt; 1e-6);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">        <a name="a4"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a5"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// setup image and device copies of kernels</span></div>
<div class="line">        img    = <a name="a6"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(640, 480);</div>
<div class="line">        dx     = <a name="a7"></a><a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(5, 1, h_dx);      <span class="comment">// 5x1 kernel</span></div>
<div class="line">        spread = <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a>(1, 5, h_spread);  <span class="comment">// 1x5 kernel</span></div>
<div class="line">        kernel = <a name="a8"></a><a class="code" href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">matmul</a>(dx, spread);     <span class="comment">// 5x5 kernel</span></div>
<div class="line"> </div>
<div class="line">        printf(<span class="stringliteral">&quot;full 2D convolution:         %.5f seconds\n&quot;</span>, <a name="a9"></a><a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(full));</div>
<div class="line">        printf(<span class="stringliteral">&quot;separable, device pointers:  %.5f seconds\n&quot;</span>, <a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(dsep));</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// ensure values are all the same across versions</span></div>
<div class="line">        <span class="keywordflow">if</span> (fail(full_out, dsep_out)) { <span class="keywordflow">throw</span> <a name="_a10"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a>(<span class="stringliteral">&quot;full != dsep&quot;</span>); }</div>
<div class="line">    } <span class="keywordflow">catch</span> (<a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;e) { fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a11"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>()); }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agroup__blas__func__matmul_htm_ga63306b6ed967bd1055086db862fe885b"><div class="ttname"><a href="group__blas__func__matmul.htm#ga63306b6ed967bd1055086db862fe885b">af::matmul</a></div><div class="ttdeci">AFAPI array matmul(const array &amp;lhs, const array &amp;rhs, const matProp optLhs=AF_MAT_NONE, const matProp optRhs=AF_MAT_NONE)</div><div class="ttdoc">Matrix multiply of two arrays.</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga23aa8c28a5ffa9368cc92abb143f5eaa"><div class="ttname"><a href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface for absolute value.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a9ffb3ceefb515e1778cf8c4d5e29db59"><div class="ttname"><a href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">af::timeit</a></div><div class="ttdeci">AFAPI double timeit(void(*fn)())</div></div>
<div class="ttc" id="agroup__signal__func__convolve2_htm_ga0aec29b4d4c9cf4412420b91c96ffe6c"><div class="ttname"><a href="group__signal__func__convolve2.htm#ga0aec29b4d4c9cf4412420b91c96ffe6c">af::convolve2</a></div><div class="ttdeci">AFAPI array convolve2(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution on two dimensional signals.</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:29</a></div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_gae79b64c8b0d6a06309e8b67bf89cf6c9"><div class="ttname"><a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
