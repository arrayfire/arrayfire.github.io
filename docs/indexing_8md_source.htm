<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: /build/arrayfire/docs/pages/indexing.md (2020-10-27 00:11:00 -0400, (build d99887ae)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('indexing_8md.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">/build/arrayfire/docs/pages/indexing.md (2020-10-27 00:11:00 -0400, (build d99887ae))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="indexing_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;Indexing {#indexing}</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;========</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;Indexing in ArrayFire is a powerful but easy to abuse feature of the af::array</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;class. This feature allows you to reference or copy subsections of a larger array</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;and perform operations on only a subset of elements.</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;Indexing in ArrayFire can be performed using the parenthesis operator or one of</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;the member functions of the af::array class. These functions allow you to</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;reference one or a range of elements from the original array.</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;Here we will demonstrate some of the ways you can use indexing in ArrayFire and</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;discuss ways to minimize the memory and performance impact of these operations.</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;Lets start by creating a new 4x4 matrix of floating point numbers:</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;\snippet test/index.cpp index_tutorial_1</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;ArrayFire is column-major so the resulting A array will look like this:</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;\f[</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    0 &amp; 4 &amp; 8 &amp; 12 \\</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    1 &amp; 5 &amp; 9 &amp; 13 \\</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    2 &amp; 6 &amp; 10 &amp; 14 \\</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    3 &amp; 7 &amp; 11 &amp; 15</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;\f]</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;This is a two dimensional array so we can access the first element of this</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;matrix by passing `0,0` into the parenthesis operator of the af::array.</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;\snippet test/index.cpp index_tutorial_first_element</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;\f[ A(2, 3) = [ 14 ] \f]</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;We can also access the array using linear indexing by passing in one value. Here</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;we are accessing the fifth element of the array.</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;\snippet test/index.cpp index_tutorial_fifth_element</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;\f[ A(5) = [ 5 ] \f]</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;\note Normally you want to avoid accessing individual elements of the array like this</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;for performance reasons.</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;Indexing with negative values will access from the end of the array. For example,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;the value negative one and negative two(-2) will return the last and second to</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;last element of the array, respectively. ArrayFire provides the `end` alias for</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;this which also allows you to index the last element of the array.</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;\snippet test/index.cpp index_tutorial_negative_indexing</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;## Indexing slices and subarrays</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;You can access regions of the array via the af::seq and af::span objects. The</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;span objects allows you to select the entire set of elements across a particular</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;dimension/axis of an array. For example, we can select the third column of the</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;array by passing span as the first argument and 2 as the second argument to the</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;parenthesis operator.</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;\snippet test/index.cpp index_tutorial_third_column</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;\f[</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;A(span, 2) =</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    8 \\</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    9 \\</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    10 \\</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    11</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;\f]</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;You can read that as saying that you want all values across the first dimension,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;but only from index 2 of the second dimension.</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;You can access the second row by passing (1, span) to the array</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;\snippet test/index.cpp index_tutorial_second_row</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;\f[ A(1, span) = [ 1, 5, 9, 13 ] \f]</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;You can use the af::seq (short for sequence) object to define a range when</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;indexing. For example, if you want to get the first two columns, you can access</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;the array by passing af::span for the first argument and af::seq(2) as the</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;second argument.</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;\snippet test/index.cpp index_tutorial_first_two_columns</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;\f[</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;A(span, seq(2)) =</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;     0 &amp; 4 \\</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;     1 &amp; 5 \\</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;     2 &amp; 6 \\</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;     3 &amp; 7</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;\f]</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;There are three constructors for af::seq.</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;* af::seq(N): Defines a range between 0 and N-1</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;* af::seq(begin, end) Defines a range between begin and end inclusive</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;* af::seq(begin, end, step) defines a range between begin and end striding by step values</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;The last constructor that can help create non-continuous ranges. For example,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;you can select the second and forth(last) rows by passing (seq(1, end, 2), span)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;to the indexing operator.</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;\snippet test/index.cpp index_tutorial_second_and_fourth_rows</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;\f[</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;A(seq(1, end, 2), span) =</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;     1 &amp; 5 &amp;  9 &amp; 13 \\</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;     3 &amp; 7 &amp; 11 &amp; 15</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;\f]</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;## Indexing using af::array</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;You can also index using other af::array objects. ArrayFire performs a Cartesian</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;product of the input arrays.</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;\snippet test/index.cpp index_tutorial_array_indexing</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;\f[</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;A =</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    0 &amp; 4 &amp; 8 &amp; 12 \\</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    1 &amp; 5 &amp; 9 &amp; 13 \\</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    2 &amp; 6 &amp; 10 &amp; 14 \\</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    3 &amp; 7 &amp; 11 &amp; 15</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;\\</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;A(</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;2 \\ 1 \\ 3</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;3 \\ 1 \\ 2</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;) =</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;(2,3) &amp; (2,1) &amp; (2,2) \\</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;(1,3) &amp; (1,1) &amp; (1,2) \\</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;(3,3) &amp; (3,1) &amp; (3,2)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;=</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;14 &amp; 6 &amp; 10 \\</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;13 &amp; 5 &amp;  9 \\</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;15 &amp; 7 &amp; 11</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;\f]</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;If you want to index an af::array using coordinate arrays, you can do that using the</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;af::approx1 and af::approx2 functions.</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;\snippet test/index.cpp index_tutorial_approx</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;\f[</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;approx2(A,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;2 \\ 1 \\ 3</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;3 \\ 1 \\ 2</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;) =</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;(2,3) \\</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;(1,1) \\</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;(3,2)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;=</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;14 \\</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; 5 \\</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;11</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;\f]</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;Boolean(b8) arrays can be used to index into another array. In this type of</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;indexing the non-zero values will be selected by the boolean operation. If we</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;want to select all values less than 5, we can pass a boolean expression into</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;the parenthesis operator.</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;\snippet test/index.cpp index_tutorial_boolean</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;\f[</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;out =</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;0 \\ 1 \\ 2 \\ 3 \\ 4</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;\f]</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;## References and copies</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;All ArrayFire indexing functions return af::array(technically its an array_proxy</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;class) objects. These objects may be new arrays or they may reference the</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;original array depending on the type of indexing that was performed on them.</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;- If an array was indexed using another af::array or it was indexed using the</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;af::approx functions, then a new array is created. It does not reference the</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;original data.</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;- If an array was indexed using a scalar, af::seq or af::span, then</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;the resulting array will reference the original data IF the first dimension is</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;continuous. The following lines will not allocate additional memory.</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;\note The new arrays wither references or newly allocated arrays, are</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;independent of the original data. Meaning that any changes to the original array</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;will not propagate to the references. Likewise, any changes to the reference</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;arrays will not modify the original data.</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;\snippet test/index.cpp index_tutorial_references</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;The following code snippet shows some examples of indexing that will allocate</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;new memory.</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;\snippet test/index.cpp index_tutorial_copies</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;Notice that even though the copy3 array is referencing continuous memory in the</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;original array, a new array is created because we used an array to index into</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;the af::array.</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;## Assignment</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;An assignment on an af::array will replace the array with the result of the</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;expression on the right hand side of the equal(=) operator. This means that the</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;type and shape of the result can be different from the array on the left had</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;side of the equal operator. Assignments will not update the array that was</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;previously referenced through an indexing operation. Here is an example:</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;\snippet test/index.cpp index_tutorial_assignment</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;The `ref` array is created by indexing into the data array. The initialized</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;`ref` array points to the data array and does not allocate memory when it is</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;created. After the matmul call, the `ref` array will not be pointing to the data</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;array. The matmul call will not update the values of the data array.</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;You can update the contents of an af::array by assigning with the operator</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;parenthesis. For example, if you wanted to change the third column of the</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;`A` array you can do that by assigning to `A(span, 2)`.</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;\snippet test/index.cpp index_tutorial_assignment_third_column</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;\f[</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;ref =</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;     8  \\</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;     9  \\</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    10  \\</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    11</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;A =</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    0 &amp; 4 &amp; 3.14 &amp; 12 \\</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    1 &amp; 5 &amp; 3.14 &amp; 13 \\</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    2 &amp; 6 &amp; 3.14 &amp; 14 \\</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    3 &amp; 7 &amp; 3.14 &amp; 15</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;\f]</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;This will update only the array being modified. If there are arrays that</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;are referring to this array because of an indexing operation, those values</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;will remain unchanged.</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;Allocation will only be performed if there are other arrays referencing the data</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;at the point of assignment. In the previous example, an allocation will be</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;performed when assigning to the `A` array because the `ref` array is pointing</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;to the original data. Here is another example demonstrating when an allocation</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;will occur:</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;\snippet test/index.cpp index_tutorial_assignment_alloc</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;In this example, no allocation will take place because when the `ref` object</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;is created, it is pointing to `A`&#39;s data. Once it goes out of scope, no data</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;points to `A`, therefore when the assignment takes place, the data is modified in</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;place instead of being copied to a new address.</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;You can also assign to arrays using another af::arrays as an indexing array.</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;This works in a similar way to the other types of assignment but care must be</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;taken to assure that the indexes are unique. Non-unique indexes will result in a</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;race condition which will cause non-deterministic values.</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;\snippet test/index.cpp index_tutorial_assignment_race_condition</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;\f[</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;idx =</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;     4  \\</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;     3  \\</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;     4  \\</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;     0</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;vals =</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;     9  \\</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;     8  \\</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;     7  \\</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;     6</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;\\</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;A =</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;\begin{bmatrix}</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    6 &amp; 9\ or\ 7 &amp;  8 &amp; 12 \\</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    1 &amp;   5    &amp;  9 &amp; 13 \\</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    2 &amp;   6    &amp; 10 &amp; 14 \\</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    8 &amp;   7    &amp; 11 &amp; 15</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;\end{bmatrix}</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;\f]</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;## Member functions</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;There are several member functions which allow you to index into an af::array. These</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;functions have similar functionality but may be easier to parse for some.</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;* [row(i)](\ref af::array::row) or [col(i)](\ref af::array::col) specifying a single row/column</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;* [rows(first,last)](\ref af::array::rows) or [cols(first,last)](\ref af::array::cols)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  specifying multiple rows or columns</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;* [slice(i)](\ref af::array::slice) or [slices(first, last)](\ref af::array::slices) to</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  select one or a range of slices</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;# Additional examples</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;See \ref  index_mat for the full listing.</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;\snippet test/index.cpp ex_indexing_first</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;You can set values in an array:</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;\snippet test/index.cpp ex_indexing_set</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;Use one array to reference into another.</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;\snippet test/index.cpp ex_indexing_ref</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
