<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.18"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: image_processing/filters.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.18 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('image_processing_2filters_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">image_processing/filters.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2015, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * https://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> hurl(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">int</span> randomization, <span class="keywordtype">int</span> repeat) {</div>
<div class="line">    <span class="keywordtype">int</span> w         = in.<a name="a1"></a><a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">    <span class="keywordtype">int</span> h         = in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div>
<div class="line">    <span class="keywordtype">float</span> f       = randomization / 100.0f;</div>
<div class="line">    <span class="keywordtype">int</span> dim       = (int)(f * w * h);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> ret_val = in.<a name="a2"></a><a class="code" href="classaf_1_1array.htm#aa859f53b411dd3ab37c8c817b4352e07">copy</a>();</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> temp    = <a name="a3"></a><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(ret_val, w * h, 3);</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; repeat; ++i) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> idxs    = (w * h) * <a name="a4"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(dim);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> rndR    = 255.0f * <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(dim);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> rndG    = 255.0f * <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(dim);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> rndB    = 255.0f * <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(dim);</div>
<div class="line">        temp(idxs, 0) = rndR;</div>
<div class="line">        temp(idxs, 1) = rndG;</div>
<div class="line">        temp(idxs, 2) = rndB;</div>
<div class="line">    }</div>
<div class="line">    ret_val = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(temp, in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line">    <span class="keywordflow">return</span> ret_val;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> getRandomNeighbor(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">int</span> windW, <span class="keywordtype">int</span> windH) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> rnd = 2.0f * <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)) - 1.0f;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> sx  = <a name="_a5"></a><a class="code" href="classaf_1_1seq.htm">seq</a>(in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0));</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> sy  = <a class="code" href="classaf_1_1seq.htm">seq</a>(in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> vx  = <a name="a6"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(sx, 1, in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)) + <a name="a7"></a><a class="code" href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">floor</a>(rnd * windW);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> vy  = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(sy.<a name="a8"></a><a class="code" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>(), in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0), 1) + <a class="code" href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">floor</a>(rnd * windH);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> vxx = <a name="a9"></a><a class="code" href="namespaceaf.htm#a5d4d2a41fad7d816b70be0e92270dc5f">clamp</a>(vx, 0, in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0));</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> vyy = <a class="code" href="namespaceaf.htm#a5d4d2a41fad7d816b70be0e92270dc5f">clamp</a>(vy, 0, in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> in2 = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(in, vx.<a name="a10"></a><a class="code" href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">elements</a>(), 3);</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(in2(vyy * in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0) + vxx, <a name="a11"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>), in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> spread(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">int</span> window_width, <span class="keywordtype">int</span> window_height) {</div>
<div class="line">    <span class="keywordflow">return</span> getRandomNeighbor(in, window_width, window_height);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> pick(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">int</span> randomization, <span class="keywordtype">int</span> repeat) {</div>
<div class="line">    <span class="keywordtype">int</span> w         = in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">    <span class="keywordtype">int</span> h         = in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div>
<div class="line">    <span class="keywordtype">float</span> f       = randomization / 100.0f;</div>
<div class="line">    <span class="keywordtype">int</span> dim       = (int)(f * w * h);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> ret_val = in.<a class="code" href="classaf_1_1array.htm#aa859f53b411dd3ab37c8c817b4352e07">copy</a>();</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; repeat; ++i) {</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> idxs           = (w * h) * <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(dim);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> rnd            = getRandomNeighbor(ret_val, 1, 1);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> temp_src       = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(rnd, w * h, 3);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> temp_dst       = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(ret_val, w * h, 3);</div>
<div class="line">        temp_dst(idxs, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>) = temp_src(idxs, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>);</div>
<div class="line">        ret_val              = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(temp_dst, in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> ret_val;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> prewitt(<a class="code" href="classaf_1_1array.htm">array</a> &amp;mag, <a class="code" href="classaf_1_1array.htm">array</a> &amp;dir, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in) {</div>
<div class="line">    <span class="keyword">static</span> <span class="keywordtype">float</span> h1[] = {1, 1, 1};</div>
<div class="line">    <span class="keyword">static</span> <span class="keywordtype">float</span> h2[] = {-1, 0, 1};</div>
<div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> h1d(3, h1);</div>
<div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> h2d(3, h2);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Find the gradients</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> Gy = <a name="a12"></a><a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a>(h2d, h1d, in) / 6;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> Gx = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a>(h1d, h2d, in) / 6;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Find magnitude and direction</span></div>
<div class="line">    mag = <a name="a13"></a><a class="code" href="group__arith__func__hypot.htm#ga64b537a8205c867f03c86124a65570a7">hypot</a>(Gx, Gy);</div>
<div class="line">    dir = <a name="a14"></a><a class="code" href="group__arith__func__atan.htm#gacb73cfb704e7e4d49c1e8c46ff601b58">atan2</a>(Gy, Gx);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> sobelFilter(<a class="code" href="classaf_1_1array.htm">array</a> &amp;mag, <a class="code" href="classaf_1_1array.htm">array</a> &amp;dir, <span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in) {</div>
<div class="line">    <span class="comment">// Find the gradients</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> Gy, Gx;</div>
<div class="line">    <a name="a15"></a><a class="code" href="group__image__func__sobel.htm#ga6c098aec0c9768f8264a95eb00deda3a">af::sobel</a>(Gx, Gy, in);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Find magnitude and direction</span></div>
<div class="line">    mag = <a class="code" href="group__arith__func__hypot.htm#ga64b537a8205c867f03c86124a65570a7">hypot</a>(Gx, Gy);</div>
<div class="line">    dir = <a class="code" href="group__arith__func__atan.htm#gacb73cfb704e7e4d49c1e8c46ff601b58">atan2</a>(Gy, Gx);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> normalizeImage(<a class="code" href="classaf_1_1array.htm">array</a> &amp;in) {</div>
<div class="line">    <span class="keywordtype">float</span> <a name="a16"></a><a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a> = af::min&lt;float&gt;(in);</div>
<div class="line">    <span class="keywordtype">float</span> <a name="a17"></a><a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a> = af::max&lt;float&gt;(in);</div>
<div class="line">    in        = 255.0f * ((in - <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>) / (<a class="code" href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">max</a> - <a class="code" href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">min</a>));</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> DifferenceOfGaussian(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">int</span> window_radius1,</div>
<div class="line">                           <span class="keywordtype">int</span> window_radius2) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> ret_val;</div>
<div class="line">    <span class="keywordtype">int</span> w1   = 2 * window_radius1 + 1;</div>
<div class="line">    <span class="keywordtype">int</span> w2   = 2 * window_radius2 + 1;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> g1 = <a name="a18"></a><a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(w1, w1);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> g2 = <a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(w2, w2);</div>
<div class="line">    ret_val  = (<a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(in, g1) - <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(in, g2));</div>
<div class="line">    normalizeImage(ret_val);</div>
<div class="line">    <span class="keywordflow">return</span> ret_val;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> medianfilter(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">int</span> window_width, <span class="keywordtype">int</span> window_height) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> ret_val(in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line">    ret_val(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 0) =</div>
<div class="line">        <a name="a19"></a><a class="code" href="group__image__func__medfilt.htm#gace207668a873b0f5f49d8a97a8df5928">medfilt</a>(in(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 0), window_width, window_height);</div>
<div class="line">    ret_val(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 1) =</div>
<div class="line">        <a class="code" href="group__image__func__medfilt.htm#gace207668a873b0f5f49d8a97a8df5928">medfilt</a>(in(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 1), window_width, window_height);</div>
<div class="line">    ret_val(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 2) =</div>
<div class="line">        <a class="code" href="group__image__func__medfilt.htm#gace207668a873b0f5f49d8a97a8df5928">medfilt</a>(in(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, <a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, 2), window_width, window_height);</div>
<div class="line">    <span class="keywordflow">return</span> ret_val;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> gaussianblur(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;in, <span class="keywordtype">int</span> window_width, <span class="keywordtype">int</span> window_height,</div>
<div class="line">                   <span class="keywordtype">double</span> sigma) {</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> g = <a class="code" href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">gaussianKernel</a>(window_width, window_height, sigma, sigma);</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(in, g);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><a class="code" href="classaf_1_1array.htm">array</a> emboss(<span class="keyword">const</span> <a class="code" href="classaf_1_1array.htm">array</a> &amp;input, <span class="keywordtype">float</span> azimuth, <span class="keywordtype">float</span> elevation, <span class="keywordtype">float</span> depth) {</div>
<div class="line">    <span class="keywordflow">if</span> (depth &lt; 1 || depth &gt; 100) {</div>
<div class="line">        printf(<span class="stringliteral">&quot;Depth should be in the range of 1-100&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span> input;</div>
<div class="line">    }</div>
<div class="line">    <span class="keyword">static</span> <span class="keywordtype">float</span> x[3] = {-1, 0, 1};</div>
<div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> hg(3, x);</div>
<div class="line">    <span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> vg = hg.<a class="code" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> in = input;</div>
<div class="line">    <span class="keywordflow">if</span> (in.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(2) &gt; 1)</div>
<div class="line">        in = <a name="a20"></a><a class="code" href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">colorSpace</a>(input, <a name="a21"></a><a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1">AF_GRAY</a>, <a name="a22"></a><a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6">AF_RGB</a>);</div>
<div class="line">    <span class="keywordflow">else</span></div>
<div class="line">        in = input;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// convert angles to radians</span></div>
<div class="line">    <span class="keywordtype">float</span> phi   = elevation * <a name="a23"></a><a class="code" href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a> / 180.0f;</div>
<div class="line">    <span class="keywordtype">float</span> theta = azimuth * <a class="code" href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a> / 180.0f;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// compute light pos in cartesian coordinates</span></div>
<div class="line">    <span class="comment">// and scale with maximum intensity</span></div>
<div class="line">    <span class="comment">// phi will effect the amount of we intend to put</span></div>
<div class="line">    <span class="comment">// on a pixel</span></div>
<div class="line">    <span class="keywordtype">float</span> pos[3];</div>
<div class="line">    pos[0] = 255.99f * <a name="a24"></a><a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(phi) * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(theta);</div>
<div class="line">    pos[1] = 255.99f * <a class="code" href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">cos</a>(phi) * <a name="a25"></a><a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(theta);</div>
<div class="line">    pos[2] = 255.99f * <a class="code" href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">sin</a>(phi);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// compute gradient vector</span></div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> gx = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(in, vg);</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> gy = <a class="code" href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">convolve</a>(in, hg);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">float</span> pxlz   = (6 * 255.0f) / depth;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> zdepth = <a name="a26"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(pxlz, gx.<a class="code" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>());</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> vdot   = gx * pos[0] + gy * pos[1] + pxlz * pos[2];</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> outwd  = vdot &lt; 0.0f;</div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> <a name="a27"></a><a class="code" href="group__lapack__ops__func__norm.htm#gada407977a0136ba855b8bef162dc9fcf">norm</a>   = vdot / <a name="a28"></a><a class="code" href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">sqrt</a>(gx * gx + gy * gy + zdepth * zdepth);</div>
<div class="line"> </div>
<div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> color = outwd * 0.0f + (1 - outwd) * <a class="code" href="group__lapack__ops__func__norm.htm#gada407977a0136ba855b8bef162dc9fcf">norm</a>;</div>
<div class="line">    <span class="keywordflow">return</span> color;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <span class="keywordtype">int</span> device = argc &gt; 1 ? atoi(argv[1]) : 0;</div>
<div class="line">        <a name="a29"></a><a class="code" href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a>(device);</div>
<div class="line">        <a name="a30"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div>
<div class="line"> </div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> img =</div>
<div class="line">            <a name="a31"></a><a class="code" href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">loadImage</a>(ASSETS_DIR <span class="stringliteral">&quot;/examples/images/vegetable-woman.jpg&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line"> </div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> prew_mag, prew_dir;</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> sob_mag, sob_dir;</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> img1ch = <a class="code" href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">colorSpace</a>(img, <a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1">AF_GRAY</a>, <a class="code" href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6">AF_RGB</a>);</div>
<div class="line">        prewitt(prew_mag, prew_dir, img1ch);</div>
<div class="line">        sobelFilter(sob_mag, sob_dir, img1ch);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> sprd  = spread(img, 3, 3);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> hrl   = hurl(img, 10, 1);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> pckng = pick(img, 40, 2);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> difog = DifferenceOfGaussian(img, 1, 2);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> bil   = <a name="a32"></a><a class="code" href="group__image__func__bilateral.htm#ga2ee5156a2d3a51a55f36a797d1274605">bilateral</a>(hrl, 3.0f, 40.0f);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> mf    = medianfilter(hrl, 5, 5);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> gb    = gaussianblur(hrl, 3, 3, 0.8);</div>
<div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> emb   = emboss(img, 45, 20, 10);</div>
<div class="line"> </div>
<div class="line">        <a name="_a33"></a><a class="code" href="classaf_1_1Window.htm">af::Window</a> wnd(<span class="stringliteral">&quot;Image Filters Demo&quot;</span>);</div>
<div class="line">        printf(<span class="stringliteral">&quot;Press ESC while the window is in focus to exit\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">while</span> (!wnd.close()) {</div>
<div class="line">            wnd.grid(2, 5);</div>
<div class="line">            wnd(0, 0).image(hrl / 255, <span class="stringliteral">&quot;Hurl noise&quot;</span>);</div>
<div class="line">            wnd(1, 0).image(gb / 255, <span class="stringliteral">&quot;Gaussian blur&quot;</span>);</div>
<div class="line">            wnd(0, 1).image(bil / 255, <span class="stringliteral">&quot;Bilateral filter on hurl noise&quot;</span>);</div>
<div class="line">            wnd(1, 1).image(mf / 255, <span class="stringliteral">&quot;Median filter on hurl noise&quot;</span>);</div>
<div class="line">            wnd(0, 2).image(prew_mag / 255, <span class="stringliteral">&quot;Prewitt edge filter&quot;</span>);</div>
<div class="line">            wnd(1, 2).image(sob_mag / 255, <span class="stringliteral">&quot;Sobel edge filter&quot;</span>);</div>
<div class="line">            wnd(0, 3).image(sprd / 255, <span class="stringliteral">&quot;Spread filter&quot;</span>);</div>
<div class="line">            wnd(1, 3).image(pckng / 255, <span class="stringliteral">&quot;Pick filter&quot;</span>);</div>
<div class="line">            wnd(0, 4).image(difog / 255,</div>
<div class="line">                            <span class="stringliteral">&quot;Difference of gaussians(3x3 and 5x5)&quot;</span>);</div>
<div class="line">            wnd(1, 4).image(emb / 255, <span class="stringliteral">&quot;Emboss effect&quot;</span>);</div>
<div class="line">            wnd.show();</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<a name="_a34"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> &amp;e) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, e.<a name="a35"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:46</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a460631fd3c4d686ad85e199f2a08fe6a"><div class="ttname"><a href="namespaceaf.htm#a460631fd3c4d686ad85e199f2a08fe6a">af::Pi</a></div><div class="ttdeci">AFAPI const double Pi</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga1360e706b046b1c5b299bd6e689a0276"><div class="ttname"><a href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga3c58da8ca31ae6c871379aeb587b8b0d"><div class="ttname"><a href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga382a69ec85a6beea79e95aeaef591073"><div class="ttname"><a href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</div></div>
<div class="ttc" id="agroup__device__func__set_htm_gafbb906ca5b89ec43fdb0e3a14d1df1e7"><div class="ttname"><a href="group__device__func__set.htm#gafbb906ca5b89ec43fdb0e3a14d1df1e7">af::setDevice</a></div><div class="ttdeci">AFAPI void setDevice(const int device)</div><div class="ttdoc">Sets the current device.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00035">array.h:35</a></div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="agroup__image__func__medfilt_htm_gace207668a873b0f5f49d8a97a8df5928"><div class="ttname"><a href="group__image__func__medfilt.htm#gace207668a873b0f5f49d8a97a8df5928">af::medfilt</a></div><div class="ttdeci">AFAPI array medfilt(const array &amp;in, const dim_t wind_length=3, const dim_t wind_width=3, const borderType edge_pad=AF_PAD_ZERO)</div><div class="ttdoc">C++ Interface for median filter.</div></div>
<div class="ttc" id="agroup__arith__func__atan_htm_gacb73cfb704e7e4d49c1e8c46ff601b58"><div class="ttname"><a href="group__arith__func__atan.htm#gacb73cfb704e7e4d49c1e8c46ff601b58">af::atan2</a></div><div class="ttdeci">AFAPI array atan2(const array &amp;lhs, const array &amp;rhs)</div></div>
<div class="ttc" id="agroup__image__func__gauss_htm_gaa5de1866bc1bf50bf5fe3cb26d4e410d"><div class="ttname"><a href="group__image__func__gauss.htm#gaa5de1866bc1bf50bf5fe3cb26d4e410d">af::gaussianKernel</a></div><div class="ttdeci">AFAPI array gaussianKernel(const int rows, const int cols, const double sig_r=0, const double sig_c=0)</div><div class="ttdoc">C++ Interface for generating gausian kernels.</div></div>
<div class="ttc" id="agroup__reduce__func__max_htm_ga4459daf5a3b081fb4ee15eb49d8c902a"><div class="ttname"><a href="group__reduce__func__max.htm#ga4459daf5a3b081fb4ee15eb49d8c902a">af::max</a></div><div class="ttdeci">AFAPI array max(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for maximum values in an array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a89f91cdf327a8b304589916db5bde3c2"><div class="ttname"><a href="classaf_1_1array.htm#a89f91cdf327a8b304589916db5bde3c2">af::array::elements</a></div><div class="ttdeci">dim_t elements() const</div><div class="ttdoc">Get the total number of elements across all dimensions of the array.</div></div>
<div class="ttc" id="anamespaceaf_htm_a5d4d2a41fad7d816b70be0e92270dc5f"><div class="ttname"><a href="namespaceaf.htm#a5d4d2a41fad7d816b70be0e92270dc5f">af::clamp</a></div><div class="ttdeci">AFAPI array clamp(const array &amp;in, const array &amp;lo, const array &amp;hi)</div></div>
<div class="ttc" id="agroup__arith__func__sin_htm_gac6fdb44f59fbbffdc55c9c4af29e08f4"><div class="ttname"><a href="group__arith__func__sin.htm#gac6fdb44f59fbbffdc55c9c4af29e08f4">af::sin</a></div><div class="ttdeci">AFAPI array sin(const array &amp;in)</div><div class="ttdoc">C++ Interface for sin.</div></div>
<div class="ttc" id="agroup__arith__func__sqrt_htm_ga25c678d4cd9e0702bbc93e11d7d516a8"><div class="ttname"><a href="group__arith__func__sqrt.htm#ga25c678d4cd9e0702bbc93e11d7d516a8">af::sqrt</a></div><div class="ttdeci">AFAPI array sqrt(const array &amp;in)</div><div class="ttdoc">C++ Interface for square root of input.</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_gabe9a79d7b21f0a8fb7ace6920ead4772"><div class="ttname"><a href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00028">exception.h:29</a></div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_ga3548059d64e0cefc7fedb4ec28321d32"><div class="ttname"><a href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="anamespaceaf_htm_af5c1188f38105afaf8b3f383492a1c9f"><div class="ttname"><a href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">af::span</a></div><div class="ttdeci">AFAPI seq span</div><div class="ttdoc">A special value representing the entire axis of an af::array.</div></div>
<div class="ttc" id="agroup__lapack__ops__func__norm_htm_gada407977a0136ba855b8bef162dc9fcf"><div class="ttname"><a href="group__lapack__ops__func__norm.htm#gada407977a0136ba855b8bef162dc9fcf">af::norm</a></div><div class="ttdeci">AFAPI double norm(const array &amp;in, const normType type=AF_NORM_EUCLID, const double p=1, const double q=1)</div><div class="ttdoc">C++ Interface for norm of a matrix.</div></div>
<div class="ttc" id="adefines_8h_htm_ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6"><div class="ttname"><a href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0dad9c37bf4beee3f07b8b1aa4b887244e6">AF_RGB</a></div><div class="ttdeci">@ AF_RGB</div><div class="ttdoc">3-channel RGB</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00341">defines.h:341</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="agroup__image__func__colorspace_htm_ga9dabba47b9390faacf8fb146605339b0"><div class="ttname"><a href="group__image__func__colorspace.htm#ga9dabba47b9390faacf8fb146605339b0">af::colorSpace</a></div><div class="ttdeci">AFAPI array colorSpace(const array &amp;image, const CSpace to, const CSpace from)</div><div class="ttdoc">C++ Interface wrapper for colorspace conversion.</div></div>
<div class="ttc" id="agroup__imageio__func__load_htm_ga8bcf01ffa60bc513856d98b8a63bb12a"><div class="ttname"><a href="group__imageio__func__load.htm#ga8bcf01ffa60bc513856d98b8a63bb12a">af::loadImage</a></div><div class="ttdeci">AFAPI array loadImage(const char *filename, const bool is_color=false)</div><div class="ttdoc">C++ Interface for loading an image.</div></div>
<div class="ttc" id="agroup__arith__func__floor_htm_ga3e75b4b34f55a6ce68cfa762eff995a6"><div class="ttname"><a href="group__arith__func__floor.htm#ga3e75b4b34f55a6ce68cfa762eff995a6">af::floor</a></div><div class="ttdeci">AFAPI array floor(const array &amp;in)</div><div class="ttdoc">C++ Interface for flooring an array of numbers.</div></div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_aa859f53b411dd3ab37c8c817b4352e07"><div class="ttname"><a href="classaf_1_1array.htm#aa859f53b411dd3ab37c8c817b4352e07">af::array::copy</a></div><div class="ttdeci">array copy() const</div><div class="ttdoc">Perform deep copy of the array.</div></div>
<div class="ttc" id="agroup__arith__func__hypot_htm_ga64b537a8205c867f03c86124a65570a7"><div class="ttname"><a href="group__arith__func__hypot.htm#ga64b537a8205c867f03c86124a65570a7">af::hypot</a></div><div class="ttdeci">AFAPI array hypot(const array &amp;lhs, const array &amp;rhs)</div><div class="ttdoc">C++ Interface for getting length of hypotenuse of two inputs.</div></div>
<div class="ttc" id="agroup__arith__func__cos_htm_ga00be564e1f588df68288d2dec8578cb6"><div class="ttname"><a href="group__arith__func__cos.htm#ga00be564e1f588df68288d2dec8578cb6">af::cos</a></div><div class="ttdeci">AFAPI array cos(const array &amp;in)</div><div class="ttdoc">C++ Interface for cos.</div></div>
<div class="ttc" id="adefines_8h_htm_ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1"><div class="ttname"><a href="defines_8h.htm#ae1e32be35ff02f167999723d77153f0da2b379305db06eb19ff82ce7e85b7c4b1">AF_GRAY</a></div><div class="ttdeci">@ AF_GRAY</div><div class="ttdoc">Grayscale.</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00340">defines.h:340</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_ad62489809e3df568e973597b928d6d9b"><div class="ttname"><a href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00060">exception.h:60</a></div></div>
<div class="ttc" id="agroup__signal__func__convolve_htm_gae79b64c8b0d6a06309e8b67bf89cf6c9"><div class="ttname"><a href="group__signal__func__convolve.htm#gae79b64c8b0d6a06309e8b67bf89cf6c9">af::convolve</a></div><div class="ttdeci">AFAPI array convolve(const array &amp;signal, const array &amp;filter, const convMode mode=AF_CONV_DEFAULT, const convDomain domain=AF_CONV_AUTO)</div><div class="ttdoc">C++ Interface for convolution any(one through three) dimensional signals.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="aclassaf_1_1Window_htm"><div class="ttname"><a href="classaf_1_1Window.htm">af::Window</a></div><div class="ttdoc">Window object to render af::arrays.</div><div class="ttdef"><b>Definition:</b> <a href="graphics_8h_source.htm#l00037">graphics.h:37</a></div></div>
<div class="ttc" id="agroup__image__func__bilateral_htm_ga2ee5156a2d3a51a55f36a797d1274605"><div class="ttname"><a href="group__image__func__bilateral.htm#ga2ee5156a2d3a51a55f36a797d1274605">af::bilateral</a></div><div class="ttdeci">AFAPI array bilateral(const array &amp;in, const float spatial_sigma, const float chromatic_sigma, const bool is_color=false)</div><div class="ttdoc">C++ Interface for bilateral filter.</div></div>
<div class="ttc" id="agroup__reduce__func__min_htm_ga2b1287d1babb569d28bc6ee1c8e8e1ea"><div class="ttname"><a href="group__reduce__func__min.htm#ga2b1287d1babb569d28bc6ee1c8e8e1ea">af::min</a></div><div class="ttdeci">AFAPI array min(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for minimum values in an array.</div></div>
<div class="ttc" id="agroup__image__func__sobel_htm_ga6c098aec0c9768f8264a95eb00deda3a"><div class="ttname"><a href="group__image__func__sobel.htm#ga6c098aec0c9768f8264a95eb00deda3a">af::sobel</a></div><div class="ttdeci">AFAPI void sobel(array &amp;dx, array &amp;dy, const array &amp;img, const unsigned ker_size=3)</div><div class="ttdoc">C++ Interface for extracting sobel gradients.</div></div>
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
