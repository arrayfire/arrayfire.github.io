<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Array and Matrix Manipulation</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('matrixmanipulation.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div><div class="header">
  <div class="headertitle"><div class="title">Array and Matrix Manipulation </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p ><a class="anchor" id="md_C__Users_jmelonak_source_repos_arrayfire_arrayfire_docs_pages_matrix_manipulation"></a></p>
<p >ArrayFire provides several different methods for <a class="el" href="group__manip__mat.htm">manipulating arrays and matrices</a>. The functionality includes:</p>
<ul>
<li>moddims() - change the dimensions of an array without changing the data</li>
<li>array() - create a (shallow) copy of an array with different dimensions.</li>
<li>flat() - flatten an array to one dimension</li>
<li>flip() - flip an array along a dimension</li>
<li>join() - join up to 4 arrays</li>
<li>reorder() - changes the dimension order within the array</li>
<li>shift() - shifts data along a dimension</li>
<li>tile() - repeats an array along a dimension</li>
<li>transpose() - performs a matrix transpose</li>
<li><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T()</a> - transpose a matrix or vector (shorthand notation)</li>
<li><a class="el" href="classaf_1_1array.htm#a222cd421e1a99821609a17d54c9fc488">H()</a> - Hermitian Transpose (conjugate-transpose) a matrix</li>
</ul>
<p >Below we provide several examples of these functions and their use.</p>
<h1>flat()</h1>
<p >The <b>flat()</b> function flattens an array to one dimension:</p>
<div class="fragment"><div class="line">a [3 3 1 1]</div>
<div class="line">    1.0000     4.0000     7.0000</div>
<div class="line">    2.0000     5.0000     8.0000</div>
<div class="line">    3.0000     6.0000     9.0000</div>
<div class="line"> </div>
<div class="line">flat(a) [9 1 1 1]</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    3.0000</div>
<div class="line">    4.0000</div>
<div class="line">    5.0000</div>
<div class="line">    6.0000</div>
<div class="line">    7.0000</div>
<div class="line">    8.0000</div>
<div class="line">    9.0000</div>
</div><!-- fragment --><p >The flat function can be called from C and C++ as follows:</p>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__manip__func__flat.htm#gac6dfb22cbd3b151ddffb9a4ddf74455e" title="C Interface to flatten an array.">af_flat(af_array* out, const af_array in)</a></b> &ndash; C interface for flat() function </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array af::flat(const array&amp; in)</b> &ndash; C++ interface for flat() function </p>
</blockquote>
<h1>flip()</h1>
<p >The <b>flip()</b> function flips the contents of an array along a chosen dimension. In the example below, we show the 5x2 array flipped along the zeroth (i.e. within a column) and first (e.g. across rows) axes:</p>
<div class="fragment"><div class="line">a [5 2 1 1]</div>
<div class="line">    1.0000     6.0000</div>
<div class="line">    2.0000     7.0000</div>
<div class="line">    3.0000     8.0000</div>
<div class="line">    4.0000     9.0000</div>
<div class="line">    5.0000    10.0000</div>
<div class="line"> </div>
<div class="line">flip(a, 0) [5 2 1 1]</div>
<div class="line">    5.0000    10.0000</div>
<div class="line">    4.0000     9.0000</div>
<div class="line">    3.0000     8.0000</div>
<div class="line">    2.0000     7.0000</div>
<div class="line">    1.0000     6.0000</div>
<div class="line"> </div>
<div class="line">flip(a, 1) [5 2 1 1]</div>
<div class="line">    6.0000     1.0000</div>
<div class="line">    7.0000     2.0000</div>
<div class="line">    8.0000     3.0000</div>
<div class="line">    9.0000     4.0000</div>
<div class="line">   10.0000     5.0000</div>
</div><!-- fragment --><p >The flip function can be called from C and C++ as follows:</p>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__manip__func__flip.htm#gac0795e2a4343ea8f897b3b7d23802ccb" title="C Interface to flip an array.">af_flip(af_array *out, const af_array in, const unsigned dim)</a></b> &ndash; C interface for flip() </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array af::flip(const array &amp;in, const unsigned dim)</b> &ndash; C++ interface for flip() </p>
</blockquote>
<h1>join()</h1>
<p >The <b>join()</b> function joins arrays along a specific dimension. The C++ interface can join up to four arrays whereas the C interface supports up to 10 arrays. Here is an example of how to use join an array to itself:</p>
<div class="fragment"><div class="line">a [5 1 1 1]</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    3.0000</div>
<div class="line">    4.0000</div>
<div class="line">    5.0000</div>
<div class="line"> </div>
<div class="line">join(0, a, a) [10 1 1 1]</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    3.0000</div>
<div class="line">    4.0000</div>
<div class="line">    5.0000</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    3.0000</div>
<div class="line">    4.0000</div>
<div class="line">    5.0000</div>
<div class="line"> </div>
<div class="line">join(1, a, a) [5 2 1 1]</div>
<div class="line">    1.0000     1.0000</div>
<div class="line">    2.0000     2.0000</div>
<div class="line">    3.0000     3.0000</div>
<div class="line">    4.0000     4.0000</div>
<div class="line">    5.0000     5.0000</div>
</div><!-- fragment --><p >The join function has several candidate functions in C:</p>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__manip__func__join.htm#ga4c0b185d13b49023cc22c0269eedbdb2" title="C Interface to join 2 arrays along a dimension.">af_join(af_array *out, const int dim, const af_array first, const af_array second)</a></b> &ndash; C interface function to join 2 arrays along a dimension </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__manip__func__join.htm#ga67a36384247f6bb40254e0cb2e6d5d5c" title="C Interface to join many arrays along a dimension.">af_join_many(af_array *out, const int dim, const unsigned n_arrays, const af_array *inputs)</a></b> &ndash; C interface function to join up to 10 arrays along a dimension </p>
</blockquote>
<p>and in C++:</p>
<blockquote class="doxtable">
<p >&zwj;<b>array af::join(const int dim, const array &amp;first, const array &amp;second)</b> &ndash; Joins 2 arrays along a dimension </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array af::join(const int dim, const array &amp;first, const array &amp;second, const array &amp;third)</b> &ndash; Joins 3 arrays along a dimension. </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array af::join(const int dim, const array &amp;first, const array &amp;second, const array &amp;third, const array &amp;fourth)</b> &ndash; Joins 4 arrays along a dimension </p>
</blockquote>
<h1>moddims()</h1>
<p >The <b>moddims()</b> function changes the dimensions of an array without changing its data or order. Note that this function modifies only the <em>metadata</em> associated with the array. It does not modify the content of the array. Here is an example of moddims() converting an 8x1 array into a 2x4 and then back to a 8x1:</p>
<div class="fragment"><div class="line">a [8 1 1 1]</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line"> </div>
<div class="line"><a class="code hl_class" href="classaf_1_1dim4.htm">af::dim4</a> new_dims(2, 4);</div>
<div class="line">moddims(a, new_dims) [2 4 1 1]</div>
<div class="line">    1.0000     1.0000     1.0000     1.0000</div>
<div class="line">    2.0000     2.0000     2.0000     2.0000</div>
<div class="line"> </div>
<div class="line">moddims(a, a.elements(), 1, 1, 1) [8 1 1 1]</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="ttc" id="aclassaf_1_1dim4_htm"><div class="ttname"><a href="classaf_1_1dim4.htm">af::dim4</a></div><div class="ttdoc">Generic object that represents size and shape.</div><div class="ttdef"><b>Definition:</b> <a href="dim4_8hpp_source.htm#l00025">dim4.hpp:26</a></div></div>
</div><!-- fragment --><p >The moddims function has a single form in the C API:</p>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__manip__func__moddims.htm#ga50442cfa497c34054c3dc4404e92667a" title="C Interface to modify the dimensions of an input array to a specified shape.">af_moddims(af_array *out, const af_array in, const unsigned ndims, const dim_t *const dims)</a></b> &ndash; C interface to mod dimensions of an array </p>
</blockquote>
<p>And several overloaded candidates in the C++ API:</p>
<blockquote class="doxtable">
<p >&zwj;<b>array af::moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</b> &ndash; mods number of dimensions to match <em>ndims</em> as specidied in the array <em>dims</em> </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array af::moddims(const array &amp;in, const dim4 &amp;dims)</b> &ndash; mods dimensions as specified by <em>dims</em> </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array <a class="el" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d" title="C++ Interface to modify the dimensions of an input array to a specified shape.">af::moddims</a>(const array &amp;in, const dim_t d0, const dim_t d1=1, const dim_t d2=1, const dim_t d3=1)</b> &ndash; mods dimensions of an array </p>
</blockquote>
<h1>reorder()</h1>
<p >The <b>reorder()</b> function modifies the order of data within an array by exchanging data according to the change in dimensionality. The linear ordering of data within the array is preserved.</p>
<div class="fragment"><div class="line">a [2 2 3 1]</div>
<div class="line">    1.0000     3.0000</div>
<div class="line">    2.0000     4.0000</div>
<div class="line"> </div>
<div class="line">    1.0000     3.0000</div>
<div class="line">    2.0000     4.0000</div>
<div class="line"> </div>
<div class="line">    1.0000     3.0000</div>
<div class="line">    2.0000     4.0000</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">reorder(a, 1, 0, 2) [2 2 3 1]  <span class="comment">//equivalent to a transpose</span></div>
<div class="line">    1.0000     2.0000</div>
<div class="line">    3.0000     4.0000</div>
<div class="line"> </div>
<div class="line">    1.0000     2.0000</div>
<div class="line">    3.0000     4.0000</div>
<div class="line"> </div>
<div class="line">    1.0000     2.0000</div>
<div class="line">    3.0000     4.0000</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">reorder(a, 2, 0, 1) [3 2 2 1]</div>
<div class="line">    1.0000     2.0000</div>
<div class="line">    1.0000     2.0000</div>
<div class="line">    1.0000     2.0000</div>
<div class="line"> </div>
<div class="line">    3.0000     4.0000</div>
<div class="line">    3.0000     4.0000</div>
<div class="line">    3.0000     4.0000</div>
</div><!-- fragment --><p >The reorder function has several candidates functions in the C/C++ APIs:</p>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__manip__func__reorder.htm#ga57383f4d00a3a86eab08dddd52c3ad3d" title="C Interface to reorder an array.">af_reorder(af_array *out, const af_array in, const unsigned x, const unsigned y, const unsigned z, const unsigned w)</a></b> &ndash; C interface for reordering function </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array <a class="el" href="group__manip__func__reorder.htm#ga642d691220a06b0aafa1123e722a5937" title="C++ Interface to reorder an array.">af::reorder</a>(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=2, const unsigned w=3)</b> &ndash; Reorders dimensions of an array </p>
</blockquote>
<h1>shift()</h1>
<p >The <b>shift()</b> function shifts data in a circular buffer fashion along a chosen dimension. Consider the following example:</p>
<div class="fragment"><div class="line">a [3 5 1 1]</div>
<div class="line">    0.0000     0.0000     0.0000     0.0000     0.0000</div>
<div class="line">    3.0000     4.0000     5.0000     1.0000     2.0000</div>
<div class="line">    3.0000     4.0000     5.0000     1.0000     2.0000</div>
<div class="line"> </div>
<div class="line">shift(a, 0, 2 ) [3 5 1 1]</div>
<div class="line">    0.0000     0.0000     0.0000     0.0000     0.0000</div>
<div class="line">    1.0000     2.0000     3.0000     4.0000     5.0000</div>
<div class="line">    1.0000     2.0000     3.0000     4.0000     5.0000</div>
<div class="line"> </div>
<div class="line">shift(a, -1, 2 ) [3 5 1 1]</div>
<div class="line">    1.0000     2.0000     3.0000     4.0000     5.0000</div>
<div class="line">    1.0000     2.0000     3.0000     4.0000     5.0000</div>
<div class="line">    0.0000     0.0000     0.0000     0.0000     0.0000</div>
</div><!-- fragment --><p >The shift function can be called from C and C++ as follows:</p>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__manip__func__shift.htm#ga64a0cd7680b71e87f3ab372876153b66" title="C Interface to shift an array.">af_shift(af_array *out, const af_array in, const int x, const int y, const int z, const int w)</a></b> &ndash; C interface for shifting an array </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array <a class="el" href="group__manip__func__shift.htm#ga731b20f4fcf65b45342c3ff4a37599c2" title="C++ Interface to shift an array.">af::shift</a>(const array &amp;in, const int x, const int y=0, const int z=0, const int w=0)</b> &ndash; Shifts array along specified dimensions </p>
</blockquote>
<h1>tile()</h1>
<p >The <b>tile()</b> function repeats an array along the specified dimension. For example below we show how to tile an array along the zeroth and first dimensions of an array:</p>
<div class="fragment"><div class="line">a [3 1 1 1]</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    3.0000</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Repeat array a twice in the zeroth dimension</span></div>
<div class="line">tile(a, 2) [6 1 1 1]</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    3.0000</div>
<div class="line">    1.0000</div>
<div class="line">    2.0000</div>
<div class="line">    3.0000</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Repeat array a twice along both the zeroth and first dimensions</span></div>
<div class="line">tile(a, 2, 2) [6 2 1 1]</div>
<div class="line">    1.0000     1.0000</div>
<div class="line">    2.0000     2.0000</div>
<div class="line">    3.0000     3.0000</div>
<div class="line">    1.0000     1.0000</div>
<div class="line">    2.0000     2.0000</div>
<div class="line">    3.0000     3.0000</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Repeat array a twice along the first and three times along the second</span></div>
<div class="line"><span class="comment">// dimension.</span></div>
<div class="line"><a class="code hl_class" href="classaf_1_1dim4.htm">af::dim4</a> tile_dims(1, 2, 3);</div>
<div class="line">tile(a, tile_dims) [3 2 3 1]</div>
<div class="line">    1.0000     1.0000</div>
<div class="line">    2.0000     2.0000</div>
<div class="line">    3.0000     3.0000</div>
<div class="line"> </div>
<div class="line">    1.0000     1.0000</div>
<div class="line">    2.0000     2.0000</div>
<div class="line">    3.0000     3.0000</div>
<div class="line"> </div>
<div class="line">    1.0000     1.0000</div>
<div class="line">    2.0000     2.0000</div>
<div class="line">    3.0000     3.0000</div>
</div><!-- fragment --><p >The C interface for tile is as follows:</p>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__manip__func__tile.htm#ga3540329723c9876839e0c790075ab076" title="C Interface to generate a tiled array.">af_tile(af_array *out, const af_array in, const unsigned x, const unsigned y, const unsigned z, const unsigned w)</a></b> &ndash; C interface for tiling an array </p>
</blockquote>
<p>The C++ interface has two overloads</p>
<blockquote class="doxtable">
<p >&zwj;<b>array <a class="el" href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b" title="C++ Interface to generate a tiled array.">af::tile</a>(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</b> &ndash; Tiles array along specified dimensions </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>array af::tile(const array &amp;in, const dim4 &amp;dims)</b> &ndash; Tile an array according to a dim4 object </p>
</blockquote>
<h1>transpose()</h1>
<p >The <b>transpose()</b> function performs a standard matrix transpose. The input array must have the dimensions of a 2D-matrix.</p>
<div class="fragment"><div class="line">a [3 3 1 1]</div>
<div class="line">    1.0000     3.0000     3.0000</div>
<div class="line">    2.0000     1.0000     3.0000</div>
<div class="line">    2.0000     2.0000     1.0000</div>
<div class="line"> </div>
<div class="line">transpose(a) [3 3 1 1]</div>
<div class="line">    1.0000     2.0000     2.0000</div>
<div class="line">    3.0000     1.0000     2.0000</div>
<div class="line">    3.0000     3.0000     1.0000</div>
</div><!-- fragment --><p >The C interfaces for transpose are as follows:</p>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__blas__func__transpose.htm#ga716b2b9bf190c8f8d0970aef2b57d8e7" title="C Interface to transpose a matrix.">af_transpose(af_array *out, af_array in, const bool conjugate)</a></b> &ndash; C interface to transpose a matrix. </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>af_err <a class="el" href="group__blas__func__transpose.htm#gaecab5fdf0b525f47115be24ade4f4d5b" title="C Interface to transpose a matrix in-place.">af_transpose_inplace(af_array in, const bool conjugate)</a></b> &ndash; C interface to transpose a matrix in-place. </p>
</blockquote>
<p>The C++ interface has two primary functions and two shorthand versions:</p>
<blockquote class="doxtable">
<p >&zwj;<b>array <a class="el" href="group__blas__func__transpose.htm#gac2bd8af48bf13afaa2646e9449a8092f" title="C++ Interface to transpose a matrix.">af::transpose</a>(const array &amp;in, const bool conjugate=false)</b> &ndash; Transposes a matrix. </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;<b>void <a class="el" href="group__blas__func__transpose.htm#gaa944b1470094cfea4bd60a78bd7d712b" title="C++ Interface to transpose a matrix in-place.">af::transposeInPlace</a>(array &amp;in, const bool conjugate=false)</b> &ndash; Transposes a matrix in-place. </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;__array af::T() &ndash; Transpose a matrix </p>
</blockquote>
<blockquote class="doxtable">
<p >&zwj;__array af::H() &ndash; Conjugate Transpose (Hermitian transpose) of a matrix </p>
</blockquote>
<p>Here is an example of how the shorthand versions might be used:</p>
<div class="fragment"><div class="line">    array x = randu(2, 2, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(x.T());  <span class="comment">// transpose (real)</span></div>
<div class="line"> </div>
<div class="line">    array c = randu(2, 2, <a class="code hl_enumvalue" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a>);</div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(c.T());  <span class="comment">// transpose (complex)</span></div>
<div class="line">    <a class="code hl_define" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(c.H());  <span class="comment">// Hermitian (conjugate) transpose</span></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a></div><div class="ttdeci">@ f32</div><div class="ttdoc">32-bit floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00211">defines.h:211</a></div></div>
<div class="ttc" id="adefines_8h_htm_a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f"><div class="ttname"><a href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a></div><div class="ttdeci">@ c32</div><div class="ttdoc">32-bit complex floating point values</div><div class="ttdef"><b>Definition:</b> <a href="defines_8h_source.htm#l00212">defines.h:212</a></div></div>
<div class="ttc" id="autil_8h_htm_a6de8e7f9eb3914d1cea66e55e7b791d3"><div class="ttname"><a href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a></div><div class="ttdeci">#define af_print(...)</div><div class="ttdef"><b>Definition:</b> <a href="util_8h_source.htm#l00148">util.h:148</a></div></div>
</div><!-- fragment --><h1>array()</h1>
<p ><a class="el" href="classaf_1_1array.htm">array()</a> can be used to create a (shallow) copy of a matrix with different dimensions. The total number of elements must remain the same. This function is a wrapper over the moddims() function discussed earlier.</p>
<h1>Combining re-ordering functions to enumerate grid coordinates</h1>
<p >By using a combination of the array restructuring functions, one can quickly code complex manipulation patterns with a few lines of code. For example, consider generating (<em>x,y</em>) coordinates for a grid where each axis goes from <em>1 to n</em>. Instead of using several loops to populate our arrays we can just use a small combination of the above functions.</p>
<div class="fragment"><div class="line"><span class="keywordtype">unsigned</span> n=3;</div>
<div class="line"><a class="code hl_class" href="classaf_1_1array.htm">af::array</a> xy = join(1,</div>
<div class="line">                tile(seq(1, n), n),</div>
<div class="line">                flat( transpose(tile(seq(1, n), 1, n)) )</div>
<div class="line">                   );</div>
<div class="line">xy [9 2 1 1]</div>
<div class="line">    1.0000     1.0000</div>
<div class="line">    2.0000     1.0000</div>
<div class="line">    3.0000     1.0000</div>
<div class="line">    1.0000     2.0000</div>
<div class="line">    2.0000     2.0000</div>
<div class="line">    3.0000     2.0000</div>
<div class="line">    1.0000     3.0000</div>
<div class="line">    2.0000     3.0000</div>
<div class="line">    3.0000     3.0000</div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
</div><!-- fragment --> </div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Mon Sep 25 2023 12:35:28 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
    </ul>
</div>
</body>
</html>
