<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="https://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Array and Matrix Manipulation</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('matrixmanipulation.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Array and Matrix Manipulation </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>ArrayFire provides several different methods for <a class="el" href="group__manip__mat.htm">manipulating arrays and matrices</a>. The functionality includes:</p>
<ul>
<li><a class="el" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims()</a> - change the dimensions of an array without changing the data</li>
<li><a class="el" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0" title="Create an af::array object from an OpenCL cl_mem buffer. ">array()</a> - create a (shallow) copy of an array with different dimensions.</li>
<li><a class="el" href="group__manip__func__flat.htm#ga3ffcfce392c479bfcf2c6ddb5ebad5af">flat()</a> - flatten an array to one dimension</li>
<li><a class="el" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">flip()</a> - flip an array along a dimension</li>
<li><a class="el" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6" title="Join 2 arrays along dim. ">join()</a> - join up to 4 arrays</li>
<li><a class="el" href="group__manip__func__reorder.htm#ga72dd90d34aa18b85d9c944f62a2a48b9">reorder()</a> - changes the dimension order within the array</li>
<li><a class="el" href="group__manip__func__shift.htm#ga135facde87a8590d5341da6a8bb6606a">shift()</a> - shifts data along a dimension</li>
<li><a class="el" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile()</a> - repeats an array along a dimension</li>
<li><a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591" title="Transposes a matrix. ">transpose()</a> - performs a matrix transpose</li>
<li><a class="el" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T()</a> - transpose a matrix or vector (shorthand notation)</li>
<li><a class="el" href="classaf_1_1array.htm#a222cd421e1a99821609a17d54c9fc488">H()</a> - Hermitian Transpose (conjugate-transpose) a matrix</li>
</ul>
<p>Below we provide several examples of these functions and their use.</p>
<h2><a class="el" href="group__manip__func__flat.htm#ga3ffcfce392c479bfcf2c6ddb5ebad5af">flat()</a></h2>
<p>The <b><a class="el" href="group__manip__func__flat.htm#ga3ffcfce392c479bfcf2c6ddb5ebad5af">flat()</a></b> function flattens an array to one dimension:</p>
<div class="fragment"><div class="line">a [3 3 1 1]</div><div class="line">    1.0000     4.0000     7.0000</div><div class="line">    2.0000     5.0000     8.0000</div><div class="line">    3.0000     6.0000     9.0000</div><div class="line"></div><div class="line">flat(a) [9 1 1 1]</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    3.0000</div><div class="line">    4.0000</div><div class="line">    5.0000</div><div class="line">    6.0000</div><div class="line">    7.0000</div><div class="line">    8.0000</div><div class="line">    9.0000</div></div><!-- fragment --><p>The flat function can be called from C and C++ as follows:</p>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__manip__func__flat.htm#gac6dfb22cbd3b151ddffb9a4ddf74455e">af_flat(af_array* out, const af_array in)</a></b> &ndash; C interface for <a class="el" href="group__manip__func__flat.htm#ga3ffcfce392c479bfcf2c6ddb5ebad5af">flat()</a> function </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__flat.htm#ga3ffcfce392c479bfcf2c6ddb5ebad5af">af::flat(const array&amp; in)</a></b> &ndash; C++ interface for <a class="el" href="group__manip__func__flat.htm#ga3ffcfce392c479bfcf2c6ddb5ebad5af">flat()</a> function </p>
</blockquote>
<h2><a class="el" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">flip()</a></h2>
<p>The <b><a class="el" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">flip()</a></b> function flips the contents of an array along a chosen dimension. In the example below, we show the 5x2 array flipped along the zeroth (i.e. within a column) and first (e.g. across rows) axes:</p>
<div class="fragment"><div class="line">a [5 2 1 1]</div><div class="line">    1.0000     6.0000</div><div class="line">    2.0000     7.0000</div><div class="line">    3.0000     8.0000</div><div class="line">    4.0000     9.0000</div><div class="line">    5.0000    10.0000</div><div class="line"></div><div class="line">flip(a, 0) [5 2 1 1]</div><div class="line">    5.0000    10.0000</div><div class="line">    4.0000     9.0000</div><div class="line">    3.0000     8.0000</div><div class="line">    2.0000     7.0000</div><div class="line">    1.0000     6.0000</div><div class="line"></div><div class="line">flip(a, 1) [5 2 1 1]</div><div class="line">    6.0000     1.0000</div><div class="line">    7.0000     2.0000</div><div class="line">    8.0000     3.0000</div><div class="line">    9.0000     4.0000</div><div class="line">   10.0000     5.0000</div></div><!-- fragment --><p>The flip function can be called from C and C++ as follows:</p>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__manip__func__flip.htm#gac0795e2a4343ea8f897b3b7d23802ccb">af_flip(af_array *out, const af_array in, const unsigned dim)</a></b> &ndash; C interface for <a class="el" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">flip()</a> </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">af::flip(const array &amp;in, const unsigned dim)</a></b> &ndash; C++ interface for <a class="el" href="group__manip__func__flip.htm#ga1dcebf2f17837b217ee9e880d028dd18">flip()</a> </p>
</blockquote>
<h2><a class="el" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6" title="Join 2 arrays along dim. ">join()</a></h2>
<p>The <b><a class="el" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6" title="Join 2 arrays along dim. ">join()</a></b> function joins arrays along a specific dimension. The C++ interface can join up to four arrays whereas the C interface supports up to 10 arrays. Here is an example of how to use join an array to itself:</p>
<div class="fragment"><div class="line">a [5 1 1 1]</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    3.0000</div><div class="line">    4.0000</div><div class="line">    5.0000</div><div class="line"></div><div class="line">join(0, a, a) [10 1 1 1]</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    3.0000</div><div class="line">    4.0000</div><div class="line">    5.0000</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    3.0000</div><div class="line">    4.0000</div><div class="line">    5.0000</div><div class="line"></div><div class="line">join(1, a, a) [5 2 1 1]</div><div class="line">    1.0000     1.0000</div><div class="line">    2.0000     2.0000</div><div class="line">    3.0000     3.0000</div><div class="line">    4.0000     4.0000</div><div class="line">    5.0000     5.0000</div></div><!-- fragment --><p>The join function has several candidate functions in C:</p>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__manip__func__join.htm#ga4c0b185d13b49023cc22c0269eedbdb2" title="Join 2 arrays along dim. ">af_join(af_array *out, const int dim, const af_array first, const af_array second)</a></b> &ndash; C interface function to join 2 arrays along a dimension </p>
</blockquote>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__manip__func__join.htm#ga67a36384247f6bb40254e0cb2e6d5d5c" title="Join many arrays along dim. ">af_join_many(af_array *out, const int dim, const unsigned n_arrays, const af_array *inputs)</a></b> &ndash; C interface function to join up to 10 arrays along a dimension </p>
</blockquote>
<p>and in C++:</p>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6" title="Join 2 arrays along dim. ">af::join(const int dim, const array &amp;first, const array &amp;second)</a></b> &ndash; Joins 2 arrays along a dimension </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__join.htm#gafa6b5dfad79cde81bccee5551b4b152c" title="Join 3 arrays along dim. ">af::join(const int dim, const array &amp;first, const array &amp;second, const array &amp;third)</a></b> &ndash; Joins 3 arrays along a dimension. </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__join.htm#ga0bad6d30d8fbb8ee8698e4437c6deaf0" title="Join 4 arrays along dim. ">af::join(const int dim, const array &amp;first, const array &amp;second, const array &amp;third, const array &amp;fourth)</a></b> &ndash; Joins 4 arrays along a dimension </p>
</blockquote>
<h2><a class="el" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims()</a></h2>
<p>The <b><a class="el" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims()</a></b> function changes the dimensions of an array without changing its data or order. Note that this function modifies only the <em>metadata</em> associated with the array. It does not modify the content of the array. Here is an example of <a class="el" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims()</a> converting an 8x1 array into a 2x4 and then back to a 8x1:</p>
<div class="fragment"><div class="line">a [8 1 1 1]</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line"></div><div class="line">af::dim4 new_dims(2, 4);</div><div class="line"><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(a, new_dims) [2 4 1 1]</div><div class="line">    1.0000     1.0000     1.0000     1.0000</div><div class="line">    2.0000     2.0000     2.0000     2.0000</div><div class="line"></div><div class="line">moddims(a, a.elements(), 1, 1, 1) [8 1 1 1]</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    1.0000</div><div class="line">    2.0000</div></div><!-- fragment --><p>The moddims function has a single form in the C API:</p>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__manip__func__moddims.htm#ga50442cfa497c34054c3dc4404e92667a">af_moddims(af_array *out, const af_array in, const unsigned ndims, const dim_t *const dims)</a></b> &ndash; C interface to mod dimensions of an array </p>
</blockquote>
<p>And several overloaded candidates in the C++ API:</p>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims(const array &amp;in, const unsigned ndims, const dim_t *const dims)</a></b> &ndash; mods number of dimensions to match <em>ndims</em> as specidied in the array <em>dims</em> </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__moddims.htm#ga58dcbce7ee6dcca615a5ec4549d2dabc">af::moddims(const array &amp;in, const dim4 &amp;dims)</a></b> &ndash; mods dimensions as specified by <em>dims</em> </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">af::moddims</a>(const array &amp;in, const dim_t d0, const dim_t d1=1, const dim_t d2=1, const dim_t d3=1)</b> &ndash; mods dimensions of an array </p>
</blockquote>
<h2><a class="el" href="group__manip__func__reorder.htm#ga72dd90d34aa18b85d9c944f62a2a48b9">reorder()</a></h2>
<p>The <b><a class="el" href="group__manip__func__reorder.htm#ga72dd90d34aa18b85d9c944f62a2a48b9">reorder()</a></b> function modifies the order of data within an array by exchanging data according to the change in dimensionality. The linear ordering of data within the array is preserved.</p>
<div class="fragment"><div class="line">a [2 2 3 1]</div><div class="line">    1.0000     3.0000</div><div class="line">    2.0000     4.0000</div><div class="line"></div><div class="line">    1.0000     3.0000</div><div class="line">    2.0000     4.0000</div><div class="line"></div><div class="line">    1.0000     3.0000</div><div class="line">    2.0000     4.0000</div><div class="line"></div><div class="line"></div><div class="line">reorder(a, 1, 0, 2) [2 2 3 1]  <span class="comment">//equivalent to a transpose</span></div><div class="line">    1.0000     2.0000</div><div class="line">    3.0000     4.0000</div><div class="line"></div><div class="line">    1.0000     2.0000</div><div class="line">    3.0000     4.0000</div><div class="line"></div><div class="line">    1.0000     2.0000</div><div class="line">    3.0000     4.0000</div><div class="line"></div><div class="line"></div><div class="line">reorder(a, 2, 0, 1) [3 2 2 1]</div><div class="line">    1.0000     2.0000</div><div class="line">    1.0000     2.0000</div><div class="line">    1.0000     2.0000</div><div class="line"></div><div class="line">    3.0000     4.0000</div><div class="line">    3.0000     4.0000</div><div class="line">    3.0000     4.0000</div></div><!-- fragment --><p>The reorder function has several candidates functions in the C/C++ APIs:</p>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__manip__func__reorder.htm#ga57383f4d00a3a86eab08dddd52c3ad3d">af_reorder(af_array *out, const af_array in, const unsigned x, const unsigned y, const unsigned z, const unsigned w)</a></b> &ndash; C interface for reordering function </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__reorder.htm#ga72dd90d34aa18b85d9c944f62a2a48b9">af::reorder</a>(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=2, const unsigned w=3)</b> &ndash; Reorders dimensions of an array </p>
</blockquote>
<h2><a class="el" href="group__manip__func__shift.htm#ga135facde87a8590d5341da6a8bb6606a">shift()</a></h2>
<p>The <b><a class="el" href="group__manip__func__shift.htm#ga135facde87a8590d5341da6a8bb6606a">shift()</a></b> function shifts data in a circular buffer fashion along a chosen dimension. Consider the following example:</p>
<div class="fragment"><div class="line">a [3 5 1 1]</div><div class="line">    0.0000     0.0000     0.0000     0.0000     0.0000</div><div class="line">    3.0000     4.0000     5.0000     1.0000     2.0000</div><div class="line">    3.0000     4.0000     5.0000     1.0000     2.0000</div><div class="line"></div><div class="line">shift(a, 0, 2 ) [3 5 1 1]</div><div class="line">    0.0000     0.0000     0.0000     0.0000     0.0000</div><div class="line">    1.0000     2.0000     3.0000     4.0000     5.0000</div><div class="line">    1.0000     2.0000     3.0000     4.0000     5.0000</div><div class="line"></div><div class="line">shift(a, -1, 2 ) [3 5 1 1]</div><div class="line">    1.0000     2.0000     3.0000     4.0000     5.0000</div><div class="line">    1.0000     2.0000     3.0000     4.0000     5.0000</div><div class="line">    0.0000     0.0000     0.0000     0.0000     0.0000</div></div><!-- fragment --><p>The shift function can be called from C and C++ as follows:</p>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__manip__func__shift.htm#ga64a0cd7680b71e87f3ab372876153b66">af_shift(af_array *out, const af_array in, const int x, const int y, const int z, const int w)</a></b> &ndash; C interface for shifting an array </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__shift.htm#ga135facde87a8590d5341da6a8bb6606a">af::shift</a>(const array &amp;in, const int x, const int y=0, const int z=0, const int w=0)</b> &ndash; Shifts array along specified dimensions </p>
</blockquote>
<h2><a class="el" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile()</a></h2>
<p>The <b><a class="el" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile()</a></b> function repeats an array along the specified dimension. For example below we show how to tile an array along the zeroth and first dimensions of an array:</p>
<div class="fragment"><div class="line">a [3 1 1 1]</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    3.0000</div><div class="line"></div><div class="line"><span class="comment">// Repeat array a twice in the zeroth dimension</span></div><div class="line">tile(a, 2) [6 1 1 1]</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    3.0000</div><div class="line">    1.0000</div><div class="line">    2.0000</div><div class="line">    3.0000</div><div class="line"></div><div class="line"><span class="comment">// Repeat array a twice along both the zeroth and first dimensions</span></div><div class="line">tile(a, 2, 2) [6 2 1 1]</div><div class="line">    1.0000     1.0000</div><div class="line">    2.0000     2.0000</div><div class="line">    3.0000     3.0000</div><div class="line">    1.0000     1.0000</div><div class="line">    2.0000     2.0000</div><div class="line">    3.0000     3.0000</div><div class="line"></div><div class="line"><span class="comment">// Repeat array a twice along the first and three times along the second</span></div><div class="line"><span class="comment">// dimension.</span></div><div class="line">af::dim4 tile_dims(1, 2, 3);</div><div class="line"><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(a, tile_dims) [3 2 3 1]</div><div class="line">    1.0000     1.0000</div><div class="line">    2.0000     2.0000</div><div class="line">    3.0000     3.0000</div><div class="line"></div><div class="line">    1.0000     1.0000</div><div class="line">    2.0000     2.0000</div><div class="line">    3.0000     3.0000</div><div class="line"></div><div class="line">    1.0000     1.0000</div><div class="line">    2.0000     2.0000</div><div class="line">    3.0000     3.0000</div></div><!-- fragment --><p>The C interface for tile is as follows:</p>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__manip__func__tile.htm#ga3540329723c9876839e0c790075ab076">af_tile(af_array *out, const af_array in, const unsigned x, const unsigned y, const unsigned z, const unsigned w)</a></b> &ndash; C interface for tiling an array </p>
</blockquote>
<p>The C++ interface has two overloads</p>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">af::tile</a>(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</b> &ndash; Tiles array along specified dimensions </p>
</blockquote>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__manip__func__tile.htm#ga4ad03637a32c3c9999e34d565f1cb1b4">af::tile(const array &amp;in, const dim4 &amp;dims)</a></b> &ndash; Tile an array according to a dim4 object </p>
</blockquote>
<h2><a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591" title="Transposes a matrix. ">transpose()</a></h2>
<p>The <b><a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591" title="Transposes a matrix. ">transpose()</a></b> function performs a standard matrix transpose. The input array must have the dimensions of a 2D-matrix.</p>
<div class="fragment"><div class="line">a [3 3 1 1]</div><div class="line">    1.0000     3.0000     3.0000</div><div class="line">    2.0000     1.0000     3.0000</div><div class="line">    2.0000     2.0000     1.0000</div><div class="line"></div><div class="line">transpose(a) [3 3 1 1]</div><div class="line">    1.0000     2.0000     2.0000</div><div class="line">    3.0000     1.0000     2.0000</div><div class="line">    3.0000     3.0000     1.0000</div></div><!-- fragment --><p>The C interfaces for transpose are as follows:</p>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__blas__func__transpose.htm#ga716b2b9bf190c8f8d0970aef2b57d8e7" title="Transposes a matrix. ">af_transpose(af_array *out, af_array in, const bool conjugate)</a></b> &ndash; C interface to transpose a matrix. </p>
</blockquote>
<blockquote class="doxtable">
<p><b>af_err <a class="el" href="group__blas__func__transpose.htm#gaecab5fdf0b525f47115be24ade4f4d5b" title="Transposes a matrix in-place. ">af_transpose_inplace(af_array in, const bool conjugate)</a></b> &ndash; C interface to transpose a matrix in-place. </p>
</blockquote>
<p>The C++ interface has two primary functions and two shorthand versions:</p>
<blockquote class="doxtable">
<p><b>array <a class="el" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591" title="Transposes a matrix. ">af::transpose</a>(const array &amp;in, const bool conjugate=false)</b> &ndash; Transposes a matrix. </p>
</blockquote>
<blockquote class="doxtable">
<p><b>void <a class="el" href="group__blas__func__transpose.htm#gae77f8ba484534fe5bf85c73f8641c133" title="Transposes a matrix in-place. ">af::transposeInPlace</a>(array &amp;in, const bool conjugate=false)</b> &ndash; Transposes a matrix in-place. </p>
</blockquote>
<blockquote class="doxtable">
<p>__array af::T() &ndash; Transpose a matrix </p>
</blockquote>
<blockquote class="doxtable">
<p>__array af::H() &ndash; Conjugate Transpose (Hermitian transpose) of a matrix </p>
</blockquote>
<p>Here is an example of how the shorthand versions might be used:</p>
<div class="fragment"><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> x = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(2, 2, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a82ea90203678bdd0b547068f0a76524b">f32</a>);</div><div class="line">    <a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(x.T());  <span class="comment">// transpose (real)</span></div><div class="line"></div><div class="line">    <a class="code" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> c = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(2, 2, <a class="code" href="defines_8h.htm#a023d8ac325fb14f1712a52fb0940b1d5a994ac20239e3eba6122cafb2eb21f23f">c32</a>);</div><div class="line">    <a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(c.T());  <span class="comment">// transpose (complex)</span></div><div class="line">    <a class="code" href="util_8h.htm#a6de8e7f9eb3914d1cea66e55e7b791d3">af_print</a>(c.H());  <span class="comment">// Hermitian (conjugate) transpose</span></div></div><!-- fragment --> <h2><a class="el" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0" title="Create an af::array object from an OpenCL cl_mem buffer. ">array()</a></h2>
<p><a class="el" href="classaf_1_1array.htm">array()</a> can be used to create a (shallow) copy of a matrix with different dimensions. The total number of elements must remain the same. This function is a wrapper over the <a class="el" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims()</a> function discussed earlier.</p>
<h1>Combining re-ordering functions to enumerate grid coordinates</h1>
<p>By using a combination of the array restructuring functions, one can quickly code complex manipulation patterns with a few lines of code. For example, consider generating (<em>x,y</em>) coordinates for a grid where each axis goes from <em>1 to n</em>. Instead of using several loops to populate our arrays we can just use a small combination of the above functions.</p>
<div class="fragment"><div class="line"><span class="keywordtype">unsigned</span> n=3;</div><div class="line"><a class="code" href="classaf_1_1array.htm">af::array</a> xy = <a class="code" href="group__manip__func__join.htm#ga9f30f3f556ae3165d3b7b6ec6ca43dc6">join</a>(1,</div><div class="line">                <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(seq(1, n), n),</div><div class="line">                <a class="code" href="group__manip__func__flat.htm#ga3ffcfce392c479bfcf2c6ddb5ebad5af">flat</a>( <a class="code" href="group__blas__func__transpose.htm#ga63a8e47707874b9d2ba9b9af0b159591">transpose</a>(<a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(seq(1, n), 1, n)) )</div><div class="line">                   );</div><div class="line">xy [9 2 1 1]</div><div class="line">    1.0000     1.0000</div><div class="line">    2.0000     1.0000</div><div class="line">    3.0000     1.0000</div><div class="line">    1.0000     2.0000</div><div class="line">    2.0000     2.0000</div><div class="line">    3.0000     2.0000</div><div class="line">    1.0000     3.0000</div><div class="line">    2.0000     3.0000</div><div class="line">    3.0000     3.0000</div></div><!-- fragment --> </div></div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "https://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "https://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
