<!-- HTML header for doxygen 1.8.17-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: Convolutions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
   <td id="gsearch">
       <div><script>
             (function() {
                 var cx = '004356362924927882526:zup3ehe-7bs';
                 var gcse = document.createElement('script');
                 gcse.type = 'text/javascript';
                 gcse.async = true;
                 gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                            '//www.google.com/cse/cse.js?cx=' + cx;
                 var s = document.getElementsByTagName('script')[0];
                 s.parentNode.insertBefore(gcse, s);
             })();
       </script>
       <gcse:search></gcse:search>
       <div>
   </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('group__ml__convolution.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Convolutions<div class="ingroups"><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__ml.htm">Machine Learning</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Forward and backward convolution passes.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaad86c9831ef20ca900eae5e094da9764"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ml__convolution.htm#gaad86c9831ef20ca900eae5e094da9764">convolve2GradientNN</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;incoming_gradient, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;original_signal, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;original_filter, const <a class="el" href="classaf_1_1array.htm">array</a> &amp;convolved_output, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> stride, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> padding, const <a class="el" href="classaf_1_1dim4.htm">dim4</a> dilation, <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">convGradientType</a> grad_type)</td></tr>
<tr class="memdesc:gaad86c9831ef20ca900eae5e094da9764"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ interface for calculating backward pass gradient of 2D convolution This function calculates the gradient with respect to the output of the <a class="el" href="group__signal__func__convolve2.htm#ga8a6da9b0bf8e0287d71d02e2cd763cde">convolve2NN()</a> function that uses the machine learning formulation for the dimensions of the signals and filters.  <a href="group__ml__convolution.htm#gaad86c9831ef20ca900eae5e094da9764">More...</a><br /></td></tr>
<tr class="separator:gaad86c9831ef20ca900eae5e094da9764"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3dc8cbebcec76e5c1804ff377b4e1cfd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ml__convolution.htm#ga3dc8cbebcec76e5c1804ff377b4e1cfd">af_convolve2_gradient_nn</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> incoming_gradient, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> original_signal, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> original_filter, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> convolved_output, const unsigned stride_dims, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *strides, const unsigned padding_dims, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *paddings, const unsigned dilation_dims, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *dilations, <a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">af_conv_gradient_type</a> grad_type)</td></tr>
<tr class="memdesc:ga3dc8cbebcec76e5c1804ff377b4e1cfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">C interface for calculating backward pass gradient of 2D convolution This function calculates the gradient with respect to the output of the <a class="el" href="group__signal__func__convolve2.htm#ga8a6da9b0bf8e0287d71d02e2cd763cde">convolve2NN()</a> function that uses the machine learning formulation for the dimensions of the signals and filters.  <a href="group__ml__convolution.htm#ga3dc8cbebcec76e5c1804ff377b4e1cfd">More...</a><br /></td></tr>
<tr class="separator:ga3dc8cbebcec76e5c1804ff377b4e1cfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Forward and backward convolution passes. </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga3dc8cbebcec76e5c1804ff377b4e1cfd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3dc8cbebcec76e5c1804ff377b4e1cfd">&#9670;&nbsp;</a></span>af_convolve2_gradient_nn()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_convolve2_gradient_nn </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>incoming_gradient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>original_signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>original_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>convolved_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>stride_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>padding_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>paddings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>dilation_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> *&#160;</td>
          <td class="paramname"><em>dilations</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">af_conv_gradient_type</a>&#160;</td>
          <td class="paramname"><em>grad_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C interface for calculating backward pass gradient of 2D convolution This function calculates the gradient with respect to the output of the <a class="el" href="group__signal__func__convolve2.htm#ga8a6da9b0bf8e0287d71d02e2cd763cde">convolve2NN()</a> function that uses the machine learning formulation for the dimensions of the signals and filters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>gradient wrt/gradType </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">incoming_gradient</td><td>gradients to be distributed in backwards pass </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">original_signal</td><td>input signal to forward pass of convolution assumed structure of input is ( d0 x d1 x d2 x N ) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">original_filter</td><td>input filter to forward pass of convolution assumed structure of input is ( d0 x d1 x d2 x N ) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">convolved_output</td><td>output from forward pass of convolution </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stride_dims</td><td>specifies number of stride dimensions </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td>array of stride values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding_dims</td><td>number of padding dimensions </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">paddings</td><td>array of padding values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_dims</td><td>number of dilation dimensions </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilations</td><td>array of dilation values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grad_type</td><td>specifies which gradient to return </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the execution completes properly </dd></dl>

</div>
</div>
<a id="gaad86c9831ef20ca900eae5e094da9764"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaad86c9831ef20ca900eae5e094da9764">&#9670;&nbsp;</a></span>convolve2GradientNN()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::convolve2GradientNN </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>incoming_gradient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>original_signal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>original_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>convolved_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td>
          <td class="paramname"><em>stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td>
          <td class="paramname"><em>padding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classaf_1_1dim4.htm">dim4</a>&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#af2ee654bfa6f343bfc8662f8a48a07c7">convGradientType</a>&#160;</td>
          <td class="paramname"><em>grad_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ interface for calculating backward pass gradient of 2D convolution This function calculates the gradient with respect to the output of the <a class="el" href="group__signal__func__convolve2.htm#ga8a6da9b0bf8e0287d71d02e2cd763cde">convolve2NN()</a> function that uses the machine learning formulation for the dimensions of the signals and filters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">incoming_gradient</td><td>gradients to be distributed in backwards pass </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">original_signal</td><td>input signal to forward pass of convolution assumed structure of input is ( d0 x d1 x d2 x N ) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">original_filter</td><td>input filter to forward pass of convolution assumed structure of input is ( d0 x d1 x d2 x N ) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">convolved_output</td><td>output from forward pass of convolution </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stride</td><td>specifies strides along each dimension for original convolution </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>specifies padding width along each dimension for original convolution </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation</td><td>specifies filter dilation along each dimension for original convolution </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">grad_type</td><td>specifies which gradient to return </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>gradient wrt/grad_type </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
