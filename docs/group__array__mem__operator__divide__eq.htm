<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: operator/=</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__array__mem__operator__divide__eq.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">operator/=<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a> &raquo; <a class="el" href="group__index__mat.htm">Assignment &amp; Indexing operation on arrays</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Divides and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="memitem:ga5427da3aadae8a77bb050c263f3dda7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga5427da3aadae8a77bb050c263f3dda7e">operator/=</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;val)</td></tr>
<tr class="memdesc:ga5427da3aadae8a77bb050c263f3dda7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.  <br /></td></tr>
<tr class="separator:ga5427da3aadae8a77bb050c263f3dda7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5dca13ef6e10eb4576ec372c5d37da55"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga5dca13ef6e10eb4576ec372c5d37da55">operator/=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:ga5dca13ef6e10eb4576ec372c5d37da55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga5dca13ef6e10eb4576ec372c5d37da55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa53ff71ffefef0f5c107cd251b960221"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaa53ff71ffefef0f5c107cd251b960221">operator/=</a> (const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;val)</td></tr>
<tr class="memdesc:gaa53ff71ffefef0f5c107cd251b960221"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:gaa53ff71ffefef0f5c107cd251b960221"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga617ce0b211d70f220beb438de48d8cbc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga617ce0b211d70f220beb438de48d8cbc">operator/=</a> (const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;val)</td></tr>
<tr class="memdesc:ga617ce0b211d70f220beb438de48d8cbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga617ce0b211d70f220beb438de48d8cbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e5482c47bf25984b33786f8f8958c56"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga0e5482c47bf25984b33786f8f8958c56">operator/=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:ga0e5482c47bf25984b33786f8f8958c56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga0e5482c47bf25984b33786f8f8958c56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b898c4c4f90f7930231ceaed412f82c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga0b898c4c4f90f7930231ceaed412f82c">operator/=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:ga0b898c4c4f90f7930231ceaed412f82c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga0b898c4c4f90f7930231ceaed412f82c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf148bdd2bd488097f442dcbceb57c285"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaf148bdd2bd488097f442dcbceb57c285">operator/=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:gaf148bdd2bd488097f442dcbceb57c285"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:gaf148bdd2bd488097f442dcbceb57c285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9abb662dd064c2db8a42feaffe873eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaa9abb662dd064c2db8a42feaffe873eb">operator/=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:gaa9abb662dd064c2db8a42feaffe873eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:gaa9abb662dd064c2db8a42feaffe873eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f8fceb57338fd56f1c0d4cf790179de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga2f8fceb57338fd56f1c0d4cf790179de">operator/=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:ga2f8fceb57338fd56f1c0d4cf790179de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga2f8fceb57338fd56f1c0d4cf790179de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac06f974077381f515cebf63980d68429"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gac06f974077381f515cebf63980d68429">operator/=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:gac06f974077381f515cebf63980d68429"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:gac06f974077381f515cebf63980d68429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0239a6e92fc7f4d89ad99da51a2f1fc3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga0239a6e92fc7f4d89ad99da51a2f1fc3">operator/=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:ga0239a6e92fc7f4d89ad99da51a2f1fc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga0239a6e92fc7f4d89ad99da51a2f1fc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga242773b4f945aad100dbba4e81f7266e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga242773b4f945aad100dbba4e81f7266e">operator/=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:ga242773b4f945aad100dbba4e81f7266e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga242773b4f945aad100dbba4e81f7266e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6badd884a0c98ebcd1ecd077a9065ca3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga6badd884a0c98ebcd1ecd077a9065ca3">operator/=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:ga6badd884a0c98ebcd1ecd077a9065ca3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga6badd884a0c98ebcd1ecd077a9065ca3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7aeb216db19134023563bbf007175f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaf7aeb216db19134023563bbf007175f6">operator/=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="separator:gaf7aeb216db19134023563bbf007175f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga22e227ab59d17a3ab5cfe78d8e8ab324"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga22e227ab59d17a3ab5cfe78d8e8ab324">operator/=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:ga22e227ab59d17a3ab5cfe78d8e8ab324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.    <br /></td></tr>
<tr class="separator:ga22e227ab59d17a3ab5cfe78d8e8ab324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2ca862b693fae07c10deb0b33d938368"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga2ca862b693fae07c10deb0b33d938368">operator/=</a> (const unsigned short &amp;val)</td></tr>
<tr class="separator:ga2ca862b693fae07c10deb0b33d938368"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Divides and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a>. </p>
<p>Divides and assigns values </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga5427da3aadae8a77bb050c263f3dda7e" name="ga5427da3aadae8a77bb050c263f3dda7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5427da3aadae8a77bb050c263f3dda7e">&#9670;&#160;</a></span>operator/=() <span class="overload">[1/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a id="gaa9abb662dd064c2db8a42feaffe873eb" name="gaa9abb662dd064c2db8a42feaffe873eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa9abb662dd064c2db8a42feaffe873eb">&#9670;&#160;</a></span>operator/=() <span class="overload">[2/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="gaa53ff71ffefef0f5c107cd251b960221" name="gaa53ff71ffefef0f5c107cd251b960221"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa53ff71ffefef0f5c107cd251b960221">&#9670;&#160;</a></span>operator/=() <span class="overload">[3/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga617ce0b211d70f220beb438de48d8cbc" name="ga617ce0b211d70f220beb438de48d8cbc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga617ce0b211d70f220beb438de48d8cbc">&#9670;&#160;</a></span>operator/=() <span class="overload">[4/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga2f8fceb57338fd56f1c0d4cf790179de" name="ga2f8fceb57338fd56f1c0d4cf790179de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2f8fceb57338fd56f1c0d4cf790179de">&#9670;&#160;</a></span>operator/=() <span class="overload">[5/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga5dca13ef6e10eb4576ec372c5d37da55" name="ga5dca13ef6e10eb4576ec372c5d37da55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5dca13ef6e10eb4576ec372c5d37da55">&#9670;&#160;</a></span>operator/=() <span class="overload">[6/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga0e5482c47bf25984b33786f8f8958c56" name="ga0e5482c47bf25984b33786f8f8958c56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0e5482c47bf25984b33786f8f8958c56">&#9670;&#160;</a></span>operator/=() <span class="overload">[7/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga0b898c4c4f90f7930231ceaed412f82c" name="ga0b898c4c4f90f7930231ceaed412f82c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0b898c4c4f90f7930231ceaed412f82c">&#9670;&#160;</a></span>operator/=() <span class="overload">[8/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga0239a6e92fc7f4d89ad99da51a2f1fc3" name="ga0239a6e92fc7f4d89ad99da51a2f1fc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0239a6e92fc7f4d89ad99da51a2f1fc3">&#9670;&#160;</a></span>operator/=() <span class="overload">[9/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga6badd884a0c98ebcd1ecd077a9065ca3" name="ga6badd884a0c98ebcd1ecd077a9065ca3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6badd884a0c98ebcd1ecd077a9065ca3">&#9670;&#160;</a></span>operator/=() <span class="overload">[10/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga22e227ab59d17a3ab5cfe78d8e8ab324" name="ga22e227ab59d17a3ab5cfe78d8e8ab324"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga22e227ab59d17a3ab5cfe78d8e8ab324">&#9670;&#160;</a></span>operator/=() <span class="overload">[11/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="gaf148bdd2bd488097f442dcbceb57c285" name="gaf148bdd2bd488097f442dcbceb57c285"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf148bdd2bd488097f442dcbceb57c285">&#9670;&#160;</a></span>operator/=() <span class="overload">[12/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="gac06f974077381f515cebf63980d68429" name="gac06f974077381f515cebf63980d68429"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac06f974077381f515cebf63980d68429">&#9670;&#160;</a></span>operator/=() <span class="overload">[13/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="ga242773b4f945aad100dbba4e81f7266e" name="ga242773b4f945aad100dbba4e81f7266e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga242773b4f945aad100dbba4e81f7266e">&#9670;&#160;</a></span>operator/=() <span class="overload">[14/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array.   </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container.">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side.   </dd></dl>

</div>
</div>
<a id="gaf7aeb216db19134023563bbf007175f6" name="gaf7aeb216db19134023563bbf007175f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf7aeb216db19134023563bbf007175f6">&#9670;&#160;</a></span>operator/=() <span class="overload">[15/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga2ca862b693fae07c10deb0b33d938368" name="ga2ca862b693fae07c10deb0b33d938368"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2ca862b693fae07c10deb0b33d938368">&#9670;&#160;</a></span>operator/=() <span class="overload">[16/16]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classaf_1_1array.htm">array</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Tue Feb 14 2023 10:39:42 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
    </ul>
</div>
</body>
</html>
