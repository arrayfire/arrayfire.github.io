<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>operator/=</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__array__mem__operator__divide__eq.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">operator/=<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__array__mat.htm">Functions to create and modify Arrays</a> &raquo;  &#124; <a class="el" href="group__index__mat.htm">Assignment &amp; Indexing operation on arrays</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Divides and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a>.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="memitem:gab856e9564b30bb3fb97fa7785892250f"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gab856e9564b30bb3fb97fa7785892250f">operator/=</a> (const array &amp;val)</td></tr>
<tr class="memdesc:gab856e9564b30bb3fb97fa7785892250f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array.  <a href="#gab856e9564b30bb3fb97fa7785892250f">More...</a><br /></td></tr>
<tr class="separator:gab856e9564b30bb3fb97fa7785892250f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacde65596e0dca0e0a9400dd8c8ce6629"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gacde65596e0dca0e0a9400dd8c8ce6629">operator/=</a> (const double &amp;val)</td></tr>
<tr class="memdesc:gacde65596e0dca0e0a9400dd8c8ce6629"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#gacde65596e0dca0e0a9400dd8c8ce6629">More...</a><br /></td></tr>
<tr class="separator:gacde65596e0dca0e0a9400dd8c8ce6629"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b3865db145f814132e286d64a3b0a62"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga5b3865db145f814132e286d64a3b0a62">operator/=</a> (const cdouble &amp;val)</td></tr>
<tr class="memdesc:ga5b3865db145f814132e286d64a3b0a62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#ga5b3865db145f814132e286d64a3b0a62">More...</a><br /></td></tr>
<tr class="separator:ga5b3865db145f814132e286d64a3b0a62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3291ea715aac58592719a1aedcfe240"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gaf3291ea715aac58592719a1aedcfe240">operator/=</a> (const cfloat &amp;val)</td></tr>
<tr class="memdesc:gaf3291ea715aac58592719a1aedcfe240"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#gaf3291ea715aac58592719a1aedcfe240">More...</a><br /></td></tr>
<tr class="separator:gaf3291ea715aac58592719a1aedcfe240"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae869cac7cc8a1ed4e19b21b3f9ba7218"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gae869cac7cc8a1ed4e19b21b3f9ba7218">operator/=</a> (const float &amp;val)</td></tr>
<tr class="memdesc:gae869cac7cc8a1ed4e19b21b3f9ba7218"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#gae869cac7cc8a1ed4e19b21b3f9ba7218">More...</a><br /></td></tr>
<tr class="separator:gae869cac7cc8a1ed4e19b21b3f9ba7218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace39001f0df1842d5d9b6670f9d914bb"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gace39001f0df1842d5d9b6670f9d914bb">operator/=</a> (const int &amp;val)</td></tr>
<tr class="memdesc:gace39001f0df1842d5d9b6670f9d914bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#gace39001f0df1842d5d9b6670f9d914bb">More...</a><br /></td></tr>
<tr class="separator:gace39001f0df1842d5d9b6670f9d914bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2c026486bb890df4f80d3206d7a5be93"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga2c026486bb890df4f80d3206d7a5be93">operator/=</a> (const unsigned &amp;val)</td></tr>
<tr class="memdesc:ga2c026486bb890df4f80d3206d7a5be93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#ga2c026486bb890df4f80d3206d7a5be93">More...</a><br /></td></tr>
<tr class="separator:ga2c026486bb890df4f80d3206d7a5be93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb16971a1f990c4eb55a0f9cba2c4bc6"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gafb16971a1f990c4eb55a0f9cba2c4bc6">operator/=</a> (const bool &amp;val)</td></tr>
<tr class="memdesc:gafb16971a1f990c4eb55a0f9cba2c4bc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#gafb16971a1f990c4eb55a0f9cba2c4bc6">More...</a><br /></td></tr>
<tr class="separator:gafb16971a1f990c4eb55a0f9cba2c4bc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9089899d5d5be192c4503fb3e8b7c76a"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga9089899d5d5be192c4503fb3e8b7c76a">operator/=</a> (const char &amp;val)</td></tr>
<tr class="memdesc:ga9089899d5d5be192c4503fb3e8b7c76a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#ga9089899d5d5be192c4503fb3e8b7c76a">More...</a><br /></td></tr>
<tr class="separator:ga9089899d5d5be192c4503fb3e8b7c76a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68b18772c8fd83de4a61c0568f7e886d"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga68b18772c8fd83de4a61c0568f7e886d">operator/=</a> (const unsigned char &amp;val)</td></tr>
<tr class="memdesc:ga68b18772c8fd83de4a61c0568f7e886d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#ga68b18772c8fd83de4a61c0568f7e886d">More...</a><br /></td></tr>
<tr class="separator:ga68b18772c8fd83de4a61c0568f7e886d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17ab325267a303ca47d4630d356dfd13"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga17ab325267a303ca47d4630d356dfd13">operator/=</a> (const long &amp;val)</td></tr>
<tr class="memdesc:ga17ab325267a303ca47d4630d356dfd13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#ga17ab325267a303ca47d4630d356dfd13">More...</a><br /></td></tr>
<tr class="separator:ga17ab325267a303ca47d4630d356dfd13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ece56e8cdcac0d772e68d6b9a8b90be"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga3ece56e8cdcac0d772e68d6b9a8b90be">operator/=</a> (const unsigned long &amp;val)</td></tr>
<tr class="memdesc:ga3ece56e8cdcac0d772e68d6b9a8b90be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#ga3ece56e8cdcac0d772e68d6b9a8b90be">More...</a><br /></td></tr>
<tr class="separator:ga3ece56e8cdcac0d772e68d6b9a8b90be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadc087343a716470531fd834fa7f0ee82"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gadc087343a716470531fd834fa7f0ee82">operator/=</a> (const long long &amp;val)</td></tr>
<tr class="memdesc:gadc087343a716470531fd834fa7f0ee82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#gadc087343a716470531fd834fa7f0ee82">More...</a><br /></td></tr>
<tr class="separator:gadc087343a716470531fd834fa7f0ee82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga031b97d389fcea6a5b20ac4b77ad38b2"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#ga031b97d389fcea6a5b20ac4b77ad38b2">operator/=</a> (const unsigned long long &amp;val)</td></tr>
<tr class="memdesc:ga031b97d389fcea6a5b20ac4b77ad38b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#ga031b97d389fcea6a5b20ac4b77ad38b2">More...</a><br /></td></tr>
<tr class="separator:ga031b97d389fcea6a5b20ac4b77ad38b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafea9e18f43968573441b2e5d480dcc88"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gafea9e18f43968573441b2e5d480dcc88">operator/=</a> (const short &amp;val)</td></tr>
<tr class="memdesc:gafea9e18f43968573441b2e5d480dcc88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#gafea9e18f43968573441b2e5d480dcc88">More...</a><br /></td></tr>
<tr class="separator:gafea9e18f43968573441b2e5d480dcc88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad746f23051f437177575d78e9c723d9c"><td class="memItemLeft" align="right" valign="top">array &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__array__mem__operator__divide__eq.htm#gad746f23051f437177575d78e9c723d9c">operator/=</a> (const unsigned short &amp;val)</td></tr>
<tr class="memdesc:gad746f23051f437177575d78e9c723d9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides the value(s) of val to the elements of the array. (const array &amp;)  <a href="#gad746f23051f437177575d78e9c723d9c">More...</a><br /></td></tr>
<tr class="separator:gad746f23051f437177575d78e9c723d9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Divides and assigns the value(s) of val to the elements of the <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a>. </p>
<p>Divides and assigns values </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gab856e9564b30bb3fb97fa7785892250f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. </dd></dl>

</div>
</div>
<a class="anchor" id="gad746f23051f437177575d78e9c723d9c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned short &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafea9e18f43968573441b2e5d480dcc88"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const short &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga031b97d389fcea6a5b20ac4b77ad38b2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned long long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gadc087343a716470531fd834fa7f0ee82"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const long long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga3ece56e8cdcac0d772e68d6b9a8b90be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga17ab325267a303ca47d4630d356dfd13"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga68b18772c8fd83de4a61c0568f7e886d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned char &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga9089899d5d5be192c4503fb3e8b7c76a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const char &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gafb16971a1f990c4eb55a0f9cba2c4bc6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga2c026486bb890df4f80d3206d7a5be93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const unsigned &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gace39001f0df1842d5d9b6670f9d914bb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gae869cac7cc8a1ed4e19b21b3f9ba7218"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gaf3291ea715aac58592719a1aedcfe240"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#a63e29e484b92e217fe817fe78abc4f5f">cfloat</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="ga5b3865db145f814132e286d64a3b0a62"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceaf.htm#acd654c72624253fcd7fd88fe5298aa9a">cdouble</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
<a class="anchor" id="gacde65596e0dca0e0a9400dd8c8ce6629"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">array&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides the value(s) of val to the elements of the array. (const array &amp;) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>is the value to be assigned to the /ref <a class="el" href="classaf_1_1array.htm" title="A multi dimensional data container. ">af::array</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference to this</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This is a copy on write operation. The copy only occurs when the operator() is used on the left hand side. (const array &amp;) </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
