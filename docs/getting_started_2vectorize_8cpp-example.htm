<!-- HTML header for doxygen 1.9.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: getting_started/vectorize.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeInteractiveToc.init()
	DoxygenAwesomeFragmentCopyButton.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="2" cellpadding="2" width="100%">
 <tbody>
  <tr id="projectrow">
  <td id="projectlogo"><a  href="index.htm"><img alt="Logo" src="arrayfire_logo.png"/></a></td>
  </tr>
  <tr id="projectrow">
  <td>
  <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>
  </tr>
  <!--END !PROJECT_NAME-->
  <div>
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
  </div>
 </tr>
 <tr>
  <td>
    <div id="togglediv"></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part --><!-- Generated by Doxygen 1.9.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('getting_started_2vectorize_8cpp-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle"><div class="title">getting_started/vectorize.cpp</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div>
<div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div>
<div class="line"><span class="comment"> * All rights reserved.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div>
<div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div>
<div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div>
<div class="line"><span class="comment"> ********************************************************/</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span><a class="code hl_namespace" href="namespaceaf.htm">af</a>;</div>
<div class="line"> </div>
<div class="line"><a id="_a0" name="_a0"></a><a class="code hl_class" href="classaf_1_1array.htm">array</a> A, B;</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_naive(<a class="code hl_class" href="classaf_1_1array.htm">array</a> a, <a class="code hl_class" href="classaf_1_1array.htm">array</a> b) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_mat = constant(0, a.<a id="a1" name="a1"></a><a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), (<span class="keywordtype">int</span>)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Iterate through columns a</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; (int)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); ii++) {</div>
<div class="line">        <span class="comment">// Iterate through columns of b</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> jj = 0; jj &lt; (int)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); jj++) {</div>
<div class="line">            <span class="comment">// Get the sum of absolute differences</span></div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> kk = 0; kk &lt; (int)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0); kk++) {</div>
<div class="line">                dist_mat(ii, jj) += abs(a(kk, ii) - b(kk, jj));</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> dist_mat;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_vec(<a class="code hl_class" href="classaf_1_1array.htm">array</a> a, <a class="code hl_class" href="classaf_1_1array.htm">array</a> b) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_mat = constant(0, (<span class="keywordtype">int</span>)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), (<span class="keywordtype">int</span>)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Iterate through columns a</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; (int)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); ii++) {</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> avec = a(span, ii);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Iterate through columns of b</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> jj = 0; jj &lt; (int)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); jj++) {</div>
<div class="line">            <a class="code hl_class" href="classaf_1_1array.htm">array</a> bvec = b(span, jj);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// get SAD using sum on the vector</span></div>
<div class="line">            dist_mat(ii, jj) = sum(abs(avec - bvec));</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> dist_mat;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_gfor1(<a class="code hl_class" href="classaf_1_1array.htm">array</a> a, <a class="code hl_class" href="classaf_1_1array.htm">array</a> b) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(0, (<span class="keywordtype">int</span>)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), (<span class="keywordtype">int</span>)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// GFOR along columns of a</span></div>
<div class="line">    <a id="a2" name="a2"></a><a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a>(<a id="_a3" name="_a3"></a><a class="code hl_class" href="classaf_1_1seq.htm">seq</a> ii, (<span class="keywordtype">int</span>)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)) {</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> avec = a(span, ii);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Itere through columns of b</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> jj = 0; jj &lt; (int)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); jj++) {</div>
<div class="line">            <a class="code hl_class" href="classaf_1_1array.htm">array</a> bvec = b(span, jj);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// get SAD using sum on the vector</span></div>
<div class="line">            dist_mat(ii, jj) = <a class="code hl_function" href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">sum</a>(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(avec - bvec));</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> dist_mat;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_gfor2(<a class="code hl_class" href="classaf_1_1array.htm">array</a> a, <a class="code hl_class" href="classaf_1_1array.htm">array</a> b) {</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(0, (<span class="keywordtype">int</span>)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), (<span class="keywordtype">int</span>)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// GFOR along columns of b</span></div>
<div class="line">    <a class="code hl_define" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a>(<a class="code hl_class" href="classaf_1_1seq.htm">seq</a> jj, (<span class="keywordtype">int</span>)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)) {</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> bvec = b(span, jj);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Iterate through columns of A</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; (int)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); ii++) {</div>
<div class="line">            <a class="code hl_class" href="classaf_1_1array.htm">array</a> avec = a(span, ii);</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// get SAD using sum on the vector</span></div>
<div class="line">            dist_mat(ii, jj) = <a class="code hl_function" href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">sum</a>(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(avec - bvec));</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> dist_mat;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_tile1(<a class="code hl_class" href="classaf_1_1array.htm">array</a> a, <a class="code hl_class" href="classaf_1_1array.htm">array</a> b) {</div>
<div class="line">    <span class="comment">// int feat_len = (int)a.dims(0); // Same as (int)b.dims(0);</span></div>
<div class="line">    <span class="keywordtype">int</span> alen = (int)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div>
<div class="line">    <span class="keywordtype">int</span> blen = (int)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div>
<div class="line"> </div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code hl_function" href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">constant</a>(0, alen, blen);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Iterate through columns of b</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> jj = 0; jj &lt; blen; jj++) {</div>
<div class="line">        <span class="comment">// Get the column vector of b</span></div>
<div class="line">        <span class="comment">// shape of bvec is (feat_len, 1)</span></div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> bvec = b(span, jj);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Tile avec to be same size as a</span></div>
<div class="line">        <span class="comment">// shape of bvec_tiled is (feat_len, alen)</span></div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> bvec_tiled = <a class="code hl_function" href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">tile</a>(bvec, 1, alen);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Get the sum of absolute differences</span></div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> sad = <a class="code hl_function" href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">sum</a>(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(bvec_tiled - a));</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// sad is row vector, dist_mat needs column vector</span></div>
<div class="line">        <span class="comment">// transpose sad and fill in dist_mat</span></div>
<div class="line">        dist_mat(span, jj) = sad.<a id="a4" name="a4"></a><a class="code hl_function" href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">T</a>();</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> dist_mat;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_tile2(<a class="code hl_class" href="classaf_1_1array.htm">array</a> a, <a class="code hl_class" href="classaf_1_1array.htm">array</a> b) {</div>
<div class="line">    <span class="keywordtype">int</span> feat_len = (int)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div>
<div class="line">    <span class="keywordtype">int</span> alen     = (int)a.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div>
<div class="line">    <span class="keywordtype">int</span> blen     = (int)b.<a class="code hl_function" href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Shape of a is (feat_len, alen, 1)</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> a_mod = a;</div>
<div class="line">    <span class="comment">// Reshape b from (feat_len, blen) to (feat_len, 1, blen)</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> b_mod = <a class="code hl_function" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">moddims</a>(b, feat_len, 1, blen);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Tile both matrices to be (feat_len, alen, blen)</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> a_tiled = <a class="code hl_function" href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">tile</a>(a_mod, 1, 1, blen);</div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> b_tiled = <a class="code hl_function" href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">tile</a>(b_mod, 1, alen, 1);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Do The sum operation along first dimension</span></div>
<div class="line">    <span class="comment">// Output is of shape (1, alen, blen)</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_mod = <a class="code hl_function" href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">sum</a>(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(a_tiled - b_tiled));</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Reshape dist_mat from (1, alen, blen) to (alen, blen)</span></div>
<div class="line">    <a class="code hl_class" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code hl_function" href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">moddims</a>(dist_mod, alen, blen);</div>
<div class="line">    <span class="keywordflow">return</span> dist_mat;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_naive() { dist_naive(A, B); }</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_vec() { dist_vec(A, B); }</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_gfor1() { dist_gfor1(A, B); }</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_gfor2() { dist_gfor2(A, B); }</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_tile1() { dist_tile1(A, B); }</div>
<div class="line"> </div>
<div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_tile2() { dist_tile2(A, B); }</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span>, <span class="keywordtype">char</span> **) {</div>
<div class="line">    <span class="keywordflow">try</span> {</div>
<div class="line">        <a id="a5" name="a5"></a><a class="code hl_function" href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a>();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Do not increase the sizes</span></div>
<div class="line">        <span class="comment">// dist_naive and dist_vec get too slow at large sizes</span></div>
<div class="line">        A = <a class="code hl_function" href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">randu</a>(3, 200);</div>
<div class="line">        B = <a class="code hl_function" href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">randu</a>(3, 300);</div>
<div class="line"> </div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> d1 = dist_naive(A, B);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> d2 = dist_vec(A, B);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> d3 = dist_gfor1(A, B);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> d4 = dist_gfor2(A, B);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> d5 = dist_tile1(A, B);</div>
<div class="line">        <a class="code hl_class" href="classaf_1_1array.htm">array</a> d6 = dist_tile2(A, B);</div>
<div class="line"> </div>
<div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_vec  : %f\n&quot;</span>, max&lt;float&gt;(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(d1 - d2)));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_gfor1: %f\n&quot;</span>, max&lt;float&gt;(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(d1 - d3)));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_gfor2: %f\n&quot;</span>, max&lt;float&gt;(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(d1 - d4)));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_tile1: %f\n&quot;</span>, max&lt;float&gt;(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(d1 - d5)));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_tile2: %f\n&quot;</span>, max&lt;float&gt;(<a class="code hl_function" href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">abs</a>(d1 - d6)));</div>
<div class="line"> </div>
<div class="line">        printf(<span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">        printf(<span class="stringliteral">&quot;Time for dist_naive: %2.2fms\n&quot;</span>, 1000 * <a class="code hl_function" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a>(bench_naive));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Time for dist_vec  : %2.2fms\n&quot;</span>, 1000 * <a class="code hl_function" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a>(bench_vec));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Time for dist_gfor1: %2.2fms\n&quot;</span>, 1000 * <a class="code hl_function" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a>(bench_gfor1));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Time for dist_gfor2: %2.2fms\n&quot;</span>, 1000 * <a class="code hl_function" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a>(bench_gfor2));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Time for dist_tile1: %2.2fms\n&quot;</span>, 1000 * <a class="code hl_function" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a>(bench_tile1));</div>
<div class="line">        printf(<span class="stringliteral">&quot;Time for dist_tile2: %2.2fms\n&quot;</span>, 1000 * <a class="code hl_function" href="namespaceaf.htm#a08955393264b77be242246c0b1148687">timeit</a>(bench_tile2));</div>
<div class="line"> </div>
<div class="line">    } <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a id="_a6" name="_a6"></a><a class="code hl_class" href="classaf_1_1exception.htm">af::exception</a> &amp;ex) {</div>
<div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, ex.<a id="a7" name="a7"></a><a class="code hl_function" href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">what</a>());</div>
<div class="line">        <span class="keywordflow">throw</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="ttc" id="aarrayfire_8h_htm"><div class="ttname"><a href="arrayfire_8h.htm">arrayfire.h</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm"><div class="ttname"><a href="classaf_1_1array.htm">af::array</a></div><div class="ttdoc">A multi dimensional data container.</div><div class="ttdef"><b>Definition:</b> <a href="array_8h_source.htm#l00037">array.h:37</a></div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a10d14b019693bc98f672ad7c4ac60bac"><div class="ttname"><a href="classaf_1_1array.htm#a10d14b019693bc98f672ad7c4ac60bac">af::array::dims</a></div><div class="ttdeci">dim4 dims() const</div><div class="ttdoc">Get dimensions of the array.</div></div>
<div class="ttc" id="aclassaf_1_1array_htm_a7fc1c437c072767fc8acea2b67469498"><div class="ttname"><a href="classaf_1_1array.htm#a7fc1c437c072767fc8acea2b67469498">af::array::T</a></div><div class="ttdeci">array T() const</div><div class="ttdoc">Get the transposed the array.</div></div>
<div class="ttc" id="aclassaf_1_1exception_htm"><div class="ttname"><a href="classaf_1_1exception.htm">af::exception</a></div><div class="ttdoc">An ArrayFire exception class.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00021">exception.h:22</a></div></div>
<div class="ttc" id="aclassaf_1_1exception_htm_aa884ff67408851f00e50cf971a4dfd05"><div class="ttname"><a href="classaf_1_1exception.htm#aa884ff67408851f00e50cf971a4dfd05">af::exception::what</a></div><div class="ttdeci">virtual const char * what() const</div><div class="ttdoc">Returns an error message for the exception in a string format.</div><div class="ttdef"><b>Definition:</b> <a href="exception_8h_source.htm#l00046">exception.h:46</a></div></div>
<div class="ttc" id="aclassaf_1_1seq_htm"><div class="ttname"><a href="classaf_1_1seq.htm">af::seq</a></div><div class="ttdoc">seq is used to create sequences for indexing af::array</div><div class="ttdef"><b>Definition:</b> <a href="seq_8h_source.htm#l00045">seq.h:46</a></div></div>
<div class="ttc" id="agfor_8h_htm_a6d6cd11d53daad217fd0b92f5a7ceec6"><div class="ttname"><a href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a></div><div class="ttdeci">#define gfor(var,...)</div><div class="ttdef"><b>Definition:</b> <a href="gfor_8h_source.htm#l00026">gfor.h:26</a></div></div>
<div class="ttc" id="agroup__arith__func__abs_htm_ga04a72240299a891b0d950e2c517e4a9e"><div class="ttname"><a href="group__arith__func__abs.htm#ga04a72240299a891b0d950e2c517e4a9e">af::abs</a></div><div class="ttdeci">AFAPI array abs(const array &amp;in)</div><div class="ttdoc">C++ Interface to calculate the absolute value.</div></div>
<div class="ttc" id="agroup__data__func__constant_htm_ga0db7363474e85542f16e4bbcf57fe842"><div class="ttname"><a href="group__data__func__constant.htm#ga0db7363474e85542f16e4bbcf57fe842">af::constant</a></div><div class="ttdeci">array constant(T val, const dim4 &amp;dims, const dtype ty=(af_dtype) dtype_traits&lt; T &gt;::ctype)</div></div>
<div class="ttc" id="agroup__device__func__info_htm_ga3e22b6ff6e0940bb31577bea2863ca27"><div class="ttname"><a href="group__device__func__info.htm#ga3e22b6ff6e0940bb31577bea2863ca27">af::info</a></div><div class="ttdeci">AFAPI void info()</div></div>
<div class="ttc" id="agroup__manip__func__moddims_htm_ga13488a6c9e298fd44dd343347d7b156d"><div class="ttname"><a href="group__manip__func__moddims.htm#ga13488a6c9e298fd44dd343347d7b156d">af::moddims</a></div><div class="ttdeci">AFAPI array moddims(const array &amp;in, const dim4 &amp;dims)</div><div class="ttdoc">C++ Interface for modifying the dimensions of an input array to the shape specified by a dim4 object.</div></div>
<div class="ttc" id="agroup__manip__func__tile_htm_gaeba95584319d7d90e2c371391db0083b"><div class="ttname"><a href="group__manip__func__tile.htm#gaeba95584319d7d90e2c371391db0083b">af::tile</a></div><div class="ttdeci">AFAPI array tile(const array &amp;in, const unsigned x, const unsigned y=1, const unsigned z=1, const unsigned w=1)</div></div>
<div class="ttc" id="agroup__random__func__randu_htm_ga828798e84ab467f6f8568830f1c853f3"><div class="ttname"><a href="group__random__func__randu.htm#ga828798e84ab467f6f8568830f1c853f3">af::randu</a></div><div class="ttdeci">AFAPI array randu(const dim4 &amp;dims, const dtype ty, randomEngine &amp;r)</div></div>
<div class="ttc" id="agroup__reduce__func__sum_htm_ga5eb9a966c94aa56af61707c91637e8df"><div class="ttname"><a href="group__reduce__func__sum.htm#ga5eb9a966c94aa56af61707c91637e8df">af::sum</a></div><div class="ttdeci">AFAPI array sum(const array &amp;in, const int dim=-1)</div><div class="ttdoc">C++ Interface for sum of elements in an array.</div></div>
<div class="ttc" id="anamespaceaf_htm"><div class="ttname"><a href="namespaceaf.htm">af</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.htm#l00014">algorithm.h:15</a></div></div>
<div class="ttc" id="anamespaceaf_htm_a08955393264b77be242246c0b1148687"><div class="ttname"><a href="namespaceaf.htm#a08955393264b77be242246c0b1148687">af::timeit</a></div><div class="ttdeci">AFAPI double timeit(void(*fn)())</div></div>
<div class="ttc" id="autil_8h_htm"><div class="ttname"><a href="util_8h.htm">util.h</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Tue Feb 14 2023 10:39:41 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
    </ul>
</div>
</body>
</html>
