<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<title>getting_started/vectorize.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('getting_started_2vectorize_8cpp-example.htm','');});
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">getting_started/vectorize.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2014, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="arrayfire_8h.htm">arrayfire.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="util_8h.htm">af/util.h</a>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespaceaf.htm">af</a>;</div><div class="line"></div><div class="line"><a name="_a0"></a><a class="code" href="classaf_1_1array.htm">array</a> A, B;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> dist_naive(<a class="code" href="classaf_1_1array.htm">array</a> a, <a class="code" href="classaf_1_1array.htm">array</a> b)</div><div class="line">{</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dist_mat = <a name="a1"></a><a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, a.<a name="a2"></a><a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div><div class="line"></div><div class="line">    <span class="comment">// Iterate through columns a</span></div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; (int)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); ii++) {</div><div class="line"></div><div class="line">        <span class="comment">// Iterate through columns of b</span></div><div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> jj = 0; jj &lt; (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); jj++) {</div><div class="line"></div><div class="line">            <span class="comment">// Get the sum of absolute differences</span></div><div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> kk = 0; kk &lt; (int)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0); kk++) {</div><div class="line">                dist_mat(ii, jj) += <a name="a3"></a><a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(a(kk, ii) - b(kk, jj));</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> dist_mat;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> dist_vec(<a class="code" href="classaf_1_1array.htm">array</a> a, <a class="code" href="classaf_1_1array.htm">array</a> b)</div><div class="line">{</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, (<span class="keywordtype">int</span>)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div><div class="line"></div><div class="line">    <span class="comment">// Iterate through columns a</span></div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; (int)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); ii++) {</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> avec = a(<a name="a4"></a><a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii);</div><div class="line"></div><div class="line">        <span class="comment">// Iterate through columns of b</span></div><div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> jj = 0; jj &lt; (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); jj++) {</div><div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> bvec = b(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, jj);</div><div class="line"></div><div class="line">            <span class="comment">// get SAD using sum on the vector</span></div><div class="line">            dist_mat(ii, jj) = <a name="a5"></a><a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(avec - bvec));</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> dist_mat;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> dist_gfor1(<a class="code" href="classaf_1_1array.htm">array</a> a, <a class="code" href="classaf_1_1array.htm">array</a> b)</div><div class="line">{</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, (<span class="keywordtype">int</span>)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div><div class="line"></div><div class="line">    <span class="comment">// GFOR along columns of a</span></div><div class="line">    <a name="a6"></a><a class="code" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (<a name="_a7"></a><a class="code" href="classaf_1_1seq.htm">seq</a> ii, (<span class="keywordtype">int</span>)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)) {</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> avec = a(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii);</div><div class="line"></div><div class="line">        <span class="comment">// Itere through columns of b</span></div><div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> jj = 0; jj &lt; (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); jj++) {</div><div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> bvec = b(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, jj);</div><div class="line"></div><div class="line">            <span class="comment">// get SAD using sum on the vector</span></div><div class="line">            dist_mat(ii, jj) = <a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(avec - bvec));</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> dist_mat;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> dist_gfor2(<a class="code" href="classaf_1_1array.htm">array</a> a, <a class="code" href="classaf_1_1array.htm">array</a> b)</div><div class="line">{</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, (<span class="keywordtype">int</span>)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1), (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1));</div><div class="line"></div><div class="line">    <span class="comment">// GFOR along columns of b</span></div><div class="line">    <a class="code" href="gfor_8h.htm#a6d6cd11d53daad217fd0b92f5a7ceec6">gfor</a> (<a class="code" href="classaf_1_1seq.htm">seq</a> jj, (<span class="keywordtype">int</span>)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1)) {</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> bvec = b(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, jj);</div><div class="line"></div><div class="line">        <span class="comment">// Iterate through columns of A</span></div><div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii = 0; ii &lt; (int)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1); ii++) {</div><div class="line">            <a class="code" href="classaf_1_1array.htm">array</a> avec = a(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, ii);</div><div class="line"></div><div class="line">            <span class="comment">// get SAD using sum on the vector</span></div><div class="line">            dist_mat(ii, jj) = <a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(avec - bvec));</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> dist_mat;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> dist_tile1(<a class="code" href="classaf_1_1array.htm">array</a> a, <a class="code" href="classaf_1_1array.htm">array</a> b)</div><div class="line">{</div><div class="line">    <span class="comment">// int feat_len = (int)a.dims(0); // Same as (int)b.dims(0);</span></div><div class="line">    <span class="keywordtype">int</span> alen = (int)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div><div class="line">    <span class="keywordtype">int</span> blen = (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div><div class="line"></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code" href="group__data__func__constant.htm#ga3c58da8ca31ae6c871379aeb587b8b0d">constant</a>(0, alen, blen);</div><div class="line"></div><div class="line">    <span class="comment">// Iterate through columns of b</span></div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> jj = 0; jj &lt; blen; jj++) {</div><div class="line"></div><div class="line">        <span class="comment">// Get the column vector of b</span></div><div class="line">        <span class="comment">// shape of bvec is (feat_len, 1)</span></div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> bvec = b(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, jj);</div><div class="line"></div><div class="line">        <span class="comment">// Tile avec to be same size as a</span></div><div class="line">        <span class="comment">// shape of bvec_tiled is (feat_len, alen)</span></div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> bvec_tiled = <a name="a8"></a><a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(bvec, 1, alen);</div><div class="line"></div><div class="line">        <span class="comment">// Get the sum of absolute differences</span></div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> sad = <a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(bvec_tiled - a));</div><div class="line"></div><div class="line">        <span class="comment">// sad is row vector, dist_mat needs column vector</span></div><div class="line">        <span class="comment">// transpose sad and fill in dist_mat</span></div><div class="line">        dist_mat(<a class="code" href="namespaceaf.htm#af5c1188f38105afaf8b3f383492a1c9f">span</a>, jj) = sad.<a name="a9"></a><a class="code" href="group__method__mat.htm#ga7fc1c437c072767fc8acea2b67469498">T</a>();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> dist_mat;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <a class="code" href="classaf_1_1array.htm">array</a> dist_tile2(<a class="code" href="classaf_1_1array.htm">array</a> a, <a class="code" href="classaf_1_1array.htm">array</a> b)</div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span> feat_len = (int)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(0);</div><div class="line">    <span class="keywordtype">int</span> alen = (int)a.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div><div class="line">    <span class="keywordtype">int</span> blen = (int)b.<a class="code" href="group__method__mat.htm#ga10d14b019693bc98f672ad7c4ac60bac">dims</a>(1);</div><div class="line"></div><div class="line">    <span class="comment">// Shape of a is (feat_len, alen, 1)</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> a_mod = a;</div><div class="line">    <span class="comment">// Reshape b from (feat_len, blen) to (feat_len, 1, blen)</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> b_mod = <a name="a10"></a><a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(b, feat_len, 1, blen);</div><div class="line"></div><div class="line">    <span class="comment">// Tile both matrices to be (feat_len, alen, blen)</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> a_tiled = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(a_mod, 1, 1, blen);</div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> b_tiled = <a class="code" href="group__manip__func__tile.htm#ga3548059d64e0cefc7fedb4ec28321d32">tile</a>(b_mod, 1, alen, 1);</div><div class="line"></div><div class="line">    <span class="comment">// Do The sum operation along first dimension</span></div><div class="line">    <span class="comment">// Output is of shape (1, alen, blen)</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dist_mod = <a class="code" href="group__reduce__func__sum.htm#ga964a8e7e78dd6d8f4d20c17edf82dbf5">sum</a>(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(a_tiled - b_tiled));</div><div class="line"></div><div class="line">    <span class="comment">// Reshape dist_mat from (1, alen, blen) to (alen, blen)</span></div><div class="line">    <a class="code" href="classaf_1_1array.htm">array</a> dist_mat = <a class="code" href="group__manip__func__moddims.htm#ga382a69ec85a6beea79e95aeaef591073">moddims</a>(dist_mod, alen, blen);</div><div class="line">    <span class="keywordflow">return</span> dist_mat;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_naive()</div><div class="line">{</div><div class="line">    dist_naive(A, B);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_vec()</div><div class="line">{</div><div class="line">    dist_vec(A, B);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_gfor1()</div><div class="line">{</div><div class="line">    dist_gfor1(A, B);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_gfor2()</div><div class="line">{</div><div class="line">    dist_gfor2(A, B);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_tile1()</div><div class="line">{</div><div class="line">    dist_tile1(A, B);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> bench_tile2()</div><div class="line">{</div><div class="line">    dist_tile2(A, B);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div><div class="line">{</div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line"></div><div class="line">        <a name="a11"></a><a class="code" href="group__device__func__info.htm#ga1360e706b046b1c5b299bd6e689a0276">af::info</a>();</div><div class="line"></div><div class="line">        <span class="comment">// Do not increase the sizes</span></div><div class="line">        <span class="comment">// dist_naive and dist_vec get too slow at large sizes</span></div><div class="line">        A = <a name="a12"></a><a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(3, 200);</div><div class="line">        B = <a class="code" href="group__random__func__randu.htm#gabe9a79d7b21f0a8fb7ace6920ead4772">randu</a>(3, 300);</div><div class="line"></div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> d1 = dist_naive(A, B);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> d2 = dist_vec  (A, B);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> d3 = dist_gfor1(A, B);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> d4 = dist_gfor2(A, B);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> d5 = dist_tile1(A, B);</div><div class="line">        <a class="code" href="classaf_1_1array.htm">array</a> d6 = dist_tile2(A, B);</div><div class="line"></div><div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_vec  : %f\n&quot;</span>, max&lt;float&gt;(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(d1 - d2)));</div><div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_gfor1: %f\n&quot;</span>, max&lt;float&gt;(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(d1 - d3)));</div><div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_gfor2: %f\n&quot;</span>, max&lt;float&gt;(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(d1 - d4)));</div><div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_tile1: %f\n&quot;</span>, max&lt;float&gt;(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(d1 - d5)));</div><div class="line">        printf(<span class="stringliteral">&quot;Max. Error for dist_tile2: %f\n&quot;</span>, max&lt;float&gt;(<a class="code" href="group__arith__func__abs.htm#ga23aa8c28a5ffa9368cc92abb143f5eaa">abs</a>(d1 - d6)));</div><div class="line"></div><div class="line">        printf(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"></div><div class="line">        printf(<span class="stringliteral">&quot;Time for dist_naive: %2.2fms\n&quot;</span>, 1000 * <a name="a13"></a><a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(bench_naive));</div><div class="line">        printf(<span class="stringliteral">&quot;Time for dist_vec  : %2.2fms\n&quot;</span>, 1000 * <a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(bench_vec  ));</div><div class="line">        printf(<span class="stringliteral">&quot;Time for dist_gfor1: %2.2fms\n&quot;</span>, 1000 * <a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(bench_gfor1));</div><div class="line">        printf(<span class="stringliteral">&quot;Time for dist_gfor2: %2.2fms\n&quot;</span>, 1000 * <a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(bench_gfor2));</div><div class="line">        printf(<span class="stringliteral">&quot;Time for dist_tile1: %2.2fms\n&quot;</span>, 1000 * <a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(bench_tile1));</div><div class="line">        printf(<span class="stringliteral">&quot;Time for dist_tile2: %2.2fms\n&quot;</span>, 1000 * <a class="code" href="namespaceaf.htm#a9ffb3ceefb515e1778cf8c4d5e29db59">timeit</a>(bench_tile2));</div><div class="line"></div><div class="line">    } <span class="keywordflow">catch</span>(<a name="_a14"></a><a class="code" href="classaf_1_1exception.htm">af::exception</a> ex) {</div><div class="line">        fprintf(stderr, <span class="stringliteral">&quot;%s\n&quot;</span>, ex.<a name="a15"></a><a class="code" href="classaf_1_1exception.htm#ad62489809e3df568e973597b928d6d9b">what</a>());</div><div class="line">        <span class="keywordflow">throw</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-130950618-1']);
  _gaq.push(['_setDomainName', '.arrayfire.org']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
