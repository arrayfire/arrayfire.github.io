<!-- HTML header for doxygen 1.9.3-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-130950618-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-130950618-1');
</script>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArrayFire: unwrap</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0" width="100%">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/></td>
  <!--<td id="projectalign">
   <div id="projectname">ArrayFire<span id="projectnumber">&#160;3.8.1</span>
   </div>
   <div id="projectbrief">A high-performance general-purpose compute library</div>
  </td>-->
    <td id="gsearch">
        <script async src="https://cse.google.com/cse.js?cx=004356362924927882526:zup3ehe-7bs"></script>
        <div class="gcse-search"></div>
    </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="tutorials.htm"><span>Tutorials</span></a></li>
      <li class="current"><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('group__image__func__unwrap.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">unwrap<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">ArrayFire Functions</a> &#124; <a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__image__mat.htm">Image Processing</a> &raquo; <a class="el" href="group__image__mod__mat.htm">Wrapping and unwrapping image windows</a></div></div></div>
</div><!--header-->
<div class="contents">

<p>Rearrange windowed sections of an array into columns (or rows)  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gabd48af39af6bb17efb70747cc132ad60"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a> (const <a class="el" href="classaf_1_1array.htm">array</a> &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py=0, const bool is_column=true)</td></tr>
<tr class="memdesc:gabd48af39af6bb17efb70747cc132ad60"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface for rearranging windowed sections of an input into columns (or rows)  <a href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">More...</a><br /></td></tr>
<tr class="separator:gabd48af39af6bb17efb70747cc132ad60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79b946d02b227e217097a7fece23dcde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__unwrap.htm#ga79b946d02b227e217097a7fece23dcde">af_unwrap</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py, const bool is_column)</td></tr>
<tr class="memdesc:ga79b946d02b227e217097a7fece23dcde"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface for rearranging windowed sections of an input into columns (or rows)  <a href="group__image__func__unwrap.htm#ga79b946d02b227e217097a7fece23dcde">More...</a><br /></td></tr>
<tr class="separator:ga79b946d02b227e217097a7fece23dcde"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p >Rearrange windowed sections of an array into columns (or rows) </p>
<p >The figure below illustrates how unwrap works. A moving window (marked by orange boxes in the figure) of size <code>wx</code> \(\times \) <code>wy</code> captures sections of the input array, and flattens them into columns (or rows if <code>is_column</code> is false) of the output array (illustrated in the right image). It starts at the top-left section of the input array and moves in column-major order, each time moving in strides of <code>sx</code> units along the column and <code>sy</code> units along the row, whenever it exhausts a column (stride size illustrated as the white arrows in the left image, and window movement illustrated as the progression of the small yellow numbers on the corner of each window). When the remainder of the column or row is not big enough to accomodate the window, that remainder is skipped and the window moves on (in the figure, the last row is not captured in any of the windows).</p>
<p >Optionally, one can specify that the input image's border be padded (with zeros, represented as the gray boxes in the figure) before the moving window starts capturing sections. The width of the padding is defined by <code>px</code> for the top and bottom and <code>py</code> for the left and right sides, with maximum values of <code>wx</code>-1 and <code>wy</code>-1, respectively. The moving window then captures sections as if the padding is part of the input image, and thus the padding also becomes part of the output array's columns (illustrated in the bottom of the right image).</p>
<div class="image">
<img src="unwrap_640.png" alt=""/>
<div class="caption">
Unwrap on a 3x4 input array, using a 2x2 window, 2x2 stride, 1x1 padding</div></div>
<p >In the figure, the stride is set to be equally large as the window size (both 2x2), and thus the sections that the window captures are distinct. However, when the stride is set to the minimum (1x1) and is smaller than the window size, the sections overlap (which in turn makes the output's columns overlap as well). The window then acts as a perfect "sliding window" in this case (see the first code example below). In general, there will be some overlap as long as the stride is smaller than the window size (though the overlap decreases as the stride approaches the window size), and when the stride is equal or greater than the window size, each section (and output column) will be distinct.</p>
<p >For inputs that have more than two dimensions, the unwrap operation will be applied to each 2D slice of the input. This is especially useful for independently processing each channel of an image (or set of images) - each channel (along the third dimension) on the input corresponds to the same channel on the output, and each image (along the fourth dimension) on the input corresponds to the same image on the output.</p>
<p >The size of the output is shown below. <code>nsections_dim0</code> and <code>nsections_dim1</code> denote how many windows can fit along the column and row, given the padded image size, window size, strides, and skips (if any):</p>
<div class="fragment"><div class="line">dim4(</div>
<div class="line">    wx * wy,                               <span class="comment">// No. of rows (column height)</span></div>
<div class="line">    nsections_dim0 * nsections_dim1,       <span class="comment">// No. of columns per channel</span></div>
<div class="line">    input.dims(2),                         <span class="comment">// No. of channels</span></div>
<div class="line">    input.dims(3)                          <span class="comment">// No. of images</span></div>
<div class="line">)</div>
</div><!-- fragment --><p >Here are some code examples that demonstrate unwrap's usage:</p>
<div class="fragment"><div class="line">    <span class="keywordtype">float</span> hA[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};</div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> A(dim4(3, 3), hA);</div>
<div class="line">    <span class="comment">//  1.     4.     7.</span></div>
<div class="line">    <span class="comment">//  2.     5.     8.</span></div>
<div class="line">    <span class="comment">//  3.     6.     9.</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> A_simple = <a class="code hl_function" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a>(A, 2, 2,  <span class="comment">// window size</span></div>
<div class="line">                            1, 1);    <span class="comment">// stride (sliding window)</span></div>
<div class="line">    <span class="comment">//  1.     2.     4.     5.</span></div>
<div class="line">    <span class="comment">//  2.     3.     5.     6.</span></div>
<div class="line">    <span class="comment">//  4.     5.     7.     8.</span></div>
<div class="line">    <span class="comment">//  5.     6.     8.     9.</span></div>
<div class="line"> </div>
<div class="line">    <a class="code hl_function" href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">array</a> A_padded = <a class="code hl_function" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a>(A, 2, 2,  <span class="comment">// window size</span></div>
<div class="line">                            2, 2,     <span class="comment">// stride (distinct)</span></div>
<div class="line">                            1, 1);    <span class="comment">// padding</span></div>
<div class="line">    <span class="comment">//  0.     0.     0.     5.</span></div>
<div class="line">    <span class="comment">//  0.     0.     4.     6.</span></div>
<div class="line">    <span class="comment">//  0.     2.     0.     8.</span></div>
<div class="line">    <span class="comment">//  1.     3.     7.     9.</span></div>
<div class="ttc" id="agroup__image__func__unwrap_htm_gabd48af39af6bb17efb70747cc132ad60"><div class="ttname"><a href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">af::unwrap</a></div><div class="ttdeci">AFAPI array unwrap(const array &amp;in, const dim_t wx, const dim_t wy, const dim_t sx, const dim_t sy, const dim_t px=0, const dim_t py=0, const bool is_column=true)</div><div class="ttdoc">C++ Interface for rearranging windowed sections of an input into columns (or rows)</div></div>
<div class="ttc" id="agroup__opencl__mat_htm_ga5434aaf76be37fae92ac5086315516f0"><div class="ttname"><a href="group__opencl__mat.htm#ga5434aaf76be37fae92ac5086315516f0">afcl::array</a></div><div class="ttdeci">static af::array array(af::dim4 idims, cl_mem buf, af::dtype type, bool retain=false)</div><div class="ttdoc">Create an af::array object from an OpenCL cl_mem buffer.</div><div class="ttdef"><b>Definition:</b> <a href="opencl_8h_source.htm#l00327">opencl.h:327</a></div></div>
</div><!-- fragment --><p >One context where unwrap can be used is pre-processing an array or image for making window operations efficient (i.e. convolutions, computing the average pixel intensity around a point in an image, etc). Since each window capture is laid out as a column in an unwrapped array, vectorized operations can be executed efficiently on it (as opposed to strided access of each row in a window in the original array).</p>
<p >Note that the actual implementation of unwrap may not match the way the operation is described above, but the effect should be the same.</p>
<hr  />
 <h2 class="groupheader">Function Documentation</h2>
<a id="ga79b946d02b227e217097a7fece23dcde" name="ga79b946d02b227e217097a7fece23dcde"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga79b946d02b227e217097a7fece23dcde">&#9670;&nbsp;</a></span>af_unwrap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_unwrap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>px</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>py</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_column</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface for rearranging windowed sections of an input into columns (or rows) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is an array with the input's sections rearraged as columns (or rows) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wx</td><td>is the window size along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wy</td><td>is the window size along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sx</td><td>is the stride along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sy</td><td>is the stride along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">px</td><td>is the padding along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">py</td><td>is the padding along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_column</td><td>determines whether the section becomes a column (if true) or a row (if false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if unwrap is successful, otherwise an appropriate error code is returned.</dd></dl>
<dl class="section note"><dt>Note</dt><dd><code>in</code> can hold multiple images for processing if it is three or four-dimensional </dd>
<dd>
<code>wx</code> and <code>wy</code> must be between [1, input.dims(0 (1)) + px (py)] </dd>
<dd>
<code>sx</code> and <code>sy</code> must be greater than 1 </dd>
<dd>
<code>px</code> and <code>py</code> must be between [0, wx (wy) - 1]. Padding becomes part of the input image prior to the windowing </dd></dl>

</div>
</div>
<a id="gabd48af39af6bb17efb70747cc132ad60" name="gabd48af39af6bb17efb70747cc132ad60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabd48af39af6bb17efb70747cc132ad60">&#9670;&nbsp;</a></span>unwrap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="classaf_1_1array.htm">array</a> af::unwrap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>px</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>py</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_column</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface for rearranging windowed sections of an input into columns (or rows) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wx</td><td>is the window size along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wy</td><td>is the window size along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sx</td><td>is the stride along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sy</td><td>is the stride along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">px</td><td>is the padding along dimension 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">py</td><td>is the padding along dimension 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_column</td><td>determines whether the section becomes a column (if true) or a row (if false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with the input's sections rearraged as columns (or rows)</dd></dl>
<dl class="section note"><dt>Note</dt><dd><code>in</code> can hold multiple images for processing if it is three or four-dimensional </dd>
<dd>
<code>wx</code> and <code>wy</code> must be between [1, input.dims(0 (1)) + px (py)] </dd>
<dd>
<code>sx</code> and <code>sy</code> must be greater than 1 </dd>
<dd>
<code>px</code> and <code>py</code> must be between [0, wx (wy) - 1]. Padding becomes part of the input image prior to the windowing </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.9.3-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
    <ul>
        <li class="footer">Generated on Thu Feb 24 2022 14:12:33 for ArrayFire by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
    </ul>
</div>
</body>
</html>
