<!-- HTML header for doxygen 1.8.5-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>unwrap</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="afw.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="arrayfire.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table width="100%">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="arrayfire_logo.png"/>
  </td>
	 <td id="gsearch">
   <div><script>
	    (function() {
        var cx = '004356362924927882526:zup3ehe-7bs';
        var gcse = document.createElement('script');
        gcse.type = 'text/javascript';
        gcse.async = true;
        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(gcse, s);
	  })();
  </script>
  <gcse:search></gcse:search>
</div>
	 </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="usergroup0.htm"><span>Tutorials</span></a></li>
      <li><a href="modules.htm"><span>Functions</span></a></li>
      <li><a href="releasenotes.htm"><span>Release&#160;Notes</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__image__func__unwrap.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">unwrap<div class="ingroups"><a class="el" href="group__arrayfire__func.htm">Complete List of ArrayFire Functions</a><a class="el" href="group__func__categories.htm">ArrayFire Functions by Category</a> &raquo; <a class="el" href="group__image__mat.htm">Image Processing</a> &raquo;  &#124; <a class="el" href="group__image__mod__mat.htm">Wrapping and unwrapping image windows</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Generate an array with image windows as columns.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gabd48af39af6bb17efb70747cc132ad60"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a> (const array &amp;in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px=0, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py=0, const bool is_column=true)</td></tr>
<tr class="memdesc:gabd48af39af6bb17efb70747cc132ad60"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ Interface wrapper for unwrap.  <a href="#gabd48af39af6bb17efb70747cc132ad60">More...</a><br /></td></tr>
<tr class="separator:gabd48af39af6bb17efb70747cc132ad60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79b946d02b227e217097a7fece23dcde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__image__func__unwrap.htm#ga79b946d02b227e217097a7fece23dcde">af_unwrap</a> (<a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *out, const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> in, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> wy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sx, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> sy, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> px, const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a> py, const bool is_column)</td></tr>
<tr class="memdesc:ga79b946d02b227e217097a7fece23dcde"><td class="mdescLeft">&#160;</td><td class="mdescRight">C Interface wrapper for unwrap.  <a href="#ga79b946d02b227e217097a7fece23dcde">More...</a><br /></td></tr>
<tr class="separator:ga79b946d02b227e217097a7fece23dcde"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Generate an array with image windows as columns. </p>
<p>unwrap takes in an input image along with the window sizes <code>wx</code> and <code>wy</code>, strides <code>sx</code> and <code>sy</code>, and padding <code>px</code> and <code>py</code>. This function then generates a matrix where each windows is an independent column.</p>
<p>The number of columns (rows if is_column is true) in the output array are govenered by the number of windows that can be fit along x and y directions. Padding is applied along all 4 sides of the matrix with <code>px</code> defining the height of the padding along dim 0 and <code>py</code> defining the width of the padding along dim 1.</p>
<p>The first column window is always at the top left corner of the input including padding. If a window cannot fit before the end of the matrix + padding, it is skipped from the generated matrix.</p>
<p>Padding can take a maximum value of window - 1 repectively for x and y.</p>
<p>For multiple channels (3rd and 4th dimension), the generated matrix contains the same number of channels as the input matrix. Each channel of the output matrix corresponds to the same channel of the input.</p>
<p>So the dimensions of the output matrix are: </p><div class="fragment"><div class="line">[(wx * wy),         <span class="comment">// Column height</span></div>
<div class="line"> (No. of windows along dim 0 of input * No. of windows along dim 1 of input), <span class="comment">// No. of columns per channel</span></div>
<div class="line"> input.dims()[2],   <span class="comment">// Channels</span></div>
<div class="line"> input.dims()[3]]   <span class="comment">// Volumns</span></div>
</div><!-- fragment --><p>When strides are 1, the operation is sliding window. When strides are equal to the respective window sizes, the option is distinct window. Other stride values are also allowed.</p>
<div class="fragment"><div class="line">A [5 5 1 1]</div>
<div class="line">10 15 20 25 30</div>
<div class="line">11 16 21 26 31</div>
<div class="line">12 17 22 27 32</div>
<div class="line">13 18 23 28 33</div>
<div class="line">14 19 24 29 34</div>
<div class="line"></div>
<div class="line"><span class="comment">// Window 3x3, strides 1x1, padding 0x0</span></div>
<div class="line"><a class="code" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a>(A, 3, 3, 1, 1, 0, 0) [9 9 1 1]</div>
<div class="line">10 11 12 15 16 17 20 21 22</div>
<div class="line">11 12 13 16 17 18 21 22 23</div>
<div class="line">12 13 14 17 18 19 22 23 24</div>
<div class="line">15 16 17 20 21 22 25 26 27</div>
<div class="line">16 17 18 21 22 23 26 27 28</div>
<div class="line">17 18 19 22 23 24 27 28 29</div>
<div class="line">20 21 22 25 26 27 30 31 32</div>
<div class="line">21 22 23 26 27 28 31 32 33</div>
<div class="line">22 23 24 27 28 29 32 33 34</div>
<div class="line"></div>
<div class="line"><span class="comment">// Window 3x3, strides 1x1, padding 1x1</span></div>
<div class="line"><a class="code" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a>(A, 3, 3, 1, 1, 1, 1) [9 25 1 1]</div>
<div class="line"> 0  0  0  0  0  0 10 11 12 13  0 15 16 17 18  0 20 21 22 23  0 25 26 27 28</div>
<div class="line"> 0  0  0  0  0 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</div>
<div class="line"> 0  0  0  0  0 11 12 13 14  0 16 17 18 19  0 21 22 23 24  0 26 27 28 29  0</div>
<div class="line"> 0 10 11 12 13  0 15 16 17 18  0 20 21 22 23  0 25 26 27 28  0 30 31 32 33</div>
<div class="line">10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34</div>
<div class="line">11 12 13 14  0 16 17 18 19  0 21 22 23 24  0 26 27 28 29  0 31 32 33 34  0</div>
<div class="line"> 0 15 16 17 18  0 20 21 22 23  0 25 26 27 28  0 30 31 32 33  0  0  0  0  0</div>
<div class="line">15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  0  0  0  0  0</div>
<div class="line">16 17 18 19  0 21 22 23 24  0 26 27 28 29  0 31 32 33 34  0  0  0  0  0  0</div>
<div class="line"></div>
<div class="line"><span class="comment">// Window 3x3, strides 3x3 (&quot;distinct&quot;), padding 0x0</span></div>
<div class="line"><a class="code" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a>(A, 3, 3, 3, 3, 0, 0) [9 1 1 1]</div>
<div class="line">   10</div>
<div class="line">   11</div>
<div class="line">   12</div>
<div class="line">   15</div>
<div class="line">   16</div>
<div class="line">   17</div>
<div class="line">   20</div>
<div class="line">   21</div>
<div class="line">   22</div>
<div class="line"></div>
<div class="line"><span class="comment">// Window 3x3, strides 3x3 (&quot;distinct&quot;), padding 2x2</span></div>
<div class="line"><a class="code" href="group__image__func__unwrap.htm#gabd48af39af6bb17efb70747cc132ad60">unwrap</a>(A, 3, 3, 3, 3, 2, 2) [9 9 1 1]</div>
<div class="line">    0     0     0     0    16    19     0    31    34</div>
<div class="line">    0     0     0     0    17     0     0    32     0</div>
<div class="line">    0     0     0    15    18     0    30    33     0</div>
<div class="line">    0     0     0     0    21    24     0     0     0</div>
<div class="line">    0     0     0     0    22     0     0     0     0</div>
<div class="line">    0     0     0    20    23     0     0     0     0</div>
<div class="line">    0    11    14     0    26    29     0     0     0</div>
<div class="line">    0    12     0     0    27     0     0     0     0</div>
<div class="line">   10    13     0    25    28     0     0     0     0</div>
</div><!-- fragment --><hr/>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga79b946d02b227e217097a7fece23dcde"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> <a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4f">af_err</a> af_unwrap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a8e45f4aa3dbea6a7aa021dbc50a4a089">af_array</a>&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>px</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>py</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_column</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C Interface wrapper for unwrap. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">out</td><td>is an array with image blocks as rows or columns. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input image (or set of images) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wx</td><td>is the block window size along 0th-dimension between [1, input.dims[0] + px] </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wy</td><td>is the block window size along 1st-dimension between [1, input.dims[1] + py] </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sx</td><td>is the stride along 0th-dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sy</td><td>is the stride along 1st-dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">px</td><td>is the padding along 0th-dimension between [0, wx). Padding is applied both before and after. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">py</td><td>is the padding along 1st-dimension between [0, wy). Padding is applied both before and after. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_column</td><td>specifies the layout for the unwrapped patch. If is_column is false, the unrapped patch is laid out as a row. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="defines_8h.htm#a82b94dc53bbd100a0e8ca9dd356aaf4fa2e56d1f9585788fed8fbe3a321bddd76">AF_SUCCESS</a> if the color transformation is successful, otherwise an appropriate error code is returned. </dd></dl>

</div>
</div>
<a class="anchor" id="gabd48af39af6bb17efb70747cc132ad60"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="defines_8h.htm#ab23e67549eba2cfbaf0eb5f88f947e48">AFAPI</a> array af::unwrap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classaf_1_1array.htm">array</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>wy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>sy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>px</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="defines_8h.htm#a7f026aa801b1fa6b85b0d992b414cccb">dim_t</a>&#160;</td>
          <td class="paramname"><em>py</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_column</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>C++ Interface wrapper for unwrap. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>is the input image (or set of images) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wx</td><td>is the block window size along 0th-dimension between [1, input.dims[0] + px] </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wy</td><td>is the block window size along 1st-dimension between [1, input.dims[1] + py] </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sx</td><td>is the stride along 0th-dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sy</td><td>is the stride along 1st-dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">px</td><td>is the padding along 0th-dimension between [0, wx). Padding is applied both before and after. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">py</td><td>is the padding along 1st-dimension between [0, wy). Padding is applied both before and after. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_column</td><td>specifies the layout for the unwrapped patch. If is_column is false, the unrapped patch is laid out as a row. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an array with the image blocks as rows or columns </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
</div>
</div>
</div>
</div>
</div>
<!--Google Analytics-->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5076919-1']);
  _gaq.push(['_setDomainName', '.arrayfire.com']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!--Spectate-->
<script type="text/javascript">
  sAId = "151";
  sCId = "688";
  (function() {
    function async_load(){
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = (('https:' == document.location.protocol) ? "https://ssl" : "http://cdn") + ".spectate.com/s.js";
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
<!--Adroll-->
<script type="text/javascript">
adroll_adv_id = "ZRWI4W4RTRHENOWGXZY5JQ";
adroll_pix_id = "QLXGBK3MSFB6LOL6PES2MT";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
</body>
</html>
